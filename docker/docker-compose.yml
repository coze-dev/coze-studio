services:
  mysql:
    image: bitnami/mysql:8.4
    container_name: coze-mysql
    ports:
      - "3306:3306"
    volumes:
      - "./data/bitnami/mysql:/bitnami/mysql/data"
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: opencoze
      MYSQL_USER: coze
      MYSQL_PASSWORD: coze123
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/mysql/healthcheck.sh"]
      interval: 15s
      timeout: 5s
      retries: 6
      start_period: 30s
    networks:
      - coze-network

  redis:
    image: bitnami/redis:8.0
    container_name: coze-redis
    environment:
      - REDIS_AOF_ENABLED=no
      - REDIS_PORT_NUMBER=6379
      - REDIS_IO_THREADS=4
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - ./data/bitnami/redis:/bitnami/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - coze-network

  rocketmq-namesrv:
    image: apache/rocketmq:5.3.2
    container_name: coze-rocketmq-namesrv
    ports:
      - "9876:9876"
    volumes:
      - ./data/rocketmq/namesrv/logs:/home/rocketmq/logs
      - ./data/rocketmq/namesrv/store:/home/rocketmq/store
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    command: sh mqnamesrv
    networks:
      - coze-network

  rocketmq-broker:
    image: apache/rocketmq:5.3.2
    container_name: coze-rocketmq-broker
    ports:
      - "10909:10909"
      - "10911:10911"
      - "10912:10912"
    volumes:
      - ./data/rocketmq/broker/logs:/home/rocketmq/logs
      - ./data/rocketmq/broker/store:/home/rocketmq/store
      - ./config/rocketmq/broker.conf:/home/rocketmq/conf/broker.conf
    networks:
      - coze-network
    command: >
      bash -c "
        echo 'Starting RocketMQ Broker...'
        sh mqbroker -n rocketmq-namesrv:9876 -c /home/rocketmq/conf/broker.conf &
        # Wait for Broker to be ready
        sleep 15;

        echo 'Creating RocketMQ topics...'
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t opencoze_knowledge
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t opencoze_search_app
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t opencoze_search_resource
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t %RETRY%opencoze_knowledge
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t %RETRY%opencoze_search_app
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t %RETRY%opencoze_search_resource

        # Create marker file indicating Broker is ready
        touch /tmp/rocketmq_ready;
        echo 'RocketMQ Broker start successfully'
        wait
      "
    depends_on:
      - rocketmq-namesrv
    healthcheck:
      test: ["CMD-SHELL", "[ -f /tmp/rocketmq_ready ]"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  elasticsearch:
    image: bitnami/elasticsearch:8.18.0
    container_name: coze-elasticsearch
    privileged: true
    environment:
      - ELASTICSEARCH_CONF_FILE=/bitnami/elasticsearch/elasticsearch.yml
      # Add Java certificate trust configuration
      - ES_JAVA_OPTS=-Djdk.tls.client.protocols=TLSv1.2 -Dhttps.protocols=TLSv1.2 -Djavax.net.ssl.trustAll=true
    ports:
      - "9200:9200"
    volumes:
      - ./data/bitnami/elasticsearch:/bitnami/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/bitnami/elasticsearch/elasticsearch.yml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9200 && [ -f /tmp/es_plugins_ready ]",
        ]
      interval: 20s
      timeout: 10s
      retries: 6
      start_period: 60s
    networks:
      - coze-network
    # Install smartcn analyzer plugin
    command: >
      bash -c "
        # Create plugin directory
        mkdir -p /bitnami/elasticsearch/plugins;
        
        # Download plugin package locally
        echo 'Downloading smartcn plugin...';
        curl -k -L -o /tmp/analysis-smartcn.zip https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-smartcn/analysis-smartcn-8.18.0.zip
        if [[ "$?" != "0" ]]; then
          echo 'Plugin download failed, exiting installation';
          exit 1;
        fi;
        
        # Unzip plugin to plugin directory and set correct permissions
        echo 'Installing smartcn plugin...';
        if [ ! -d /opt/bitnami/elasticsearch/plugins/analysis-smartcn ]; then
          elasticsearch-plugin install file:///tmp/analysis-smartcn.zip
          if [[ "$?" != "0" ]]; then
            echo 'Plugin installation failed, exiting operation';
            exit 1;
          fi;
          rm -f /tmp/analysis-smartcn.zip;
        fi;
        
        # Create marker file indicating plugin installation success
        touch /tmp/es_plugins_ready;
        echo 'Plugin installation successful, marker file created';
        
        # Start Elasticsearch
        exec /opt/bitnami/scripts/elasticsearch/entrypoint.sh /opt/bitnami/scripts/elasticsearch/run.sh
      "

  kibana:
    image: bitnami/kibana:8.18.0
    container_name: coze-kibana
    ports:
      - "5601:5601"
    environment:
      # - ELASTICSEARCH_HOSTS=http://coze-elasticsearch:9200
      - KIBANA_ELASTICSEARCH_URL=coze-elasticsearch
    volumes:
      - ./data/bitnami/kibana:/bitnami/kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - coze-network

  minio:
    image: bitnami/minio:2025
    container_name: coze-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/bitnami/minio:/bitnami/minio/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: milvus
    command: /opt/bitnami/scripts/minio/entrypoint.sh /opt/bitnami/scripts/minio/run.sh
    healthcheck:
      test: ["CMD-SHELL", "mc mb --ignore-existing local/healthcheck-test"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - coze-network

  etcd:
    image: bitnami/etcd:3.5
    container_name: coze-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ALLOW_NONE_AUTHENTICATION=yes
      # - ETCD_ADVERTISE_CLIENT_URLS=http://coze-etcd:2379
      # - ETCD_LISTEN_CLIENT_URLS=http://coze-etcd:2379
    ports:
      - 2379:2379
      - 2380:2380
    volumes:
      - ./data/bitnami/etcd:/bitnami/etcd
      - ./config/etcd/etcd.conf.yml:/opt/bitnami/etcd/conf/etcd.conf.yml
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - coze-network

  milvus:
    container_name: coze-milvus
    image: milvusdb/milvus:v2.5.10
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: coze-etcd:2379
      MINIO_ADDRESS: coze-minio:9000
      MINIO_BUCKETNAME: milvus
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin123
      MINIO_USE_SSL: false
      LOG_LEVEL: debug
    volumes:
      - ./data/milvus:/var/lib/milvus
      - ./config/milvus/milvus.yml:/milvus/configs/milvus.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 30s
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - coze-network

networks:
  coze-network:
    driver: bridge
