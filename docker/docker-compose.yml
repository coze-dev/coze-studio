services:
  mysql:
    image: mysql:8.0
    container_name: coze-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: opencoze
      MYSQL_USER: coze
      MYSQL_PASSWORD: coze123
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    networks:
      - coze-network

  redis:
    image: redis:6-alpine
    container_name: coze-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - coze-network

  rocketmq-namesrv:
    image: apache/rocketmq:5.3.2
    container_name: coze-rocketmq-namesrv
    ports:
      - "9876:9876"
    volumes:
      - ./data/rocketmq/namesrv/logs:/home/rocketmq/logs
      - ./data/rocketmq/namesrv/store:/home/rocketmq/store
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    command: sh mqnamesrv
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9876"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - coze-network

  rocketmq-broker:
    image: apache/rocketmq:5.3.2
    container_name: coze-rocketmq-broker
    ports:
      - "10909:10909"
      - "10911:10911"
      - "10912:10912"
    volumes:
      - ./data/rocketmq/broker/logs:/home/rocketmq/logs
      - ./data/rocketmq/broker/store:/home/rocketmq/store
      - ./config/rocketmq/broker.conf:/home/rocketmq/conf/broker.conf
    networks:
      - coze-network
    command: >
      sh -c "
        # 启动Broker
        echo '启动RocketMQ Broker...'
        sh mqbroker -n rocketmq-namesrv:9876 -c /home/rocketmq/conf/broker.conf &

        # 等待Broker完全启动
        sleep 15;
        echo '创建RocketMQ topics...'

        # 创建topics
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t opencoze_knowledge
        sh mqadmin updateTopic -n rocketmq-namesrv:9876 -c DefaultCluster -t opencoze_search

        # 启动成功
        echo ''
        echo 'RocketMQ Broker已启动'

        wait
      "
    depends_on:
      - rocketmq-namesrv
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "nc -z localhost 10909 && nc -z localhost 10911 && nc -z localhost 10912",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: coze-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ports:
      - "9200:9200"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
      - ../backend/types/ddl/search:/usr/share/elasticsearch/config/index-templates
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - coze-network
    # 安装 smartcn 分析器插件
    command: >
      bash -c "
        if [ ! -d /usr/share/elasticsearch/plugins/analysis-smartcn ]; then
          elasticsearch-plugin install --batch analysis-smartcn;
        fi;
        /usr/local/bin/docker-entrypoint.sh
      "

  kibana:
    image: kibana:8.11.1
    container_name: coze-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://coze-elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - coze-network

  minio:
    image: minio/minio:latest
    container_name: coze-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    networks:
      - coze-network

  milvus-etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/data/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - coze-network

  milvus-minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9010:9010"
      - "9011:9011"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/data/volumes/minio:/minio_data
    command: minio server /minio_data --address ':9010' --console-address ':9011'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9010/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - coze-network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.10
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9010
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/data/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"
    networks:
      - coze-network

  bgem3_encoder:
    container_name: bgem3_encoder
    image: n3ko/test_bgem3_encoder_http:latest
    ports:
      - "6543:6543"
    networks:
      - coze-network

networks:
  coze-network:
    driver: bridge
