/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

/** Callback type enumeration value */
export enum CallbackType {
  /** Unknown type callback */
  Unknown = 0,
  /** normal callback */
  Normal = 1,
  /** submit directly */
  DirectSubmit = 2,
  /** Previous Timeout Submit */
  PreviousPageTimeout = 3,
  /** Failure retry callback */
  FailedRetry = 4,
  /** manual callback */
  ManualRetry = 5,
  /** Callback only, no review */
  OnlyCallBack = 6,
  /** Round of arbitration */
  Arbitration = 7,
}

export enum EventType {
  /** Task abandoned */
  abandon_task = 1,
  /** Task postponed event */
  postponed_task = 2,
  /** Task normal closed event */
  close_task = 3,
}

export enum ProjectMode {
  /** label. multi-round labelling mode, once configured number of rounds done,
merged result is effetive, no audting
Multiple rounds of labeling. After the configured number of rounds is marked, the merge result will take effect. No quality inspection */
  label = 1,
  /** QA. First round result is effective result. Blind review round will happen based on sampling rate
(by default blind review result does not callback). If blind review result is not consistent with
previous results, audit will happen and audit result will be effective

Quality inspection. The results of the first trial take effect directly, sampling blind moderation (blind moderation results do not call back by default), blind moderation inconsistent quality inspection. Quality inspection results take effect. */
  audit = 2,
  /** double_review(dual moderation). Blind review with 100% sampling rate, after 2 round，merge results
(at the moment you need merge the results yourself). Inconsistent results between 2 rounds
lead to an audit.

Double review. 100% blind province, after the completion of the first and second blinds, the merge result will take effect (temporarily only support the business to merge by itself). Inconsistent results will be subject to quality inspection. */
  double_review = 3,
  /** QA sampling. Samples of the tasks go to auditing round after first round. Auditing requires
a additional labelling on whether the first round result is correct.

Sampling inspection. After a round of preliminary review, enter the quality inspection round according to a certain proportion. The quality inspection needs to be additionally marked whether the results of the preliminary review are correct. */
  sample_audit = 4,
  /** Semi-custom. Based on first round results to decide which process to follow
next (label/audit/double_review/sample_audit)

Visual customization. Decide which mode to take for the task according to the results of the first review (labeling/quality inspection/double review/random inspection) */
  custom = 5,
  /** Custom. Under this mode, the task does not follow particular process.
User of this mode need to plugin code in order to define the process.

Fully customized. There is no fixed process for tasks in this mode, and the specific review method needs to be customized by writing code plugins. */
  full_custom = 6,
}

/** response status code used by interfaces under this service
Universal status code for the service RSP */
export enum RspStatusCode {
  OK = 0,
  /** Input does not meet the requirements */
  BAD_REQUEST = 400,
  /** Internal server error Internal service exception */
  INTERNAL_SERVER_ERROR = 500,
}

export enum TaskMode {
  /** Multiple rounds of labeling. After the configured number of rounds is marked, the merge result will take effect. No quality inspection */
  label = 1,
  /** Quality inspection. The first trial results take effect directly, sampling blind moderation, blind moderation inconsistent quality inspection. Quality inspection results take effect. */
  audit = 2,
  /** Double review. 100% blind province, after the completion of the first and second blinds, the merge result will take effect (temporarily only support the business to merge by itself). Inconsistent results will be subject to quality inspection. */
  double_review = 3,
}

/** NodeResult，record node status and context */
export interface NodeResult {
  status_code?: number;
  status_message?: string;
  node_context?: string;
  node_name?: string;
  node_type?: string;
}

export interface ProjectMeta {
  /** Project ID
queue id */
  project_id?: Int64;
  /** Project type, business layer doesn't need to care about this property
TCS internal product line */
  product_type?: string;
  /** Project tag
queue group */
  project_group?: string;
  /** Project ID */
  project_slug?: string;
  /** Project mode
Mode: 1 label 2 quality inspection 3 double review 4 random inspection 5 custom */
  project_mode?: ProjectMode;
  /** Task mode */
  task_mode?: TaskMode;
  /** Project name/title
queue Chinese name */
  project_title?: string;
  /** Project tags
queue label */
  tags?: Array<string>;
  /** Project type:
0 = normal queue, 1 = shared task pool queue, 2 = monitor queue */
  project_type?: number;
  /** Additional information about the project. e.g. monitor_project_id
or task infomration passed-through from pipeline */
  extra?: string;
}

/** The overall review results of a task
 1. Every callback will include results from previous rounds
 2. Please maintain the idempotence of the interface
 3. Business logic should combine VerifyResult.turn, TaskResult.current_turn, TaskResult.has_next_turn
 to select results and do other processing */
export interface TaskResult {
  /** task ID, uniquelly identifies a task within TCS platform */
  task_id?: Int64;
  /** business side's unique identifier for a task, corresponds to the object_data */
  object_id?: string;
  /** deprecated */
  object_version?: number;
  /** deprecated, usage not recommended. Used under audit mode. merged_result only has value
when in the last round and blind moderation turn callback setting is enabled. */
  merged_result?: VerifyResult;
  /** sorted by turn number (acsending) */
  verify_results?: Array<VerifyResult>;
  /** current ture. 0 = first review, 1 = second review (blind review), 2 = third review, -1 = audit
(when processing task result in your business logic, please first check the current_turn) */
  current_turn?: number;
  /** object_data is the actual data of the task, submitted by the business side (with create_task) */
  object_data?: string;
  /** task mode, 1=labeling,2=audit,3=double,4=sample_audit,5=custom,6=full_custom */
  task_mode?: TaskMode;
  /** if there is a next round. 0 = no; 1 = yes;

Note: the value is not effetive under sample_audit sync mode
nor under audit mode where blind_review callback setting is not enabled. */
  has_next_turn?: number;
  /** task create timestamp millsecondes */
  create_time?: Int64;
}

/** result for a round of review */
export interface VerifyResult {
  /** Unique id for current review results */
  verify_id?: Int64;
  /** Review results, structure can refer to the page template The results of this review, the internal structure can refer to the page template */
  verify_result?: string;
  /** The reviwer of this review */
  verifier?: string;
  /** >=0 means current round number in a multi-round process
-1 means auditing,
-2 means direct modification.

> = 0 indicates the number of rounds of this review in multiple rounds of review. -1 indicates quality inspection, -2 indicates direct modification */
  turn?: number;
  /** The assigned time of the task, millsecondes timestamp with utc + 8, must minus 8hours when converted to CST time */
  assign_time?: Int64;
  /** The submission time of the review, millsecondes timestamp with utc + 8, must minus 8hours when converted to CST time */
  resolve_time?: Int64;
  /** review cost time */
  duration?: number;
  /** the assign unix ts of the task */
  real_assign_time?: Int64;
  /** the submission unix ts of the review */
  real_resolve_time?: Int64;
  /** sub task */
  sub_project_id?: Int64;
  sub_project_title?: string;
}
/* eslint-enable */
