/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as infra from './infra';
import * as base from './base';
import * as testcase from './testcase';
import * as structure_gen from './structure_gen';
import * as mockset from './mockset';

export type Int64 = string | number;

export interface AutoGenerateCaseDataReq {
  /** business information */
  bizCtx?: infra.BizCtx;
  bizComponentSubject?: infra.ComponentSubject;
  /** Generated quantity, default 1 */
  count?: number;
  Base?: base.Base;
}

export interface AutoGenerateCaseDataResp {
  genCaseData?: Array<testcase.CaseDataBase>;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface BindMockSetRequest {
  /** Selected MockSet ID */
  mockSetID?: Int64;
  /** business context */
  bizCtx?: infra.BizCtx;
  /** Mocked Components */
  mockSubject?: infra.ComponentSubject;
  Base?: base.Base;
}

export interface BindMockSetResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CancelMockDataAutoGenTaskRequest {
  taskID?: Int64;
  Base?: base.Base;
}

export interface CancelMockDataAutoGenTaskResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CheckCaseDuplicateReq {
  bizCtx?: infra.BizCtx;
  /** Case name */
  caseName?: string;
  bizComponentSubject?: infra.ComponentSubject;
  Base?: base.Base;
}

export interface CheckCaseDuplicateResp {
  isPass?: boolean;
  /** When pass = false, give the specific reason why the check failed */
  failReason?: string;
  failCode?: number;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CreateMockDataAutoGenTaskRequest {
  mockSetID?: Int64;
  /** Up to 5. */
  quantity?: number;
  /** To pass empty, use the descraption of mockSet */
  desc?: string;
  Base?: base.Base;
}

export interface CreateMockDataAutoGenTaskResponse {
  taskID?: Int64;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteCaseDataReq {
  /** business information */
  bizCtx?: infra.BizCtx;
  /** A single maximum of 20 */
  caseIDs?: Array<Int64>;
  Base?: base.Base;
}

export interface DeleteCaseDataResp {
  deletedCaseIDS?: Array<Int64>;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteMockRuleRequest {
  /** The MockRule ID to delete */
  id?: Int64;
  /** business context */
  bizCtx?: infra.BizCtx;
  Base?: base.Base;
}

export interface DeleteMockRuleResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteMockSetRequest {
  /** MockSet ID to be deleted */
  id?: Int64;
  /** business context */
  bizCtx?: infra.BizCtx;
  Base?: base.Base;
}

export interface DeleteMockSetResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetMockDataAutoGenTaskChoicesRequest {
  taskID?: Int64;
  Base?: base.Base;
}

export interface GetMockDataAutoGenTaskChoicesResponse {
  status?: structure_gen.StructureGenTaskStatus;
  choices?: Array<structure_gen.StructureGenChoice>;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetMockSetUsageInfoRequest {
  mockSetID?: Int64;
  spaceID?: string;
  Base?: base.Base;
}

export interface GetMockSetUsageInfoResponse {
  /** The number of users of this MockSet */
  usersUsageCount?: Int64;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetSchemaByIDReq {
  /** business information */
  bizCtx?: infra.BizCtx;
  bizComponentSubject?: infra.ComponentSubject;
  Base?: base.Base;
}

export interface GetSchemaByIDResp {
  /** Component input information in JSON format, consistent with Input JSON Schema, does not contain Value information */
  schemaJson?: string;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface MGetCaseDataReq {
  /** business information */
  bizCtx?: infra.BizCtx;
  bizComponentSubject?: infra.ComponentSubject;
  pageLimit?: number;
  nextToken?: string;
  /** Search by case name */
  caseName?: string;
  Base?: base.Base;
}

export interface MGetCaseDataResp {
  cases?: Array<testcase.CaseDataDetail>;
  hasNext?: boolean;
  nextToken?: string;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface MGetDevopsFeatureGatesRequest {
  /** fgName needs to be registered under the Bot Studio NameSpace  */
  fgNames?: Array<string>;
  /** ByteGate Custom Key space_id */
  spaceID?: Int64;
  /** ByteGate Custom Key bot_id */
  botID?: Int64;
  /** The front-end call can be passed without passing, and the value from the ctx backend corresponds to the ByteGate Custom Key coze_uid */
  userID?: Int64;
  Base?: base.Base;
}

export interface MGetDevopsFeatureGatesResponse {
  /** Key: fgName value: release or not */
  featgates?: Record<string, boolean>;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface MGetMockRuleRequest {
  bizCtx?: infra.BizCtx;
  mockSetID?: Int64;
  creatorID?: string;
  /** The number of records retrieved at a time, the default is 30, the maximum is 50. */
  pageLimit?: number;
  /** paging cursor */
  pageToken?: string;
  /** Get the mockrule under a single Component according to the ID */
  ids?: Array<Int64>;
  /** sort */
  orderBy?: infra.OrderBy;
  /** Is it in descending order? */
  desc?: boolean;
  Base?: base.Base;
}

export interface MGetMockRuleResponse {
  /** MockRule information */
  mockRules?: Array<mockset.MockRule>;
  /** Is there a next page? */
  hasMore?: boolean;
  /** The cursor for the last record on this page */
  pageToken?: string;
  /** total */
  count?: Int64;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface MGetMockSetBindingRequest {
  /** business context */
  bizCtx?: infra.BizCtx;
  /** Mocked Components */
  mockSubject?: infra.ComponentSubject;
  /** MockSet details required */
  needMockSetDetail?: boolean;
  Base?: base.Base;
}

export interface MGetMockSetBindingResponse {
  /** Null means no mock was hit */
  mockSetBindings?: Array<mockset.MockSetBinding>;
  /** mockSet details (returned only if needMockSetDetail is true) */
  mockSetDetails?: Record<Int64, mockset.MockSet>;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface MGetMockSetRequest {
  /** business context */
  bizCtx?: infra.BizCtx;
  /** Component being mocked */
  mockSubject?: infra.ComponentSubject;
  /** creator ID */
  creatorID?: string;
  /** The number of records retrieved at a time, the default is 30, the maximum is 50. */
  pageLimit?: number;
  /** paging cursor */
  pageToken?: string;
  /** Get the mockset under a single Component according to the ID */
  ids?: Array<Int64>;
  /** sort */
  orderBy?: infra.OrderBy;
  /** Is it in descending order? */
  desc?: boolean;
  Base?: base.Base;
}

export interface MGetMockSetResponse {
  /** MockSet information */
  mockSets?: Array<mockset.MockSet>;
  /** Schema for components bound to this Mockset */
  schema?: string;
  /** Is there a next page? */
  hasMore?: boolean;
  /** The cursor for the last record on this page */
  pageToken?: string;
  /** total */
  count?: Int64;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface SaveCaseDataReq {
  /** business information */
  bizCtx?: infra.BizCtx;
  bizComponentSubject?: infra.ComponentSubject;
  /** Case basic data */
  caseBase?: testcase.CaseDataBase;
  Base?: base.Base;
}

export interface SaveCaseDataResp {
  caseDetail?: testcase.CaseDataDetail;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface SaveMockRuleRequest {
  /** name */
  name?: string;
  /** describe */
  description?: string;
  /** MockSet */
  mocksetID?: Int64;
  /** business context */
  bizCtx?: infra.BizCtx;
  /** priority */
  priority?: Int64;
  /** mockRule ID, 0 means created, not 0 means updated */
  id?: Int64;
  /** request filtering rules */
  requestFilter?: mockset.RequestFilter;
  /** Mock data generation rules */
  responseExpect?: mockset.ResponseExpect;
  Base?: base.Base;
}

export interface SaveMockRuleResponse {
  id?: Int64;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface SaveMockSetRequest {
  /** name */
  name?: string;
  /** describe */
  description?: string;
  /** The mocked component */
  mockSubject?: infra.ComponentSubject;
  /** business information */
  bizCtx?: infra.BizCtx;
  /** MocksetID, create if 0, update if not 0 */
  id?: Int64;
  Base?: base.Base;
}

export interface SaveMockSetResponse {
  /** MockSetID operated */
  id?: Int64;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface SetDefaultTestCaseReq {
  /** business information */
  bizCtx?: infra.BizCtx;
  bizComponentSubject?: infra.ComponentSubject;
  caseID?: Int64;
  Base?: base.Base;
}

export interface SetDefaultTestCaseResp {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
