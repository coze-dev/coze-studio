/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_callback_common from './flow_devops_evaluation_callback_common';
import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';

export type Int64 = string | number;

export enum AsyncStatus {
  Running = 1,
  Success = 2,
  Failure = 3,
}

export enum CozeBotInfoType {
  /** Draft bot */
  DraftBot = 1,
  /** Shop bot */
  ProductBot = 2,
}

/** Take a one-row dataset as an example:
Column name: input output context person
Column value: "What kind of job is suitable for me" "You are suitable for rest" "I don't like challenges and don't like to contribute" "{Gender: Male, Age: 18, Diploma: Graduated from a famous university}"
Input parameter construction:
  Input: "What kind of job is suitable for me"
  Variables: map {context: "I don't like challenges, I don't like to contribute", person: "{Gender: Male, Age: 18, Diploma: Graduated from a famous university}"}
  Histories: null */
export interface Input {
  /** The input column in the dataset, typically representing the user input in the evaluation Case */
  input?: string;
  /** In the dataset, all columns except the input and output columns are regarded as Variables, with the column name as the key and the column value as the value. */
  variables?: Record<string, flow_devops_evaluation_callback_common.Content>;
  /** In the multi-round evaluation scenario, one row of data in the dataset can be divided into n rounds of evaluation input.
In the nth round of evaluation, Histories passes in the information of [1~ n-1], using Json serialization. The information of the nth round is passed in by the Input field
The information in the first n-1 rounds here is serialized by Json. The serialized schema is formulated by the evaluation task and parsed and used by the evaluator
For example:
Input: "What do I wear when I go out today?"
Histories: [{"human": "I'm in XX District, XX City, what's the weather like today", "assistant": "After checking the weather API, there are thundershowers today, a level 5 gale, and the temperature is about 5 degrees"}] */
  histories?: Array<flow_devops_evaluation_callback_common.Message>;
  input_v2?: flow_devops_evaluation_callback_common.Content;
}

/** Callback shell:
 Both as server level return parameters
 When the object is associated, it is also used as the shell for front-end parameter transmission */
export interface Object {
  object_type: Int64;
  /** The name of the pull list page displayed on the UI for the evaluation object, objectMetaName */
  name?: string;
  /** The unique identity and configuration of the neutron evaluation object of one agent. It is recommended to use Json serialized passthrough
The production, delivery and consumption path of ObjectMeta: SearchObject (producer) - > evaluation platform UI- > evaluation platform user circle - > evaluation platform server level - > evaluation object Playground (consumer)
ObjectMeta is generated and parsed by the evaluation object server, and the evaluation platform is transparent only
Like the built-in interface does not have this field */
  object_meta?: string;
  /** Used to filter which objects are visible */
  space_id: Int64;
  /** Display-only object information, such as bot avatars */
  avatar_url?: string;
  /** Callback the env of the business party, pass the value through the front end, and perform the callback of the corresponding lane after evaluation analysis */
  env?: string;
  /** The UI displays the id of the unique child object in the use case list, which needs to be filled in by the callback business party */
  object_meta_id?: string;
  /** The UI is displayed in the use case list. After the user selects the evaluation object on the front end, the snapshot store is used to display it in the use case list. */
  object_type_name?: string;
  callback_type?: flow_devops_evaluation_entity.CallbackType;
}

export interface Output {
  /** The output information of the evaluation object. The evaluator will use the output in the dataset as a benchmark to evaluate the Prediction of the output of the evaluation object
Prediction can be a string or a JSON structure, which needs to be aligned with the evaluator */
  prediction?: string;
  prediction_v2?: flow_devops_evaluation_callback_common.Content;
  ext?: Record<string, string>;
}

/** To call back the key that needs to be passed on the business search interface, a batch of ObjectMeta will be found through this key fuzzy search. */
export interface SearchKey {
  /** You can change it again. */
  key: string;
}

export interface Usage {
  /** Billing information. The consumption of internal total input and output tokens when an evaluation object Playground is executed */
  input_tokens?: Int64;
  output_tokens?: Int64;
  first_token_latency?: Int64;
}
/* eslint-enable */
