/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as model from './model';

export type Int64 = string | number;

export enum AnnotateType {
  /** GSB evaluation rule scenarios, including only badcases */
  BadCase = 1,
}

/** subject type */
export enum AuthPrincipalType {
  Undefined = 0,
  /** user */
  User = 1,
  /** department */
  Department = 2,
}

export enum ComboType {
  ComboTypeUndefined = 0,
  ComboTypeAnd = 1,
  ComboTypeOr = 2,
}

export enum CompareType {
  Undefined = 0,
  /** SP comparison */
  SystemPromptCmp = 1,
  /** model comparison */
  ModelCmp = 2,
  /** free comparison */
  SelfCmp = 3,
}

export enum ConditionType {
  ConditionTypeUndefined = 0,
  ConditionTypeExpr = 1,
  ConditionTypeCombo = 2,
}

export enum ContentType {
  Text = 1,
  Image = 2,
  Binary = 3,
  ImageVariable = 4,
}

export enum Env {
  Undefined = 0,
  /** boe */
  BOE = 1,
  /** onlien */
  Online = 2,
}

export enum EvalStrategyStrategyEnum {
  Undefined = 0,
  /** The first phase only supports AIPaas GSB. */
  AIPassGSB = 1,
  /** Phase 2 migration to Fornax */
  FornaxEval = 2,
}

export enum GrayReleaseFieldType {
  Undefined = 0,
  Uid = 1,
  Did = 2,
  CustomKey = 3,
}

export enum GrayReleaseStrategy {
  /** Do not turn on grey release */
  None = 0,
  /** Instance grey release */
  InstanceGrayRelease = 1,
}

export enum GSBResult {
  Undefined = 0,
  Good = 1,
  Same = 2,
  Bad = 3,
}

export enum MessageType {
  System = 1,
  User = 2,
  Assistant = 3,
  Tool = 4,
  Placeholder = 20,
}

/** Model family, especially for different model access providers */
export enum ModelClass {
  Undefined = 0,
  /** gpt */
  GPT = 1,
  /** Byte */
  SEED = 2,
  /** google */
  Gemini = 3,
  /** Amazon */
  Claude = 4,
  /** ERNIE Bot */
  Ernie = 5,
  /** baichuan */
  Baichuan = 6,
  /** Ali */
  Qwen = 7,
  /** Zhipu */
  GML = 8,
  /** deep search */
  DeepSeek = 9,
}

export enum OperatorType {
  OperatorTypeUndefined = 0,
  OperatorTypeEq = 1,
  OperatorTypeIn = 2,
  OperatorTypeNotIn = 3,
  OperatorTypeNotEq = 4,
  OperatorTypeGt = 5,
  OperatorTypeGte = 6,
  OperatorTypeLt = 7,
  OperatorTypeLte = 8,
  OperatorTypeIsNull = 9,
  OperatorTypeIsNotNull = 10,
}

export enum OptimizeEngine {
  Undefined = 0,
  AIPaas_GradientDescent = 1,
}

export enum OptimizeExecutionStatus {
  Undefined = 0,
  Init = 1,
  Running = 2,
  Canceled = 3,
  Fail = 4,
  Completed = 5,
}

export enum OptimizeTargetType {
  Prompt = 1,
}

export enum OrderField {
  CreateTime = 1,
  LastedPublishTime = 2,
}

/** Prompt encryption type */
export enum PromptEncryptOption {
  Undefined = 0,
  /** Encrypt and return plaintext */
  EncryptWithPlainText = 1,
  /** Encrypt and do not return plaintext */
  EncryptWithoutPlainText = 2,
}

/** Cue word type */
export enum PromptType {
  Undefined = 0,
  /** Completion Mode */
  Completion = 1,
  /** chat mode */
  Chat = 2,
  /** Completion Mode V2 */
  Completion_V2 = 3,
  /** Prompt fragment */
  Segment = 4,
}

/** release status */
export enum PublishStatus {
  Undefined = 0,
  /** unpublished */
  UnPublish = 1,
  /** Published */
  Published = 2,
}

export enum ReleaseStatus {
  Undefined = 0,
  /** online */
  Online = 1,
  /** go offline */
  Offline = 2,
  /** Grey release (abandoned) */
  InGray = 3,
  /** small traffic */
  Canary = 4,
  /** single computer room */
  SingleDC = 5,
}

export enum ReleaseSubtaskStatus {
  /** Not started */
  PendingStart = 1,
  /** in progress */
  InProgress = 2,
  /** Successful execution to be confirmed */
  ExecuteSuccess = 3,
  /** pending approval */
  PendingApproval = 4,
  /** approved */
  ApprovalPassed = 5,
  /** approval rejected */
  ApprovalRejected = 6,
  /** Completed. */
  Finished = 7,
  /** fail */
  Failed = 8,
  /** Skipped */
  Skipped = 9,
  /** Rolled back */
  Rollbacked = 10,
  /** Cancelled */
  Canceled = 11,
}

export enum ReleaseTaskStatus {
  /** Not started */
  PendingStart = 1,
  /** in progress */
  Inprogress = 2,
  /** pending approval */
  PendingApproval = 3,
  /** approved */
  ApprovalPass = 4,
  /** approval rejected */
  ApprovalRejected = 5,
  /** Grey release */
  GrayReleasing = 6,
  /** release complete */
  Finished = 7,
  /** Cancelled */
  Canceled = 8,
  /** Rolled back */
  Rollbacked = 9,
}

export enum ReleaseType {
  Undefined = 0,
  /** publish */
  Release = 1,
  /** Rollback */
  RollBack = 2,
  /** go offline */
  Offline = 3,
  /** Grey release (scrap) */
  GrayRelease = 4,
  /** Grey release cancelled (abandoned) */
  GrayCancel = 5,
  /** canary */
  CanaryRelease = 6,
  /** Single room release */
  SingleDCRelease = 7,
}

export enum ReplyType {
  /** Final result */
  ReplyTypeFinalAnswer = 0,
  /** tool call */
  ReplyTypeToolCall = 1,
}

export enum ReportEventType {
  Undefined = 0,
  /** Debugging the Official Prompt */
  DebugOfficialPrompt = 1,
  /** Adopt the Official Prompt */
  AdoptOfficialPrompt = 2,
}

/** resource type */
export enum ResourceType {
  Undefined = 0,
  Space = 1,
  Prompt = 2,
  Application = 3,
  Evaluation = 4,
  Trace = 5,
  Agent = 6,
}

/** secret label */
export enum SecurityLevel {
  Undefined = 0,
  L1 = 1,
  L2 = 2,
  L3 = 3,
  L4 = 4,
}

/** Spatial character type */
export enum SpaceRoleType {
  Undefined = 0,
  /** person in charge */
  Owner = 1,
  /** developer */
  Developer = 2,
  /** tester */
  Tester = 3,
}

/** space type */
export enum SpaceType {
  Undefined = 0,
  Personal = 1,
  Team = 2,
  /** official space */
  Official = 3,
}

export enum StreamState {
  /** non-streaming */
  StreamStateNone = 1,
  /** Streaming starts (first packet) */
  StreamStateBegin = 2,
  /** streaming */
  StreamStateStreaming = 3,
  /** End of churn transfer (tail packet) */
  StreamStateEnd = 4,
}

export enum TenantType {
  /** Byte */
  ByteDance = 0,
  /** Dcar */
  Dcar = 1,
}

export enum ToolChoiceType {
  Auto = 1,
  None = 2,
  Specific = 3,
}

export enum ToolType {
  Function = 1,
  /** for gemini native tool */
  GoogleSearch = 2,
}

export enum TriggerOperation {
  /** start */
  Start = 1,
  /** approved */
  ApprovalPass = 2,
  /** approval rejected */
  ApprovalReject = 3,
  /** complete */
  Finish = 4,
  /** Retry */
  Retry = 5,
  /** skip */
  Skip = 6,
  /** Next step (currently automatically triggered, no front-end trigger is required) */
  Next = 7,
}

/** Variable type */
export enum VariableType {
  Undefined = 0,
  String = 1,
  /** Deprecated, using Number does not partition integers and floating-point numbers */
  Integer = 2,
  Boolean = 3,
  Number = 4,
  Array = 5,
  Object = 6,
  Placeholder = 7,
  Image = 8,
}

export interface AccessPointConfig {
  static_headers?: Array<AccessPointConfigDef>;
  dynamic_headers?: Array<AccessPointConfigDef>;
  static_params?: Array<AccessPointConfigDef>;
  dynamic_params?: Array<AccessPointConfigDef>;
}

export interface AccessPointConfigDef {
  key?: string;
  value?: string;
  is_required?: boolean;
}

export interface AllowList {
  /** Traffic ID field */
  field?: GrayReleaseField;
  /** list value */
  values?: Array<string>;
}

export interface AnnotatedDataset {
  /** Annotated dataset metadata */
  meta?: AnnotateMeta;
  dataset_id?: Int64;
}

export interface AnnotateMeta {
  /** Data annotation type */
  type?: AnnotateType;
  /** Required field */
  required_cols?: Array<string>;
}

export interface ApprovalInfo {
  /** Approver */
  approver?: string;
  /** Whether the approval is passed */
  approval_pass?: boolean;
  /** Approval remarks */
  approval_comment?: string;
  /** approval time */
  approval_time?: Int64;
}

/** operation information */
export interface AuthAction {
  /** unique identifier */
  unique_key?: string;
  /** Operation display name */
  name?: string;
  /** Entity type, century does not bind entities, only records operation objects */
  entity_type?: string;
}

/** authentication department */
export interface AuthDepartment {
  /** Department ID */
  department_id?: string;
}

/** Authentication resources, objects */
export interface AuthEntity {
  /** entity unique ID */
  id?: string;
  /** entity type */
  entity_type?: string;
}

/** Authentication subject */
export interface AuthPrincipal {
  /** subject type */
  auth_principal_type?: AuthPrincipalType;
  /** authenticated user */
  auth_user?: AuthUser;
  /** authentication department */
  auth_department?: AuthDepartment;
}

/** Role Information */
export interface AuthRole {
  /** unique identifier */
  unique_key?: string;
  /** character display name */
  name?: string;
  /** Associated Action List */
  actions?: Array<AuthAction>;
  /** entity type */
  entity_type?: string;
}

/** authenticated user */
export interface AuthUser {
  /** sso_username, just pass one with openUserID */
  sso_user_id?: string;
  /** fornax userID */
  open_user_id?: string;
  /** tenant type */
  tenant?: TenantType;
}

export interface BinaryContent {
  mime_type?: string;
  data?: Blob;
}

export interface BlockList {
  /** Traffic ID field */
  field?: GrayReleaseField;
  /** list value */
  values?: Array<string>;
}

export interface ComboCondition {
  combo_type?: ComboType;
  conditions?: Array<Condition>;
}

/** Training ground comparison configuration */
export interface CompareConfig {
  compare_type?: CompareType;
  /** JSON serialization stores comparison content */
  compare_info?: string;
}

export interface Condition {
  /** condition type */
  condition_type?: ConditionType;
  expr?: OperatorExpr;
  combo_condition?: ComboCondition;
}

export interface ContentPart {
  type?: ContentType;
  /** text content */
  text?: string;
  /** image URL */
  image?: Image;
  /** binary content */
  binary_content?: BinaryContent;
  /** configuration */
  config?: ContentPartConfig;
}

export interface ContentPartConfig {
  image_resolution?: string;
}

export interface DebugBrief {
  /** debug log ID */
  debug_id?: Int64;
  /** Debugging Prompt Information */
  prompt_brief?: string;
  /** Response result, 0 indicates success */
  status_code?: number;
  /** Request initiation time (corresponding to the start time of the first step in single-step debugging mode) */
  start_time_ms?: Int64;
  /** time consuming */
  cost_ms?: Int64;
  /** Response final completion time (corresponding to the last step completion time in single-step debugging mode) */
  end_time_ms?: Int64;
  /** Enter Number of Tokens */
  input_token?: Int64;
  /** Number of Tokens Output */
  output_token?: Int64;
}

export interface DebugDetail {
  /** Enter content, reserve 1-20
debug log ID */
  debug_id?: Int64;
  /** System Prompt and Model Configuration */
  prompt?: Prompt;
  /** user input message */
  message?: Message;
  /** chat history */
  contexts?: Array<Message>;
  /** variable value list */
  variables?: Array<Variable>;
  /** Operator UserID */
  operator?: string;
  /** Output content, reserved 21-40 */
  log_id?: string;
  status_code?: number;
  status_message?: string;
  /** request initiation time */
  start_time_ms?: Int64;
  /** response final completion time */
  end_time_ms?: Int64;
  /** time consuming */
  cost_ms?: Int64;
  /** Full text of the reply message */
  item?: ReplyItem;
  /** Prompt after parameter replacement */
  real_prompt?: PromptText;
  /** tool call */
  tool_calls?: Array<ToolCallCombine>;
}

export interface DebugMessage {
  message?: Message;
  debug_id?: string;
  output_token?: Int64;
  cost_ms?: Int64;
  input_token?: Int64;
  reasoning_content?: string;
}

export interface ErrInfo {
  log_id?: string;
  msg?: string;
}

export interface EvalCaseSource {
  /** Evaluation Use Case ID */
  eval_case_id?: Int64;
}

export interface EvalResult {
  gsb_result?: GSBResult;
}

export interface EvalResultStat {
  improve_cases_cnt?: number;
  reduced_cases_cnt?: number;
  constant_cases_cnt?: number;
}

export interface EvalStrategy {
  /** evaluate */
  strategy?: EvalStrategyStrategyEnum;
  /** Associated Forna evaluation use cases, the evaluation strategy is FornaxEval is Assignment */
  eval_case_source?: EvalCaseSource;
}

export interface Function {
  name?: string;
  description?: string;
  parameters?: string;
}

export interface FunctionCall {
  name?: string;
  arguments?: string;
}

export interface GrayReleaseBucket {
  /** Traffic ID field */
  field?: GrayReleaseField;
  /** Grey release percentage */
  in_gray?: number;
  /** Grey release base, such as bucket_size = 1000, in_gray = 1, then 1/1000 of the traffic will hit grey release */
  bucket_size?: number;
}

export interface GrayReleaseConfig {
  /** whitelist */
  allow_list?: AllowList;
  /** blacklist */
  block_list?: BlockList;
  /** Grey release barrel */
  bucket?: GrayReleaseBucket;
  /** filter condition */
  condition?: Condition;
}

export interface GrayReleaseField {
  /** Grey release field type */
  type?: GrayReleaseFieldType;
  /** When the grey release field is customKey, fill in the corresponding key */
  custom_key?: string;
}

export interface Image {
  url?: string;
  uri?: string;
}

export interface ImageVariable {
  link?: Image;
  binary?: BinaryContent;
}

export interface Label {
  id?: Int64;
  name?: string;
}

export interface LarkAction {
  value?: string;
  name?: string;
}

export interface LarkCallbackEvent {
  type?: string;
  operator?: LarkOperator;
  token?: string;
  action?: LarkAction;
}

export interface LarkCallbackHeader {
  event_id?: string;
  token?: string;
  create_time?: string;
  event_type?: string;
  tenant_key?: string;
  app_id?: string;
}

export interface LarkCard {
  type?: string;
  data?: LarkCardTemplateData;
}

export interface LarkCardTemplateData {
  template_id?: string;
  template_variable?: Record<string, string>;
  template_version_name?: string;
}

export interface LarkOperator {
  tenant_key?: string;
  user_id?: string;
  open_id?: string;
}

export interface LarkToast {
  type?: string;
  content?: string;
}

export interface MCPServerCombine {
  mcp_server_id?: Int64;
  name?: string;
  tools?: Array<Tool>;
  access_point_id?: Int64;
  /** Environment, BOE/PPE/Online */
  env?: string;
  /** lane */
  lane?: string;
  /** Server Description */
  description?: string;
  /** Whether to support publishing with prompt */
  is_publish_supported?: boolean;
  /** MCP Access Point Configuration */
  access_point_config?: AccessPointConfig;
}

/** Message */
export interface Message {
  id?: Int64;
  message_type?: MessageType;
  content?: string;
  tool_calls?: Array<ToolCallCombine>;
  tool_call_id?: string;
  /** Message content sharding */
  parts?: Array<ContentPart>;
  /** Message metadata */
  metadata?: Record<string, string>;
  /** Encrypted message content */
  encrypt_content?: string;
}

/** model information */
export interface Model {
  /** Model ID */
  id?: Int64;
  /** Model name */
  name?: string;
  /** Model series */
  model_class?: ModelClass;
  /** model limit */
  model_quota?: ModelQuota;
  temperature?: ModelParameter;
  top_k?: ModelParameter;
  top_p?: ModelParameter;
  function_call_enable?: boolean;
  json_mode_enable?: boolean;
}

/** model configuration data */
export interface ModelConfig {
  /** Model ID */
  id?: Int64;
  /** Model name */
  name?: string;
  /** Model series */
  model_class?: ModelClass;
  temperature?: number;
  max_tokens?: number;
  top_k?: number;
  top_p?: number;
  json_mode?: boolean;
  /** deprecated */
  function_call_mode?: boolean;
  presence_penalty?: number;
  frequency_penalty?: number;
  /** model provider */
  provider?: model.Provider;
  /** The model unique identifier of the model provider (for scenarios where saas cannot pass modelID) */
  provider_model_id?: string;
  /** Thinking parameter */
  thinking?: ThinkingConfig;
  /** Model extra parameters will be deserialized into the request that specifically invokes the model, with a lower priority than the explicitly declared parameters above */
  extra?: string;
}

/** model parameters */
export interface ModelParameter {
  /** Model parameter name */
  name?: string;
  /** default value */
  default_value?: string;
  /** current value */
  value?: string;
  /** step size */
  step?: string;
  /** minimum value */
  min?: string;
  /** maximum value */
  max?: string;
}

/** model constraint */
export interface ModelQuota {
  /** Token limit */
  token_limit?: Int64;
}

export interface OperatorExpr {
  operator?: OperatorType;
  var?: string;
  const_val?: string;
}

export interface OptimizeEngineSource {
  /** Associated task ID */
  task_id?: string;
  optimize_engine?: OptimizeEngine;
}

export interface OptimizeExecution {
  id?: Int64;
  status?: OptimizeExecutionStatus;
  /** Curing DataSet */
  dataset?: AnnotatedDataset;
  /** Optimized object entity snapshot when running Task, including version information */
  optimize_target?: OptimizeTarget;
  /** Outcome evaluation Evaluation strategy snapshot */
  eval_startegy?: EvalStrategy;
  /** Associated optimization task resources */
  optimize_engine_source?: OptimizeEngineSource;
  /** Overall task time */
  cost_ms?: Int64;
  /** Task start time */
  start_time_ms?: Int64;
  /** Task execution completion time */
  end_time_ms?: Int64;
  creator_id?: string;
  space_id?: Int64;
  log_id?: string;
  task_id?: Int64;
  /** creation time */
  create_tsms?: Int64;
  /** update time */
  update_tsms?: Int64;
}

export interface OptimizeResult {
  /** optimization results
The serial number in the optimization result */
  sequence_id?: string;
  /** associated optimization execution record ID */
  execution_id?: Int64;
  /** Evaluation result object */
  optimize_result?: OptimizeTarget;
  /** evaluation result
The sample size or accuracy of the model's correct predictions */
  accuracy?: number;
  /** The sample size or accuracy of the model's correct predictions */
  eval_result_stat?: EvalResultStat;
  /** The first phase evaluation results structure, the second phase is expected to reuse Fornax evaluation Dashboard */
  row_eval_result_group?: Array<RowEvalResult>;
  /** Associated evaluation task resources */
  eval_case_source?: EvalCaseSource;
}

export interface OptimizeTarget {
  /** Object type to be optimized */
  type?: OptimizeTargetType;
  /** The data structure corresponding to the prompt type */
  prompt?: PromptOpTarget;
}

export interface OptimizeTask {
  /** Task ID */
  id?: Int64;
  /** Task name */
  display_name?: string;
  /** Task Description */
  description?: string;
  /** optimization object */
  target?: OptimizeTarget;
  /** creator ID */
  creator?: string;
  /** creation time */
  create_tsms?: Int64;
  /** update time */
  update_tsms?: Int64;
  /** Is the list visible? */
  visible?: boolean;
  /** annotated dataset */
  annotated_dataset?: AnnotatedDataset;
  /** Evaluation rules */
  eval_strategy?: EvalStrategy;
  /** optimization engine */
  optimize_engine?: OptimizeEngine;
  space_id?: Int64;
  /** The associated run record, the list interface only returns the most recent one */
  executions?: Array<OptimizeExecution>;
}

export interface OrderParam {
  /** sort field */
  order_by?: OrderField;
  /** Is it ascending? */
  asc?: boolean;
}

/** Prompt */
export interface Prompt {
  /** Prompt ID */
  id?: Int64;
  /** unique identifier */
  prompt_key?: string;
  /** Prompt name */
  display_name?: string;
  /** Prompt description */
  description?: string;
  /** Prompt type */
  prompt_type?: PromptType;
  /** creator ID */
  creator?: string;
  /** creation time */
  create_tsms?: Int64;
  /** update time */
  update_tsms?: Int64;
  /** release status */
  status?: PublishStatus;
  /** version */
  version?: string;
  /** model configuration */
  model_config?: ModelConfig;
  /** PromptText */
  prompt_text?: PromptText;
  /** Prompt input */
  prompt_input?: PromptInput;
  /** publish information */
  publish_info?: PromptPublishInfo;
  /** label */
  labels?: Array<Label>;
  /** popularity */
  heat?: Int64;
  /** Is it a draft? */
  is_draft?: boolean;
  /** draft associated version */
  draft_base_version?: string;
  /** Tool Definition */
  tools?: Array<ToolCombine>;
  /** Publish final information */
  infos?: Array<ReleaseInfo>;
  /** secret label */
  security_level?: SecurityLevel;
  tool_call_config?: ToolCallConfig;
  /** Types of template engines */
  template_type?: string;
  /** metadata */
  metadata?: Record<string, string>;
  /** Whether to nest Prompt fragments */
  has_segment?: boolean;
  /** Label (only used by the platform interface, PromptHub is temporarily unavailable) */
  tags?: Array<Tag>;
  /** Whether to debug in batches */
  is_batch_debug?: boolean;
  /** creator information */
  creator_info?: UserInfo;
  /** Drafts are based on BaseVersion */
  is_draft_edited?: boolean;
  /** MCP service list */
  mcp_servers?: Array<MCPServerCombine>;
  /** The previous version associated with the version snapshot */
  snapshot_base_version?: string;
}

/** Prompt basic information, excluding version-related details */
export interface PromptBasic {
  /** Prompt ID */
  id?: Int64;
  /** unique identifier */
  prompt_key?: string;
  /** Prompt name */
  display_name?: string;
  /** Prompt description */
  description?: string;
  /** creator ID */
  creator?: string;
  /** creation time */
  create_tsms?: Int64;
  /** update time */
  update_tsms?: Int64;
  /** commit status */
  status?: PublishStatus;
  /** last committed version */
  last_publish_version?: string;
  /** secret label */
  security_level?: SecurityLevel;
}

/** Prompt input */
export interface PromptInput {
  variables?: Array<Variable>;
}

export interface PromptOpTarget {
  /** Prompt unique identifier */
  prompt_key?: string;
  /** version */
  prompt_version?: string;
  /** Prompt content, scene-specific assignment */
  prompt_text?: PromptText;
  /** Prompt name */
  prompt_name?: string;
  /** PromptID */
  prompt_id?: Int64;
}

/** publish information */
export interface PromptPublishInfo {
  /** publisher */
  publisher?: string;
  /** release description */
  publish_description?: string;
  /** release time */
  publish_tsms?: Int64;
  /** Publisher Details */
  publisher_info?: UserInfo;
}

/** PromptText */
export interface PromptText {
  /** System Prompt */
  system_prompt?: Message;
  /** User Prompt */
  user_prompt?: Message;
  /** MessageList */
  message_list?: Array<Message>;
}

export interface QualityInspectionInfo {
  /** Is there a lack of a quality inspection strategy? */
  is_guard_missing?: boolean;
  /** QC ID */
  guard_id?: Int64;
  /** Quality inspection link */
  guard_url?: string;
}

export interface ReleaseApprovalConfig {
  /** Whether to open the review */
  enable?: boolean;
  /** Grey release strategy */
  gray_release_strategy?: GrayReleaseStrategy;
}

export interface ReleaseConfig {
  /** Whether grey release (no longer valid, obsolete) */
  if_gray_release?: boolean;
  /** Grey release configuration (no longer valid, deprecated) */
  gray_release_config?: GrayReleaseConfig;
  /** Whether to escape approval */
  approval_escape?: boolean;
  /** Escape Approval Remarks */
  approval_escape_comment?: string;
  /** Grey release strategy */
  gray_release_strategy?: GrayReleaseStrategy;
  /** Escape grey release note */
  gray_release_escape_comment?: string;
  /** Whether the release review is turned on when the ticket is created */
  space_approval_enable?: boolean;
  /** Space grey release policy when creating a ticket */
  space_gray_release_strategy?: GrayReleaseStrategy;
}

export interface ReleaseInfo {
  /** release id */
  id?: Int64;
  /** version */
  version?: string;
  /** The previous released version */
  pre_version?: string;
  /** environment */
  env?: Env;
  /** lane */
  feature?: string;
  /** publisher */
  publisher?: string;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** Grey release configuration */
  gray_release_config?: GrayReleaseConfig;
  /** release status */
  status?: ReleaseStatus;
  /** Publish label */
  label?: string;
}

export interface ReleaseResource {
  prompt_id?: Int64;
  prompt_version?: string;
  prompt_pre_version?: string;
  release_id?: Int64;
}

export interface ReleaseSubtask {
  /** subtask id */
  id?: Int64;
  /** Publish ticket id */
  release_task_id?: Int64;
  /** Subtask unique identifier */
  subtask_key?: string;
  /** subtask state */
  status?: ReleaseSubtaskStatus;
  /** starter */
  trigger_user?: string;
  /** Finisher */
  finish_user?: string;
  /** skip person */
  skip_user?: string;
  /** approval information */
  approval_info?: ApprovalInfo;
  /** error message */
  err_info?: ErrInfo;
  /** start time */
  start_time?: Int64;
  /** completion time */
  finish_time?: Int64;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** subtask additional information */
  subtask_extra?: SubtaskExtra;
  /** CRCC stage id */
  crcc_stage_id?: string;
}

export interface ReleaseSubtaskConfig {
  /** Subtask unique identifier */
  subtask_key?: string;
  /** subtask display name */
  display_name?: string;
  /** subtask description */
  desc?: string;
  /** Can be skipped */
  skippable?: boolean;
  /** Can you try again? */
  retryable?: boolean;
  /** Is approval required? */
  approval_required?: boolean;
}

export interface ReleaseTask {
  /** Publish ticket id */
  id?: Int64;
  /** Space ID */
  space_id?: Int64;
  /** Publish resource list */
  release_resources?: Array<ReleaseResource>;
  /** release environment */
  env?: Env;
  /** launch lane */
  feature?: string;
  /** publish configuration */
  release_config?: ReleaseConfig;
  /** Post a note */
  comment?: string;
  /** publisher */
  release_user?: string;
  /** Cancel publisher */
  cancel_user?: string;
  /** Rollback Person */
  rollback_user?: string;
  /** release status */
  status?: ReleaseTaskStatus;
  /** subtask configuration */
  subtask_configs?: Array<ReleaseSubtaskConfig>;
  /** Current subtask key */
  current_subtask_key?: string;
  /** Subtask list (current status information) */
  subtasks?: Record<string, ReleaseSubtask>;
  /** Can it be cancelled? */
  cancelable?: boolean;
  /** Can it be rolled back? */
  rollbackable?: boolean;
  /** start time */
  start_time?: Int64;
  /** completion time */
  finish_time?: Int64;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** Callback event id */
  crcc_event_id?: string;
  /** Publish label */
  label?: string;
}

export interface ReplyItem {
  stream_state?: StreamState;
  reply_type?: ReplyType;
  content?: string;
  token_consumption?: TokenConsumption;
  tool_calls?: Array<ToolCallCombine>;
  debug_trace_key?: string;
  reasoning_content?: string;
  /** multimodal content return */
  parts?: Array<ContentPart>;
  finish_reason?: string;
  prompt_version?: string;
  /** Tool Execution Results */
  tool_call_responses?: Array<ToolCallResponse>;
}

export interface ReportEvent {
  report_event_type?: ReportEventType;
  prompt_id?: Int64;
}

export interface RowEvalResult {
  input?: string;
  output_before?: string;
  /** Pre-optimization evaluation results */
  eval_before?: string;
  output_after?: string;
  /** evaluation result */
  eval_result?: EvalResult;
  /** extra variable */
  variables?: Record<string, string>;
}

/** space */
export interface Space {
  /** Space ID */
  id?: Int64;
  /** space name */
  name?: string;
  /** spatial description */
  description?: string;
  /** space type */
  space_type?: SpaceType;
  /** Space creator */
  creator?: string;
  /** creation time */
  create_tsms?: Int64;
  /** update time */
  update_tsms?: Int64;
  /** release moderation configuration */
  release_approval_config?: ReleaseApprovalConfig;
  /** Spatial sources */
  space_origin?: string;
}

/** space member */
export interface SpaceMember {
  /** Space ID */
  space_id?: Int64;
  /** member */
  member?: AuthPrincipal;
  /** Spatial character type */
  space_role_type?: SpaceRoleType;
}

/** Subject + object + permission spot, authentication result */
export interface SubjectActionObjectAuthRes {
  /** Subject + object + permission spot authentication pair */
  subject_action_objects?: SubjectActionObjects;
  /** Is it allowed? */
  is_allowed?: boolean;
}

/** Subject + object + permission spot, authentication combination information */
export interface SubjectActionObjects {
  /** Subject, usually the user when authenticating */
  subject?: AuthPrincipal;
  /** permission unique identifier */
  action?: string;
  /** Object list, handled by default according to the logic of or */
  objects?: Array<AuthEntity>;
}

/** Subject + Object + Role */
export interface SubjectRoleObject {
  /** Principal, when authorized, user or department */
  subject?: AuthPrincipal;
  /** Role Information */
  role?: AuthRole;
  /** object */
  object?: AuthEntity;
}

export interface SubtaskExtra {
  /** Quality Inspection Information */
  quality_inspection_info?: QualityInspectionInfo;
}

/** Fornax Label */
export interface Tag {
  id?: Int64;
  name?: string;
}

export interface ThinkingConfig {
  /** Whether to turn on */
  enabled?: boolean;
  /** Maximum output token for thinking content */
  budget_tokens?: Int64;
}

export interface TokenConsumption {
  input_token?: Int64;
  output_token?: Int64;
}

export interface Tool {
  type?: ToolType;
  function?: Function;
}

export interface ToolCall {
  id?: string;
  type?: ToolType;
  function_call?: FunctionCall;
}

export interface ToolCallCombine {
  tool_call?: ToolCall;
  /** Mock data */
  mock_response?: string;
}

export interface ToolCallConfig {
  tool_choice?: ToolChoiceType;
  specification?: ToolChoiceSpecification;
}

export interface ToolCallResponse {
  tool_call_id?: string;
  name?: string;
  content?: string;
}

export interface ToolChoiceSpecification {
  type?: ToolType;
  name?: string;
}

export interface ToolCombine {
  /** Tool Definition */
  tool_def?: Tool;
  /** Mock data */
  mock_response?: Array<string>;
  /** Whether to disable */
  disable?: boolean;
}

export interface UserDebugConfig {
  /** Enable single step debugging */
  step_by_step?: boolean;
  /** Prompt debug type */
  prompt_type?: PromptType;
}

export interface UserInfo {
  /** name */
  name?: string;
  /** English name */
  en_name?: string;
  /** user profile URL */
  avatar_url?: string;
  /** 72 * 72 avatar */
  avatar_thumb?: string;
  /** unique user ID within the app */
  open_id?: string;
  /** unique identifier within the user application developer */
  union_id?: string;
  /** Corporate identity */
  tenant_key?: string;
  /** The unique identity of the user within the tenant */
  user_id?: string;
  /** user email */
  email?: string;
  /** tenant */
  tenant?: TenantType;
}

/** prompt variable */
export interface Variable {
  /** variable name */
  key?: string;
  /** variable description */
  desc?: string;
  /** Variable type */
  variable_type?: VariableType;
  /** Is it necessary */
  is_required?: boolean;
  /** Variable value/mock value */
  value?: string;
  placeholder_messages?: Array<Message>;
  image?: ImageVariable;
}
/* eslint-enable */
