/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum Channel {
  Undefined = 0,
  /** Feishu */
  Lark = 1,
  /** OpenAPI */
  OpenAPI = 2,
}

export enum LarkReleaseStatus {
  Undefined = 0,
  /** Under review. */
  InReview = 10,
  /** approved */
  Approved = 20,
  /** moderation rejection */
  ReviewReject = 30,
  /** publish failed */
  Error = 40,
}

export enum OpenAPIReleaseStatus {
  Undefined = 0,
  /** Published successfully */
  Success = 20,
  /** publish failed */
  Error = 30,
}

export enum OperationType {
  Undefined = 0,
  /** Create Publication Order */
  Create = 1,
  /** update release sheet */
  Update = 2,
  /** distribution channel */
  ReleaseChannel = 3,
}

export enum Status {
  Undefined = 0,
  /** In release */
  Publishing = 10,
  /** Published successfully */
  Success = 20,
  /** publish failed */
  Error = 30,
}

export enum TemplateImportStatus {
  Undefined = 0,
  /** in progress */
  InProgress = 10,
  /** success */
  Success = 20,
  /** fail */
  Error = 30,
  /** timeout */
  Timeout = 40,
}

export enum TemplateLanguage {
  Unknown = 0,
  Golang = 1,
  Typescript = 2,
  Python = 3,
}

export enum TemplateType {
  Unknown = 0,
  ChatBot = 1,
  OpenAPI = 2,
}

export interface Agent {
  /** agent id */
  id: Int64;
  /** agent name */
  name: string;
  /** Agent belongs to fornax space id */
  spaceID: Int64;
  /** agent description */
  desc?: string;
  /** Agent avatar */
  avatar?: Image;
  /** Agent implicit project name */
  projectName: string;
  /** Agent template warehouse */
  repo?: TemplateRepo;
  /** Agent ide space address */
  ideSpaceURL?: string;
  /** Agent associated repository */
  associatedRepo?: AssociatedRepo;
  /** Has the agent posted */
  ifReleased?: boolean;
  /** Agent faas function information */
  faasInfo?: FaaSInfo;
  /** Agent Feishu Application Configuration */
  larkInfo?: LarkInfo;
  /** founder */
  createdBy?: string;
  /** Update Person */
  updatedBy?: string;
  /** creation time */
  createdAt?: Int64;
  /** update time */
  updatedAt?: Int64;
}

export interface AgentOpenAPIAccount {
  id?: Int64;
  agentID?: Int64;
  token?: string;
  spaceAccountID?: Int64;
  owner?: string;
  /** creation time */
  createTime?: Int64;
  /** update time */
  updateTime?: Int64;
}

export interface AgentReleaseInfo {
  id?: Int64;
  agentID?: Int64;
  /** version */
  version?: string;
  /** version description */
  versionDesc?: string;
  status?: Status;
  avatar?: Image;
  name?: string;
  desc?: string;
  /** publisher */
  publisher?: string;
  /** creation time */
  createTime?: Int64;
  /** update time */
  updateTime?: Int64;
  channels?: Array<Channel>;
  /** Faas related release information */
  faasInfo?: FaaSInfo;
  /** LARK related release information */
  larkInfo?: LarkInfo;
  /** openAPI release information */
  openAPIInfo?: OpenAPIInfo;
}

export interface AssociatedRepo {
  /** codebase id */
  ID?: Int64;
  /** Warehouse name */
  repoName?: string;
  /** Warehouse ssh address */
  repoURL?: string;
  /** branch */
  branch?: string;
  /** Template import status */
  templateImportStatus?: TemplateImportStatus;
  /** gitlab project id */
  externalID?: Int64;
}

export interface Avatar {
  region?: string;
  url?: string;
  uri?: string;
}

export interface FaaSCluster {
  /** FAAS cluster */
  cluster: string;
  /** Area where the FAAS cluster is located */
  region: string;
}

export interface FaaSInfo {
  id?: string;
  psm?: string;
  clusters?: Array<FaaSCluster>;
  owner?: string;
}

export interface Image {
  uri: string;
  url: string;
}

export interface LarkInfo {
  appID?: string;
  appSecret?: string;
  versionID?: string;
  larkReleaseStatus?: LarkReleaseStatus;
}

export interface OpenAPIInfo {
  openAPIReleaseStatus?: OpenAPIReleaseStatus;
}

export interface TemplateMetaInfo {
  name?: string;
  description?: string;
  type?: string;
  projectName?: string;
  path?: string;
  tags?: Array<string>;
  avatar?: Array<Avatar>;
  templateType?: string;
  repoURL?: string;
  repoName?: string;
}

export interface TemplateRepo {
  /** template warehouse name */
  repoName: string;
  /** Template warehouse address */
  repoURL: string;
  /** Template repository relative path */
  relativePath: string;
  /** template language */
  language: TemplateLanguage;
  /** template type */
  templateType?: TemplateType;
}
/* eslint-enable */
