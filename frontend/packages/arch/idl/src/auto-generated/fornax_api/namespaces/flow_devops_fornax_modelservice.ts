/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as model from './model';
import * as flow_devops_evaluation_dataset from './flow_devops_evaluation_dataset';

export type Int64 = string | number;

export interface AccountFilter {
  usageScenario?: model.UsageScenario;
  region?: model.Region;
}

export interface CheckUserHasDeployPermRequest {
  /** Currently only merlin is supported. */
  provider: model.Provider;
  byteTreeNodeID?: string;
  /** Provider = merlin */
  'x-jwt-token'?: string;
}

export interface CheckUserHasDeployPermResponse {
  hasPerm?: boolean;
  /** Show details when the user has no permission */
  detail?: string;
  /** Show the application ticket link when there is no permission. */
  applyTicketURL?: string;
}

export interface CloneTrainingDatasetReq {
  datasetID?: string;
  name?: string;
  desc?: string;
  /** Space ID */
  space_id?: string;
}

export interface CloneTrainingDatasetResp {
  datasetID?: string;
}

export interface CreateProviderAccountRequest {
  spaceID: string;
  name: string;
  provider?: model.Provider;
  /** [20, 30) provider account */
  maasAccount?: model.MaasAuth;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface CreateProviderAccountResponse {
  accountID?: Int64;
}

export interface CreateSftTaskRequest {
  spaceID?: string;
  accountID?: string;
  task?: model.SftTask;
  /** Required when creating a merlin task */
  jwtToken?: string;
}

export interface CreateSftTaskResponse {
  taskID?: string;
  invalidDatasets?: Array<model.InvalidDataSet>;
}

export interface CreateTrainingDataImportTaskReq {
  datasetID?: string;
  fileType?: model.TrainingDataFileType;
  mode?: model.DataImportMode;
  dataSource?: model.DataSource;
  /** Space ID */
  space_id?: string;
}

export interface CreateTrainingDataImportTaskResp {
  taskID?: string;
}

export interface CreateTrainingDatasetReq {
  name?: string;
  type?: model.TrainingDatasetType;
  desc?: string;
  /** Space ID */
  spaceID?: string;
}

export interface CreateTrainingDatasetResp {
  datasetID?: string;
}

export interface DeleteModelAndAccountRequest {
  modelID?: Int64;
}

export interface DeleteModelAndAccountResponse {}

export interface DeleteProviderAccountRequest {
  accountID: string;
}

export interface DeleteProviderAccountResponse {}

export interface DeleteSftTaskRequest {
  spaceID?: string;
  accountID?: string;
  taskID?: Int64;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface DeleteSftTaskResponse {}

export interface DeleteTrainingDataRowsReq {
  dataset_id?: string;
  rowIDs?: Array<string>;
  /** Space ID */
  space_id?: string;
}

export interface DeleteTrainingDataRowsResp {
  rowIDs?: Array<string>;
}

export interface DeleteTrainingDatasetReq {
  dataset_id?: string;
  /** Space ID */
  space_id?: string;
}

export interface DeleteTrainingDatasetResp {
  datasetID?: string;
}

export interface ExportSftTaskOutputToProviderRequest {
  /** Required, only merlin is supported in this issue. */
  provider?: model.Provider;
  /** Space ID, required for permission verification */
  spaceID?: string;
  /** Task ID, required */
  taskID?: string;
  /** The name of the task output */
  taskOutputName?: string;
  /** It must be passed when provider = merlin, and the token of the user who has not expired must be passed. */
  jwtToken?: string;
}

export interface ExportSftTaskOutputToProviderResponse {
  /** The exported property of the task output, this interface has been changed to asynchronous, and this property has been deprecated */
  outputAfterExport?: model.SftTaskOutput;
}

export interface GetAccountRelatedResourcesRequest {
  accountID: string;
}

export interface GetAccountRelatedResourcesResponse {
  resources?: model.ProviderAccountRelatedResources;
}

export interface GetAccountsRequest {
  accountIDs?: Array<Int64>;
  spaceID?: Int64;
}

export interface GetAccountsResponse {
  accounts?: Array<model.Account>;
}

export interface GetAvailableQuotaByByteTreeNodeRequest {
  /** ByteTree Node ID */
  byte_tree_node_id: string;
  /** single instance resource allocation */
  resourceOption: model.InstanceResourceOption;
  'x-jwt-token'?: string;
}

export interface GetAvailableQuotaByByteTreeNodeResponse {
  quotas?: Partial<Record<model.IDC, Array<model.DeployQuota>>>;
}

export interface GetByteTreeParentNodeByPSMRequest {
  psm: string;
  'x-jwt-token': string;
}

export interface GetByteTreeParentNodeByPSMResponse {
  node?: model.ByteTreeNode;
  createdInMerlin?: boolean;
}

export interface GetInstanceSpecOptionsRequest {}

export interface GetInstanceSpecOptionsResponse {
  instanceResourceOpts?: Array<model.InstanceResourceOption>;
}

export interface GetMaaSRegionConfigsRequest {}

export interface GetMaaSRegionConfigsResponse {
  configs?: Array<model.MaaSRegionConfig>;
}

export interface GetMemoryEstimationRequest {
  spaceID?: string;
  task: model.SftTask;
}

export interface GetMemoryEstimationResponse {
  isMemoryInsufficient: boolean;
  requiredMemoryPerGPU?: string;
  trueMemoryPerGPU?: string;
}

export interface GetModelRequest {
  spaceID?: Int64;
  modelID?: Int64;
}

export interface GetModelResponse {
  model?: model.Model;
}

export interface GetProviderAccountMaskedDataRequest {
  accountID: string;
  provider: model.Provider;
  accountType: model.ProviderAccountType;
}

export interface GetProviderAccountMaskedDataResponse {
  maskedData?: model.ProviderAccount;
}

export interface GetSftTaskCustomModelRequest {
  spaceID?: string;
  accountID?: string;
  customModelID?: string;
  /** Only Volcano Ark is supported. */
  providerType?: model.Provider;
}

export interface GetSftTaskCustomModelResponse {
  customModel?: model.SftTaskCustomModel;
}

export interface GetSftTaskFoundationModelConfigRequest {
  spaceID?: string;
  accountID?: string;
  /** Provider is empty when merlin */
  modelVersionConfigID?: string;
  providerType?: model.Provider;
  /** Provider is merlin by vendor/model_name */
  foundationModelName?: string;
  /** training type */
  trainingMethod?: model.SftTaskTrainingMethod;
}

export interface GetSftTaskFoundationModelConfigResponse {
  hyperParams?: Array<model.SftTaskHyperParam>;
  presetDatasets?: Array<model.SftTaskPresetDataset>;
  hyperParamsCategories?: Array<model.SftTaskHyperParamCategory>;
}

export interface GetSFTTaskOutputAbilityRequest {
  spaceID: string;
  taskID: string;
}

export interface GetSFTTaskOutputAbilityResponse {
  ability?: model.Ability;
}

export interface GetSftTaskProgressRequest {
  /** Required, only merlin is supported for the time being. */
  provider?: model.Provider;
  /** Space ID, required for permission verification */
  spaceID?: string;
  /** Task ID, required */
  taskID?: string;
}

export interface GetSftTaskProgressResponse {
  progress?: string;
}

export interface GetSftTaskRequest {
  spaceID?: string;
  accountID?: string;
  taskID?: string;
  /** For JwtToken authentication, in this case spaceID and accountID are obtained after authentication */
  Authorization?: string;
}

export interface GetSftTaskResponse {
  task?: model.SftTask;
}

export interface GetTrainingDataImportTaskReq {
  task_id?: string;
  space_id?: string;
}

export interface GetTrainingDataImportTaskResp {
  task?: model.TrainingDataImportTask;
}

export interface GetTrainingFileUploadMaterialReq {
  fileName?: string;
  opType?: model.TrainingFileOpType;
  /** Space ID */
  space_id?: string;
}

export interface GetTrainingFileUploadMaterialResp {
  url?: string;
  signature?: string;
}

export interface GetUserProviderAuthStatusRequest {
  spaceID?: string;
  provider?: model.Provider;
}

export interface GetUserProviderAuthStatusResponse {
  /** Whether it has been authorized, when the remaining time is less than one week, it will be set to unauthorized, and the user needs to authorize again at this time. */
  isAuthorized?: boolean;
  /** License remaining time, unit s */
  expiresIn?: Int64;
}

export interface InsertTrainingDataRowsReq {
  dataset_id?: string;
  row_groups?: Array<flow_devops_evaluation_dataset.RowGroup>;
  /** Space ID */
  space_id?: string;
}

export interface InsertTrainingDataRowsResp {
  rowIDs?: Array<string>;
}

export interface ListModelAndAccountRequest {
  spaceID?: Int64;
  isPublicModel?: boolean;
  /** Filter by model state, returning models in all states by default */
  modelStatuses?: Array<model.ModelStatus>;
}

export interface ListModelAndAccountResponse {
  modelAccounts?: Array<ModelAccount>;
}

export interface ListModelRequest {
  spaceID?: Int64;
  /** Filter by model state, returning models in all states by default */
  modelStatuses?: Array<model.ModelStatus>;
}

export interface ListModelResponse {
  models?: Array<model.Model>;
}

export interface ListProviderAccountsBySpaceRequest {
  spaceID: string;
}

export interface ListProviderAccountsBySpaceResponse {
  /** Account list notice: secretKey is not returned here */
  accounts?: Array<model.ProviderAccount>;
  hasOperationPerm?: boolean;
}

export interface ListSftTaskCustomModelsRequest {
  spaceID?: string;
  accountID?: string;
  /** Support Volcano Ark/merlin */
  providerType?: model.Provider;
  nameKeyword?: string;
  /** providerType = merlin */
  userJwtToken?: string;
  pageNum?: number;
  pageSize?: number;
}

export interface ListSftTaskCustomModelsResponse {
  models?: Array<model.SftTaskCustomModel>;
  hasMore?: boolean;
}

export interface ListSftTaskFoundationModelsRequest {
  spaceID?: string;
  accountID?: string;
  providerType?: model.Provider;
  nameKeyword?: string;
  pageNum?: number;
  pageSize?: number;
}

export interface ListSftTaskFoundationModelsResponse {
  models?: Array<model.SftTaskFoundationModel>;
  hasMore?: boolean;
}

export interface ListSftTaskFoundationModelVersionsRequest {
  spaceID?: string;
  accountID?: string;
  modelName?: string;
  trainingType?: model.SftTaskTrainingType;
  trainingMethod?: model.SftTaskTrainingMethod;
  /** Only Volcano Ark is supported. */
  providerType?: model.Provider;
  pageNum?: number;
  pageSize?: number;
}

export interface ListSftTaskFoundationModelVersionsResponse {
  models?: Array<model.SftTaskFoundationModel>;
  hasMore?: boolean;
}

export interface ListSftTaskResourceRequest {
  /** Required, only merlin is supported in this issue. */
  provider?: model.Provider;
  /** Space ID, required for permission verification */
  spaceID?: string;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface ListSftTaskResourceResponse {
  merlinRscClusters?: Array<model.MerlinResourceCluster>;
}

export interface ListSftTasksRequest {
  spaceID?: string;
  accountID?: string;
  creator?: string;
  taskNameKeyWord?: string;
  taskID?: string;
  /** Only Completed is supported for the time being. */
  status?: model.SftTaskStatusPhase;
  /** Not required, maas and merlin are supported. */
  provider?: model.Provider;
  pageNum?: number;
  pageSize?: number;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface ListSftTasksResponse {
  tasks?: Array<model.SftTask>;
  hasMore?: boolean;
}

export interface ListTrainingDataImportTasksReq {
  datasetID?: string;
  taskID?: string;
  withErrLog?: boolean;
  space_id?: string;
  pageSize?: string;
  nextToken?: string;
}

export interface ListTrainingDataImportTasksResp {
  tasks?: Array<model.TrainingDataImportTask>;
  hasMore?: boolean;
  nextToken?: string;
}

export interface ModelAccount {
  model?: model.Model;
  accounts?: Array<model.Account>;
}

export interface ModelContextRange {
  /** Upper limit, no pass means no limit */
  UpperBound?: number;
  /** Lower limit, no pass means no limit */
  LowerBound?: number;
}

export interface ModelFilter {
  /** Model tag filter item, each element inside the list in value is an or relationship when filtering, and each key is an and relationship when filtering */
  modelFilterTags?: Partial<Record<model.ModelFilterKey, Array<string>>>;
  /** model state */
  modelStatuses?: Array<model.ModelStatus>;
  /** The range of context lengths supported by the model */
  modelContextRange?: ModelContextRange;
  /** Model manufacturer */
  modelVendors?: Array<string>;
  /** name keyword */
  name?: string;
  /** Coze space id */
  cozeSpaceID?: Int64;
}

export interface OApiGetSftTaskRequest {
  spaceID?: string;
  taskID?: string;
  Authorization?: string;
}

export interface OApiGetSftTaskResponse {
  task?: model.SftTask;
}

export interface OApiReportSftTaskEventRequest {
  spaceID?: string;
  taskID?: string;
  Authorization?: string;
  eventType?: model.SftTaskRunEventType;
  msg?: string;
  artifact?: model.SftTaskOutput;
  urlInfo?: model.SftTaskProviderURLInfo;
  progress?: model.SftTaskProgress;
  code?: model.SftTaskErrCode;
}

export interface OApiReportSftTaskEventResponse {}

export interface OApiUpdateModelStatusRequest {
  spaceID?: Int64;
  modelID?: Int64;
  Authorization?: string;
  /** SSO Username */
  ssoUsername?: string;
  status?: model.ModelStatus;
}

export interface OApiUpdateModelStatusResponse {}

export interface OApiUpsertModelAndAccountRequest {
  modelAccount?: ModelAccount;
  Authorization?: string;
  /** SSO Username */
  ssoUsername?: string;
}

export interface OApiUpsertModelAndAccountResponse {
  /** Modified model and acccount information */
  modelAccount?: ModelAccount;
}

export interface SaaSGetModelFilterParamsRequest {}

export interface SaaSGetModelFilterParamsResponse {
  modelFilterTags?: Partial<Record<model.ModelFilterKey, Array<string>>>;
  modelContextRange?: ModelContextRange;
  modelVendors?: Array<string>;
}

export interface SaaSListModelRequest {
  cursorID?: string;
  limit?: number;
  /** filter */
  Filter?: ModelFilter;
  /** Because coze can't give the rpc interface for the time being, the backend needs to get the cookie to request the front-end interface of coze. */
  cookie?: string;
}

export interface SaaSListModelResponse {
  models?: Array<model.Model>;
  cursorID?: string;
  hasMore?: boolean;
}

export interface SearchByteTreeNodesRequest {
  name?: string;
  /** English Search */
  i18nSearch?: string;
  /** Search leaf nodes only */
  isLeaf?: boolean;
  /** Parent ID */
  parentID?: Int64;
  /** Search for descendant nodes that meet the conditions under the parent node */
  inherit?: boolean;
  /** Filter according to the resource provider contained in the node, only the leaf node has provider information */
  resourceProvider?: Array<model.ByteTreeNodeResourceProvider>;
  'x-jwt-token'?: string;
}

export interface SearchByteTreeNodesResponse {
  nodes?: Array<model.ByteTreeNode>;
}

export interface SyncModelStatusRequest {
  spaceID: Int64;
  modelID: Int64;
}

export interface SyncModelStatusResponse {}

export interface SyncTrainingDatasetToVolcanoTOSReq {
  dataset_id?: string;
  accountID?: string;
  /** Space ID */
  space_id?: string;
}

export interface SyncTrainingDatasetToVolcanoTOSResp {
  datasetID?: string;
  file?: model.TOSFile;
  isCached?: boolean;
}

export interface TerminateSftTaskRequest {
  spaceID?: string;
  accountID?: string;
  taskID?: string;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface TerminateSftTaskResponse {}

export interface UpdateModelStatusRequest {
  spaceID?: Int64;
  modelID?: Int64;
  status?: model.ModelStatus;
}

export interface UpdateModelStatusResponse {}

export interface UpdateProviderAccountRequest {
  spaceID: string;
  accountID: string;
  provider?: model.Provider;
  name?: string;
  /** [20, 30) provider account */
  maasAccount?: model.MaasAuth;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface UpdateProviderAccountResponse {}

export interface UpdateTrainingDataRowsReq {
  dataset_id?: string;
  row_group?: flow_devops_evaluation_dataset.RowGroup;
  /** Space ID */
  space_id?: string;
}

export interface UpdateTrainingDataRowsResp {
  rowID?: string;
}

export interface UpsertModelAndAccountRequest {
  modelAccount?: ModelAccount;
  /** Required when creating a new merlin model from a fine-tuning task, used to invoke the Bernard service */
  'x-jwt-token'?: string;
}

export interface UpsertModelAndAccountResponse {
  /** Modified model and acccount information */
  modelAccount?: ModelAccount;
}

export interface ValidateProviderAccountRequest {
  spaceID: string;
  isUpdate: boolean;
  provider?: model.Provider;
  maasAccount?: model.MaasAuth;
  /** For JwtToken authentication */
  Authorization?: string;
}

export interface ValidateProviderAccountResponse {
  isValidate?: boolean;
  maasValidate?: model.MaaSAccountValidate;
}
/* eslint-enable */
