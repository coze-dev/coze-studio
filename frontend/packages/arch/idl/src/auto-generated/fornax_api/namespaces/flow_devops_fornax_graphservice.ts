/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as graph from './graph';

export type Int64 = string | number;

export enum GraphStatus {
  Undefined = 0,
  /** No runtime use */
  Unused = 1,
  /** There is runtime use */
  InUse = 2,
  /** Unconfigured slot */
  Unconfigured = 3,
}

export enum IncompatibilityType {
  Undefined = 0,
  SlotDeleted = 1,
  SlotAdded = 2,
  SlotTypeModified = 3,
}

export interface CheckSlotSetCompatibilityReq {
  /** slotSet to verify */
  slotSetID: string;
  clientID: string;
}

export interface CheckSlotSetCompatibilityResp {
  slots?: Array<SlotSetCompatibility>;
  /** Is it compatible? */
  compatibility?: boolean;
}

export interface ClearSlotSetOfClientReq {
  graphID: string;
  clientID: string;
}

export interface ClearSlotSetOfClientResp {}

export interface ClientGraph {
  graphID: string;
  graphUID: string;
  graphName: string;
  graphDesc?: string;
  slotSetID?: string;
  /** slotSet version number */
  slotSetVersion?: string;
  /** Graph state */
  graphStatus?: GraphStatus;
  createdBy?: string;
  updatedBy?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface CreateGraphReq {
  appID: string;
  uid: string;
  name: string;
  desc?: string;
}

export interface CreateGraphResp {
  graphID?: string;
}

export interface CreateSlotSetReq {
  graphID: string;
  nodes: Array<Node>;
  /** Version number conforming to semver2 */
  version: string;
  commitMessage?: string;
}

export interface CreateSlotSetResp {
  slotSetID: string;
}

export interface DeleteGraphReq {
  graphID: string;
}

export interface DeleteGraphResp {}

export interface GetGraphReq {
  graphID: string;
}

export interface GetGraphResp {
  graph?: graph.Graph;
}

export interface GetLatestSlotSetVersionReq {
  graphID: string;
}

export interface GetLatestSlotSetVersionResp {
  /** Maximum version number */
  version?: string;
}

export interface GetLatestSlotsOfClientReq {
  graphID: string;
  clientID: string;
}

export interface GetLatestSlotsOfClientResp {
  nodes: Array<Node>;
  slotSetID?: string;
  slotSetVersion?: string;
  /** Slot version description */
  slotSetMessage?: string;
  /** Slot publishing record ID */
  slotReleaseID?: string;
}

export interface GetSlotSetReq {
  slotSetID: string;
  /** Not returning slot list when false */
  withSlotDetail: boolean;
}

export interface GetSlotSetResp {
  slotSet?: graph.SlotSet;
  /** Slot Node List */
  nodes?: Array<Node>;
}

export interface ListGraphsByClientReq {
  appID: string;
  clientID: string;
}

export interface ListGraphsByClientResp {
  clientGraphs?: Array<ClientGraph>;
  total?: string;
}

export interface ListGraphsBySpaceReq {
  spaceID: string;
}

export interface ListGraphsBySpaceResp {
  graphs: Array<graph.Graph>;
}

export interface ListNodeTemplatesReq {}

export interface ListNodeTemplatesResp {
  nodeTemplates?: Array<graph.NodeTemplate>;
  /** Custom types supported at the server level */
  supportedTypes: Array<graph.TypeDescriptor>;
}

export interface ListSlotSetReleasesOfClientReq {
  graphID: string;
  clientID: string;
}

export interface ListSlotSetReleasesOfClientResp {
  /** Version list, sorted in descending order by update time */
  releases?: Array<SlotSetRelease>;
}

export interface Node {
  uid: string;
  type: graph.NodeType;
  name: string;
  slots?: Array<Slot>;
}

export interface ReleaseSlotSetReq {
  slotSetID: string;
  clients: Array<string>;
  /** Ignore incompatible slots, force release */
  forceRelease: boolean;
}

export interface ReleaseSlotSetResp {}

/** Slot structure for front-end presentation */
export interface Slot {
  uid: string;
  nodeUID?: string;
  nodeName?: string;
  /** For official SlotType, there are customized front-end interactions */
  officialSlotType?: graph.OfficialSlotType;
  schema?: graph.FieldDescriptor;
  /** JSON-encoded value, corresponding to the valueType in SlotSchema */
  value?: string;
  createdBy?: string;
  createdAt?: string;
  updatedBy?: string;
  updatedAt?: string;
}

export interface SlotSetCompatibility {
  nodeUID: string;
  slotUID: string;
  compatibility: boolean;
  incompatType?: IncompatibilityType;
  previous?: Slot;
  current?: Slot;
}

export interface SlotSetRelease {
  id: string;
  slotSetID: string;
  /** The semver2 version number displayed */
  slotSetVersion?: string;
  graphID?: string;
  graphUID?: string;
  clientID?: string;
  /** Structured version information; Rollback: is_revert: 1; Clear: is_clear: 1 */
  releaseLabels?: Record<string, string>;
  /** version description */
  versionMessage?: string;
  /** publisher */
  createdBy?: string;
  /** release time */
  createdAt?: string;
}

export interface UpdateGraphReq {
  graphID: string;
  name?: string;
  desc?: string;
}

export interface UpdateGraphResp {}
/* eslint-enable */
