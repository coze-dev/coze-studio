/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as model from './model';

export type Int64 = string | number;

export enum AIDPMsgOpType {
  Unknown = 0,
  InitItem = 1,
  PassSubmit = 2,
  BackSubmit = 3,
  DiscardSubmit = 4,
  AbandonSubmit = 5,
  DirectSubmit = 6,
  UpdateAnswer = 7,
  SendLabel = 8,
  ExitItem = 9,
}

export enum AnnotatePlatform {
  Undefined = 0,
  AIDP = 1,
}

export enum AuditResultEnum {
  /** not checked */
  Init = 1,
  /** mark qualified */
  Pass = 2,
  /** Failure to mark */
  Reject = 3,
}

export enum AuditStatusEnum {
  /** No moderation operations involved */
  None = 0,
  /** passed */
  Pass = 1,
  /** Recycle */
  Recycle = 2,
  /** call back */
  Back = 3,
}

export enum DatasetFileType {
  Undefined = 0,
  /** JSONL      = 1 */
  CSV = 2,
  PARQUET = 3,
}

export enum DatasetType {
  Undefined = 0,
  /** Data processing dataset */
  Default = 1,
  /** review set */
  Eval = 2,
  /** result set */
  EvalResult = 3,
}

export enum DataSourceType {
  Undefined = 0,
  /** TOS        = 1 */
  HDFS = 2,
}

export enum FieldType {
  /** DefinedText type */
  Undefined = 0,
  String = 1,
  Number = 2,
  Bool = 4,
  Array = 5,
  Object = 6,
  Null = 7,
  /** Dataset native type */
  MarkdownBox = 11,
  Image = 12,
  File = 13,
  JSONString = 14,
  TextFile = 15,
  MultiContent = 16,
}

export enum InterpreterType {
  Undefined = 0,
  Aqua = 1,
  BizIDE = 2,
}

export enum MsgOpType {
  /** Submit of unknown type, it will not appear for the time being. Only use this field to get the bottom value. */
  Unknown = 0,
  /** The title is sent, which is equivalent to IsInit = true in the message. */
  InitItem = 1,
  /** After submission, it is passed, and the title flows to the rear node, which is equivalent to AuditNodeList [$x]. AuditStatus = 1. */
  PassSubmit = 2,
  /** After submission, it is typed back, and the title flows to the front node, which is equivalent to AuditNodeList [$x]. AuditStatus = 3. */
  BackSubmit = 3,
  /** Abandoned commit, equivalent to IsDiscard = true in the message */
  DiscardSubmit = 4,
  /** Submit after clicking invalid */
  AbandonSubmit = 5,
  /** Submit directly, which is equivalent to IsDirectSubmit = true in the message. */
  DirectSubmit = 6,
  /** Update the answer, which is equivalent to IsUpdate = true in the message. */
  UpdateAnswer = 7,
}

export enum RunLogSourceType {
  Undefined = 0,
  /** Text */
  Text = 1,
  /** Read from TOS */
  TOS = 2,
  /** Read from StreamLog */
  StreamLog = 3,
}

export enum ScriptType {
  Undefined = 0,
  Python = 1,
  JavaScript = 2,
}

export enum TaskStatus {
  Undefined = 0,
  /** Initializing now. */
  Initializing = 1,
  /** Running now. */
  Running = 2,
  /** successfully completed */
  Done = 3,
  /** fail */
  Failed = 4,
  /** manual termination */
  Terminated = 5,
  /** Completed successfully, but with errors */
  DoneWithError = 6,
}

export enum TaskType {
  Undefined = 0,
  DataProcessing = 1,
  FineTuning = 2,
}

/** template type
 Notice: This type is incomplete */
export enum TemplateType {
  /** Neeko Type Template */
  Neeko = 1000,
}

export interface AIDPConfig {
  /** AIDP user ID */
  userID?: string;
  /** AIDP Task ID */
  taskID?: string;
  /** AIDP Mission Details Link */
  taskURL?: string;
}

export interface AnnotateStatusDetail {
  /** total data volume */
  inputSize?: string;
  /** amount of data sent */
  sent?: string;
  /** scalded data volume */
  received?: string;
}

export interface AnnotateTask {
  id?: string;
  name?: string;
  spaceID?: string;
  /** platform for labeling data */
  platform?: AnnotatePlatform;
  /** AIDP configuration */
  aidpConfig?: AIDPConfig;
  /** task status */
  status?: TaskStatus;
  /** Annotated data field mapping */
  sendMapConfig?: Array<SendFieldMapping>;
  /** Enter dataset information */
  inputDatasetInfo?: DatasetInfo;
  /** Output dataset information */
  outputDatasetInfo?: DatasetInfo;
  /** bid field */
  receiveFields?: Array<string>;
  /** The reason for the termination/failure of the task */
  terminateReason?: string;
  /** task status details */
  statusDetail?: AnnotateStatusDetail;
  /** creation time */
  createdAt?: string;
  /** Update time, for completed/failed/terminated tasks, end time */
  updatedAt?: string;
  createdBy?: string;
}

export interface DataProcessingTask {
  id?: string;
  name?: string;
  taskType?: TaskType;
  inDataset?: DatasetInfo;
  /** Deprecated, using outDatasets */
  outDataset?: DatasetInfo;
  userScript?: UserScript;
  taskStatus?: TaskStatus;
  trainingDatasetType?: model.TrainingDatasetType;
  /** Output dataset list */
  outDatasets?: Array<DatasetInfo>;
  /** dataset type */
  datasetType?: DatasetType;
  /** Fornax space ID */
  spaceID?: string;
  /** creator ID */
  createdBy?: string;
  /** creation time */
  createdAt?: string;
  /** Updater ID */
  updatedBy?: string;
  /** update time */
  updatedAt?: string;
}

export interface DatasetColumnMapping {
  fromColumn: string;
  toColumn: string;
}

export interface DatasetImportTask {
  id?: string;
  datasetID?: string;
  status?: TaskStatus;
  fileType?: DatasetFileType;
  dataSource?: DataSource;
  overwrite?: boolean;
  /** File size, in bytes */
  totalSize?: number;
  /** Processed data size, in bytes */
  processedSize?: number;
  /** Number of rows processed */
  processedLineCount?: number;
  /** Number of rows imported */
  outputLineCount?: number;
  errLog?: string;
  msg?: string;
  /** bulk import details */
  batchImportDetail?: Array<DataSource>;
  /** Fornax space ID */
  spaceID?: string;
  /** creator ID */
  createdBy?: string;
  /** Creation time, seconds */
  createdAt?: string;
  /** Updater ID */
  updatedBy?: string;
  /** Update time in seconds */
  updatedAt?: string;
}

export interface DatasetInfo {
  id?: string;
  name?: string;
  description?: string;
}

export interface DataSource {
  type?: DataSourceType;
  /** 2: TOSFile         tosFile */
  hdfsPath?: string;
}

export interface ExportDatasetStatusDetail {
  /** Total number of samples in the source dataset */
  totalSamples: Int64;
  /** Number of samples successfully written to the target dataset */
  addedSamples?: Int64;
  /** error message */
  errors?: Array<string>;
}

export interface ExportDatasetTask {
  id?: string;
  spaceID: string;
  fromDatasetID: string;
  columnMappings?: Array<DatasetColumnMapping>;
  toDatasetID?: string;
  /** Overwrite update when true */
  overwrite?: boolean;
  status?: TaskStatus;
  statusDetail?: ExportDatasetStatusDetail;
  createdBy?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface FieldInfo {
  name?: string;
  type?: FieldType;
}

export interface ScriptRunResultItem {
  isSuccess?: boolean;
  input?: string;
  output?: string;
  error?: string;
  latencyInMs?: string;
  /** The name of the dataset expected to be output to. If empty, the target dataset was not found */
  datasetName?: string;
}

export interface SendFieldMapping {
  /** Enter a field name in the dataset */
  inputField?: string;
  /** mapped feed data field name */
  sendField?: string;
}

export interface TaskRun {
  id?: string;
  taskID?: string;
  realInDatasetID?: string;
  totalQty?: string;
  processedQty?: string;
  outputQty?: string;
  scriptHash?: string;
  message?: string;
  status?: TaskStatus;
  createdBy?: string;
  createdAt?: string;
  endedAt?: string;
}

export interface UserScript {
  content?: string;
  scriptType?: ScriptType;
  interpreterType?: InterpreterType;
  templateVersion?: string;
}

export interface UserScriptTemplateConfig {
  version?: string;
  template?: string;
  scriptType?: ScriptType;
  interpreterType?: InterpreterType;
}
/* eslint-enable */
