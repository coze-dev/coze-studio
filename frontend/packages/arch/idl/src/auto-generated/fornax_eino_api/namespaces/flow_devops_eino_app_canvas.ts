/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export interface Branch {
  id: string;
  condition?: Condition;
  source_node_key: string;
  target_node_keys?: Array<string>;
}

export interface CanvasInfo {
  /** Graph name, used in Debugging */
  name?: string;
  /** Render the displayed version, use when Debugging */
  version?: string;
  /** Canvas Graph types, there are currently two (Graph, StateGraph), used when debugging */
  component: string;
  nodes?: Array<Node>;
  edges?: Array<Edge>;
  branches?: Array<Branch>;
  /** Graph trigger mode, Debug need not be concerned for the time being */
  node_trigger_mode?: string;
  /** When the Graph type is StateGraph, the corresponding method name does not need to be concerned about Debug for the time being */
  gen_local_state_method?: string;
}

export interface ComponentSchema {
  component?: string;
  /** Use in orchestration, component type, enumeration value official, custom */
  component_source?: string;
  /** Identification of component implementation, visual orchestration needs to ensure uniqueness */
  identifier?: string;
  /** The method used to generate components during orchestration is globally unique */
  method?: string;
  /** When arranging, fill in the content according to this Schema specification when displaying its title.debug */
  input_type?: JsonSchema;
  /** When arranging only show, show its title. */
  output_type?: JsonSchema;
  /** Orchestration uses, additional configuration of components, filled in according to the Schema specification, interaction_type in Lambda are enumerations: invoke, stream, transform, collect */
  component_extra_schema?: JsonSchema;
  /** When orchestrating, the extra configuration json string of the component is submitted to the execution side */
  component_extra?: string;
  /** When orchestrating, the slot configuration of the component must be a component */
  slots?: Array<Slot>;
  /** When arranging, use the config configuration of the component and fill in the content according to the Schema specification */
  config?: ConfigSchema;
  /** Orchestration uses, additional configuration of components, filled in according to the Schema specification, interaction_type in Lambda are enumerations: invoke, stream, transform, collect */
  extra_property?: ExtraPropertySchema;
  /** When choreographing, the name of the component specific implementation displayed on the UI */
  name?: string;
  /** When arranging, use the additional configuration of the component to express whether the type of input and output can be modified */
  is_io_type_mutable?: boolean;
  /** Orchestration uses additional configuration of components to express the version of the schema */
  version?: string;
}

export interface Condition {
  method: string;
  is_stream?: boolean;
  input_type?: JsonSchema;
}

export interface ConfigSchema {
  schema?: JsonSchema;
  config_input?: string;
  description?: string;
}

export interface Edge {
  id: string;
  name: string;
  source_node_key: string;
  target_node_key: string;
}

export interface ExtraPropertySchema {
  schema?: JsonSchema;
  extra_property_input?: string;
}

export interface GenLocalState {
  is_set?: boolean;
  output_type?: JsonSchema;
}

export interface GoDefinition {
  libraryRef?: Library;
  typeName: string;
  kind: string;
  isPtr: boolean;
}

export interface GraphSchema {
  name: string;
  component: string;
  nodes?: Array<Node>;
  edges?: Array<Edge>;
  branches?: Array<Branch>;
  /** Graph trigger mode, required for orchestration, enumeration value; AnyPredecessor, AllPredecessor */
  node_trigger_mode?: string;
  /** When the Graph type is StateGraph, this parameter is required when the Graph type is GraphState during orchestration */
  gen_local_state?: GenLocalState;
  input_type?: JsonSchema;
  output_type?: JsonSchema;
  /** GraphID, used when debugging */
  id?: string;
}

export interface JsonSchema {
  type: string;
  title?: string;
  description?: string;
  items?: JsonSchema;
  properties?: Record<string, JsonSchema>;
  anyOf?: Array<JsonSchema>;
  additionalProperties?: JsonSchema;
  required?: Array<string>;
  /** custom field */
  propertyOrder?: Array<string>;
  enum?: Array<string>;
  default?: string;
  goDefinition?: GoDefinition;
}

export interface Library {
  module: string;
  version: string;
  pkgPath: string;
}

export interface Node {
  /** Required by the user during orchestration, the same Graph is unique, and it is used for display when debugging. */
  key: string;
  /** Required by the user during orchestration, Debug is not used yet */
  name: string;
  /** Debug use, indicating Node type eg: virtual branch node or Component */
  type: string;
  /** specific component implementation */
  component_schema?: ComponentSchema;
  /** concrete subgraph implementation */
  graph_schema?: GraphSchema;
  /** Use Node Options Parameters, Orchestration */
  node_option?: NodeOption;
  /** Debugging the imported parameters of the start node */
  infer_input?: JsonSchema;
  /** Debug use, whether the node is operable */
  allow_operate?: boolean;
}

export interface NodeOption {
  /** optional */
  input_key?: string;
  /** optional */
  output_key?: string;
  /** Not required, Node requires this hander as an Option parameter */
  used_state_pre_handler?: boolean;
  /** Not required, Node requires this hander as an Option parameter */
  used_state_post_handler?: boolean;
}

export interface Slot {
  component?: string;
  field_loc_path?: string;
  multiple?: boolean;
  required?: boolean;
  component_items?: Array<ComponentSchema>;
  go_definition?: GoDefinition;
}
/* eslint-enable */
