/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';
import * as base from './base';
import * as connector_common from './connector_common';

export type Int64 = string | number;

export enum SegmentAppendType {
  /** Occupancy */
  SegmentAppendType_None = 0,
  /** tail append */
  SegmentAppendType_Tail = 1,
  /** Define in advance, no need this time
head */
  SegmentAppendType_Head = 2,
  /** middle */
  SegmentAppendType_Mid = 3,
}

export enum TableDataType {
  /** Schema sheets and preview data */
  AllData = 0,
  /** Only need schema structure & Sheets */
  OnlySchema = 1,
  /** Just preview the data */
  OnlyPreview = 2,
}

export interface AddSegmentRequest {
  space_id: string;
  document_id: string;
  source_type: common.DocumentSourceType;
  source_file: common.SourceFileInfo;
  user_table_info: DocumentTableTaskInfo;
  append_type: SegmentAppendType;
  /** Define in advance, no need this time */
  append_sequence?: Int64;
  Base?: base.Base;
}

export interface AddSegmentResponse {
  document_id: string;
  /** If it fails, an error code will be returned. */
  code: Int64;
  msg: string;
}

export interface CreateDocumentRequest {
  creator_id?: string;
  dataset_id?: string;
  document?: common.DocumentInfo;
  space_id?: string;
  Base?: base.Base;
}

export interface CreateDocumentResponse {
  id?: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteUserDataSourceRequest {
  data_source_id?: Int64;
  /** You need to delete the files and vector blocks that have been added. */
  need_delete_document?: boolean;
  auth_id?: string;
  connector_id?: connector_common.ConnectorID;
  Base?: base.Base;
}

export interface DeleteUserDataSourceResponse {
  code: Int64;
  msg: string;
}

export interface DelWebDataRequest {
  web_id?: string;
  creator_id?: string;
  Base?: base.Base;
}

export interface DelWebDataResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface DocumentFileInfo {
  name?: string;
  uri?: string;
  document_id?: string;
}

export interface DocumentTableTaskInfo {
  /** User selected sheet id */
  sheet_id: string;
  /** The number of header rows selected by the user, numbered from 0 */
  header_line_idx: string;
  /** User-selected starting line number, numbered from 0 */
  start_line_idx: string;
}

export interface DocumentTaskInfo {
  name?: string;
  uri?: string;
  /** For reslicing */
  document_id?: string;
  /** format type */
  format_type?: common.FormatType;
  /** Table metadata */
  doc_table_meta?: Array<common.DocTableColumn>;
  /** Table parsing information */
  doc_table_info?: DocumentTableTaskInfo;
  source_file_id?: string;
  document_source_type?: common.DocumentSourceType;
}

export interface GetDocumentTableInfoRequest {
  /** If the table is uploaded for the first URL, pass the value */
  submit_web_id?: string;
  /** If the table is uploaded for the first local file, pass the value */
  tos_uri?: string;
  /** If it is a table with an existing document, pass the value */
  document_id?: string;
  /** Creator [http interface does not need to be passed] */
  creator_id?: Int64;
  source_file_id?: string;
  Base?: base.Base;
}

export interface GetDocumentTableInfoResponse {
  code?: number;
  msg?: string;
  sheet_list?: Array<common.DocTableSheet>;
  /** key: sheet_id -> list<common.DocTableColumn> */
  table_meta?: Record<Int64, Array<common.DocTableColumn>>;
  /** key: sheet_id -> list_preview_data */
  preview_data?: Record<Int64, Array<Record<Int64, string>>>;
}

export interface GetTableSchemaInfoRequest {
  /** The tos address of the local file upload, pass the value (wait until the front end is online and migrate to SourceFile) */
  tos_uri?: string;
  /** Table parsing information, default initial value 0, 0, 1 */
  doc_table_info?: DocumentTableTaskInfo;
  /** All data is returned by default without passing it on. */
  table_data_type?: TableDataType;
  /** Pass this value if you need to pull the schema of the current document */
  document_id?: string;
  /** Source file information, add segment/before logic migrate here */
  source_file?: common.SourceFileInfo;
  /** The table preview front end needs to pass the original data table structure */
  origin_table_meta?: Array<common.DocTableColumn>;
  /** The table preview front end needs to pass the data table structure edited by the user */
  preview_table_meta?: Array<common.DocTableColumn>;
  Base?: base.Base;
}

export interface GetTableSchemaInfoResponse {
  code?: number;
  msg?: string;
  sheet_list?: Array<common.DocTableSheet>;
  /** The schema of the selected sheet, not selected to return the first sheet by default */
  table_meta?: Array<common.DocTableColumn>;
  /** The knowledge table will return */
  preview_data?: Array<Record<Int64, string>>;
}

export interface GetTaskProgressV2Request {
  document_id?: Array<string>;
  creator_id?: string;
  Base?: base.Base;
}

export interface GetTaskProgressV2Response {
  data?: Array<TaskProgressDataV2>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ListDocumentRequest {
  dataset_id?: string;
  /** HTTP interface is not passed */
  creator_id?: Int64;
  document_id?: string;
  page?: number;
  size?: number;
  Base?: base.Base;
}

export interface ListDocumentResponse {
  documentsInfo?: Array<common.DocumentInfo>;
  total?: number;
  code?: Int64;
  msg?: string;
}

export interface ProcessDocumentsTaskRequest {
  /** HTTP interface does not need to be passed */
  creator_id?: Int64;
  dataset_id?: string;
  document_infos?: Array<DocumentTaskInfo>;
  rule?: string;
  Base?: base.Base;
}

export interface ProcessDocumentsTaskResponse {
  document_infos?: Array<DocumentFileInfo>;
  code?: Int64;
  msg?: string;
}

export interface ProcessWebDocumentsTaskRequest {
  creator_id?: string;
  dataset_id?: string;
  document_info?: Array<WebDocumentInfo>;
  formatType?: common.FormatType;
  Base?: base.Base;
}

export interface ProcessWebDocumentsTaskResponse {
  document_infos?: Array<DocumentFileInfo>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface QueryWebInfoRequest {
  web_ids?: Array<string>;
  /** Does it contain content? */
  include_content?: boolean;
  creator_id?: string;
  Base?: base.Base;
}

export interface QueryWebInfoResponse {
  data?: Record<Int64, WebInfoData>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ResegmentRequest {
  dataset_id: string;
  document_id: string;
  rule?: string;
  /** format type */
  format_type?: common.FormatType;
  creator_id?: string;
  Base?: base.Base;
}

export interface ResegmentResponse {
  code?: Int64;
  msg?: string;
  document_infos?: DocumentFileInfo;
  BaseResp?: base.BaseResp;
}

export interface SubmitCrawlDataRequest {
  /** web_document */
  web_documents?: Array<WebDocument>;
  /** affiliated datasetID */
  dataset_id?: string;
  Base?: base.Base;
}

export interface SubmitCrawlDataResponse {
  document_infos?: Array<DocumentFileInfo>;
  code?: Int64;
  msg?: string;
}

export interface SubmitWebContentV2Request {
  web_id?: string;
  content?: string;
  Base?: base.Base;
}

export interface SubmitWebContentV2Response {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface SubmitWebUrlRequest {
  web_url?: string;
  /** 0 does not replace subpages. */
  subpages_count?: number;
  creator_id?: string;
  /** File format type */
  format_type?: common.FormatType;
  /** Page title url type required */
  title?: string;
  Base?: base.Base;
}

export interface SubmitWebUrlResponse {
  web_id?: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface TableSchemaValidRequest {
  space_id: string;
  document_id: string;
  /** Information from the source file */
  source_file: common.SourceFileInfo;
  user_table_info: DocumentTableTaskInfo;
  Base?: base.Base;
}

export interface TableSchemaValidResponse {
  column_valid_result?: Record<string, string>;
  /** If it fails, an error code will be returned. */
  code: Int64;
  msg: string;
}

export interface TaskProgressData {
  document_id?: string;
  progress?: number;
  status?: common.DocumentStatus;
  /** A detailed description of the status; if the slice fails, a failure message is returned */
  status_descript?: string;
}

export interface TaskProgressDataV2 {
  document_id?: string;
  progress?: number;
  status?: common.DocumentStatus;
  /** A detailed description of the status; if the slice fails, a failure message is returned */
  status_descript?: string;
  document_name?: string;
}

export interface UpdateDocumentV2Request {
  creator_id?: string;
  document_id?: string;
  status?: common.DocumentStatus;
  document_name?: string;
  table_meta?: Array<common.DocTableColumn>;
  Base?: base.Base;
}

export interface UpdateDocumentV2Response {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UpdateWebRuleRequest {
  document_id?: string;
  update_type?: common.DocumentUpdateType;
  update_interval?: number;
  creator_id?: string;
  Base?: base.Base;
}

export interface UpdateWebRuleResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ValidateUnitNameRequest {
  space_id: string;
  dataset_id: string;
  unit_name: string;
  format_type: common.FormatType;
  document_id?: string;
  Base?: base.Base;
}

export interface ValidateUnitNameResponse {
  /** If it fails, an error code will be returned. */
  code: Int64;
  msg: string;
}

export interface WebDocument {
  /** Title (table name) */
  title?: string;
  /** header */
  headers?: Array<string>;
  /** Full information captured */
  content?: Array<Record<string, string>>;
  /** Type (document/form) */
  format_type?: common.FormatType;
  /** URL of the crawl page */
  url?: string;
  /** XPATH for crawling information */
  marks?: Record<string, string>;
}

export interface WebDocumentInfo {
  web_id?: string;
  update_type?: common.DocumentUpdateType;
  /** Update interval 0 means no update */
  update_interval?: number;
  sub_web_ids?: Array<string>;
  /** If there is an update */
  document_id?: string;
  /** Table type metadata */
  table_meta?: Array<common.DocTableColumn>;
  /** The original table type metadata deprecated is useless in the service code */
  orig_table_meta?: Array<common.DocTableColumn>;
  name?: string;
}

export interface WebInfo {
  id?: string;
  url?: string;
  content?: string;
  title?: string;
  subpages?: Array<WebInfo>;
  subpages_count?: number;
  status?: common.WebInfoStatus;
}

export interface WebInfoData {
  progress?: number;
  web_info?: WebInfo;
  status?: common.WebInfoStatus;
  status_descript?: string;
}
/* eslint-enable */
