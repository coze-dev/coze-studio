/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as volcano_database from './volcano_database';
import * as base from './base';

export type Int64 = string | number;

export enum ActionKey {
  /** copy */
  Copy = 1,
  /** delete */
  Delete = 2,
  /** enable/disable */
  EnableSwitch = 3,
  /** edit */
  Edit = 4,
  /** Cross-spatial replication */
  CrossSpaceCopy = 10,
}

export enum BotTableRWMode {
  /** single user mode */
  LimitedReadWrite = 1,
  /** read-only mode */
  ReadOnly = 2,
  /** multi-user mode */
  UnlimitedReadWrite = 3,
  /** Max boundary value */
  RWModeMax = 4,
}

export enum BotTableStatus {
  /** It's online now. */
  Online = 1,
  /** delete */
  Delete = 2,
}

export enum ColumnType {
  Unknown = 0,
  /** Text */
  Text = 1,
  /** number */
  Number = 2,
  /** time */
  Date = 3,
  /** float */
  Float = 4,
  /** bool */
  Boolean = 5,
  /** picture */
  Image = 6,
}

/** *****  bot_table start   ******* */
export enum DatabaseType {
  All = -1,
  /** Database created on Coze */
  Coze = 0,
  /** Volcano Engine Database */
  Volcano = 1,
}

export enum FieldFunction {
  /** Current timestamp */
  CURRENT_TIMESTAMP = 1,
  /** Current date */
  CURRENT_DATE = 2,
  /** Current time */
  CURRENT_TIME = 3,
  /** Current date and time (equivalent to CURRENT_TIMESTAMP) */
  NOW = 4,
  /** Current UTC timestamp */
  UTC_TIMESTAMP = 5,
  /** Current UTC date */
  UTC_DATE = 6,
  /** Current UTC time */
  UTC_TIME = 7,
  /** Generate UUID */
  UUID = 8,
  /** Generate random numbers */
  RAND = 9,
  /** current user */
  USER = 10,
  /** current database */
  DATABASE = 11,
  /** MySQL version */
  VERSION = 12,
  /** Last Inserted ID */
  LAST_INSERT_ID = 13,
}

export enum FieldItemType {
  Unknown = 0,
  /** Text */
  Text = 1,
  /** number */
  Number = 2,
  /** time */
  Date = 3,
  /** float */
  Float = 4,
  /** bool */
  Boolean = 5,
  /** binary */
  Binary = 6,
}

export enum OperateType {
  Insert = 1,
  Update = 2,
  Delete = 3,
  Select = 4,
}

export enum Operation {
  /** "=" */
  EQUAL = 1,
  /** "< >" or "! =" */
  NOT_EQUAL = 2,
  /** ">" */
  GREATER_THAN = 3,
  /** "<" */
  LESS_THAN = 4,
  /** ">=" */
  GREATER_EQUAL = 5,
  /** "<=" */
  LESS_EQUAL = 6,
  /** "IN" */
  IN = 7,
  /** "NOT IN" */
  NOT_IN = 8,
  /** "IS NULL" */
  IS_NULL = 9,
  /** "IS NOT NULL" */
  IS_NOT_NULL = 10,
  /** "LIKE" fuzzy match string */
  LIKE = 11,
  /** "NOT LIKE" inverse fuzzy match */
  NOT_LIKE = 12,
}

export enum PublishStatus {
  /** unpublished */
  UnPublished = 1,
  /** Published */
  Published = 2,
}

export enum RefType {
  NoRef = 0,
  Bot = 1,
  ChatGroup = 2,
}

export enum SceneType {
  /** bot personality description */
  BotPersona = 1,
  /** Text description of the model given by the developer */
  ModelDesc = 2,
}

export enum ScopeType {
  Draft = 1,
  Online = 2,
  All = 3,
}

export enum SortDirection {
  ASC = 1,
  Desc = 2,
}

export enum TableDataType {
  /** Schema sheets and preview data */
  AllData = 0,
  /** Only need schema structure & Sheets */
  OnlySchema = 1,
  /** Just preview the data */
  OnlyPreview = 2,
}

export enum TableRWMode {
  ReadWrite = 1,
  ReadOnly = 2,
  DisableDelete = 3,
  RWModeMax = 4,
}

export enum TableType {
  /** draft */
  DraftTable = 1,
  /** online */
  OnlineTable = 2,
}

export interface AddDatabaseRequest {
  /** creator id */
  creator_id?: string;
  /** ID of space */
  space_id?: string;
  /** project id */
  project_id?: string;
  /** avatar url */
  icon_uri?: string;
  /** table name */
  table_name?: string;
  /** table description */
  table_desc?: string;
  /** Field information */
  field_list?: Array<FieldItem>;
  /** Read and write mode, single user mode/multi-user mode */
  rw_mode?: BotTableRWMode;
  /** Whether to support prompt calls */
  prompt_disabled?: boolean;
  /** extended information */
  extra_info?: Record<string, string>;
  database_type?: DatabaseType;
  volcano_database_bind_info?: volcano_database.VolcanoDatabaseBindInfo;
  /** Volcanic region id */
  region_id?: string;
  Base?: base.Base;
}

export interface AlterBotTableRequest {
  /** Modify table information */
  bot_table?: BotTable;
  Base?: base.Base;
}

export interface AlterBotTableResponse {
  /** table id */
  table_id?: string;
  BaseResp: base.BaseResp;
}

export interface BinaryDefault {
  value?: Blob;
}

export interface BindDatabaseToBotRequest {
  /** Draft data database table primary key id, note that it is draft state */
  database_id?: string;
  /** bot_id */
  bot_id?: string;
  Base?: base.Base;
}

export interface BindDatabaseToBotResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface BoolDefault {
  value?: boolean;
}

export interface BotTable {
  /** Autoincrement id, table id */
  id?: string;
  /** Related id bot_id */
  bot_id?: string;
  /** table_id */
  table_id?: string;
  /** table name */
  table_name?: string;
  /** table description */
  table_desc?: string;
  /** state */
  status?: BotTableStatus;
  /** Creating the ID. */
  creator_id?: Int64;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** Field information */
  field_list?: Array<FieldItem>;
  /** Data table actual name */
  actual_table_name?: string;
  /** read and write mode */
  rw_mode?: BotTableRWMode;
  /** extended information */
  extra_info?: Record<string, string>;
}

export interface ComplexCondition {
  conditions?: Array<Condition>;
  /** In order to expand, we don't need to */
  nestedConditions?: ComplexCondition;
  /** "AND" or "OR" */
  logic: string;
}

export interface Condition {
  /** Lvalue field name */
  left: string;
  operation: Operation;
  /** rvalue */
  right: string;
}

export interface ConnectorInfo {
  ConnectorID?: Int64;
  ConnectorName?: string;
  ConnectorIDStr?: string;
}

export interface Criterion {
  conditions?: Array<Condition>;
  logic_expression?: string;
}

export interface DatabaseFileProgressData {
  file_name?: string;
  progress?: number;
  /** Describe the information if there is a representative file processing failure */
  status_descript?: string;
}

export interface DatabaseInfo {
  /** online_database_info primary key id */
  id?: string;
  /** ID of space */
  space_id?: string;
  /** project id */
  project_id?: string;
  /** Table ID on the datamodel side */
  datamodel_table_id?: string;
  /** avatar url */
  icon_url?: string;
  /** avatar url */
  icon_uri?: string;
  /** table name */
  table_name?: string;
  /** table description */
  table_desc?: string;
  /** state */
  status?: BotTableStatus;
  /** creator id */
  creator_id?: string;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** Field information */
  field_list?: Array<FieldItem>;
  /** Data table actual name */
  actual_table_name?: string;
  /** read and write mode */
  rw_mode?: BotTableRWMode;
  /** Whether to support prompt calls */
  prompt_disabled?: boolean;
  /** Is it visible? */
  is_visible?: boolean;
  /** ID corresponding to draft state */
  draft_id?: string;
  /** Related id. bot_id, the old one is available, the new one is not. */
  bot_id?: string;
  /** extended information */
  extra_info?: Record<string, string>;
  /** Has it been added to the bot? */
  is_added_to_bot?: boolean;
  /** 0 = coze knowledge base 1 = volcano knowledge base */
  database_type?: DatabaseType;
  volcano_storage_config?: volcano_database.VolcanoStorageConfig;
}

export interface DateDefault {
  /** Dynamic functions (such as CURRENT_TIMESTAMP) */
  func?: FieldFunction;
  /** Dynamic functions at update time */
  on_update?: FieldFunction;
  /** Static value (format: YYYY-MM-DD) */
  value?: string;
}

export interface DateTimeDefault {
  /** Dynamic functions (such as CURRENT_TIMESTAMP) */
  func?: FieldFunction;
  /** Dynamic functions at update time */
  on_update?: FieldFunction;
  /** Static value (format: YYYY-MM-DD HH: MM: SS) */
  value?: string;
}

export interface DecimalDefault {
  value?: string;
}

export interface DeleteBotTableRequest {
  related_id: string;
  table_id: string;
  user_id?: Int64;
  Base?: base.Base;
}

export interface DeleteBotTableResponse {
  /** table id */
  table_id?: string;
  BaseResp: base.BaseResp;
}

export interface DeleteDatabaseRequest {
  /** database_info primary key id */
  id?: string;
  Base?: base.Base;
}

export interface DeleteDatabaseResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

/** For display, the implementer provides display information */
export interface DisplayResourceInfo {
  /** Resource ID */
  ResID?: Int64;
  /** resource description */
  Desc?: string;
  /** Resource Icon, full url */
  Icon?: string;
  /** Resource status, each type of resource defines itself */
  BizResStatus?: number;
  /** Whether to enable multi-person editing */
  CollaborationEnable?: boolean;
  /** Business carry extended information to res_type distinguish, each res_type defined schema and meaning is not the same, need to judge before use res_type */
  BizExtend?: Record<string, string>;
  /** Different types of different operation buttons are agreed upon by the resource implementer and the front end. Return is displayed, if you want to hide a button, do not return; */
  Actions?: Array<ResourceAction>;
  /** Whether to ban entering the details page */
  DetailDisable?: boolean;
  /** resource name */
  Name?: string;
  /** Resource release status, 1 - unpublished, 2 - published */
  PublishStatus?: PublishStatus;
  /** Last edited, unix timestamp */
  EditTime?: Int64;
  ResSubType?: number;
}

export interface EnumDefault {
  value?: string;
}

/** struct VolcanoDBFieldItem {
    1: string        name
    2: string        desc
    3: FieldItemType type
    4: bool          must_required
    5: i64 id//This field is only used to determine whether it is published. If it is not 0, it is published. The front end cannot modify the field type for the published field.er it is published. If it is not 0, it is published. The front end cannot modify the field type for the published field.
    6: i64 alterId//When modifying a field (alter, publish), it is used to judge additions and deletions. 0 means new additions, and non-0 means modification or deletion. used to judge additions and deletions. 0 means new additions, and non-0 means modification or deletion.
    7: bool is_primary_key//whether it is the primary key the primary key?
    8: FieldDefault default_value//Defaultault value
    9: map < string, string > map_ext_meta//business custom extension field metadata extension field metadata
} */
export interface FieldDefault {
  /** CHAR、VARCHAR、TEXT */
  default_text?: TextDefault;
  /** INT、TINYINT、SMALLINT、MEDIUMINT、BIGINT */
  default_number?: NumberDefault;
  /** FLOAT、DOUBLE */
  default_float?: FloatDefault;
  /** DECIMAL */
  default_decimal?: DecimalDefault;
  /** BOOL、BOOLEAN */
  default_bool?: BoolDefault;
  /** DATE */
  default_date?: DateDefault;
  /** DATETIME */
  default_datetime?: DateTimeDefault;
  /** TIMESTAMP */
  default_timestamp?: TimestampDefault;
  /** TIME */
  default_time?: TimeDefault;
  /** ENUM */
  default_enum?: EnumDefault;
  /** SET */
  default_set?: SetDefault;
  /** JSON */
  default_json?: JsonDefault;
  /** BLOB、BINARY、VARBINARY */
  default_binary?: BinaryDefault;
}

export interface FieldItem {
  name?: string;
  desc?: string;
  type?: FieldItemType;
  must_required?: boolean;
  /** This field is only used to determine whether it is published. If it is not 0, it is published. The front end cannot modify the field type for the published field. */
  id?: Int64;
  /** When modifying a field (alter, publish), it is used to judge additions and deletions. 0 means new additions, and non-0 means modification or deletion. */
  alterId?: Int64;
  /** Is it a system field? */
  is_system_field?: boolean;
  /** Is it the primary key? */
  is_primary_key?: boolean;
  /** default value */
  default_value?: FieldDefault;
  /** default value */
  default_value_str?: string;
  /** Business custom extension field metadata */
  map_ext_meta?: Record<string, string>;
  /** The original data type (currently the volcano database returns this field) */
  origin_type?: string;
}

export interface FloatDefault {
  value?: number;
}

export interface GetBotTableRequest {
  creator_id?: Int64;
  bot_id?: string;
  table_ids?: Array<string>;
  table_type: TableType;
  Base?: base.Base;
}

export interface GetBotTableResponse {
  BotTableList?: Array<BotTable>;
  BaseResp: base.BaseResp;
}

export interface GetDatabaseFileProgressRequest {
  database_id?: string;
  /** Table type */
  table_type: TableType;
  Base?: base.Base;
}

export interface GetDatabaseFileProgressResponse {
  data?: DatabaseFileProgressData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetDatabaseTemplateRequest {
  database_id?: string;
  /** Table type */
  table_type: TableType;
  Base?: base.Base;
}

export interface GetDatabaseTemplateResponse {
  /** Download address */
  TosUrl?: string;
  BaseResp?: base.BaseResp;
}

export interface GetModeConfigRequest {
  /** bot id */
  bot_id: Int64;
  /** line of business id */
  connector_id?: Int64;
  /** line of business user id */
  connector_uid?: string;
  Base?: base.Base;
}

export interface GetModeConfigResponse {
  code?: number;
  msg?: string;
  mode?: string;
  bot_id?: Int64;
  max_table_num?: Int64;
  max_column_num?: Int64;
  max_capacity_kb?: Int64;
  max_row_num?: Int64;
  BaseResp?: base.BaseResp;
}

export interface GetNL2SQLRequest {
  /** Natural language description of database requests */
  text: string;
  /** bot id */
  bot_id: Int64;
  /** line of business id */
  connector_id?: Int64;
  /** line of business user id */
  connector_uid?: string;
  /** Table types, draft and online */
  table_type: TableType;
  /** Database ID */
  database_id?: string;
  Base?: base.Base;
}

export interface GetNL2SQLResponse {
  code?: number;
  msg?: string;
  sql: string;
  extraMap?: Record<string, string>;
  BaseResp?: base.BaseResp;
}

export interface GetOnlineDatabaseIdRequest {
  /** The draft database_id */
  id: string;
  Base?: base.Base;
}

export interface GetOnlineDatabaseIdResponse {
  /** Check the online id according to the id of the draft. */
  id?: string;
  BaseResp: base.BaseResp;
}

export interface GetSpaceConnectorListRequest {
  SpaceId: string;
  /** release inhouse */
  Version?: string;
  ConnectorID?: Int64;
  ListAll?: boolean;
  Base?: base.Base;
}

export interface GetSpaceConnectorListResponse {
  ConnectorList?: Array<ConnectorInfo>;
  BaseResp?: base.BaseResp;
}

export interface GetTableSchemaRequest {
  /** Table parsing information, default initial value 0, 0, 1 */
  table_sheet?: TableSheet;
  /** All data is returned by default without passing it on. */
  table_data_type?: TableDataType;
  /** Compatible with pre-refactoring versions: pass this value if you need to pull the schema of the current document */
  database_id?: string;
  /** Source file information, add segment/before logic migrate here */
  source_file?: SourceInfo;
  Base?: base.Base;
}

export interface InsertBotTableRequest {
  /** Save table information */
  bot_table?: BotTable;
  Base?: base.Base;
}

export interface InsertBotTableResponse {
  /** table id */
  table_id?: string;
  BaseResp: base.BaseResp;
}

export interface JsonDefault {
  value?: string;
}

export interface ListDatabaseRecordsRequest {
  /** database_id */
  database_id: string;
  /** bot id, here is to fill in this when looking for the draft state data associated with the bot */
  bot_id?: string;
  /** workflow_id,, here is to fill in this when looking up wk_flow associated draft status sheet */
  workflow_id?: string;
  /** Is true does not filter by user_id Records */
  not_filter_by_user_id?: boolean;
  /** Records not filtered by ConnectorID */
  not_filter_by_connector_id?: boolean;
  /** Do you want to check the draft state or the online state? */
  table_type?: TableType;
  /** Do not exceed 100, 50 is recommended. */
  limit?: Int64;
  /** Offset */
  offset?: Int64;
  /** Data is not isolated under the same project */
  project_id?: string;
  /** filter criteria */
  filter_criterion?: ComplexCondition;
  /** sort condition */
  order_by_list?: Array<OrderBy>;
  Base?: base.Base;
}

export interface ListDatabaseRecordsResponse {
  data: Array<Record<string, string>>;
  HasMore: boolean;
  TotalNum: number;
  /** Field information */
  field_list?: Array<FieldItem>;
  BaseResp: base.BaseResp;
}

export interface ListDatabaseRequest {
  /** Get a database created by a user */
  creator_id?: string;
  /** Get the database under the project */
  project_id?: string;
  /** Get the visible database under space */
  space_id?: string;
  /** Filter bot_id to filter out databases that have been added to the bot */
  bot_id?: string;
  /** Table name, fuzzy search */
  table_name?: string;
  /** Draft database */
  table_type: TableType;
  /** sort */
  order_by?: Array<OrderBy>;
  offset?: number;
  limit?: number;
  /** filter criteria */
  filter_criterion?: Criterion;
  /** sort condition */
  order_by_list?: Array<OrderBy>;
  /** Database Type 0-coze 1-volcano */
  database_type?: DatabaseType;
  Base?: base.Base;
}

export interface ListDatabaseResponse {
  database_info_list?: Array<DatabaseInfo>;
  has_more?: boolean;
  total_count?: Int64;
  BaseResp: base.BaseResp;
}

export interface MigrateOldDataRequest {
  /** Which table to migrate */
  bot_type?: TableType;
  /** Which bot to migrate? */
  bot_id?: string;
  /** Failed retry */
  table_ids?: Array<string>;
  Base?: base.Base;
}

export interface MigrateOldDataResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface NumberDefault {
  auto_increment?: boolean;
  value?: Int64;
}

export interface OrderBy {
  field?: string;
  direction?: SortDirection;
}

export interface RecommendDataModelRequest {
  bot_id: string;
  scene_type: SceneType;
  text?: string;
  Base?: base.Base;
}

export interface RecommendDataModelResponse {
  bot_table_list?: Array<BotTable>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface RefInfo {
  /** reference type */
  ref_type?: RefType;
  /** reference id */
  ref_id?: string;
}

export interface ResetBotTableRequest {
  creator_id?: string;
  bot_id?: string;
  table_id?: string;
  table_type: TableType;
  /** line of business id */
  connector_id?: Int64;
  /** line of business user id */
  connector_uid?: string;
  /** Workflow ID */
  workflow_id?: string;
  /** user id */
  database_info_id?: string;
  /** Project ID */
  project_id?: string;
  Base?: base.Base;
}

export interface ResetBotTableResponse {
  code?: Int64;
  msg?: string;
}

/** Library Resource Operations */
export interface ResourceAction {
  /** An operation corresponds to a unique key, and the key is constrained by the resource side */
  key: ActionKey;
  /** ture = can operate this Action, false = grey out */
  enable: boolean;
}

export interface Row {
  values?: Array<UpsertValues>;
}

export interface SearchBotTableInfoRequest {
  /** Search term, currently ignored */
  key_word?: string;
  limit?: Int64;
  offset?: Int64;
  /** user id */
  connector_uid?: string;
  connector_id?: Int64;
  /** bot id */
  bot_id?: string;
  /** Currently ignored */
  table_name?: string;
  table_id?: string;
  /** citation information */
  ref_info?: RefInfo;
  Base?: base.Base;
}

export interface SearchBotTableInfoResponse {
  data: Array<Record<string, string>>;
  HasMore: boolean;
  TotalNum: number;
  BaseResp: base.BaseResp;
}

export interface SelectFieldList {
  FieldID: Array<string>;
  isDistinct: boolean;
}

export interface SetDefault {
  value?: Array<string>;
}

export interface SingleDatabaseRequest {
  /** database_info primary key id */
  id?: string;
  /** Whether the incoming data is in draft form, the default is false. */
  is_draft?: boolean;
  /** Do you need system fields? */
  need_sys_fields?: boolean;
  /** The version number is not passed on, and the default is the latest. */
  version?: string;
  Base?: base.Base;
}

export interface SingleDatabaseResponse {
  database_info?: DatabaseInfo;
  BaseResp: base.BaseResp;
}

export interface SourceInfo {
  /** TOS address for local file upload */
  tos_uri?: string;
  /** imagex_uri, and tos_uri choose one, imagex_uri priority, need to get data and sign url through imagex method */
  imagex_uri?: string;
}

export interface SqlParamVal {
  value_type: FieldItemType;
  is_null: boolean;
  value?: string;
  name?: string;
  origin_type?: string;
}

export interface SubmitDatabaseInsertRequest {
  database_id?: string;
  file_uri?: string;
  /** Table type, do you want to insert into the draft table or the online table? */
  table_type?: TableType;
  table_sheet?: TableSheet;
  /** Channel ID to write to */
  connector_id?: string;
  Base?: base.Base;
}

export interface SubmitDatabaseInsertResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface TableInfo {
  /** online_database_info primary key id */
  id?: string;
  /** avatar url */
  icon_url?: string;
  /** table name */
  table_name?: string;
  /** table description */
  table_desc?: string;
  /** creator id */
  creator_id?: string;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** project id */
  project_id?: string;
  icon_uri?: string;
  /** database type */
  database_type?: DatabaseType;
}

export interface TableSheet {
  /** User selected sheet id */
  sheet_id?: string;
  /** The number of header rows selected by the user, numbered from 0 */
  header_line_idx?: string;
  /** User-selected starting line number, numbered from 0 */
  start_line_idx?: string;
}

export interface TextDefault {
  /** Default values for CHAR, VARCHAR, TEXT */
  value?: string;
}

export interface TimeDefault {
  /** Dynamic functions (such as CURRENT_TIMESTAMP) */
  func?: FieldFunction;
  /** Dynamic functions at update time */
  on_update?: FieldFunction;
  /** Static value (format: HH: MM: SS) */
  value?: string;
}

export interface TimestampDefault {
  /** Dynamic functions (such as CURRENT_TIMESTAMP) */
  func?: FieldFunction;
  /** Dynamic functions at update time */
  on_update?: FieldFunction;
  /** Static value (format: YYYY-MM-DD HH: MM: SS) */
  value?: string;
}

export interface UpdateDatabaseBotSwitchRequest {
  bot_id: string;
  database_id: string;
  /** Whether to disable prompt */
  prompt_disable: boolean;
  Base?: base.Base;
}

export interface UpdateDatabaseBotSwitchResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UpdateDatabaseRecordsRequest {
  /** database_id */
  database_id: string;
  /** new */
  record_data_add?: Array<Record<string, string>>;
  /** modified */
  record_data_alter?: Array<Record<string, string>>;
  /** deleted */
  record_data_delete?: Array<Record<string, string>>;
  /** Is the draft state or online state to be updated? */
  table_type?: TableType;
  /** The connector id needs to be inserted when updating. */
  ori_connector_id?: string;
  Base?: base.Base;
}

export interface UpdateDatabaseRecordsResponse {
  data: Array<Record<string, string>>;
  BaseResp: base.BaseResp;
}

export interface UpdateDatabaseRequest {
  /** database_info primary key id */
  id?: string;
  /** avatar url */
  icon_uri?: string;
  /** table name */
  table_name?: string;
  /** table description */
  table_desc?: string;
  /** Field information */
  field_list?: Array<FieldItem>;
  /** Read and write mode, single user mode/multi-user mode */
  rw_mode?: BotTableRWMode;
  /** Whether to support prompt calls */
  prompt_disabled?: boolean;
  /** extended information */
  extra_info?: Record<string, string>;
  Base?: base.Base;
}

export interface UpsertValues {
  field_id?: string;
  field_value?: string;
}

export interface ValidateTableSchemaRequest {
  space_id?: string;
  database_id?: string;
  /** Information from the source file */
  source_file?: SourceInfo;
  table_sheet?: TableSheet;
  table_type?: TableType;
  Base?: base.Base;
}

export interface ValidateTableSchemaResponse {
  schema_valid_result?: Record<string, string>;
  /** If it fails, an error code will be returned. */
  code: Int64;
  msg: string;
}
/* eslint-enable */
