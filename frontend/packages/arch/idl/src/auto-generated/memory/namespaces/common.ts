/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as data_connector_common from './data_connector_common';

export type Int64 = string | number;

export enum ColumnType {
  Unknown = 0,
  /** Text */
  Text = 1,
  /** number */
  Number = 2,
  /** time */
  Date = 3,
  /** float */
  Float = 4,
  /** bool */
  Boolean = 5,
  /** picture */
  Image = 6,
}

export enum DataSetStatus {
  DataSetprocessing = 0,
  DataSetReady = 1,
  DataSetFailed = 9,
}

export enum DatasetType {
  Coze = 0,
  Volcano = 1,
}

export enum DocumentSourceType {
  /** local upload */
  Document = 0,
  /** url */
  Web = 1,
  /** custom type */
  Custom = 2,
  /** three parties */
  ThirdParty = 3,
  /** front-end crawl */
  FrontCrawl = 4,
  Notion = 101,
  GoogleDrive = 102,
  FeishuWeb = 103,
  LarkWeb = 104,
  WeChat = 109,
}

export enum DocumentStatus {
  /** Uploading */
  Processing = 0,
  /** take effect */
  Enable = 1,
  /** failure */
  Disable = 2,
  /** delete */
  Deleted = 3,
  /** In rescaling, the front end and upstream do not perceive this state */
  Resegment = 4,
  /** Refreshing (will be deleted after successful refresh) */
  Refreshing = 5,
  /** fail */
  Failed = 9,
}

export enum DocumentUpdateType {
  NoUpdate = 0,
  Cover = 1,
  Append = 2,
}

/** file type */
export enum FormatType {
  /** Text */
  Text = 0,
  /** form */
  Table = 1,
  /** Image, not yet supported */
  Image = 2,
  /** database */
  Database = 3,
  /** Volcanic structure, unique to the volcanic knowledge base */
  VolcanoStructured = 4,
  /** Volcanoes are unstructured and unique to the Volcano Knowledge Base */
  VolcanoUnstructured = 5,
}

export enum SliceStatus {
  /** unvectorized */
  PendingVectoring = 0,
  /** vectorized */
  FinishVectoring = 1,
  /** disable */
  Deactive = 9,
  /** The review failed. */
  AuditFailed = 1000,
}

export enum VolcanoDatasetServiceStatus {
  DatasetServiceValid = 0,
  DatasetServiceInvalid = 1,
}

export enum VolcanoDatasetStatus {
  DatasetValid = 0,
  DatasetInvalid = 1,
}

export enum WebInfoStatus {
  /** Processing */
  Handling = 0,
  /** Completed. */
  Finish = 1,
  /** fail */
  Failed = 2,
}

export interface DataSetInfo {
  data_set_id?: string;
  /** Dataset name */
  name?: string;
  /** file list */
  file_list?: Array<string>;
  /** All file sizes */
  all_file_size?: Int64;
  /** Bot count */
  bot_used_count?: number;
  status?: DataSetStatus;
  /** File in process */
  processing_file_list?: Array<string>;
  /** Update time, second timestamp */
  update_time?: number;
  icon_url?: string;
  description?: string;
  icon_uri?: string;
  /** Can it be edited? */
  can_edit?: boolean;
  /** Creation time, second timestamp */
  create_time?: number;
  /** creator ID */
  creator_id?: string;
  /** Space ID */
  space_id?: Int64;
  creator_name?: string;
  avatar_url?: string;
  /** Processing failed files */
  failed_file_list?: Array<string>;
  format_type?: FormatType;
  /** 0 = coze knowledge base 1 = volcano knowledge base */
  dataset_type?: DatasetType;
  /** storage_config details */
  storage_config?: StorageConfig;
}

/** Table column information */
export interface DocTableColumn {
  /** Column ID */
  id?: string;
  /** listing */
  column_name?: string;
  /** Is it a semantically matched column? */
  is_semantic?: boolean;
  /** List the serial number originally in excel */
  sequence?: string;
  /** column type */
  column_type?: ColumnType;
  contains_empty_value?: boolean;
  /** describe */
  desc?: string;
}

export interface DocTableSheet {
  /** Number of sheet */
  id?: Int64;
  /** Sheet name */
  sheet_name?: string;
  /** total number of rows */
  total_row?: Int64;
}

export interface DocumentInfo {
  name?: string;
  document_id?: string;
  /** file link */
  tos_uri?: string;
  /** Number of bots used */
  bot_used_count?: number;
  /** creation time */
  create_time?: number;
  /** update time */
  update_time?: number;
  /** founder */
  creator_id?: string;
  /** number of segments included */
  slice_count?: number;
  type?: string;
  /** File size, number of bytes */
  size?: number;
  /** character count */
  char_count?: number;
  /** state */
  status?: DocumentStatus;
  /** hit count */
  hit_count?: number;
  /** enumeration */
  source_type?: DocumentSourceType;
  /** update type */
  update_type?: DocumentUpdateType;
  /** update interval */
  update_interval?: number;
  /** slicing rule */
  rule?: string;
  /** file type */
  format_type?: FormatType;
  /** Table type metadata */
  table_meta?: Array<DocTableColumn>;
  /** URL address */
  web_url?: string;
  /** Details of the status; if the slice fails, return the failure information */
  status_descript?: string;
  source_file_id?: string;
  is_disconnect?: boolean;
  /** Deprecated */
  data_source_type?: data_connector_common.DataSourceType;
}

export interface SliceInfo {
  slice_id?: string;
  content?: string;
  status?: SliceStatus;
  /** hit count */
  hit_count?: string;
  /** character count */
  char_count?: string;
  /** number of tokens */
  token_count?: string;
  /** serial number */
  sequence?: string;
}

export interface SourceFileInfo {
  /** Local: the tos address of the local file upload */
  tos_uri?: string;
  /** Web url: If the URL is uploaded for the first time, pass the value */
  submit_web_id?: string;
  /** Google feishu...: three-way source file id */
  source_file_id?: string;
  source_type?: DocumentSourceType;
  /** custom json list<map<string, string>> */
  custom_content?: string;
}

export interface StorageConfig {
  volcano_dataset_config?: VolcanoDataset;
}

export interface VolcanoDataset {
  /** Volcano side knowledge base id string */
  id?: string;
  /** name */
  name?: string;
  /** Type, structured or unstructured knowledge base */
  format_type?: FormatType;
  /** Volcano Knowledge Base Details Link */
  link?: string;
  /** Volcano Knowledge Base status, whether it has expired */
  status?: VolcanoDatasetStatus;
}
/* eslint-enable */
