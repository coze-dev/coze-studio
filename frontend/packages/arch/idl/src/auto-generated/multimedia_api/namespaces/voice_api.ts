/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export interface AudioSpeechData {
  /** Base64 encoded voice binary data */
  bas464_content?: Blob;
  /** link to play */
  audio_url?: string;
  /** synthetic audio resources */
  audio_uri?: string;
}

export interface AudioSpeechRequest {
  /** Required, timbre id */
  voice_id: string;
  /** Required, text for synthesized speech, length limit 1024 bytes (UTF-8 encoding). */
  input: string;
  /** Audio encoding format, wav/pcm/ogg_opus/mp3, default is mp3 */
  response_format?: string;
  /** 1 The data type returned, the default is to return the audio data after generating base64, or you can specify to return the audio URL that can be played directly. */
  response_data_type?: common.AudioSpeechRespType;
  /** Speech rate, [0.2, 3], defaults to 1, usually with one decimal place */
  speed?: number;
  /** Emotion, default to empty */
  emotion?: string;
  /** Sentiment value, [1,5], defaults to 4, usually leaving one decimal place */
  emotion_scale?: number;
  /** Extended parameters for passing through some business parameters, bot_id, workflow_id */
  extented?: Record<string, string>;
}

export interface AudioSpeechResponse {
  code: number;
  message: string;
  data?: AudioSpeechData;
}

export interface AudioTranscriptionsData {
  text?: string;
}

export interface AudioTranscriptionsRequest {
  'Content-Type'?: string;
  Body?: Blob;
}

export interface AudioTranscriptionsResponse {
  code: number;
  message: string;
  data?: AudioTranscriptionsData;
}

export interface CheckCreateVoiceData {
  /** Do you have permission? */
  has_perm?: boolean;
  /** Number of sounds that can be created */
  total_quota?: number;
  /** The number of sounds that have been used */
  used_quota?: number;
}

export interface CheckCreateVoiceRequest {}

export interface CheckCreateVoiceResponse {
  code: number;
  message: string;
  data?: CheckCreateVoiceData;
}

export interface CloneVoiceData {
  voice?: common.VoiceDetail;
}

export interface CloneVoiceRequest {
  voice_id: string;
  /** Audio format, pcm, m4a mp3 wav */
  audio_format: string;
  /** Binary audio bytes after 10M base64 max */
  audio_bytes: string;
  compare_text?: string;
  preview_text?: string;
  space_id?: string;
}

export interface CloneVoiceResponse {
  code: number;
  message: string;
  data?: CloneVoiceData;
}

export interface CreateVoiceData {
  voice_id?: string;
}

export interface CreateVoiceRequest {
  voice_name: string;
  space_id: string;
  voice_desc?: string;
  icon_uri?: string;
  /** Language, the default is zh. */
  language_code?: string;
}

export interface CreateVoiceResponse {
  code: number;
  message: string;
  data?: CreateVoiceData;
}

export interface DeleteVoiceRequest {
  voice_id: string;
}

export interface DeleteVoiceResponse {
  code: number;
  message: string;
}

export interface GetVoiceMenuData {
  /** scene */
  scenes?: Array<string>;
  /** Supported languages */
  languages?: Array<common.LanguageInfo>;
  /** Gender */
  genders?: Array<string>;
  /** age group */
  ages?: Array<string>;
  /** model type */
  model_types?: Array<common.ModelType>;
}

export interface GetVoiceMenuRequest {}

export interface GetVoiceMenuResponse {
  code: number;
  message: string;
  data?: GetVoiceMenuData;
}

export interface MGetVoiceData {
  voices?: Array<common.VoiceDetail>;
  has_more?: boolean;
}

export interface MGetVoiceRequest {
  voice_ids?: Array<string>;
  /** timbre name prefix */
  prefix_voice_name?: string;
  /** statement distinction */
  language_code?: string;
  /** scene */
  scene?: string;
  /** Create your own */
  self_created?: boolean;
  /** The timbre of the specified query 1 System timbre 2 User timbre, all timbre is not passed on. */
  voice_type?: common.VoiceType;
  /** When the space id does not pass spaceID/voiceID, voiceType must specify the system tone */
  space_id?: string;
  /** timbre state */
  voice_state?: common.VoiceState;
  /** Gender */
  gender?: string;
  /** age group */
  age?: string;
  /** model type */
  model_type?: common.ModelType;
  page_index?: number;
  page_size?: number;
}

export interface MGetVoiceResponse {
  code: number;
  message: string;
  data?: MGetVoiceData;
}

export interface PurchaseVoiceClonePackageRequest {
  number: Int64;
  coze_account_id: string;
}

export interface PurchaseVoiceClonePackageResponse {
  code: number;
  message: string;
}

export interface UpdateVoiceData {}

export interface UpdateVoiceRequest {
  voice_id: string;
  voice_name?: string;
  voice_desc?: string;
  icon_uri?: string;
  /** Language, the default is zh. */
  language_code?: string;
}

export interface UpdateVoiceResponse {
  code: number;
  message: string;
  data?: UpdateVoiceData;
}

export interface VoiceFeatureGatewayData {
  /** Tone function switch */
  enable?: boolean;
  /** Sound clone function switch */
  voice_clone_enable?: boolean;
  /** Voiceprint recognition function switch */
  voice_print_enable?: boolean;
}

export interface VoiceFeatureGatewayRequest {}

export interface VoiceFeatureGatewayResponse {
  code: number;
  message: string;
  data?: VoiceFeatureGatewayData;
}
/* eslint-enable */
