/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export interface AudioConfig {
  /** Room audio encoding format, AACLC/G711A/OPI/G722 */
  codec?: string;
}

export interface AudioSpeechData {
  /** Binary of speech */
  content?: Blob;
  content_disposition?: string;
  content_type?: string;
}

export interface AudioSpeechRequest {
  /** Required, text for synthesized speech, length limit 1024 bytes (UTF-8 encoding). */
  input?: string;
  /** Required, timbre id */
  voice_id?: string;
  /** Audio encoding format, wav/pcm/ogg_opus/mp3, default is mp3 */
  response_format?: string;
  /** Speech rate, [0.2, 3], defaults to 1, usually with one decimal place */
  speed?: number;
  /** Sample rate, optional value [8000, 16000, 22050, 24000, 32000, 44100, 48000], default 24000 */
  sample_rate?: number;
  /** Emotional, optional value [none, happy, angry, sad, neutral], default none */
  emotion?: string;
  /** Sentiment value, [1,5], default 4 */
  emotion_scale?: number;
}

export interface AudioSpeechResponse {
  code?: number;
  msg?: string;
  data?: AudioSpeechData;
}

export interface AudioTranscriptionsData {
  /** Text for speech */
  text?: string;
}

export interface AudioTranscriptionsRequest {
  /** file type */
  'Content-Type': string;
  /** binary data */
  body: Blob;
}

export interface AudioTranscriptionsResponse {
  code?: number;
  msg?: string;
  data?: AudioTranscriptionsData;
}

export interface CloneVoiceData {
  /** unique tone code */
  voice_id?: string;
}

export interface CloneVoiceRequest {
  /** Audio format support: wav, mp3, ogg, m4a, aac, pcm, of which pcm only supports 24k single channel. Currently, the maximum upload of a single file is 10MB, and a maximum of 1 audio file is uploaded each time. */
  audio?: common.AudioInfo;
  /** The user can recite according to the text, and the service will compare the difference between the audio and the text. If there is any difference, 1109 WERError will be returned. */
  text?: string;
  language?: string;
  /** If so, use this voice_id for training coverage, otherwise use the new voice_id for training */
  voice_id?: string;
  /** timbre name */
  voice_name?: string;
  /** If passed in, preview audio will be generated based on this text, otherwise use the default text "Hello, I am your exclusive AI clone voice, I hope you can get along well together in the future" */
  preview_text?: string;
  /** The space where the clone tone is saved, defaults to personal space */
  space_id?: string;
  /** timbre description */
  description?: string;
}

export interface CloneVoiceResponse {
  code?: number;
  msg?: string;
  data?: CloneVoiceData;
}

export interface CreateRoomData {
  token?: string;
  uid?: string;
  room_id?: string;
  /** Volcano rtc appid */
  app_id?: string;
}

export interface CreateRoomRequest {
  /** Required parameters, Bot id */
  bot_id?: string;
  /** Optional parameter, conversation_id, one will be created by default if not passed, see [Create Session] interface */
  conversation_id?: string;
  /** Optional parameter, timbre id, default to xxxy timbre without passing */
  voice_id?: string;
  /** Optional parameters, room configuration */
  config?: RoomConfig;
  /** Optional parameter to identify the current user with the agent, which is defined, generated and maintained by the user. The uid is used to identify different users in the conversation, different uids, and the conversation memory data such as the database of the conversation are isolated from each other. If user data isolation is not required, this parameter can not be passed. */
  uid?: string;
  /** Optional parameter, workflow id */
  workflow_id?: string;
}

export interface CreateRoomResponse {
  code?: number;
  msg?: string;
  data?: CreateRoomData;
}

export interface GetLiveInfoData {
  /** Volcano WTN AppID */
  app_id?: string;
  /** Multiple stream messages in the live stream */
  stream_infos?: Array<StreamInfo>;
}

export interface GetLiveInfoRequest {
  live_id?: Int64;
}

export interface GetLiveInfoResponse {
  code?: number;
  msg?: string;
  data?: GetLiveInfoData;
}

export interface ListVoiceData {
  voice_list?: Array<common.OpenAPIVoiceData>;
  has_more?: boolean;
}

export interface ListVoiceRequest {
  /** Whether to filter the system sound, not by default */
  filter_system_voice?: boolean;
  /** Size model type, big is a large model, small is a small model, both are returned by default */
  model_type?: string;
  /** Timbre status, init is to be cloned, cloned is cloned, all, others report errors */
  voice_state?: string;
  /** Default is 1. */
  page_num?: number;
  /** Max 100, default 100 */
  page_size?: number;
}

export interface ListVoiceResponse {
  code?: number;
  msg?: string;
  data?: ListVoiceData;
}

export interface RoomConfig {
  /** Room video configuration */
  video_config?: VideoConfig;
  /** room audio configuration */
  audio_config?: AudioConfig;
  /** custom opener */
  prologue_content?: string;
  /** Room Mode */
  room_mode?: string;
  /** Simultaneous interpretation configuration, only takes effect when the room mode is simultaneous interpretation */
  translate_config?: TranslateConfig;
  /** How long to wait to play the opening remarks after entering the room, the default is 500ms, [0,5000] */
  prologue_delay_duration_ms?: number;
}

export interface StreamInfo {
  /** Audio & video streaming IDs */
  stream_id?: string;
  /** Audio & video streaming names */
  name?: string;
  live_type?: string;
}

export interface TranslateConfig {
  /** Translation source language */
  from?: string;
  /** Translation target language */
  to?: string;
}

export interface VideoConfig {
  /** Room video encoding format, H264/BYTEVC1 */
  codec?: string;
  /** Room video stream type, supports main/screen, main: mainstream. Including: "Stream captured by camera/microphone through internal capture mechanism." and "Stream captured by custom capture.", screen: screen stream */
  stream_video_type?: string;
  /** Video frame rate, the default value is 1, [1, 24] */
  video_frame_rate?: number;
  /** Video frame expiration time, in s, the default value is 1, [1, 10] */
  video_frame_expire_duration?: number;
}
/* eslint-enable */
