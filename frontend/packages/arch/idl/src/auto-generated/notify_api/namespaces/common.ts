/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

/** notification channel */
export enum ChannelType {
  SMS = 1,
  Email = 2,
  Inbox = 3,
  HomeBot = 4,
}

/** notification scenario */
export enum NotifyScene {
  /** The review is passed (plugin or Bot, etc. are injected through the params parameter) params need to check whether there are template required fields */
  ProductAuditSuccess = 1,
  /** Review disapproved (plugins or Bot, etc. are injected through the params parameter) */
  ProductAuditFailed = 2,
  /** The product is removed from the shelves and a notification is sent to the Owner (plugins or Bots, etc. are injected through the params parameter) */
  ProductOfflineOwner = 3,
  /** The product is removed from the shelves and a notification is sent to the user. */
  ProductOfflineUser = 4,
  /** developer certification */
  DeveloperCertification = 5,
  /** Automatic recharge successful */
  TokenAutoChargeSuccess = 6,
  /** Automatic recharge failed. */
  TokenAutoChargeFailed = 7,
  /** interactive notification */
  InteractionDailyNotify = 8,
  /** User information is approved */
  UserInfoAuditSuccess = 9,
  /** The user information review failed. */
  UserInfoAuditFailed = 10,
  /** A single user is following "me." */
  InteractionFollowSingle = 11,
  /** Multiple users have followed "me." */
  InteractionFollowMulti = 12,
  /** Individual users of concern have bot updates */
  InteractionBotUpdateSingle = 13,
  /** Multiple users you follow have bot updates */
  InteractionBotUpdateMulti = 14,
  /** Invoice pending application */
  TradeInvoiceWaitApply = 15,
  /** Invoices can be downloaded. */
  TradeInvoiceApplyReady = 16,
  /** Premium purchase failed */
  PremiumPurchasePayFailed = 17,
  /** Premium renewal payment failure */
  PremiumRenewalPayFailed = 18,
  /** Charge Notice */
  TradeChargeback = 19,
  /** The report is processed and the whistleblower is notified. */
  ReportProcessedToWhistleblower = 20,
  /** The report processing is completed, and the author of the post is notified. */
  ReportProcessedToPostOwner = 21,
  /** The report processing is completed, and the author of the comment is notified. */
  ReportProcessedToCommentOwner = 22,
  /** The report processing is completed, and the author of the product is notified. */
  ReportProcessedToProductOwner = 23,
}

/** Asynchronous notification of task status */
export enum NotifyTaskStatus {
  Waiting = 0,
  InProcess = 1,
  Finish = 2,
}

/** ticket verification status */
export enum TicketCheckStatus {
  TicketCorrect = 0,
  TicketError = 1,
  TicketExpiry = 2,
}

/** CAPTCHA Status */
export enum VerifyStatus {
  Correct = 0,
  Error = 1,
  Expiry = 2,
}

/** When channelType is an email, you can send UserID or EmailAddress.
 When channelType is SMS, you can send UserID or MobileNumber. */
export interface NotifyTarget {
  UserID?: Int64;
  EmailAddress?: string;
  MobileNum?: string;
  BizParams?: Record<string, string>;
}

export interface NotifyTask {
  NotifyTaskID?: string;
  /** notification channel */
  ChannelType?: ChannelType;
  /** current task status */
  Status?: NotifyTaskStatus;
  /** Notify successful targets */
  Success?: Array<NotifyTarget>;
  /** Notify failed targets */
  Failed?: Array<NotifyTarget>;
  /** Target waiting for notification */
  InProcess?: Array<NotifyTarget>;
}
/* eslint-enable */
