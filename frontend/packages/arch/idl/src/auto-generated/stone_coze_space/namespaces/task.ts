/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as exper_agent from './exper_agent';

export type Int64 = string | number;

export enum CozeSpaceTaskStatus {
  /** Running, Chat and task execution are counted as running */
  Running = 1,
  /** pause */
  Pause = 2,
  /** One round of tasks completed */
  TaskFinish = 3,
  /** initialization */
  Init = 4,
  /** terminate */
  Stop = 5,
  /** interrupt */
  Interrupt = 6,
  /** There is illegal content */
  IllegalContent = 7,
  /** abnormal interrupt */
  AbnormalInterrupt = 8,
  /** sleep */
  Sleep = 9,
}

export enum CozeSpaceTaskType {
  /** general task */
  General = 1,
  /** Usage research expert task */
  UserResearch = 2,
  /** Stock Task */
  Stock = 3,
  /** public opinion expert */
  AnalyzePublicOpinion = 5,
  /** PPT Agent */
  PPTAgent = 6,
  /** The same process expert agent */
  TongCheng = 9,
}

export enum FeelType {
  Good = 1,
  Bad = 2,
}

export enum MessageType {
  Query = 1,
  Answer = 2,
  Resume = 3,
}

export enum MilvTaskType {
  /** Review, drafting, legal questions and answers */
  Review = 1,
  Draft = 2,
  LawQA = 3,
}

export enum OperateType {
  Pause = 1,
  Resume = 2,
  Pin = 3,
  Unpin = 4,
  DoNotDisturb = 5,
  CancelDoNotDisturb = 6,
  Stop = 7,
}

/** Timed task state */
export enum ScheduledTaskStatus {
  /** initialization */
  Init = 1,
  /** Enabling */
  Enabled = 2,
  /** deprecated */
  Disabled = 3,
}

/** Timed Task Scheduling Status */
export enum ScheduledTaskTriggerStatus {
  /** initialization state */
  Pending = 1,
  /** dispatch successful */
  Success = 2,
  /** scheduling avoidance */
  Avoid = 3,
  /** scheduling failure */
  Failed = 4,
}

export enum StockSearchType {
  /** initialization pass */
  Init = 1,
  /** Search stock biography */
  Stock = 2,
  /** search plate */
  Sector = 3,
}

export enum StockTaskType {
  /** general consulting assignment */
  GeneralChat = 1,
  /** timed task */
  Scheduled = 2,
}

export enum TaskExampleStatus {
  Init = 0,
  Enable = 1,
  Disable = 2,
}

export enum TaskReplayOperateType {
  Open = 1,
  Close = 2,
}

export enum TaskReplayStatus {
  Open = 1,
  Close = 2,
}

export enum TaskRunMode {
  HandsOff = 0,
  Cooperative = 1,
  Auto = 2,
}

export enum TaskSourceFrom {
  UserCreate = 0,
  Example = 1,
}

export enum UploadUserResearchFileAction {
  FieldAnalysis = 1,
  Upload = 2,
}

export interface Action {
  /** primary key ID */
  action_id?: string;
  action_sort_id?: string;
  /** Text */
  content?: string;
  /** Text output from the container */
  computer_content?: string;
  create_time?: Int64;
  /** product file */
  file_list?: Array<File>;
  /** Action type */
  action_type?: string;
  /** Tool operation type */
  tool_operation_type?: string;
  /** indent */
  parent_step_ids?: Array<string>;
}

export interface AnalyzePublicOpinionConfig {
  /** keyword */
  key_word?: string;
  /** describe */
  description?: string;
  /** Related Words */
  related_words?: Array<RelatedWord>;
  /** Authorized channels */
  authorized_channels?: Array<Channel>;
  /** Whether to open online search */
  is_open_search?: boolean;
}

export interface BrowserResumeData {
  /** Whether to skip takeover */
  skip_takeover?: boolean;
}

export interface Channel {
  url_code?: string;
  name?: string;
  is_authorization?: boolean;
  icon?: string;
  /** URL that is not in the whitelist */
  extra_web_url?: string;
  is_open?: boolean;
}

export interface CheckUserScheduledTaskQuotaData {
  remained_quota?: number;
}

export interface CheckUserScheduledTaskQuotaRequest {}

export interface CheckUserScheduledTaskQuotaResponse {
  code?: Int64;
  msg?: string;
  data?: CheckUserScheduledTaskQuotaData;
}

export interface CozeSpaceChatRequest {
  task_id?: string;
  query?: string;
  files?: Array<File>;
  mcp_list?: Array<Mcp>;
  chat_type?: string;
  /** Pause - required when resuming */
  pause_reason?: string;
  task_run_mode?: TaskRunMode;
  expert_agent_run_config?: ExpertTaskRunConfig;
  scheduled_task_config?: ScheduledTaskConfig;
  /** Disable team mode */
  disable_team_mode?: boolean;
  /** Resume related form data */
  resume_data?: ResumeData;
}

export interface CozeSpaceChatResponse {
  code?: Int64;
  msg?: string;
  data?: CozeSpaceChatResponseData;
}

export interface CozeSpaceChatResponseData {
  answer_id?: string;
  query_id?: string;
}

export interface CozeSpaceTask {
  task_id?: string;
  task_name?: string;
  task_type?: Int64;
  task_status?: CozeSpaceTaskStatus;
  task_create_time?: string;
  task_update_time?: string;
  task_display_info?: CozeSpaceTaskDisplayInfo;
  mcp_tool_list?: Array<Mcp>;
  expert_agent_config?: ExpertAgentConfig;
  parent_id?: string;
  /** Is it a timed task? */
  is_scheduled_task?: boolean;
  /** Task-related timed task related information */
  scheduled_task?: TaskScheduledInfo;
  /** Whether to enable team mode */
  team_mode?: boolean;
}

export interface CozeSpaceTaskDisplayInfo {
  /** Whether to stick to the top */
  is_pin?: boolean;
  /** Do not disturb */
  is_dnd?: boolean;
}

export interface CreateCozeScheduledTaskData {
  scheduled_task?: ScheduledTask;
  answer_id?: string;
  query_id?: string;
}

export interface CreateCozeScheduledTaskRequest {
  /** Need to practice running */
  is_need_try_run?: boolean;
  scheduled_task_name?: string;
  trigger?: string;
  /** source task id */
  source_task_id?: string;
  /** mission plan */
  task_plan?: string;
  description?: string;
  /** The time point of execution, in the format 10:00 */
  daily_executed_at?: string;
  /** The new version of plan, an ordinary string, takes this first, and takes task_plan if not */
  task_plan_v2?: string;
}

export interface CreateCozeScheduledTaskResponse {
  code?: Int64;
  msg?: string;
  data?: CreateCozeScheduledTaskData;
}

export interface CreateCozeSpaceTaskData {
  task: CozeSpaceTask;
}

export interface CreateCozeSpaceTaskRequest {
  task_name: string;
  task_type: Int64;
  file_uri_list?: Array<string>;
  mcp_tool_list?: Array<Mcp>;
  agent_ids?: Array<string>;
  scheduled_task_setting?: ScheduledTaskSetting;
  source_from?: TaskSourceFrom;
  expert_agent_config?: ExpertAgentConfig;
}

export interface CreateCozeSpaceTaskResponse {
  code?: Int64;
  msg?: string;
  data: CreateCozeSpaceTaskData;
}

export interface CreateTaskReplayRequest {
  task_id?: string;
  need_qr_code?: boolean;
}

export interface CreateTaskReplayResponse {
  code?: Int64;
  msg?: string;
  data?: CreateTaskReplayResponseData;
}

export interface CreateTaskReplayResponseData {
  task_share_url?: string;
  qr_code_url?: string;
}

export interface DeleteCozeScheduledTaskRequest {
  scheduled_task_id: string;
}

export interface DeleteCozeScheduledTaskResponse {
  code?: Int64;
  msg?: string;
}

export interface DeleteCozeSpaceTaskRequest {
  task_id: string;
}

export interface DeleteCozeSpaceTaskResponse {
  code?: Int64;
  msg?: string;
}

export interface DiscountTravelConfig {
  /** Departure point */
  departure?: string;
  /** destination */
  destination?: string;
  /** Departure time */
  departure_time?: string;
  /** number of travelers */
  return_time?: string;
  /** mode of travel */
  travel_mode?: Array<string>;
  /** personalized requirements */
  personal_demand?: string;
}

export interface ExpertAgentConfig {
  user_research_config?: UserResearchConfig;
  stock_config?: StockConfig;
  analyze_public_opinion_config?: AnalyzePublicOpinionConfig;
  /** pass-through on callback */
  external_config?: Record<string, string>;
  milv_config?: MilvConfig;
  tongcheng_agent_config?: TongChengTravelAgentConfig;
}

export interface ExpertTaskRunConfig {
  user_research_run_config?: UserResearchRunConfig;
  stock_task_run_config?: StockTaskRunConfig;
  analyze_public_opinion_config?: AnalyzePublicOpinionConfig;
  milv_config?: MilvConfig;
}

export interface FeelContent {
  bad_reason?: string;
}

export interface FeelGoodData {
  task_id?: string;
  answer_id?: string;
  feel?: FeelType;
}

export interface FeelGoodRequest {
  task_id?: string;
  answer_id?: string;
  feel?: FeelType;
  content?: FeelContent;
}

export interface FeelGoodResponse {
  code?: Int64;
  msg?: string;
}

export interface File {
  file_name?: string;
  file_uri?: string;
  file_url?: string;
}

export interface GetCozeSpaceTaskListData {
  task_list?: Array<CozeSpaceTask>;
  next_cursor?: string;
  has_more?: boolean;
}

export interface GetCozeSpaceTaskListRequest {
  cursor?: string;
  size?: Int64;
}

export interface GetCozeSpaceTaskListResponse {
  code?: Int64;
  msg?: string;
  data: GetCozeSpaceTaskListData;
}

export interface GetMessageListRequest {
  task_id?: string;
  /** Cursor, if empty, starts from the beginning */
  cursor?: string;
  /** Get a few */
  size?: Int64;
}

export interface GetMessageListResponse {
  code?: Int64;
  msg?: string;
  data?: GetMessageListResponseData;
}

export interface GetMessageListResponseData {
  messages?: Array<Message>;
  /** Cursor */
  cursor?: string;
  task_status?: CozeSpaceTaskStatus;
  task_run_mode?: TaskRunMode;
  /** Poll Incoming next_key */
  next_key?: string;
  run_time?: Int64;
}

export interface GetSandboxTokenRequest {
  task_id: string;
  action_url_code?: string;
}

export interface GetSandboxTokenResponse {
  code?: Int64;
  msg?: string;
  data?: GetSandboxTokenResponseData;
}

export interface GetSandboxTokenResponseData {
  token?: string;
  url?: string;
}

export interface GetSingleScheduledTaskData {
  taskInfo?: ScheduledTask;
}

export interface GetSingleScheduledTaskRequest {
  scheduled_task_id: string;
}

export interface GetSingleScheduledTaskResponse {
  code?: Int64;
  msg?: string;
  data?: GetSingleScheduledTaskData;
}

export interface GetTaskExampleCategoryListData {
  example_categories?: Array<TaskExampleCategory>;
}

export interface GetTaskExampleCategoryListRequest {}

export interface GetTaskExampleCategoryListResponse {
  code?: Int64;
  msg?: string;
  data?: GetTaskExampleCategoryListData;
}

export interface GetTaskExampleData {
  task_example?: TaskExample;
}

export interface GetTaskExampleListData {
  task_examples?: Array<TaskExample>;
  total?: number;
}

export interface GetTaskExampleListRequest {
  category_id?: string;
  page_size?: number;
  page?: number;
}

export interface GetTaskExampleListResponse {
  code?: Int64;
  msg?: string;
  data?: GetTaskExampleListData;
}

export interface GetTaskExampleRequest {
  task_example_id: string;
}

export interface GetTaskExampleResponse {
  code?: Int64;
  msg?: string;
  data?: GetTaskExampleData;
}

export interface GetTaskInfoData {
  task_info?: CozeSpaceTask;
}

export interface GetTaskInfoRequest {
  task_id: string;
}

export interface GetTaskInfoResponse {
  code?: Int64;
  msg?: string;
  data?: GetTaskInfoData;
}

export interface GetTaskReplayByIdRequest {
  task_share_id?: string;
  secret?: string;
}

export interface GetTaskReplayByIdResponse {
  code?: Int64;
  msg?: string;
  data?: GetTaskReplayByIdResponseData;
}

export interface GetTaskReplayByIdResponseData {
  replay_file?: File;
  task_example_id?: string;
}

export interface GetTaskReplayRequest {
  task_id?: string;
}

export interface GetTaskReplayResponse {
  code?: Int64;
  msg?: string;
  data?: GetTaskReplayResponseData;
}

export interface GetTaskReplayResponseData {
  replay_task_list?: Array<TaskReplay>;
}

export interface GetUserScheduledTaskData {
  scheduled_tasks?: Array<ScheduledTask>;
}

export interface GetUserScheduledTaskRequest {}

export interface GetUserScheduledTaskResponse {
  code?: Int64;
  msg?: string;
  data?: GetUserScheduledTaskData;
}

export interface GetUserScheduledTasksData {
  task_num_map?: Record<Int64, Int64>;
}

export interface GetUserScheduledTasksRequest {}

export interface GetUserScheduledTasksResponse {
  code?: Int64;
  msg?: string;
  data?: GetUserScheduledTasksData;
}

export interface Mcp {
  id?: string;
}

export interface Message {
  message_id?: string;
  type?: MessageType;
  steps?: Array<Step>;
  content?: string;
  file_list?: Array<File>;
  create_time?: Int64;
  /** Resume related form data */
  resume_data?: ResumeData;
}

export interface MilvConfig {
  /** type */
  type?: MilvTaskType;
  /** File ID */
  fileId?: string;
  review_config?: exper_agent.ReviewConfig;
  draft_config?: exper_agent.DraftConfig;
  law_qa_config?: exper_agent.LawQAConfig;
  contract_files?: Array<exper_agent.ContractFileInfo>;
}

export interface NameDesc {
  name?: string;
  desc?: string;
  /** Return to display when analyzing csv, no need to carry it later */
  ori_name?: string;
}

export interface OperatePausedTaskRequest {
  task_id?: string;
  /** confirm_plan or ack_outline */
  pause_reason?: string;
}

export interface OperatePausedTaskResponse {
  code?: Int64;
  msg?: string;
}

export interface OperateTaskData {
  /** Returns when OperateType = Resume */
  answer_id?: string;
  /** Returns when OperateType = Resume */
  message_id?: string;
}

export interface OperateTaskReplayRequest {
  task_id?: string;
  task_share_id?: string;
  operate_type?: TaskReplayOperateType;
}

export interface OperateTaskReplayResponse {
  code?: Int64;
  msg?: string;
}

export interface OperateTaskRequest {
  task_id?: string;
  operate_type?: OperateType;
  /** Pause - required when resuming */
  pause_reason?: string;
  /** Browser pause - required when resuming */
  browser?: BrowserResumeData;
}

export interface OperateTaskResponse {
  code?: Int64;
  msg?: string;
  data?: OperateTaskData;
}

export interface PollStepListRequest {
  task_id?: string;
  answer_id?: string;
  next_key?: string;
}

export interface PollStepListResponse {
  code?: Int64;
  msg?: string;
  data?: PollStepListResponseData;
}

export interface PollStepListResponseData {
  steps?: Array<Step>;
  run_time?: Int64;
  task_name?: string;
  is_end?: boolean;
  next_key?: string;
  next_answer_id?: string;
}

export interface RelatedWord {
  intent?: string;
  keywords?: Array<string>;
  no_choice_keywords?: Array<string>;
}

export interface RestoreExampleFileData {
  files?: Array<File>;
}

export interface RestoreExampleFileRequest {
  task_id: string;
  example_id: string;
}

export interface RestoreExampleFileResponse {
  code?: Int64;
  msg?: string;
  data?: RestoreExampleFileData;
}

export interface ResumeData {
  /** slide show */
  slide_resume_data?: SlideResumeData;
}

export interface ScheduledRecord {
  /** scheduling status */
  trigger_status?: ScheduledTaskTriggerStatus;
  /** scheduling time */
  trigger_time?: string;
}

export interface ScheduledTask {
  scheduled_task_id?: string;
  scheduled_task_name?: string;
  trigger?: string;
  /** Timed task state */
  status?: ScheduledTaskStatus;
  task_type?: CozeSpaceTaskType;
  mcp_tool_list?: Array<Mcp>;
  expert_agent_config?: ExpertAgentConfig;
  /** Task steps, corresponding to the PlanUpdateData structure in the agent */
  task_plan?: string;
  description?: string;
  /** The time point of execution, in the format 10:00 */
  daily_executed_at?: string;
  /** The new version of plan, an ordinary string, takes this first, and takes task_plan if not */
  task_plan_v2?: string;
}

export interface ScheduledTaskConfig {
  plan_update_config?: string;
  /** Pass true if the user modifies the execution time through the time selection window */
  save_with_new_time?: boolean;
  /** The cron expression when the user saves the schedule */
  cron_exp?: string;
  /** For scenarios with an interval of xx days, the specific execution time */
  execute_time?: string;
  /** Plan card, pass true when the user wants to modify the scheduled task through query */
  save_and_modify_with_query?: boolean;
}

export interface ScheduledTaskSetting {
  trigger?: string;
  related_scheduled_task_id?: string;
}

export interface SearchFeelGoodRequest {
  task_id?: string;
  answer_id?: string;
}

export interface SearchFeelGoodResponse {
  code?: Int64;
  msg?: string;
  data?: SearchFeelGoodResponseData;
}

export interface SearchFeelGoodResponseData {
  feel_good_data?: FeelGoodData;
}

export interface SearchStockData {
  stock_list?: Array<StockInfo>;
  sector_list?: Array<string>;
  hot_sector_list?: Array<string>;
}

export interface SearchStockRequest {
  search_type: StockSearchType;
  /** Stock code, prefix matching */
  stock_search_word?: string;
  /** Stock name, prefix match */
  sector_search_word?: string;
}

export interface SearchStockResponse {
  code?: Int64;
  msg?: string;
  data?: SearchStockData;
}

export interface Slide {
  title?: string;
  content?: string;
}

export interface SlideResumeData {
  /** total number of pages */
  total_page_number?: Int64;
  /** PPT scene */
  scene_key?: string;
  /** outline */
  slides?: Array<Slide>;
}

export interface Step {
  /** primary key ID */
  step_id?: string;
  answer_id?: string;
  step_sort_id?: string;
  /** action list */
  action_list?: Array<Action>;
  create_time?: Int64;
  is_finish?: boolean;
}

export interface StockConfig {
  /** Stock task segmentation type */
  stock_task_type?: StockTaskType;
  /** Is a timed task required? */
  sheduled_task_switch: boolean;
  /** User-selected stocks */
  stock_info_list?: Array<StockInfo>;
  /** User-selected section */
  sector_list?: Array<string>;
  /** The query that needs to be sent after saving the settings (interface modification is not supported) */
  user_send_query?: string;
  /** The opening line displayed directly after saving the settings (interface modification is not supported) */
  onboarding?: string;
  /** Is there a scheduled task running (interface modification is not supported)? */
  is_scheduled_task_running?: boolean;
  /** Whether it is the preparation time for the morning report (modification is not supported) */
  is_morning_report_preparing?: boolean;
}

export interface StockInfo {
  stock_code?: string;
  stock_name?: string;
}

export interface StockTaskRunConfig {
  is_onboarding_run?: boolean;
}

export interface TaskExample {
  /** ID of the case */
  id?: string;
  name?: string;
  description?: string;
  icon_url?: string;
  category_info?: TaskExampleCategory;
  user_query?: string;
  task_replay_url?: string;
  task_type?: CozeSpaceTaskType;
  mcp_tool_list?: Array<Mcp>;
  expert_agent_config?: ExpertAgentConfig;
  task_run_mode?: TaskRunMode;
  status?: TaskExampleStatus;
  files?: Array<File>;
  is_team_mode?: boolean;
}

export interface TaskExampleCategory {
  id?: string;
  name?: string;
  is_job_recommend?: boolean;
  recommend_content?: string;
}

export interface TaskReplay {
  secret?: string;
  task_share_id?: string;
  taskReplayStatus?: TaskReplayStatus;
}

export interface TaskScheduledInfo {
  /** source timing task information */
  source_scheduled_task?: ScheduledTask;
  /** timed task scheduling record */
  scheduled_record?: ScheduledRecord;
}

export interface TongChengTravelAgentConfig {
  /** Travel guide configuration */
  travel_guide_config?: TravelGuideConfig;
  /** Preferential travel configuration */
  discount_travel_config?: DiscountTravelConfig;
  /** The query that needs to be sent after saving the settings (interface modification is not supported) */
  user_send_query?: string;
}

export interface TravelGuideConfig {
  /** Departure point */
  departure?: string;
  /** destination */
  destination?: string;
  /** Departure time */
  departure_time?: string;
  /** Return time */
  return_time?: string;
  /** budget */
  budget?: string;
  /** personalized requirements */
  personal_demand?: string;
  /** number of travelers */
  travel_people?: TravelPeople;
}

export interface TravelPeople {
  /** Number of adults */
  adult_num?: Int64;
  /** Number of children */
  child_num?: Int64;
  /** Number of infants */
  infant_num?: Int64;
  /** Number of pets */
  pet_num?: Int64;
}

export interface TryRunCozeScheduledTaskData {
  answer_id?: string;
  query_id?: string;
  user_query?: string;
  new_task_id?: string;
}

export interface TryRunCozeScheduledTaskRequest {
  scheduled_task_id: string;
}

export interface TryRunCozeScheduledTaskResponse {
  code?: Int64;
  msg?: string;
  data?: TryRunCozeScheduledTaskData;
}

export interface UpdateCozeScheduledTaskData {
  answer_id?: string;
  query_id?: string;
}

export interface UpdateCozeScheduledTaskRequest {
  scheduled_task_id: string;
  task_type: CozeSpaceTaskType;
  /** Timed task state */
  status?: ScheduledTaskStatus;
  scheduled_task_name?: string;
  trigger?: string;
  mcp_tool_list?: Array<Mcp>;
  expert_agent_config?: ExpertAgentConfig;
  /** Task plan, PlanUpdateData structure corresponding to the agent */
  task_plan?: string;
  /** Need to practice running */
  is_need_try_run?: boolean;
  description?: string;
  /** Which task_id does the request come from? If it comes from the management page, there is no need to send it. */
  task_id?: string;
  /** The time point of execution, in the format 10:00 */
  daily_executed_at?: string;
  /** The new version of plan, an ordinary string, takes this first, and takes task_plan if not */
  task_plan_v2?: string;
}

export interface UpdateCozeScheduledTaskResponse {
  code?: Int64;
  msg?: string;
  data?: UpdateCozeScheduledTaskData;
}

export interface UpdateCozeSpaceTaskData {
  task_name?: string;
  /** The query to be sent after saving the settings */
  user_send_query?: string;
  /** The opening line displayed directly after saving the settings */
  onboarding?: string;
}

export interface UpdateCozeSpaceTaskRequest {
  task_id: string;
  task_name?: string;
  mcp_tool_list?: Array<Mcp>;
  expert_agent_config?: ExpertAgentConfig;
  scheduled_task_setting?: ScheduledTaskSetting;
}

export interface UpdateCozeSpaceTaskResponse {
  code?: Int64;
  msg?: string;
  data?: UpdateCozeSpaceTaskData;
}

export interface UpdateFileContentRequest {
  task_id?: string;
  file_uri?: string;
  file_content?: Blob;
}

export interface UpdateFileContentResponse {
  code?: Int64;
  msg?: string;
}

export interface UpdateTaskPlanData {
  answer_id?: string;
}

export interface UpdateTaskPlanRequest {
  task_id: string;
  action_id: string;
  task_plan?: string;
}

export interface UpdateTaskPlanResponse {
  code?: Int64;
  msg?: string;
  data?: UpdateTaskPlanData;
}

export interface UploadFileData {
  file_uri?: string;
  task_id?: string;
}

export interface UploadTaskFileRequest {
  task_id?: string;
  file_name?: string;
  file_content?: Blob;
}

export interface UploadTaskFileResponse {
  code?: Int64;
  msg?: string;
  data?: UploadFileData;
}

export interface UploadUserResearchFileData {
  /** CSV/XLSX field name + description */
  fields?: Array<NameDesc>;
  /** other file */
  uri?: string;
}

export interface UploadUserResearchFileRequest {
  task_id: string;
  action: UploadUserResearchFileAction;
  /** File type, csv/xlsx */
  file_type: string;
  /** File name, corresponding to data_table */
  file_name: string;
  file_content?: Blob;
  /** The follow-up information is the submit field, which triggers the upload of the file to the DB, otherwise only the file field name and description are parsed.
table description */
  desc?: string;
  /** Field name + description */
  fields?: Array<NameDesc>;
}

export interface UploadUserResearchFileResponse {
  code?: Int64;
  msg?: string;
  data?: UploadUserResearchFileData;
}

export interface UserResearchConfig {
  /** Create/update can be modified */
  product_intro: string;
  /** Do not support create, update can pass the latest list (name, type must pass) only for deletion */
  user_research_file_list?: Array<UserResearchFile>;
}

export interface UserResearchFile {
  file_name?: string;
  file_type?: string;
  file_uri?: string;
}

export interface UserResearchRunConfig {
  /** Just pass the name */
  cited_documents?: Array<UserResearchFile>;
}
/* eslint-enable */
