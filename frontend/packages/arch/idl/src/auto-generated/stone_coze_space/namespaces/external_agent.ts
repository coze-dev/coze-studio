/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

/** callback type */
export enum CallbackType {
  CREATE = 1,
  DELETE = 2,
  /** Create and execute, when accessing, you need to select whether it can be directly executed, and currently query information can be passed */
  EXECUTE = 3,
}

export enum OperateType {
  /** Running (outputting message content) */
  Running = 1,
  /** Pause (user-initiated pause) */
  Pause = 2,
  /** One round of tasks is completed (the agent completes one round of tasks, the current round of tasks ends, and waits for a new round of tasks to be executed) */
  TaskFinish = 3,
  /** Initialization (waiting to initiate the first round of tasks) */
  Init = 4,
  /** Terminate (this round of missions is over and can no longer be executed) */
  Stop = 5,
  /** Interrupt (an agent-initiated interrupt waiting for user confirmation) */
  Interrupt = 6,
  /** There is illegal content (reviewed, the content cannot be exposed, this round of tasks is over, and it can no longer be executed) */
  IllegalContent = 7,
  /** Abnormal interrupt (the agent runs abnormally, the current round of tasks ends, waiting for a new round of tasks to execute) */
  AbnormalInterrupt = 8,
  /** Hibernation (including user-initiated termination, the end of this round of tasks, and waiting for a new round of tasks to execute) */
  Sleep = 9,
}

export interface TaskResult {
  /** Natural language description, whether the product was produced normally, or the cause of the failure */
  result_status?: string;
  results?: Array<TaskResultItem>;
}

export interface TaskResultItem {
  /** product link */
  link?: string;
}

export interface UpdateTaskNameRequest {
  agent_id?: Int64;
  sk?: string;
  task_id?: string;
  task_name?: string;
}

export interface UpdateTaskNameResponse {
  code?: Int64;
  msg?: string;
}

export interface UpdateTaskStatusRequest {
  agent_id?: Int64;
  sk?: string;
  task_id?: string;
  task_status?: OperateType;
  /** The task status is changed to the product information at the end of this round of tasks (3, 5, 7, 8, 9). The reason for the execution failure also needs to be filled. If the field is not filled at the end of the task that needs to return the product, it will also determine that the task execution failed. */
  result?: TaskResult;
}

export interface UpdateTaskStatusResponse {
  code?: Int64;
  msg?: string;
}
/* eslint-enable */
