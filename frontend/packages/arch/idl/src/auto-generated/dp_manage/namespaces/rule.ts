/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

/** ActionType Execution type
 NEXT ID: 2 */
export enum ActionType {
  Undefined = 0,
  ConstReturn = 1,
}

/** BizType - Business Line
 NEXT ID: 3 */
export enum BizType {
  Default = 0,
  CozeBot = 1,
  FornaxSlot = 2,
  FornaxPrompt = 3,
}

/** ComboTyppe combination type */
export enum ComboType {
  Undefined = 0,
  /** All conditions are true, return true, otherwise false */
  And = 1,
  /** Any of the conditions is true, return true, otherwise false */
  Or = 2,
}

/** ConditionType Condition type
 NEXT ID: 7 */
export enum ConditionType {
  Undefined = 0,
  XTtEnv = 1,
  VersionIdentifier = 2,
  TargetIDs = 3,
  Gray = 4,
  OperatorExpr = 5,
  Combo = 6,
}

/** ConstValueType constant return value type
 NEXT ID: 6 */
export enum ConstValueType {
  Undefined = 0,
  Bool = 1,
  String = 2,
  Int = 3,
  Double = 4,
  StringList = 5,
}

/** ExprType Lists the currently supported expression types
 NEXT ID: 3 */
export enum ExprType {
  Undefined = 0,
  ConstExpr = 1,
  VarExpr = 2,
}

/** GrayField - grey release field
 NEXT ID: 3 */
export enum GrayFieldType {
  Undefined = 0,
  /** Corresponding to uid in commonArgs */
  Uid = 1,
  /** Corresponding to deviceID in commonArgs */
  Did = 2,
  /** user defined field */
  CustomKey = 3,
}

/** ChoiceType - Determine the condition type
 NEXT ID: 6 */
export enum OperatorType {
  Undefined = 0,
  /** Equals, lhs == rhs */
  Eq = 1,
  /** In list, lhs in rhs, rhs needs to be a List */
  In = 2,
  /** Not in list, lhs not in rhs, rhs needs to be a List */
  NotIn = 3,
  /** Not equal to, lhs! = rhs */
  NotEq = 4,
  /** Greater than, lhs > rhs */
  Gt = 5,
  /** Less than, lhs < rhs */
  Lt = 6,
  /** Greater than or equal to, lhs > = rhs */
  Gte = 7,
  /** Less than or equal to, lhs < = rhs */
  Lte = 8,
  /** Is empty, lhs == nil */
  IsNull = 9,
  /** Not empty, lhs! = nil */
  IsNotNull = 10,
  /** Always true */
  AlwaysTrue = 11,
}

export enum RuleStatus {
  Undefined = 0,
  Online = 1,
  Offline = 2,
}

/** SchemaType - Data structure field types
 NEXT ID: 6 */
export enum SchemaType {
  Undefined = 0,
  Bool = 1,
  Int = 2,
  Double = 3,
  String = 4,
  Object = 5,
}

/** TargetIDSource The target value data source to be determined */
export enum TargetIDSource {
  Undefined = 0,
  /** The convention is commonArgs.uid in the traffic parameter. */
  Uid = 1,
}

export enum TargetOpType {
  Undefined = 0,
  In = 1,
  NotIn = 2,
}

/** TrafficResultType The result type returned
 NEXT ID: 2 */
export enum TrafficResultType {
  Undefined = 0,
  ConstValue = 1,
}

/** Action - Execute action definition
 NEXT ID: 3 */
export interface Action {
  actionType?: ActionType;
  constReturnAction?: ConstReturnAction;
}

/** AllowList
 NEXT ID: 3 */
export interface AllowList {
  /** compare fields */
  field?: GrayField;
  /** Compare field values */
  values?: Array<string>;
}

/** BizSchemaMeta - Data information describing a line of business
 NEXT ID: 3 */
export interface BizSchemaMeta {
  bizType?: BizType;
  schema?: Record<string, Schema>;
}

/** BlockList
 NEXT ID: 3 */
export interface BlockList {
  /** compare fields */
  field?: GrayField;
  /** Compare field values */
  values?: Array<string>;
}

/** ComboCondition judgment */
export interface ComboCondition {
  /** combination type */
  comboType: ComboType;
  /** combination condition */
  conditions?: Array<Condition>;
}

/** CommonArgs common parameters, common parameters that general requests may have, if necessary, pass in
 NEXT ID: 5, 12 */
export interface CommonArgs {
  uid?: Int64;
  appID?: number;
  deviceID?: Int64;
  platform?: string;
  /** Specify the parameters of the key */
  params?: Record<string, string>;
  /** Additional JSON parameters */
  extra?: string;
}

/** Conditions Judgment conditions
 NEXT ID: 7 */
export interface Condition {
  /** judgment type */
  type?: ConditionType;
  /** conditionType Write the corresponding field
X-tt-env in metainfo equals xxx */
  xTtEnv?: string;
  /** Show parameter version equal to xxx */
  versionIdentifier?: string;
  /** Specify the id list for in or not in judgment */
  targetList?: TargetList;
  /** Percentage grey release judgment */
  grayConfig?: GrayConfig;
  /** computational expression writing */
  operatorExpr?: OperatorExpr;
  /** combination condition */
  comboCondition?: ComboCondition;
}

/** ConstExpr constant expression, which will return the corresponding value according to the type of the constant
 NEXT ID: 3 */
export interface ConstExpr {
  valueType: ConstValueType;
  value?: ConstValue;
}

/** ConstReturnAction constant return type
 NEXT ID: 4 */
export interface ConstReturnAction {
  key?: string;
  valueType?: ConstValueType;
  value?: ConstValue;
}

/** The actual value of the ConstValue constant
 NEXT ID: 6 */
export interface ConstValue {
  boolValue?: boolean;
  stringValue?: string;
  intValue?: Int64;
  doubleValue?: number;
  stringListValue?: Array<string>;
}

/** DimensionMeta - Data dimension information that describes a line of business
 NEXT ID: 3 */
export interface DimensionMeta {
  bizType?: BizType;
  schema?: Schema;
}

/** Expr describes the expression that is executed during conditional judgment
 Corresponding to different expression contents according to exprType
 NEXT ID: 4 */
export interface Expr {
  /** expression type */
  exprType: ExprType;
  /** Use when exprType is ConstExpr */
  constExpr?: ConstExpr;
  /** Use when exprType is VarExpr */
  varExpr?: string;
}

/** GrayBucket percentage grey release configuration
 NEXT ID: 4 */
export interface GrayBucket {
  /** Grey release calculation field */
  field?: GrayField;
  /** Grey release ratio, take the size of [0, size] */
  inGray?: number;
  /** Bucket size, default 10000 */
  size?: number;
}

/** GrayConfig grey release configuration
 The current order is BlockList - > AllowList - > Bucket's check order
 NEXT ID: 4 */
export interface GrayConfig {
  /** Representation misses in blockList */
  blockList?: BlockList;
  /** Hit and miss buckets in allowList */
  allowList?: AllowList;
  /** Percent grey release configuration */
  bucket?: GrayBucket;
}

export interface GrayField {
  /** Grey release field type */
  type: GrayFieldType;
  /** Custom field json path */
  customFieldPath?: string;
}

/** OperatorExpr expression
 For example, for the operation x > y, x is the left parameter lhs, and y is the right parameter rhs.
 NEXT ID: 4 */
export interface OperatorExpr {
  /** condition type */
  operator: OperatorType;
  /** Left-hand expression of an operation */
  lhs?: Expr;
  /** Right-hand expression of an operation */
  rhs?: Expr;
}

/** Rules - Business configuration rules
 NEXT ID: 6 */
export interface Rule {
  ruleID?: Int64;
  /** line of business */
  bizType?: BizType;
  /** The dimensions of the rule configuration will be a JSON object according to the schema. */
  dimension?: string;
  /** judgment condition */
  condition?: Condition;
  /** Action after condition passed */
  action?: Action;
  /** Business custom tags, used to distinguish rules for different scenarios under the same bizType and dimension */
  tag?: string;
  /** rule state */
  status?: RuleStatus;
  /** Operator ID */
  operator?: string;
  /** update time */
  updateTime?: Int64;
  /** creation time */
  createTime?: Int64;
  /** Priority, default 0, under the same dimension, the larger the number, the higher the priority */
  priority?: number;
}

/** Schema - Data structures that describe dimensions
 NEXT ID: 7 */
export interface Schema {
  type?: SchemaType;
  /** Business parties can customize their names when registering */
  name?: string;
  children?: Array<Schema>;
  /** For the filePath of dimension type to be accurate to the leaf node, other types can be paths at the Object level */
  fieldPath?: string;
  isDimension?: boolean;
  /** Whether the field is required, isRequired = true when participating in the verification isDimension = true, isDimension = false, isRequired on demand */
  isRequired?: boolean;
}

/** SystemArgs traffic parameter
 NEXT ID: 2 */
export interface SystemArgs {
  /** Version ID */
  versionIdentifier?: string;
}

/** TargetList Determines whether the target IDSource is contained in the target IDs based on the op
 NEXT ID: 4 */
export interface TargetList {
  op?: TargetOpType;
  targetIDs?: Array<string>;
  targetIDSource?: TargetIDSource;
}

/** Traffic flow information
 NEXT ID: 5 */
export interface Traffic {
  bizType: BizType;
  /** Business common parameters, is a json object */
  dimension?: string;
  /** general flow parameters */
  commonArgs?: CommonArgs;
  /** System flow parameters */
  systemArgs?: SystemArgs;
}

/** TrafficResult Traffic judgment result
 NEXT ID: 4 */
export interface TrafficResult {
  hit?: boolean;
  resultType?: TrafficResultType;
  constValue?: TrafficResultConstValue;
}

/** TrafficResultConstValue returns a constant value
 NEXT ID: 3 */
export interface TrafficResultConstValue {
  valueType?: ConstValueType;
  value?: ConstValue;
}

/** TrafficV2 traffic information
 NEXT ID: 5 */
export interface TrafficV2 {
  bizType: BizType;
  /** general flow parameters */
  commonArgs?: CommonArgs;
  /** System flow parameters */
  systemArgs?: SystemArgs;
  /** Business flow parameter json object */
  bizArgs?: string;
}
/* eslint-enable */
