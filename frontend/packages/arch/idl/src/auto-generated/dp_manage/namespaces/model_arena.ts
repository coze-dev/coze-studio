/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum ArenaModelStatus {
  Normal = 0,
  UnReleasedInCoze = 1,
}

export enum ArenaScene {
  InhouseBotPK = 1,
  InhouseModelPK = 2,
  ReleaseBotPK = 3,
  ReleaseModelPK = 4,
}

export enum LeaderboardIntention {
  All = 0,
  Knowledge = 1,
  Creation = 2,
  Language = 3,
  RoleplayAndConversation = 4,
  Code = 5,
  ToolUsage = 6,
  MathAndInference = 7,
}

export enum PkFeedbackTagType {
  Win = 1,
  Lose = 2,
}

export enum PKRecordStatus {
  Pending = 0,
  StartConversation = 1,
  ReceiveReply = 2,
  FinishVote = 3,
}

export enum PKScene {
  Bot = 0,
  Model = 1,
  All = 2,
}

export enum VoteResult {
  LeftGood = 1,
  RightGood = 2,
  BothGood = 3,
  BothBad = 4,
}

export interface AnenaUser {
  /** Nickname, repeatable */
  name?: string;
  avatar_url?: string;
  /** Username, globally unique */
  user_name?: string;
}

export interface ArenaBot {
  product_id?: string;
  name?: string;
  description?: string;
  owner?: AnenaUser;
  bot_type?: ArenaBotType;
  icon?: string;
  is_conf_public?: boolean;
  bot_id?: string;
  bot_version?: string;
}

export interface ArenaBotType {
  id?: string;
  name?: string;
}

/** Complete information on a certain issue of the leaderboard */
export interface ArenaLeaderboard {
  /** Basic information */
  basic?: ArenaLeaderboardBasic;
  /** The expiration date of the data used in this leaderboard timestamp (ms) */
  time_right_bound?: string;
  /** Total number of votes received */
  vote_count?: string;
  /** total number of models */
  model_count?: string;
  /** Details
model information */
  models?: Array<ArenaModel>;
  /** leaderboard details */
  leaderboard_details?: Partial<
    Record<PKScene, Partial<Record<LeaderboardIntention, LeaderboardDetail>>>
  >;
  /** Total number of pk */
  pk_count?: number;
  /** The start date of the data used in this leaderboard timestamp (ms) */
  time_left_bound?: string;
}

export interface ArenaLeaderboardBasic {
  /** leaderboard id */
  id?: string;
  /** name */
  name?: string;
}

export interface ArenaModel {
  id?: string;
  name?: string;
  company?: string;
  last_know_time?: string;
  temperature?: string;
  frequency_penalty?: string;
  presence_penalty?: string;
  top_p?: string;
  top_k?: string;
  output_format?: string;
  max_token?: string;
  diversity?: string;
  icon?: string;
  /** detailed description */
  desc?: string;
  /** Brief description */
  brief_desc?: string;
  /** release time */
  publish_timestamp?: string;
  /** update time */
  update_timestamp?: string;
  /** Model vendor information */
  company_info?: ArenaModelCompany;
  /** version */
  version?: string;
  /** state */
  status?: ArenaModelStatus;
}

export interface ArenaModelCompany {
  name?: string;
  icon_uri?: string;
  icon_url?: string;
  url?: string;
}

export interface ArenaPKRecord {
  pk_id?: string;
  user_id?: string;
  product_id?: string;
  bot_id?: string;
  bot_version?: string;
  left_model_id?: string;
  left_model?: ArenaModel;
  left_conversation_id?: string;
  right_model_id?: string;
  right_model?: ArenaModel;
  right_conversation_id?: string;
  status?: PKRecordStatus;
  result?: VoteResult;
  result_time?: string;
}

export interface ArenaQuestion {
  bank_id?: string;
  id?: string;
  /** Each time the user selects a question, the serial ID of that question needs to be added to the requested UsedList */
  seq_id?: number;
  content?: string;
  refer_answer?: string;
}

export interface ArenaQuestionBank {
  bank_id?: string;
  name?: string;
  description?: string;
  bank_type?: ArenaQuestionBankType;
  has_refer_answer?: boolean;
  icon?: string;
}

export interface ArenaQuestionBankType {
  id?: string;
  name?: string;
}

export interface ArenaRank {
  ranking?: string;
  model_info?: ArenaModel;
  elo_score?: string;
  vote_count?: string;
  confidence?: string;
}

export interface LeaderboardDetail {
  /** scene */
  scene?: PKScene;
  /** Sub-list classification, mainly based on user queries */
  intention?: LeaderboardIntention;
  /** The ranking, score, confidence level, etc. of a model in a certain sub-list of a certain issue */
  rankings?: Array<LeaderboardRanking>;
  /** Show the top x on the top page of the leaderboard */
  display_rank_cnt?: number;
}

export interface LeaderboardRanking {
  /** Model ID */
  model_id?: string;
  /** model version */
  model_version?: string;
  /** ranking */
  ranking?: number;
  /** Number of votes received */
  vote_count?: number;
  /** Upper confidence level */
  confidence_upper?: string;
  /** Lower confidence level */
  confidence_lower?: string;
  /** Model elo score */
  elo_score?: string;
  /** radar score */
  radar_score?: string;
  /** The total number of times this model participates in pk under the current scene and intention */
  pk_count?: number;
}

export interface PkFeedbackTag {
  type?: PkFeedbackTagType;
  name?: string;
}
/* eslint-enable */
