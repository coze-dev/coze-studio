/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as model_arena from './model_arena';
import * as multi_version from './multi_version';

export type Int64 = string | number;

/** branch */
export enum Branch {
  Undefined = 0,
  /** draft */
  PersonalDraft = 1,
  /** Space draft */
  Base = 2,
  /** release version */
  Publish = 3,
}

export enum DiffActionType {
  Unknown = 0,
  Add = 1,
  Delete = 2,
  Modify = 3,
  Remove = 4,
  /** No change, empty update */
  Remain = 5,
}

/** - Isolation of env boe-online environment (not yet available)
 - publish draft state - publish state isolation
 - Isolation between versions, between individual drafts, between different channels all belong to this granularity */
export enum DiffIsolation {
  Env = 10,
  Publish = 20,
  Version = 30,
}

export enum DiffMode {
  Default = 0,
  OnlyDetermineDiff = 1,
}

export enum DiffScene {
  BotDraft = 0,
}

export enum DiffStyle {
  Default = 0,
  /** Text Details */
  TextDetail = 1,
}

export enum Env {
  Online = 1,
  Submit = 2,
  Draft = 3,
}

export enum ResourceType {
  Bot = 1,
  Workflow = 2,
}

export enum TopoType {
  AgentFlow = 1,
  Agent = 2,
  Workflow = 3,
}

export interface ArenaChatBreakMsgReq {
  conversation_id?: string;
  query_message_id?: string;
  answer_message_id?: string;
  broken_pos?: number;
  local_message_id?: string;
  Base?: base.Base;
}

export interface ArenaChatBreakMsgResp {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaChatStreamReq {
  bot_id?: string;
  conversation_id: string;
  bot_version?: string;
  user?: string;
  query: string;
  extra?: Record<string, string>;
  /** Files files pictures images etc */
  content_type?: string;
  /** Retry message id */
  regen_message_id?: string;
  /** The local message_id on the front end is passed back in the extra_info */
  local_message_id?: string;
  insert_history_message_list?: Array<string>;
  device_id?: string;
  space_id?: string;
  toolList?: Array<Tool>;
  Origin?: string;
  Host?: string;
}

export interface ArenaChatStreamResp {}

export interface ArenaGetConfReq {
  Base?: base.Base;
}

export interface ArenaGetConfResp {
  data?: ArenaGetConfRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaGetConfRespData {
  /** Empty bot product id */
  blank_bot_product_id?: string;
  bot_types?: Array<model_arena.ArenaBotType>;
  question_bank_types?: Array<model_arena.ArenaQuestionBankType>;
  leaderboards?: Array<model_arena.ArenaLeaderboardBasic>;
  /** Do you have permission to view the leaderboard? */
  access_to_leaderboard?: boolean;
}

export interface ArenaGetModelListReq {
  Host?: string;
  Base?: base.Base;
}

export interface ArenaGetModelListResp {
  data?: ArenaGetModelListRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaGetModelListRespData {
  /** model information */
  models?: Array<model_arena.ArenaModel>;
}

export interface ArenaLeaderBoardCreateNewVersionRespData {
  version?: string;
}

export interface ArenaLeaderBoardGetReq {
  Base?: base.Base;
}

export interface ArenaLeaderBoardGetResp {
  data?: ArenaLeaderBoardGetRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaLeaderBoardGetRespData {
  /** List opening time */
  reveal_time?: string;
  /** Return in order of 1-n rank */
  ranks?: Array<model_arena.ArenaRank>;
  /** Voting statistics deadline for this list */
  data_ddl_time?: string;
  /** Votes */
  vote_count?: string;
}

export interface ArenaLeaderboardGetV2Req {
  /** leaderboard id */
  id?: string;
  Host?: string;
  Base?: base.Base;
}

export interface ArenaLeaderboardGetV2Resp {
  data?: ArenaLeaderboardGetV2RespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaLeaderboardGetV2RespData {
  arena_leaderboard?: model_arena.ArenaLeaderboard;
}

export interface ArenaListQuestionBankReq {
  bank_type_id?: string;
  page_size?: number;
  page_num?: number;
  Base?: base.Base;
}

export interface ArenaListQuestionBankResp {
  data?: ArenaListQuestionBankRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaListQuestionBankRespData {
  banks?: Array<model_arena.ArenaQuestionBank>;
  has_more?: boolean;
}

export interface ArenaRandQuestionReq {
  bank_id?: string;
  count?: number;
  used_seq_id_list?: Array<number>;
  Base?: base.Base;
}

export interface ArenaRandQuestionResp {
  data?: ArenaRandQuestionRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaRandQuestionRespData {
  questions?: Array<model_arena.ArenaQuestion>;
  /** Seqid in the array = seqid in req + seqid randomly arrived this time. */
  used_seq_id_list?: Array<number>;
}

export interface ArenaRegisterModelRespData {
  Version?: string;
}

export interface ArenaSubmitPkFeedbackTagReq {
  pk_id: string;
  left_model_tags?: Array<string>;
  right_model_tags?: Array<string>;
  Base?: base.Base;
}

export interface ArenaSubmitPkFeedbackTagResp {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaSubmitPkFeedbackTextReq {
  pk_id: string;
  feedback_text?: string;
  Base?: base.Base;
}

export interface ArenaSubmitPkFeedbackTextResp {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaUpdateQuestionBankRespData {
  AddCount?: number;
  UpdateCount?: number;
  DeleteCount?: number;
}

export interface ArenaUpdateQuestionRespData {
  AddCount?: number;
  UpdateCount?: number;
  DeleteCount?: number;
}

export interface ArenaVoteReq {
  pk_id?: string;
  result?: model_arena.VoteResult;
  Base?: base.Base;
}

export interface ArenaVoteResp {
  data?: ArenaVoteRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ArenaVoteRespData {
  left_model?: model_arena.ArenaModel;
  right_model?: model_arena.ArenaModel;
  left_total_votes?: string;
  right_total_votes?: string;
}

export interface BotDiff3WayReq {
  space_id: string;
  bot_id: string;
  /** current user draft */
  current_version: BotVersion;
  /** Target space draft */
  target_version: BotVersion;
  /** Text line level diff diff_template_v2 */
  template_key?: string;
  Base?: base.Base;
}

export interface BotDiff3WayResp {
  data?: BotDiff3WayRespDate;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface BotDiff3WayRespDate {
  diff_res?: Array<DiffDisplay3WayNode>;
  /** Details of the bot, used when merging */
  origin_bot_dl: string;
  /** The version number of the target branch */
  target_version: string;
  /** The latest version of the public draft */
  latest_commit_version?: string;
  BaseResp?: base.BaseResp;
}

export interface BotDiffReq {
  space_id: string;
  bot_id: string;
  left: BotVersion;
  right: BotVersion;
  filter?: DiffFilter;
  /** diff_template_v2 when the draft diff is issued, and diff_template_when_publish_v2 when the diff is issued */
  template_key?: string;
  Base?: base.Base;
}

export interface BotDiffResp {
  data?: BotDiffRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface BotDiffRespData {
  diff_display_node?: Array<DiffDisplayNode>;
  origin_bot_dl: string;
  /** The version number of the public branch */
  target_version?: string;
}

export interface BotMergeRequest {
  space_id: string;
  bot_id: string;
  diff_res?: Array<DiffDisplayNode>;
  origin_bot_dl: string;
  Base?: base.Base;
}

export interface BotMergeResponse {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface BotVersion {
  branch?: Branch;
  version_id?: string;
  connector_id?: string;
}

export interface CheckBotInReviewWhiteListRequest {
  space_id: Int64;
  bot_id: Int64;
  Base?: base.Base;
}

export interface CheckBotInReviewWhiteListResponse {
  in_white_list?: boolean;
  BaseResp?: base.BaseResp;
}

export interface CheckHookConfigRequest {
  psm: string;
  Base?: base.Base;
}

export interface CheckHookConfigResponse {
  psm_check_result?: boolean;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CozeIDEPluginFgRequest {
  Base?: base.Base;
}

export interface CozeIDEPluginFgResponse {
  enable_multi_version?: boolean;
  enable_gray?: boolean;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CreateArenaPKReq {
  /** When selecting a random bot or bot, all parameters below are required; when evaluating the model directly, they are not required */
  product_id?: string;
  bot_id?: string;
  bot_version?: string;
  Host?: string;
  Base?: base.Base;
}

export interface CreateArenaPKResp {
  data?: CreateArenaPKRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CreateArenaPKRespData {
  pk_id?: string;
  bot_id?: string;
  bot_version?: string;
  left_conversation_id?: string;
  right_conversation_id?: string;
  left_feedback_tags?: Array<model_arena.PkFeedbackTag>;
  right_feedback_tags?: Array<model_arena.PkFeedbackTag>;
}

export interface DiffDisplay3WayNode {
  /** Node display name */
  display_name: string;
  /** Changes to the current branch relative to the common ancestor */
  diff_res_current?: DiffDisplayAction;
  /** The change of the target joining branch relative to the common ancestor */
  diff_res_target?: DiffDisplayAction;
  /** sub-node list */
  sub_nodes?: Array<DiffDisplay3WayNode>;
  /** Does the node conflict? */
  is_conflict?: boolean;
}

export interface DiffDisplayAction {
  action: DiffActionType;
  /** Old value for front-end display */
  display_left?: string;
  /** The new value used for front-end display, if both the old value and the new value are empty strings, it will not be displayed */
  display_right?: string;
  /** Pass-through is enough, it needs to be used when the backend UpdateBotDraft is used. */
  origin_left?: string;
  /** Pass-through is enough, it needs to be used when the backend UpdateBotDraft is used. */
  origin_right?: string;
  /** Record user merge results */
  selected_value?: string;
  /** Pass-through is enough, it needs to be used when the backend UpdateBotDraft is used. */
  json_path?: string;
  /** If there is this value, the final display is subject to this field. */
  overwrite_display?: string;
  /** Diff style, when 1, indicating that the current node supports diff for viewing text details */
  diff_style?: DiffStyle;
  /** When merging manually, the merge result is recorded in this field, and there is no need to assign selectedValue at this time. */
  manual_merge_value?: string;
}

export interface DiffDisplayNode {
  /** Node display name */
  display_name: string;
  /** Changes to this node */
  diff_res?: DiffDisplayAction;
  /** sub-node list */
  sub_nodes?: Array<DiffDisplayNode>;
}

export interface DiffFilter {
  Isolation?: DiffIsolation;
}

export interface Edge {
  edge_id?: string;
  edge_name?: string;
  source_node_id?: string;
  target_node_id?: string;
}

export interface GetDiffRespData {
  diff_display_node?: Array<DiffDisplayNode>;
}

export interface GetMultiVersionActiveListRequest {
  space_id: Int64;
  bot_id: Int64;
  /** Default starts from 0 */
  page?: number;
  /** Default 20 */
  size?: number;
  /** post type */
  version_type?: multi_version.VersionType;
  /** query publish type */
  query_type?: multi_version.VersionType;
  /** Specify the effective version, commitVersion */
  version?: Int64;
  Base?: base.Base;
}

export interface GetMultiVersionActiveListResponse {
  active_rules?: Array<multi_version.ActiveRule>;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetMultiVersionAllowedConnectorsRequest {
  space_id: Int64;
  bot_id: Int64;
  Base?: base.Base;
}

export interface GetMultiVersionAllowedConnectorsResponse {
  allowed_connectors?: Array<multi_version.AllowedConnector>;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetMultiVersionLatestParamsRequest {
  space_id: Int64;
  bot_id: Int64;
  Base?: base.Base;
}

export interface GetMultiVersionLatestParamsResponse {
  params_map?: Partial<Record<multi_version.VersionType, string>>;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetPKRecordRespData {
  PKRecord?: model_arena.ArenaPKRecord;
}

export interface GetTopoInfoReq {
  space_id: string;
  resource_id: string;
  version: string;
  env: Env;
  resource_type: ResourceType;
  Base?: base.Base;
}

export interface GetTopoInfoResp {
  data?: TopoInfo;
  BaseResp?: base.BaseResp;
}

export interface InactivateMultiVersionRequest {
  space_id: Int64;
  bot_id: Int64;
  rule_id: Int64;
  Base?: base.Base;
}

export interface InactivateMultiVersionResponse {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ListArenaBotReq {
  /** 1 Optional, if you don't pass it, it means you get all types. Use 1-3 together to get a list of all or certain types of bots by pagination. */
  bot_type_id?: string;
  page_size?: number;
  page_number?: number;
  /** 4 Used alone, get all categories, and randomly return 3 bots for each category */
  rand3?: boolean;
  Base?: base.Base;
}

export interface ListArenaBotResp {
  data?: ListArenaBotRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface ListArenaBotRespData {
  bots?: Array<model_arena.ArenaBot>;
  has_more?: boolean;
}

export interface ListCurrentPublishVersionsRequest {
  space_id: Int64;
  bot_id: Int64;
  Base?: base.Base;
}

export interface ListCurrentPublishVersionsResponse {
  versions?: Array<multi_version.BotPublishVersion>;
  BaseResp?: base.BaseResp;
}

export interface ListHistoryVersionsRequest {
  space_id: Int64;
  bot_id: Int64;
  /** If not passed, all types of */
  version_types?: Array<multi_version.HistoryVersionType>;
  /** If not passed on, return to all channels */
  connector_ids?: Array<string>;
  Base?: base.Base;
}

export interface ListHistoryVersionsResponse {
  versions?: Array<multi_version.BotHistoryVersion>;
  BaseResp?: base.BaseResp;
}

export interface ListOperationHistoryRequest {
  space_id: Int64;
  bot_id: Int64;
  /** If not passed, all types of */
  version_types?: Array<multi_version.HistoryVersionType>;
  /** If not passed on, return to all channels */
  connector_ids?: Array<string>;
  Base?: base.Base;
}

export interface ListOperationHistoryResponse {
  histories?: Array<multi_version.BotOperationHistory>;
  BaseResp?: base.BaseResp;
}

export interface MultiVersionUpdateKey {
  bot_id?: Int64;
  connector_id?: string;
}

export interface Node {
  node_id?: string;
  resource_name?: string;
  resource_kind?: Int64;
  resource_id?: string;
}

export interface parametersStruct {
  value?: string;
  /** "uri" */
  resource_type?: string;
}

export interface PingReq {
  PingMessage: string;
}

export interface PingResp {
  PongMessage: string;
}

export interface PublishMultiVersionRequest {
  space_id: Int64;
  bot_id: Int64;
  connector_ids: Array<string>;
  version_type: multi_version.VersionType;
  /** publish idempotent */
  publish_id: string;
  x_tt_env?: string;
  version_identifier?: string;
  /** List of IDs that identify the user */
  gray_id_list?: Array<string>;
  /** You need to specify a commitversion when pre-publishing to a grey release. */
  commit_version?: string;
  /** Required when ppe is released to grey release */
  bot_version?: string;
  /** Grey release configuration */
  gray_config?: multi_version.GrayConfig;
  Base?: base.Base;
}

export interface PublishMultiVersionResponse {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface RandBotIDReq {
  Base?: base.Base;
}

export interface RandBotIDResp {
  data?: RandBotIDRespData;
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface RandBotIDRespData {
  product_id?: string;
}

export interface RecordChangelogRequest {
  bot_id: string;
  llm_result: string;
  user_result: string;
  publish_id: string;
  space_id?: string;
  Base?: base.Base;
}

export interface RecordChangelogResponse {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface RollbackBotRequest {
  space_id: Int64;
  bot_id: Int64;
  connector_ids: Array<string>;
  /** Roll back to the commitVersion */
  commit_version?: string;
  /** botVersion to roll back to (for validation) */
  bot_version?: string;
  /** idempotent */
  publish_id?: string;
  Base?: base.Base;
}

export interface RollbackBotResponse {
  BaseResp?: base.BaseResp;
}

export interface Tool {
  plugin_id?: string;
  parameters?: Record<string, parametersStruct>;
  api_name?: string;
}

export interface TopoInfo {
  topo_type?: TopoType;
  nodes?: Array<Node>;
  edges?: Array<Edge>;
}

export interface UpdateGrayIDListRequest {
  space_id: Int64;
  bot_id: Int64;
  rule_id?: Int64;
  gray_id_list?: Array<string>;
  gray_config?: multi_version.GrayConfig;
  Base?: base.Base;
}

export interface UpdateGrayIDListResponse {
  code: number;
  msg: string;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
