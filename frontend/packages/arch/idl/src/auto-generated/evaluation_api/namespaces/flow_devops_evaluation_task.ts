/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';
import * as base from './base';
import * as flow_devops_evaluation_object_callback from './flow_devops_evaluation_object_callback';
import * as flow_devops_evaluation_manual_annotation from './flow_devops_evaluation_manual_annotation';
import * as flow_devops_evaluation_callback_common from './flow_devops_evaluation_callback_common';
import * as flow_devops_evaluation_evaluator_callback from './flow_devops_evaluation_evaluator_callback';
import * as flow_devops_evaluation_evaluator from './flow_devops_evaluation_evaluator';

export type Int64 = string | number;

/** aggregation method */
export enum AggregatorMode {
  Unknown = 0,
  /** Aggregate by review dimension tag */
  EvaluatorTag = 1,
}

/** aggregator type */
export enum AggregatorType {
  Average = 1,
  Sum = 2,
  Max = 3,
  Min = 4,
  /** Use the double type to represent percentages. For example, 50.5% is set to 0.505. */
  PassingRate = 5,
  ExcellentRate = 6,
  /** Manual options are scored, each option is counted and a proportional distribution is given */
  Count = 7,
  Pct50 = 8,
  Pct90 = 9,
  Pct99 = 10,
}

export enum BatchTaskRetryMode {
  All = 1,
  Unsuccessful = 2,
}

export enum BitableStatus {
  Unknown = 0,
  /** Task not started */
  Running = 1,
  /** Mission successful */
  Success = 2,
  /** Mission failed */
  Failed = 3,
}

/** ChainTask template type */
export enum ChainTaskTemplate {
  ChainTaskTemplate_Unknow = 0,
  ChainTaskTemplate_BotTemplate = 1,
}

/** Types of analytical charts */
export enum ChartType {
  Unknown = 0,
  /** indicator card */
  KPI = 1,
  /** Pie chart */
  Pie = 2,
  /** bar chart */
  Bar = 3,
  /** bar stack chart */
  StackedBar = 4,
  /** Radar chart */
  Radar = 5,
  /** line chart */
  Line = 6,
}

export enum DataType {
  /** Default, floating-point value types with decimals */
  Double = 0,
  JSON = 1,
}

/** Evaluator Resource */
export enum EvaluateMode {
  /** manual */
  Manual = 0,
  /** automatic */
  Auto = 1,
  /** reset */
  Reset = 2,
}

/** Correlation Evaluator */
export enum EvaluateScope {
  /** Data row range */
  Row = 0,
  /** All cases take effect by default */
  Case = 1,
}

export enum ExecutionPolicy {
  /** Error stop running */
  StopOnAnyError = 1,
  /** Error continue to execute subsequent tasks */
  ContinueOnAnyError = 2,
  /** Partial failure to continue with subsequent tasks */
  OnlyContinueOnPartialError = 3,
}

export enum ExportCSVSourceType {
  /** Subsequent possible migration orders are reported as server level exports */
  EvaluationTaskReport = 1,
  ContrastReport = 2,
}

export enum FilterField {
  Unknown = 0,
  /** score */
  Score = 1,
  /** numerical value */
  Value = 2,
  /** Evaluation result option value */
  OptionValue = 3,
  /** label */
  Plaintext = 4,
  /** dataset label */
  DataSetTag = 5,
  /** Evaluation dimension, corresponding to ruleID */
  RuleID = 6,
}

export enum FilterLogicOp {
  Unknown = 0,
  And = 1,
  Or = 2,
}

export enum FilterOperatorType {
  Unknown = 0,
  /** equal to */
  Equal = 1,
  /** Not equal to */
  NotEqual = 2,
  /** contain */
  Contains = 3,
  /** Do not include */
  NotContains = 4,
  /** greater than */
  Greater = 5,
  /** greater than or equal to */
  GreaterOrEqual = 6,
  /** less than */
  Less = 7,
  /** less than or equal to */
  LessOrEqual = 8,
  /** empty */
  IsNull = 9,
  /** non-empty */
  IsNotNull = 10,
}

export enum FornaxAgentOpenAPIKey {
  Unknown = 0,
  Invoke = 1,
  Stream = 2,
}

export enum FornaxAgentTmplType {
  Unknown = 0,
  ChatBot = 1,
  OpenAPI = 2,
}

export enum GenAnnotationTaskCustomFilterLanguage {
  Unknown = 0,
  Golang = 1,
  Typescript = 2,
  Python = 3,
}

/** grouping */
export enum GroupMode {
  Unknown = 0,
  /** dataset label */
  DataSetTag = 1,
  /** Group by option */
  OptionResult = 2,
}

export enum ManualStatus {
  /** No manual labeling is required. */
  NoNeed = 0,
  /** Manual labeling is required. */
  Need = 1,
}

export enum ModelResponseFormat {
  Text = 0,
  Markdown = 1,
  JSON = 2,
}

export enum ModelStyle {
  Custom = 0,
  Creative = 1,
  Balance = 2,
  Precise = 3,
}

/** Evaluator Resource */
export enum PromptTemplateFormat {
  PromptTemplateFormat_FString = 0,
  PromptTemplateFormat_Jinja2 = 1,
}

export enum RetryMode {
  All = 1,
  /** Retry unsuccessful rowGroup */
  Unsuccessful = 2,
  /** Specify rowGroupID to retry */
  SpecifyRowGroup = 3,
}

export enum RowGroupRunState {
  Unknown = -1,
  /** in line */
  Queueing = 0,
  /** in progress */
  Processing = 1,
  /** success */
  Success = 2,
  /** fail */
  Fail = 3,
  /** Results to be evaluated */
  Evaluating = 4,
  /** terminate execution */
  Terminal = 5,
}

export enum RowRunState {
  /** Not started */
  Queueing = 0,
  /** successful execution */
  Success = 1,
  /** execution failed */
  Fail = 2,
}

/** Form display element type */
export enum ShowEntityType {
  /** Evaluation object coze bot, corresponding to use 11: CozeEntityMap */
  CozeBot = 1,
  /** Object prompt */
  Prompt = 2,
  /** user information */
  User = 3,
  /** Registered agent */
  Agent = 4,
}

/** SpecialObjectType can be dynamically registered on the evaluation object management platform alone later, and the registered ones will be dynamically allocated */
export enum SpecialObjectType {
  CozeBot = 0,
  Prompt = 1,
  ChainTask = 2,
  /** Applications connected to Fornax, Eino framework is integrated by default */
  FornaxApp = 3,
  /** FornaxAgent provided by CloudIDE */
  FornaxAgent = 4,
  PlaygroundCozeBot = 5,
  PlaygroundCozeBotV2 = 6,
  /** Result Set Batch Evaluation Type */
  EvalResultDatasetCollection = 7,
  PlaygroundCozeModel = 8,
  CiciCrawl = 9,
  /** Custom evaluation rules, idgen id is not enumerable, this enum is only used for search & filter requests */
  Custom = 100,
}

export enum TaskAggrReportGenStatus {
  /** Not generated, task not completed */
  NotGenerated = 0,
  /** Updating */
  Updating = 1,
  /** When running, you can view the report details, complete it, and display the overall score and [Click to view the aggregated report]. */
  Generated = 2,
  /** If the score is updated after completion, it needs to be re-aggregated. */
  NeedUpdate = 3,
}

export enum TaskManualStatus {
  NoNeed = 0,
  Need = 1,
  Completed = 2,
}

export enum TaskMode {
  Unknown = 0,
  /** Platform Manual Operation Case */
  SubmitExec = 1,
  /** Online review scenario */
  OnlineSyncExec = 2,
}

export enum TaskStatus {
  /** The evaluation task is in progress, and the front-end display [running] */
  Processing = 1,
  /** The evaluation task is being created, the initial session rowGroup status and other operations, and the front-end display [Created] */
  Creating = 4,
  /** Rowgroup continuously reviews and adds to tasks, used in online review scenarios */
  Appending = 10,
  /** The execution is completed and manual scoring is required, and the front-end display [manual scoring is required] */
  NeedManualEval = 20,
  /** The user manually cancels the run, and the front-end display [Terminated, the user cancels] */
  Termination = 21,
  /** The system actively terminates the task, and the front-end display [Terminated: System Abnormal] */
  SystemTermination = 22,
  /** The task execution is completed, and the front-end display [Success] */
  Completed = 30,
  /** The execution is complete, all rowGroups fail to execute, and the front-end display [Failed] */
  Error = 31,
  /** Execution completed, partial rowGroup failed. Front-end display [Partial failure] */
  PartialFailure = 41,
  /** The task has been created, waiting for the task to be scheduled for execution */
  AwaitExecution = 42,
  /** Wait for the task to be retried */
  AwaitRetry = 43,
}

export enum UserChangeMode {
  /** Unlimited, users can read, write, and run */
  Default = 0,
  /** Non-editable, non-triggering, readable */
  ReadOnly = 5,
}

export interface AggregateData {
  value?: number;
  json_info?: string;
  data_type?: DataType;
}

/** aggregation report */
export interface AggregateReport {
  /** Label tree structure of dataset */
  tag_tree_node?: flow_devops_evaluation_entity.Node;
  /** node_id corresponding label node aggregation results */
  node_results?: Record<Int64, AggregateResultRow>;
  /** Evaluation rule column structure of the report */
  column_rule_info?: Array<ColumnRuleInfo>;
  /** All dataset labels summarize the results, corresponding to the last row of the report */
  summarized_result?: AggregateResultRow;
}

/** Aggregate statistics, one cell of data, corresponding to an aggregator type */
export interface AggregateResultCell {
  aggregator_type?: AggregatorType;
  aggregate_data?: AggregateData;
}

/** Aggregate a single line of data */
export interface AggregateResultRow {
  /** regular dimension aggregation result */
  rule_results?: Array<RuleAggregateResult>;
  /** Total rowgroup */
  total_num?: Int64;
  /** All evaluation rules summarize the results, corresponding to the last column of the report */
  summarized_result?: Array<AggregateResultCell>;
}

export interface AggregatorConfig {
  aggregator_type?: AggregatorType;
  intersection_evaluator_infos?: Array<IntersectionEvaluatorInfo>;
}

export interface AnalysisChartReportConfig {
  /** Chart Type */
  chart_type: ChartType;
  /** indicator granularity */
  evaluator_granularity: flow_devops_evaluation_entity.EvaluatorGranularity;
  /** Aggregate statistical method */
  aggregator_type: AggregatorType;
  /** Evaluation dimension list, which is the corresponding rule_ids */
  rule_ids: Array<Int64>;
  /** Aggregation method list */
  aggregator_modes?: Array<AggregatorMode>;
  /** grouping */
  group_mode?: GroupMode;
  /** Filter conditions (tree structure, filter conditions are all on leaf nodes) */
  filter_node?: FilterNode;
  /** report name */
  report_name?: string;
  /** Grouping filter conditions (tree structure, filter conditions are all on leaf nodes) */
  group_mode_filter?: FilterNode;
}

export interface AnalysisChartReportInfo {
  /** Analytics Chart ID */
  analysis_chart_report_id: Int64;
  aggregate_report?: AggregateReport;
  analysis_chart_report_config?: AnalysisChartReportConfig;
}

export interface AssociateAnalysisChartReportRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  /** Analytical chart id list */
  analysis_chart_report_ids: Array<Int64>;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface AssociateAnalysisChartReportResponse {
  BaseResp?: base.BaseResp;
}

export interface AssociateDatasetRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  cid?: string;
  Base?: base.Base;
}

export interface AssociateDatasetResponse {
  new_dataset_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface AssociateDatasetV2Request {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  dataset_id: Int64;
  Base?: base.Base;
}

export interface AssociateDatasetV2Response {
  BaseResp?: base.BaseResp;
}

export interface AssociateEvalObjectRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  /** evaluation object */
  eval_object?: EvalObject;
  cid?: string;
  Base?: base.Base;
}

export interface AssociateEvalObjectResponse {
  BaseResp?: base.BaseResp;
}

export interface AssociateEvaluatorRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  mode: EvaluateMode;
  scope: EvaluateScope;
  row_id?: Int64;
  row_group_id?: Int64;
  cid?: string;
  threshold?: ScoringThreshold;
  Base?: base.Base;
}

export interface AssociateEvaluatorResponse {
  /** EvaluateMode does not return NewRuleGroupID when manual mode */
  new_rule_group_id?: Int64;
  BaseResp?: base.BaseResp;
}

/** ## bactch task run */
export interface BatchCaseTask {
  case_id: Int64;
  space_id_of_case: Int64;
  list_exec_runtime_parameter: Array<ExecRuntimeParameter>;
}

export interface BatchCreateCaseRequest {
  'FlowDevops-Agw-UserId'?: string;
  name_eval_object?: Record<string, EvalObject>;
  'FlowDevops-Agw-AppId'?: number;
  space_id?: Int64;
  region?: string;
  Base?: base.Base;
}

export interface BatchCreateCaseResponse {
  cases?: Array<Case>;
  BaseResp?: base.BaseResp;
}

export interface BatchGetRowEvalResRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  row_ids: Array<Int64>;
  space_id: Int64;
  Base?: base.Base;
}

export interface BatchGetRowEvalResResponse {
  /** key:rowID */
  row_eval_res_list?: Record<Int64, RowEvalRes>;
  BaseResp?: base.BaseResp;
}

export interface BatchTaskRet {
  batch_task_id: Int64;
  /** List of tasks for this run in case */
  list_case_tasks?: Array<CaseTasks>;
}

export interface BizError {
  err_msg: string;
  err_code: Int64;
}

/** use case entity */
export interface Case {
  /** Use Case ID */
  id?: Int64;
  /** use case name */
  name?: string;
  /** use case description */
  desc?: string;
  /** Linked dataset information */
  dataset_source?: DatasetSource;
  /** associated evaluation set */
  evaluator_source?: EvaluatorSource;
  /** evaluation object */
  eval_object?: EvalObject;
  /** creator */
  creator_id?: Int64;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** Case Delete Time */
  delete_at?: Int64;
  /** Space ID */
  space_id?: Int64;
  last_run_time?: Int64;
  region?: string;
  /** deprecated
The runtime parameter of the latest task in this use case, if there is no task in the use case, return the default value */
  latest_runtime_parameter?: string;
  /** UserChangeMode User Edit Use Case Permissions
For online evaluation scenarios, users cannot edit use cases before the online evaluation task is completed, and use cases can only be edited after the online evaluation task is completed */
  user_change_mode?: UserChangeMode;
  runtime_parameter_tip_content?: string;
  /** If this field has a value, it represents a reference to an existing dataset. */
  original_dataset_id?: Int64;
  /** Runtime parameters and use cases are directly bound, and the default value is if the user does not edit it. */
  runtime_parameter?: string;
  /** Runtime parameter default value, automated task batch setting runtime parameter scene use */
  default_runtime_parameter?: string;
}

/** Case dimension evaluator */
export interface CaseEvaluatorSource {
  /** Automatic Evaluator Resource Failure in Manual Mode */
  mode?: EvaluateMode;
  /** Task Binding Evaluator Resource */
  rule_group_id?: Int64;
}

export interface CaseTasks {
  case: Case;
  tasks?: Array<Task>;
}

export interface ChainTask {
  task_id: string;
  task_name?: string;
  /** During the evaluation, the version of chainTask needs to be transmitted from the front end. */
  version?: number;
  model_info?: string;
  chain_task_template?: ChainTaskTemplate;
  prompt_template_format?: PromptTemplateFormat;
  app_id?: string;
}

export interface CheckCaseEvaluatorRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface CheckCaseEvaluatorResponse {
  pass: boolean;
  check_result?: CheckResult;
  BaseResp?: base.BaseResp;
}

export interface CheckResult {
  over_limit_rows?: Array<Int64>;
  /** No default rule is set, there are more than 0 rows and no default rule is configured */
  lack_row_rule?: boolean;
  /** Case Linked Data Set No Data */
  lack_dataset_row?: boolean;
}

export interface CiciCrawl {
  bot_id: string;
  name?: string;
  avatar_url?: string;
  crawl_project_id?: string;
}

export interface CloneCaseRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  name: string;
  desc?: string;
  eval_object?: EvalObject;
  region?: string;
  Base?: base.Base;
}

export interface CloneCaseResponse {
  case_id: Int64;
}

export interface ColumnRuleInfo {
  rule_id: Int64;
  evaluator_type: Int64;
  /** Custom Evaluator Name */
  evaluator_type_name: string;
  /** rule name */
  name?: string;
  /** Merge cells for dialog group granularity rules */
  granularity?: flow_devops_evaluation_entity.EvaluatorGranularity;
}

export interface ComparisonAggregateReportInfo {
  task_id: Int64;
  case_id: Int64;
  aggregate_report?: AggregateReport;
}

export interface ComparisonTaskInfo {
  task_id: Int64;
  case_id: Int64;
}

export interface ContrastReportMetaInfo {
  contrast_report_id: Int64;
  name: string;
  /** compare task list */
  contrast_tasks?: Array<ContrastTask>;
}

export interface ContrastReportRowGroup {
  serial_num?: number;
  row_group_id?: Int64;
  tags?: Array<string>;
  /** Row comparison report information */
  row_contrast_report_infos: Array<RowContrastReportInfo>;
  /** rowGroup Comparison Report Information */
  row_group_contrast_report_info?: RowGroupContrastReportInfo;
}

export interface ContrastTask {
  case_id: Int64;
  task_id: Int64;
}

export interface CozeAgent {
  AgentID: Int64;
  AgentName: string;
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

/** Review CozeBot */
export interface CozeBot {
  bot_id?: Int64;
  /** Default 0, is the draft version
deprecated */
  is_draft?: number;
  /** Create case version is empty, the task entity will carry the bot version when the current case runs */
  version?: Int64;
  /** Bot type, default 0, is draft version */
  bot_info_type?: flow_devops_evaluation_object_callback.CozeBotInfoType;
  /** Create case connector_id is empty, the task entity will carry the current case run time bot connector_id */
  connector_id?: string;
  model_info?: flow_devops_evaluation_entity.ModelInfo;
  bot_name?: string;
  avatar_url?: string;
  env?: string;
  bot_version?: string;
  Agents?: Array<CozeAgent>;
}

export interface CreateBatchTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  batch_case_tasks?: Array<BatchCaseTask>;
  'FlowDevops-Agw-AppId'?: number;
  default_exec_runtime_parameter?: ExecRuntimeParameter;
  execution_policy?: ExecutionPolicy;
  Base?: base.Base;
}

export interface CreateBatchTaskResponse {
  batch_task_id: Int64;
  BaseResp?: base.BaseResp;
}

export interface CreateCaseRequest {
  'FlowDevops-Agw-UserId'?: string;
  /** use case name */
  name: string;
  'FlowDevops-Agw-AppId'?: number;
  /** use case space */
  space_id: Int64;
  /** use case description */
  desc?: string;
  cid?: string;
  /** Whether to tag, not by default */
  tag_list?: Array<flow_devops_evaluation_entity.TagInfo>;
  region?: string;
  UserChangeMode?: UserChangeMode;
  eval_object?: EvalObject;
  Base?: base.Base;
}

export interface CreateCaseResponse {
  /** use case entity information */
  case?: Case;
  BaseResp?: base.BaseResp;
}

export interface CreateContrastReportReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id: Int64;
  name?: string;
  /** compare task list */
  contrast_tasks?: Array<ContrastTask>;
  Base?: base.Base;
}

export interface CreateContrastReportResp {
  id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface CreatePostColumnsReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** manually tagged item list */
  manual_annotation_items?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationItem>;
  task_id?: Int64;
  case_id?: Int64;
  Base?: base.Base;
}

export interface CreatePostColumnsResp {
  id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface CreatePostColumnsV2Req {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id?: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id?: Int64;
  case_id?: Int64;
  /** manually tagged item list */
  manual_annotation_items?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationItem>;
  source_type?: flow_devops_evaluation_manual_annotation.SourceType;
  Base?: base.Base;
}

export interface CreatePostColumnsV2Resp {
  id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface DashboardRow {
  /** Dataset structure */
  row_id: Int64;
  /** Dataset cells (including input, output, variable FIXME MultiCell after online, discarded */
  cells: Array<string>;
  /** New evaluation report
Large model real output FIXME MultiOutput is discarded after online */
  output: Output;
  /** Evaluator Report */
  row_eval_cell: RowEvalCell;
  /** Level 2 Details rule_group_id
When deprecated is not 0, it means that the row includes the rule_group_id of all general rules and row-level rules. */
  rule_group_id: Int64;
  /** Contains multimodal output, compatible fields, after rolling out 100%, discard Output */
  multi_output?: flow_devops_evaluation_object_callback.Output;
  /** Extend field 2, multimodal display of the dataset */
  multi_cells?: Array<flow_devops_evaluation_callback_common.Content>;
  /** track information */
  trajectory?: flow_devops_evaluation_evaluator_callback.Trajectory;
  run_state?: RowRunState;
  /** deprecated */
  error_message?: string;
  /** Row the associated logID at execution time */
  log_id?: string;
  error?: RowRunError;
  /** In the presence of a row-level evaluator, the group_id of the row-level evaluator */
  row_rule_group_id?: Int64;
  /** Whether to jump evaluation object call trace */
  direct_object_trace?: boolean;
}

export interface DashboardRowGroup {
  row_group_id?: Int64;
  group_name?: string;
  rows: Array<DashboardRow>;
  run_state?: RowGroupRunState;
  tags?: Array<string>;
  /** rowGroup granularity evaluation ruleID - > Results */
  rule_eval_report_map?: Record<Int64, RowEvalReport>;
  serial_num?: number;
}

export interface DashboardTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  row_group_run_state?: RowGroupRunState;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface DashboardTaskResponse {
  /** Each row is a dataset (input, reference_output, variable)
Same as ColumnName in the dataset */
  column_name: Array<string>;
  dashboard_row_groups: Array<DashboardRowGroup>;
  column_rule_info?: Array<ColumnRuleInfo>;
  default_rule_group_id?: Int64;
  task_id?: Int64;
  /** manual annotation */
  manual_annotation_items?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationItem>;
  /** The key is the human annotation item ID, and the value is the annotation task ID. */
  manual_annotation_item_map?: Record<Int64, Int64>;
  /** Whether to allow the export of dataset content */
  not_allow_export_dataset_content?: boolean;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface DashboardTaskRowGroupRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  row_group_id: Int64;
  Base?: base.Base;
}

export interface DashboardTaskRowGroupResponse {
  /** Each row is a dataset (input, reference_output, variable)
Same as ColumnName in the dataset */
  column_name: Array<string>;
  dashboard_row_group: DashboardRowGroup;
  column_rule_info?: Array<ColumnRuleInfo>;
  default_rule_group_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface DashboardTaskV2Request {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  row_group_run_state?: RowGroupRunState;
  custom_filter?: GenAnnotationTaskCustomFilter;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface DashboardTaskV2Response {
  /** Each row is a dataset (input, reference_output, variable)
Same as ColumnName in the dataset */
  column_name: Array<string>;
  dashboard_row_groups: Array<DashboardRowGroup>;
  column_rule_info?: Array<ColumnRuleInfo>;
  default_rule_group_id?: Int64;
  task_id?: Int64;
  /** manual annotation */
  manual_annotation_items?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationItem>;
  /** The key is the human annotation item ID, and the value is the annotation task ID. */
  manual_annotation_item_map?: Record<Int64, Int64>;
  custom_filter_err_msg?: string;
  /** Whether to allow the export of dataset content */
  not_allow_export_dataset_content?: boolean;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface DatasetSource {
  dataset_id?: Int64;
  /** Dataset name: Currently only the associated existing datasets have values, others are created internally without a name */
  dataset_name?: string;
}

export interface DeleteAnalysisChartReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Analytics Chart ID */
  analysis_chart_report_id: Int64;
  space_id: Int64;
  Base?: base.Base;
}

export interface DeleteAnalysisChartReportResponse {
  BaseResp?: base.BaseResp;
}

export interface DeleteCaseRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface DeleteCaseResponse {
  BaseResp?: base.BaseResp;
}

export interface DeleteContrastReportReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  Base?: base.Base;
}

export interface DeleteContrastReportResp {
  BaseResp?: base.BaseResp;
}

export interface DeleteTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface DeleteTaskResponse {
  BaseResp?: base.BaseResp;
}

export interface EvalObject {
  /** Evaluate the type of the object. Each RPC interface is treated as a type */
  object_type: Int64;
  /** When ObjectType = 0, pass this field. When the evaluation object is CozeBot, you need to set the CozeBot information. */
  coze_bot?: CozeBot;
  /** When ObjectType = 1, pass this field. When the evaluation object is EvalPrompt, you need to set the Prompt information */
  prompt?: EvalPrompt;
  /** When ObjectType is other, pass this field */
  object?: flow_devops_evaluation_object_callback.Object;
  /** When ObjectType = 2, pass this field. When the evaluation object is ChainTask, you need to set ChainTask information */
  chain_task?: ChainTask;
  fornax_app_object?: FornaxAppObject;
  fornax_agent_object?: FornaxAgentObject;
  playground_coze_bot_v2?: PlaygroundCozeBotV2;
  /** EvalResultDatasetCollection type object data */
  eval_result_dataset_collection?: EvalResultDatasetCollection;
  playground_coze_model?: PlaygroundCozeModel;
  cici_crawl?: CiciCrawl;
}

export interface EvalPrompt {
  /** A unique identifier for a prompt */
  prompt_id: string;
  /** When evaluating, the prompt version needs to be transmitted from the front end. */
  version?: string;
  name?: string;
}

export interface EvalResultDatasetCollection {
  items: Array<EvalResultDatasetObject>;
}

export interface EvalResultDatasetObject {
  dataset_id: Int64;
  rule_group_id: Int64;
  dataset_name?: string;
}

export interface EvaluateResult {
  /** score */
  score?: number;
  /** Information on the scoring process and results */
  reasoning?: string;
  /** Whether manual scoring is required, when the current rules do not automatically evaluate the results, ManualStatus = ManualStatus */
  manual_status?: ManualStatus;
  /** Evaluator error */
  error?: RowRunError;
  data?: EvaluateResultData;
  /** Row dimension scoring range, such as in the Coze scenario, the user LLM Prompt determines the output scoring range of the evaluator */
  scoring_scope?: flow_devops_evaluation_entity.ScoringScope;
}

export interface EvaluateResultData {
  score?: number;
  value?: string;
  option?: flow_devops_evaluation_entity.EvaluateResultOption;
  plain_text?: string;
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  value_type?: flow_devops_evaluation_entity.EvaluateResultValueType;
}

export interface EvaluatorSource {
  case_source?: CaseEvaluatorSource;
  /** row_id vs RowEvaluateSource */
  row_sources?: Record<Int64, RowEvaluatorSource>;
  /** Passing Merit Threshold */
  threshold?: ScoringThreshold;
}

export interface ExecCaseDynamicRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  cid?: string;
  /** Runtime parameter json serialization for running evaluation use cases */
  runtime_parameter?: string;
  exec_times?: Int64;
  dataset_source?: DatasetSource;
  /** associated evaluation set */
  evaluator_source?: EvaluatorSource;
  /** evaluation object */
  eval_object?: EvalObject;
  Base?: base.Base;
}

export interface ExecCaseDynamicResponse {
  task?: Task;
  task_ids?: Array<Int64>;
  tasks?: Array<Task>;
  BaseResp?: base.BaseResp;
}

export interface ExecCaseRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  cid?: string;
  /** Runtime parameter json serialization for running evaluation use cases */
  runtime_parameter?: string;
  exec_times?: Int64;
  task_description?: string;
  Base?: base.Base;
}

export interface ExecCaseResponse {
  task?: Task;
  task_ids?: Array<Int64>;
  tasks?: Array<Task>;
  BaseResp?: base.BaseResp;
}

export interface ExecRuntimeParameter {
  /** map */
  runtime_parameter: string;
  exec_times: Int64;
}

export interface ExportBitableReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id: Int64;
  /** Manual rating Number of blind reviewers */
  manual_scoring_user_num?: Int64;
  Base?: base.Base;
}

export interface ExportBitableReportResponse {
  BaseResp?: base.BaseResp;
}

export interface ExportReportToCsvRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  /** CaseID is required for evaluation report export. */
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  source_id?: Int64;
  source_type?: ExportCSVSourceType;
  Base?: base.Base;
}

export interface ExportReportToCsvResponse {
  /** download link */
  download_url?: string;
  BaseResp?: base.BaseResp;
}

export interface FilterCondition {
  /** Filter fields, such as dataset labels, review dimensions, review dimension labels, etc */
  field?: FilterField;
  /** Operators such as equal to, contain, greater than, less than, etc */
  operator?: FilterOperatorType;
  /** Operation value; supports multiple types of operation values; when Operator is included, Value is separated by commas */
  value?: string;
}

export interface FilterNode {
  /** Node name (not required) */
  name?: string;
  /** Identification ID of the node */
  node_id?: Int64;
  /** Filter conditions on this node */
  filter_conditions?: FilterCondition;
  /** sub-node */
  children?: Array<FilterNode>;
  /** Logical operations such as AND, OR */
  logic_op?: FilterLogicOp;
}

export interface FornaxAgentAPI {
  open_api_key?: FornaxAgentOpenAPIKey;
}

export interface FornaxAgentObject {
  agent_id: Int64;
  faas_id: string;
  name?: string;
  avatar_url?: string;
  tmpl_type?: FornaxAgentTmplType;
  /** Target API for evaluation */
  api?: FornaxAgentAPI;
}

export interface FornaxAppObject {
  psm: string;
  env: string;
  cluster: string;
  region: string;
  app_id: string;
  client_id: string;
  /** For secondary search */
  object?: flow_devops_evaluation_object_callback.Object;
}

export interface GenAggregateComparisonReportRequest {
  aggregator_configs?: Array<AggregatorConfig>;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GenAggregateComparisonReportResponse {
  comparison_aggregate_report_infos?: Array<ComparisonAggregateReportInfo>;
  BaseResp?: base.BaseResp;
}

export interface GenAggregateReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GenAggregateReportResponse {
  BaseResp?: base.BaseResp;
}

export interface GenAnalysisChartReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Detailed configuration of analysis reports */
  analysis_chart_report_config: AnalysisChartReportConfig;
  space_id: Int64;
  Base?: base.Base;
}

export interface GenAnalysisChartReportResponse {
  analysis_chart_report_info?: AnalysisChartReportInfo;
  BaseResp?: base.BaseResp;
}

export interface GenAnnotationTaskCustomFilter {
  language?: GenAnnotationTaskCustomFilterLanguage;
  /** user-defined code */
  user_code?: string;
}

export interface GetAggregateReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetAggregateReportResponse {
  aggregate_report?: AggregateReport;
  BaseResp?: base.BaseResp;
}

export interface GetBatchTaskHistoryRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  object_id: Int64;
  object_type: Int64;
  Base?: base.Base;
}

export interface GetBatchTaskHistoryResponse {
  batch_task_rets?: Array<BatchTaskRet>;
  BaseResp?: base.BaseResp;
}

export interface GetBatchTaskRetRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  batch_task_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  Base?: base.Base;
}

export interface GetBatchTaskRetResponse {
  batch_task_ret?: BatchTaskRet;
  BaseResp?: base.BaseResp;
}

export interface GetBitableReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id: Int64;
  Base?: base.Base;
}

export interface GetBitableReportResponse {
  /** Bitable token */
  app_token?: string;
  url?: string;
  export_status: BitableStatus;
  import_status: BitableStatus;
  BaseResp?: base.BaseResp;
}

export interface GetCaseRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetCaseResponse {
  case?: Case;
  BaseResp?: base.BaseResp;
}

export interface GetContrastReportReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface GetContrastReportResp {
  /** Dataset column name */
  column_name?: Array<string>;
  /** rule information */
  column_rule_infos?: Array<ColumnRuleInfo>;
  /** indicator information */
  metrics_columns?: Array<ColumnRuleInfo>;
  /** manual annotation */
  manual_annotation_items?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationItem>;
  /** benchmark task */
  task_id?: Int64;
  /** compare task list */
  contrast_tasks?: Array<ContrastTask>;
  contrast_report_row_groups?: Array<ContrastReportRowGroup>;
  default_rule_group_id?: Int64;
  /** The key is the human annotation item ID, and the value is the annotation task ID. */
  manual_annotation_item_map?: Record<Int64, Int64>;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface GetContrastReportV2Req {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  custom_filter?: GenAnnotationTaskCustomFilter;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface GetContrastReportV2Resp {
  /** Dataset column name */
  column_name?: Array<string>;
  /** rule information */
  column_rule_infos?: Array<ColumnRuleInfo>;
  /** indicator information */
  metrics_columns?: Array<ColumnRuleInfo>;
  /** manual annotation */
  manual_annotation_items?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationItem>;
  /** benchmark task */
  task_id?: Int64;
  /** compare task list */
  contrast_tasks?: Array<ContrastTask>;
  contrast_report_row_groups?: Array<ContrastReportRowGroup>;
  default_rule_group_id?: Int64;
  /** The key is the human annotation item ID, and the value is the annotation task ID. */
  manual_annotation_item_map?: Record<Int64, Int64>;
  custom_filter_err_msg?: string;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface GetIntersectionEvaluatorDimensionsRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_infos: Array<ComparisonTaskInfo>;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetIntersectionEvaluatorDimensionsResponse {
  intersection_evaluator_infos?: Array<IntersectionEvaluatorInfo>;
  BaseResp?: base.BaseResp;
}

export interface GetTaskContrastReportMetaReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  Base?: base.Base;
}

export interface GetTaskContrastReportMetaResp {
  contrast_report_meta: ContrastReportMetaInfo;
  Base?: base.Base;
}

export interface GetTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetTaskResponse {
  task?: Task;
  BaseResp?: base.BaseResp;
}

export interface GetTaskRuleGroupIdRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetTaskRuleGroupIdResponse {
  rule_group_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface GetTasksRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_ids: Array<Int64>;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetTasksResponse {
  tasks?: Array<Task>;
  BaseResp?: base.BaseResp;
}

export interface GroupManualScore {
  row_group_id: Int64;
  rule_scores?: Record<Int64, EvaluateResult>;
}

export interface GroupTaskInfo {
  task_ids?: Array<Int64>;
  /** Second timestamp */
  create_time?: Int64;
}

export interface ImportBitableReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id: Int64;
  Base?: base.Base;
}

export interface ImportBitableReportResponse {
  BaseResp?: base.BaseResp;
}

export interface InitiateManualAnnotationTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id?: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id?: Int64;
  case_id?: Int64;
  /** manually tagged item list */
  item_ids?: Array<Int64>;
  name?: string;
  description?: string;
  /** identification scope */
  source_range?: flow_devops_evaluation_manual_annotation.SourceRange;
  /** Blind evaluation */
  blind_count?: Int64;
  source_type?: flow_devops_evaluation_manual_annotation.SourceType;
  custom_filter?: GenAnnotationTaskCustomFilter;
  Base?: base.Base;
}

export interface InitiateManualAnnotationTaskResp {
  id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface IntersectionEvaluatorInfo {
  /** Common EvaluatorType */
  evaluator_type: Int64;
  intersection_rule_infos?: Array<IntersectionRuleInfo>;
}

export interface IntersectionRuleInfo {
  rule_id: Int64;
  task_id: Int64;
  case_id: Int64;
  /** rule name */
  name?: string;
  /** Custom Evaluator Name */
  evaluator_type_name?: string;
  evaluator_process_type?: flow_devops_evaluation_evaluator.EvaluatorProcessType;
  evaluate_result_data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
}

export interface KillBatchTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  batch_task_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  Base?: base.Base;
}

export interface KillBatchTaskResponse {
  batch_task_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface KillRunningTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface KillRunningTaskResponse {
  task?: Task;
  BaseResp?: base.BaseResp;
}

export interface ListTaskContrastReportReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  task_id: Int64;
  Base?: base.Base;
}

export interface ListTaskContrastReportResp {
  contrast_report_meta_infos: Array<ContrastReportMetaInfo>;
  BaseResp?: base.BaseResp;
}

export interface ManualScore {
  row_id: Int64;
  /** Key = ruleID, the rule fails, the rule can be manually scored */
  rule_scores?: Record<Int64, EvaluateResult>;
  /** When Row selects manual evaluation, Row manually scores */
  row_score?: EvaluateResult;
}

export interface ManualScoreFowRowsRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** key:rowID */
  manual_scores?: Record<Int64, ManualScore>;
  space_id: Int64;
  /** key:rowGroupID */
  group_manual_scores?: Record<Int64, GroupManualScore>;
  Base?: base.Base;
}

export interface ManualScoreFowRowsResponse {
  /** key:rowID */
  row_eval_res_list?: Record<Int64, RowEvalRes>;
  BaseResp?: base.BaseResp;
}

export interface MGetCaseRequest {
  case_ids: Array<Int64>;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface MGetCaseResponse {
  cases?: Array<Case>;
  BaseResp?: base.BaseResp;
}

export interface Output {
  prediction: string;
}

/** Coze2.0Bot */
export interface PlaygroundCozeBotV2 {
  bot_id?: Int64;
  /** Create case version is empty, the task entity will carry the bot version when the current case runs */
  bot_version?: string;
  /** Bot type, default 0, is draft version */
  bot_info_type?: flow_devops_evaluation_object_callback.CozeBotInfoType;
  model_info?: flow_devops_evaluation_entity.ModelInfo;
  bot_name?: string;
  avatar_url?: string;
}

/** Coze2.0 model */
export interface PlaygroundCozeModel {
  /** Model ID */
  model_id?: string;
  /** Temperature, model output randomness, the larger the value, the more random, the smaller the more conservative (0-1] */
  temperature?: number;
  /** Maximum Token Reply */
  max_tokens?: number;
  /** Another model's output randomness, the larger the value, the more random [0, 1] */
  top_p?: number;
  /** When generating, sample the size of the candidate set */
  top_k?: number;
  /** Frequency penalty, adjust the frequency of words in the generated content, the fewer positive words are [-1.0, 1.0] */
  frequency_penalty?: number;
  /** There is a penalty, adjust the frequency of new words in the generated content, avoid repeating words with positive values, and use new words [-1.0, 1.0] */
  presence_penalty?: number;
  /** model reply content format */
  response_format?: ModelResponseFormat;
  /** Model name */
  model_name?: string;
}

export interface PullCaseExecHistoryRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  cursor: string;
  'FlowDevops-Agw-AppId'?: number;
  limit: number;
  space_id: Int64;
  /** Start time, Unix timestamp */
  start_time?: Int64;
  /** End time, Unix timestamp */
  end_time?: Int64;
  DatasetIDs?: Array<Int64>;
  /** task description */
  task_description?: string;
  Base?: base.Base;
}

export interface PullCaseExecHistoryResponse {
  tasks?: Array<Task>;
  has_more?: boolean;
  next_cursor?: string;
  /** Group display task information */
  group_task_info_list?: Array<GroupTaskInfo>;
  /** deprecated */
  coze_entity_map?: Record<Int64, ShowEntity>;
  /** deprecated */
  prompt_entity_map?: Record<Int64, ShowEntity>;
  user_entity_map?: Record<Int64, ShowEntity>;
  /** deprecated */
  agent_entity_map?: Record<Int64, ShowEntity>;
  BaseResp?: base.BaseResp;
}

export interface PullCaseExecHistoryV2Request {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  cursor: string;
  'FlowDevops-Agw-AppId'?: number;
  limit: number;
  space_id: Int64;
  /** Start time, Unix timestamp */
  start_time?: Int64;
  /** End time, Unix timestamp */
  end_time?: Int64;
  dataset_ids?: Array<Int64>;
  creator_ids?: Array<Int64>;
  /** task description */
  task_description?: string;
  Base?: base.Base;
}

export interface PullCaseExecHistoryV2Response {
  tasks?: Array<Task>;
  has_more?: boolean;
  next_cursor?: string;
  /** Group display task information */
  group_task_info_list?: Array<GroupTaskInfo>;
  /** deprecated */
  coze_entity_map?: Record<Int64, ShowEntity>;
  /** deprecated */
  prompt_entity_map?: Record<Int64, ShowEntity>;
  user_entity_map?: Record<Int64, ShowEntity>;
  /** deprecated */
  agent_entity_map?: Record<Int64, ShowEntity>;
  BaseResp?: base.BaseResp;
}

export interface PullCaseRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  cursor: string;
  'FlowDevops-Agw-AppId'?: number;
  limit: number;
  tag_name?: string;
  tag_value?: string;
  /** -- search fields -- */
  fuzzy_name?: string;
  creator_id?: Int64;
  region?: string;
  /** To evaluate object types, see EvalObject. ObjectType */
  object_type?: Int64;
  dataset_ids?: Array<Int64>;
  Base?: base.Base;
}

export interface PullCaseResponse {
  cases?: Array<Case>;
  has_more?: boolean;
  next_cursor?: string;
  /** Deprecated: CozeEntityMap is no longer used Get coze information from EvalObject
deprecated */
  coze_entity_map?: Record<Int64, ShowEntity>;
  /** PromptEntityMap UserEntityMap AgentEntityMap All subsequent migrations to get from EvalObject
deprecated */
  prompt_entity_map?: Record<Int64, ShowEntity>;
  user_entity_map?: Record<Int64, ShowEntity>;
  /** deprecated */
  agent_entity_map?: Record<Int64, ShowEntity>;
  BaseResp?: base.BaseResp;
}

export interface PullCaseV2Request {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  cursor: string;
  'FlowDevops-Agw-AppId'?: number;
  limit: number;
  tag_name?: string;
  tag_value?: string;
  /** -- search fields -- */
  fuzzy_name?: string;
  creator_id?: Int64;
  region?: string;
  /** To evaluate object types, see EvalObject. ObjectType */
  object_type?: Int64;
  dataset_ids?: Array<Int64>;
  Base?: base.Base;
}

export interface PullCaseV2Response {
  cases?: Array<Case>;
  has_more?: boolean;
  next_cursor?: string;
  /** Deprecated: CozeEntityMap is no longer used Get coze information from EvalObject
deprecated */
  coze_entity_map?: Record<Int64, ShowEntity>;
  /** PromptEntityMap UserEntityMap AgentEntityMap All subsequent migrations to get from EvalObject
deprecated */
  prompt_entity_map?: Record<Int64, ShowEntity>;
  user_entity_map?: Record<Int64, ShowEntity>;
  /** deprecated */
  agent_entity_map?: Record<Int64, ShowEntity>;
  BaseResp?: base.BaseResp;
}

export interface PullTaskAnalysisChartReportsRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  cursor: string;
  limit: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface PullTaskAnalysisChartReportsResponse {
  analysis_chart_report_infos?: Array<AnalysisChartReportInfo>;
  has_more?: boolean;
  next_cursor?: string;
  BaseResp?: base.BaseResp;
}

export interface RetryExecBatchTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  batch_task_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** retry mode */
  mode: BatchTaskRetryMode;
  Base?: base.Base;
}

export interface RetryExecBatchTaskResponse {
  batch_task_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface RetryExecTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  /** retry mode */
  mode?: RetryMode;
  row_group_id?: Array<Int64>;
  Base?: base.Base;
}

export interface RetryExecTaskResponse {
  task?: Task;
  BaseResp?: base.BaseResp;
}

export interface RowContrastReportInfo {
  /** The key is the task ID. */
  row_report_map?: Record<Int64, RowReport>;
}

export interface RowEvalCell {
  /** Manual scoring, valid only at ManualStatus = Completed */
  manual_result?: EvaluateResult;
  /** Key: rule_id, row-level data, evaluation results for individual rules */
  rule_eval_report_map?: Record<Int64, RowEvalReport>;
  token?: Int64;
  consuming?: Int64;
  create_time?: Int64;
  end_time?: Int64;
  space_id?: Int64;
  /** The total score aggregated by weight of all automated evaluation rules or human scoring dimensions in this row */
  score?: number;
  rule_eval_reports?: Array<RowEvalReport>;
  row_metrics?: Array<RowEvalReport>;
  manual_annotation_reports?: Array<flow_devops_evaluation_manual_annotation.ManualAnnotationLabelTask>;
}

/** The score corresponding to each evaluator */
export interface RowEvalReport {
  /** TODO: Later, you need to convert it to a real evaluatorName, and temporarily use EvaluatorType to represent an evaluator */
  evaluator_type?: Int64;
  row_eval_result?: EvaluateResult;
  /** The name of the evaluator */
  evaluator_type_name?: string;
  weight?: Int64;
  /** If it is a row-level rule, it needs to be displayed in a separate column */
  is_row_evaluator?: boolean;
  name?: string;
}

export interface RowEvalRes {
  task_id?: Int64;
  /** Manual scoring, valid only at ManualStatus = Completed */
  manual_result?: EvaluateResult;
  /** RowID of data */
  row_id?: Int64;
  row_group_id?: Int64;
  evaluator_id?: Int64;
  /** Key: RuleID, row-level data, evaluation results for individual rules */
  rule_eval_results?: Record<Int64, EvaluateResult>;
  token?: Int64;
  consuming?: Int64;
  /** bot run result */
  output?: string;
  create_time?: Int64;
  end_time?: Int64;
  space_id?: Int64;
  case_id?: Int64;
}

/** Row dimension evaluator */
export interface RowEvaluatorSource {
  /** Automatic Evaluator Resource Failure in Manual Mode */
  mode?: EvaluateMode;
  row_id?: Int64;
  row_group_id?: Int64;
  /** Current Row Binding Evaluator Resource */
  rule_group_id?: Int64;
}

export interface RowGroupContrastReportInfo {
  /** The key is the task ID. */
  row_group_report_map?: Record<Int64, RowGroupReport>;
}

export interface RowGroupReport {
  row_eval_reports?: Array<RowEvalReport>;
}

export interface RowReport {
  /** Dataset structure */
  row_id: Int64;
  /** Dataset cell information */
  cells?: Array<flow_devops_evaluation_callback_common.Content>;
  /** actual output */
  multi_output?: flow_devops_evaluation_object_callback.Output;
  /** Evaluator report information */
  row_eval_cell: RowEvalCell;
  /** track information */
  trajectory?: flow_devops_evaluation_evaluator_callback.Trajectory;
  run_state?: RowRunState;
  /** Row the associated logID at execution time */
  log_id?: string;
  error?: RowRunError;
  /** In the presence of a row-level evaluator, the group_id of the row-level evaluator */
  row_rule_group_id?: Int64;
  /** Whether to jump evaluation object call trace */
  direct_object_trace?: boolean;
}

export interface RowRunError {
  code: Int64;
  message: string;
  /** for prompt platform */
  detail: string;
  BizError?: BizError;
}

export interface RuleAggregateResult {
  aggregate_result_cells?: Array<AggregateResultCell>;
  rule_id?: Int64;
}

export interface ScoringThreshold {
  /** pass rate threshold */
  pass_threshold?: number;
  /** Merit Rate Threshold */
  excellent_threshold?: number;
}

/** Only for display in the form */
export interface ShowEntity {
  /** Display ID, user_id, prompt_id */
  entity_id: Int64;
  /** Show the name, for example prompt_name, bot_name, user_name */
  entity_name?: string;
  entity_type?: ShowEntityType;
  /** Display small icons, such as avatars */
  image_url?: string;
  /** If the user has an email address */
  email?: string;
}

export interface Task {
  id?: Int64;
  status?: TaskStatus;
  dataset_id?: Int64;
  /** The evaluation object entity when running the case, including version information */
  eval_object?: EvalObject;
  /** Number of rows of test data running */
  row_run_cnt?: Int64;
  /** overall task cost */
  token?: Int64;
  /** Overall task time */
  consuming?: Int64;
  /** Task start time */
  start_time?: Int64;
  /** Task execution completion time */
  end_time?: Int64;
  creator_id?: Int64;
  /** log_id to carry out this task */
  log_id?: string;
  /** The reason for the failure of this execution */
  object_output_err?: string;
  /** Task Statistics, RowGroup Dimensions */
  task_stats?: TaskStats;
  /** Task manual scoring statistics, Row dimension */
  task_manual_stats?: TaskManualStats;
  /** Task human scoring status */
  task_manual_status?: TaskManualStatus;
  /** Aggregate report generation status */
  aggr_report_gen_status?: TaskAggrReportGenStatus;
  score?: number;
  passing_rate?: number;
  excellent_rate?: number;
  /** Passing Merit Threshold */
  threshold?: ScoringThreshold;
  /** Deprecated evaluation object overall token consumption */
  object_token_usage?: TokenUsage;
  /** Runtime parameters, JSON serialization */
  runtime_parameter?: string;
  /** Overall token consumption */
  object_token_cost?: TokenUsage;
  /** Dataset name */
  dataset_name?: string;
  /** Original data source ID */
  original_dataset_id?: Int64;
  /** Evaluator overall token consumption */
  evaluator_token_usage?: TokenUsage;
  credit_cost?: number;
  description?: string;
}

export interface TaskManualStats {
  needed_row_count?: Int64;
  completed_row_count?: Int64;
  /** Number of conversation groups requiring group-granular human scoring */
  needed_row_group_count?: Int64;
  /** Number of dialogue groups that have completed group-granular manual scoring */
  completed_row_group_count?: Int64;
}

export interface TaskStats {
  uncompleted_count?: Int64;
  success_count?: Int64;
  fail_count?: Int64;
  /** Number of rows that were successfully executed */
  success_row_count?: Int64;
  /** Number of rows that failed to execute */
  fail_row_count?: Int64;
  /** Total number of rows executed */
  total_row_count?: Int64;
}

export interface TokenUsage {
  /** Input token consumption */
  input_token: Int64;
  /** Output token consumption */
  output_token: Int64;
}

export interface UnbindDatasetRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  dataset_id: Int64;
  Base?: base.Base;
}

export interface UnbindDatasetResponse {
  BaseResp?: base.BaseResp;
}

export interface UpdateAnalysisChartReportRequest {
  'FlowDevops-Agw-UserId'?: string;
  task_id: Int64;
  case_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Analytics Chart ID */
  analysis_chart_report_id: Int64;
  /** Chart Type */
  analysis_chart_report_config: AnalysisChartReportConfig;
  space_id: Int64;
  Base?: base.Base;
}

export interface UpdateAnalysisChartReportResponse {
  analysis_chart_report_info?: AnalysisChartReportInfo;
  BaseResp?: base.BaseResp;
}

export interface UpdateCaseRequest {
  case_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  name?: string;
  desc?: string;
  runtime_parameter?: string;
  Base?: base.Base;
}

export interface UpdateCaseResponse {
  case?: Case;
  BaseResp?: base.BaseResp;
}

export interface UpdateContrastReportReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  contrast_report_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  name?: string;
  Base?: base.Base;
}

export interface UpdateContrastReportResp {
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
