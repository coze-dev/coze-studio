/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';
import * as flow_devops_evaluation_dataset from './flow_devops_evaluation_dataset';
import * as flow_devops_evaluation_callback_common from './flow_devops_evaluation_callback_common';
import * as flow_devops_evaluation_object_callback from './flow_devops_evaluation_object_callback';
import * as flow_devops_evaluation_evaluator_callback from './flow_devops_evaluation_evaluator_callback';

export type Int64 = string | number;

export enum AnnotationItemDataType {
  Unknown = 0,
  /** numerical scoring */
  Score = 1,
  /** numerical value */
  Value = 2,
  /** option */
  Select = 3,
  /** plain text description */
  PlainText = 4,
}

export enum ManualAnnotationLabelTaskStatus {
  Created = 10,
  Finished = 50,
}

export enum ManualAnnotationTaskCreateStatus {
  Unknown = 0,
  Creating = 1,
  Failed = 2,
  Success = 3,
}

/** label task write-back status */
export enum ManualAnnotationTaskWriteBackStatus {
  Unknown = 0,
  /** Mission in Progress */
  Running = 1,
  /** Mission successful */
  Success = 2,
  /** Mission failed */
  Failed = 3,
}

export enum ManualStatus {
  /** No manual labeling is required. */
  NoNeed = 0,
  /** Manual labeling is required. */
  Need = 1,
}

export enum ObjectType {
  /** Evaluation task row with objectID task_id + row_id */
  EvaluationTaskRow = 1,
}

export enum RowGroupRunState {
  Unknown = -1,
  /** in line */
  Queueing = 0,
  /** in progress */
  Processing = 1,
  /** success */
  Success = 2,
  /** fail */
  Fail = 3,
  /** Results to be evaluated */
  Evaluating = 4,
  /** terminate execution */
  Terminal = 5,
}

export enum RowRunState {
  /** Not started */
  Queueing = 0,
  /** successful execution */
  Success = 1,
  /** execution failed */
  Fail = 2,
}

export enum SourceType {
  /** Evaluation comparison report, sourceID is the evaluation comparison report ID */
  EvaluationContrastReport = 1,
  /** Evaluation task, sourceID is the evaluation task ID */
  EvaluationTask = 2,
  /** No source */
  NoSource = 100,
}

export enum VisibleArea {
  Unknown = 0,
  /** Visible in the evaluation module */
  Evaluation = 1,
  /** Visible in the annotation module */
  ManuaAnnotation = 2,
}

export interface BatchAssignManualAnnotationLabelTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id?: Int64;
  manual_annotation_label_task_ids?: Array<Int64>;
  assign_annotator_id?: Int64;
  Base?: base.Base;
}

export interface BatchAssignManualAnnotationLabelTaskResp {
  BaseResp?: base.BaseResp;
}

export interface BatchCreateManualAnnotationItemReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** manual annotation */
  manual_annotation_items?: Array<ManualAnnotationItem>;
  Base?: base.Base;
}

export interface BatchCreateManualAnnotationItemResp {
  item_ids?: Array<Int64>;
  BaseResp?: base.BaseResp;
}

export interface BatchCreateManualAnnotationLabelTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id: Int64;
  /** Manual labeling Marking task list */
  manual_annotation_label_tasks?: Array<ManualAnnotationLabelTask>;
  Base?: base.Base;
}

export interface BatchCreateManualAnnotationLabelTaskResp {
  BaseResp?: base.BaseResp;
}

export interface BatchGetManualAnnotationItemReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  item_ids?: Array<Int64>;
  Base?: base.Base;
}

export interface BatchGetManualAnnotationItemResp {
  manual_annotation_items?: Array<ManualAnnotationItem>;
  BaseResp?: base.BaseResp;
}

export interface BizError {
  err_msg: string;
  err_code: Int64;
}

export interface BlindLabelProgress {
  blind_num?: Int64;
  finished?: Int64;
  all?: Int64;
}

export interface CancelSelectAnnotationLabelResultForWriteBackReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Manual labeling Marking task ID */
  manual_annotation_label_task_id?: Int64;
  item_id?: Int64;
  Base?: base.Base;
}

export interface CancelSelectAnnotationLabelResultForWriteBackResp {
  BaseResp?: base.BaseResp;
}

export interface ColumnRuleInfo {
  rule_id: Int64;
  evaluator_type: Int64;
  /** Custom Evaluator Name */
  evaluator_type_name: string;
  /** rule name */
  name?: string;
  /** Merge cells for dialog group granularity rules */
  granularity?: flow_devops_evaluation_entity.EvaluatorGranularity;
}

export interface ContrastTask {
  case_id: Int64;
  task_id: Int64;
}

export interface ContrastTaskPayload {
  case_id: Int64;
  task_id: Int64;
  payload: Array<DashboardRowGroupPayload>;
}

export interface CreateManualAnnotationTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  source_id: Int64;
  source_type: SourceType;
  /** manually tagged item list */
  manual_annotation_items?: Array<ManualAnnotationItem>;
  invisible?: boolean;
  name?: string;
  description?: string;
  /** identification scope */
  source_range?: SourceRange;
  /** Blind evaluation */
  blind_count?: Int64;
  /** visibility */
  visible_area?: VisibleArea;
  /** Other information */
  extra?: Extra;
  /** Task creation status */
  create_status?: ManualAnnotationTaskCreateStatus;
  Base?: base.Base;
}

export interface CreateManualAnnotationTaskResp {
  id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface DashboardAnnotationTaskRequest {
  'FlowDevops-Agw-UserId'?: string;
  manual_annotation_task_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface DashboardAnnotationTaskResponse {
  /** Dataset header information, each row is a dataset (input, reference_output, variable) */
  column_name: Array<string>;
  /** rule header information */
  column_rule_info?: Array<ColumnRuleInfo>;
  /** label header information
manual annotation */
  manual_annotation_items?: Array<ManualAnnotationItem>;
  /** Blind evaluation group number header information */
  column_blind_nums?: Array<Int64>;
  /** Marking object information */
  payloads?: Array<DashboardRowGroupPayload>;
  /** Compare task marking object information */
  contrast_task_payloads?: Array<ContrastTaskPayload>;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface DashboardRowGroupPayload {
  row_group_id?: Int64;
  rows?: Array<DashboardRowPayload>;
  row_group_system_info?: RowGroupSystemInfo;
  /** rowGroup granularity evaluation ruleID - > Results */
  row_group_rule_eval_reports?: Array<RowEvalReport>;
}

export interface DashboardRowPayload {
  row_id?: Int64;
  /** Evaluation data preparation phase generation */
  dataset?: RowDataset;
  /** Evaluation object result report generation */
  object_output?: RowObjectOutput;
  /** Evaluation rule execution report generation */
  rule_output?: RowRuleOutput;
  /** Manual rule execution report generation */
  manual_rule_output?: RowManualRuleOutput;
  /** Evaluation indicators are reported and generated */
  metrics_output?: RowMetricsOutput;
  /** Evaluation system managed task running generation */
  system_info?: RowSystemInfo;
  /** Label result information */
  annotation_payload?: RowAnnotationPayload;
}

export interface DeleteManualAnnotationItemReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_item_id: Int64;
  Base?: base.Base;
}

export interface DeleteManualAnnotationItemResp {
  BaseResp?: base.BaseResp;
}

export interface DeleteManualAnnotationTaskItemReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id: Int64;
  manual_annotation_item_id: Int64;
  Base?: base.Base;
}

export interface DeleteManualAnnotationTaskItemResp {
  BaseResp?: base.BaseResp;
}

export interface DeleteManualAnnotationTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id?: Int64;
  Base?: base.Base;
}

export interface DeleteManualAnnotationTaskResp {
  BaseResp?: base.BaseResp;
}

export interface EvaluateResult {
  /** score */
  score?: number;
  /** Information on the scoring process and results */
  reasoning?: string;
  /** Whether manual scoring is required, when the current rules do not automatically evaluate the results, ManualStatus = ManualStatus */
  manual_status?: ManualStatus;
  /** Evaluator error */
  error?: RowRunError;
  data?: EvaluateResultData;
}

export interface EvaluateResultData {
  score?: number;
  value?: string;
  option?: flow_devops_evaluation_entity.EvaluateResultOption;
  plain_text?: string;
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  value_type?: flow_devops_evaluation_entity.EvaluateResultValueType;
}

export interface ExportAnnotationTaskToCsvRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  annotation_task_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  Base?: base.Base;
}

export interface ExportAnnotationTaskToCsvResponse {
  /** download link */
  download_url?: string;
  BaseResp?: base.BaseResp;
}

export interface Extra {
  case_id?: Int64;
  contrast_tasks?: Array<ContrastTask>;
}

export interface GetManualAnnotationLabelTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_label_task_id?: Int64;
  Base?: base.Base;
}

export interface GetManualAnnotationLabelTaskResp {
  manual_annotation_label_tasks?: Array<ManualAnnotationLabelTask>;
  BaseResp?: base.BaseResp;
}

export interface GetManualAnnotationTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id: Int64;
  Base?: base.Base;
}

export interface GetManualAnnotationTaskResp {
  manual_annotation_task?: ManualAnnotationTask;
  BaseResp?: base.BaseResp;
}

export interface LabelProgress {
  blind_label_progress_list?: Array<BlindLabelProgress>;
}

export interface ListManualAnnotationItemReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  source_id?: Int64;
  source_type?: SourceType;
  /** -- search fields -- */
  fuzzy_name?: string;
  tag_ids?: Array<Int64>;
  annotation_item_data_types?: Array<flow_devops_evaluation_entity.EvaluateResultDataType>;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface ListManualAnnotationItemResp {
  manual_annotation_items?: Array<ManualAnnotationItem>;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface ListManualAnnotationLabelTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id?: Int64;
  object_ids?: Array<string>;
  object_type?: ObjectType;
  status?: Array<ManualAnnotationLabelTaskStatus>;
  assign_annotator_ids?: Array<Int64>;
  actual_annotator_ids?: Array<Int64>;
  blind_nums?: Array<Int64>;
  serial_nums?: Array<Int64>;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface ListManualAnnotationLabelTaskResp {
  manual_annotation_label_tasks?: Array<ManualAnnotationLabelTask>;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface ListManualAnnotationTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  source_id?: Int64;
  source_types?: Array<SourceType>;
  /** visibility */
  visible_area?: VisibleArea;
  /** founder */
  creator_id?: Int64;
  /** name */
  name?: string;
  assign_annotator_ids?: Array<Int64>;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface ListManualAnnotationTaskResp {
  manual_annotation_tasks?: Array<ManualAnnotationTask>;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface ManualAnnotationItem {
  id?: Int64;
  name?: string;
  /** Data types: numeric ratings, options, plain text */
  annotation_item_data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** rating range */
  scope?: ScoringScope;
  options?: Array<flow_devops_evaluation_entity.EvaluateResultOption>;
  space_id?: Int64;
  source_id?: Int64;
  source_type?: SourceType;
  /** Labels for the Fornax tag management platform */
  tags?: Array<flow_devops_evaluation_entity.Tag>;
  creator_id?: Int64;
  delete_time?: Int64;
  create_time?: Int64;
  update_time?: Int64;
}

export interface ManualAnnotationLabelResult {
  /** human callout ID */
  manual_annotation_item_id?: Int64;
  score?: number;
  value?: string;
  option?: string;
  plain_text?: string;
  reasoning?: string;
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** Has it been selected? */
  selected?: boolean;
}

export interface ManualAnnotationLabelTask {
  /** human annotation subtask ID */
  id?: Int64;
  /** human annotation task ID */
  manual_annotation_task_id?: Int64;
  space_id?: Int64;
  /** label object row unique identifier */
  object_id?: string;
  /** annotation object row type */
  object_type?: ObjectType;
  /** manually label the results */
  manual_annotation_label_results?: Array<ManualAnnotationLabelResult>;
  status?: ManualAnnotationLabelTaskStatus;
  assign_annotator_id?: Int64;
  actual_annotator_id?: Int64;
  blind_num?: Int64;
  source_num?: Int64;
  serial_num?: Int64;
  payload?: DashboardRowGroupPayload;
  /** The marking task corresponds to the rows in the rowGroup */
  round_in_row_group?: Int64;
  creator_id?: Int64;
  delete_time?: Int64;
  create_time?: Int64;
  update_time?: Int64;
}

export interface ManualAnnotationTask {
  id?: Int64;
  space_id?: Int64;
  /** trigger source ID */
  source_id?: Int64;
  /** trigger source type */
  source_type?: SourceType;
  /** manually tagged item list */
  manual_annotation_items?: Array<ManualAnnotationItem>;
  name?: string;
  description?: string;
  /** identification scope */
  source_range?: SourceRange;
  /** Blind evaluation */
  blind_count?: Int64;
  /** visible area */
  visible_area?: VisibleArea;
  /** Marking progress */
  label_progress?: LabelProgress;
  /** Other information */
  extra?: Extra;
  /** Task creation status */
  create_status?: ManualAnnotationTaskCreateStatus;
  /** write-back state */
  write_back_status?: ManualAnnotationTaskWriteBackStatus;
  creator_id?: Int64;
  delete_time?: Int64;
  create_time?: Int64;
  update_time?: Int64;
}

export interface Range {
  start?: Int64;
  end?: Int64;
}

export interface RowAnnotationPayload {
  manual_annotation_label_tasks?: Array<ManualAnnotationLabelTask>;
}

export interface RowDataset {
  columns?: Array<flow_devops_evaluation_dataset.ColumnInfo>;
  data?: Array<flow_devops_evaluation_callback_common.Content>;
}

/** The score corresponding to each evaluator */
export interface RowEvalReport {
  evaluator_type?: Int64;
  row_eval_result?: EvaluateResult;
  /** The name of the evaluator */
  evaluator_type_name?: string;
  weight?: Int64;
  /** If it is a row-level rule, it needs to be displayed in a separate column */
  is_row_evaluator?: boolean;
  name?: string;
}

export interface RowGroupSystemInfo {
  /** The number of the rowGroup on the marked details page, starting with 1 */
  row_group_serial_num?: Int64;
  /** The number of rowGroup in the dataset, starting from 1 */
  source_num?: Int64;
  tags?: Array<string>;
}

export interface RowManualRuleOutput {
  columns?: Array<ColumnRuleInfo>;
  rule_eval_reports?: Array<RowEvalReport>;
}

export interface RowMetricsOutput {
  columns?: Array<ColumnRuleInfo>;
  row_metrics?: Array<RowEvalReport>;
}

/** Evaluation Object Output Data for Dialogue Granularity */
export interface RowObjectOutput {
  /** evaluation object output
actual output */
  multi_output?: flow_devops_evaluation_object_callback.Output;
  /** Evaluate intermediate process information
track information */
  trajectory?: flow_devops_evaluation_evaluator_callback.Trajectory;
}

export interface RowRuleOutput {
  columns?: Array<ColumnRuleInfo>;
  rule_eval_reports?: Array<RowEvalReport>;
  /** The total score of all automatic evaluation rules in this row aggregated by weight */
  score?: number;
}

export interface RowRunError {
  code: Int64;
  message: string;
  /** for prompt platform */
  detail: string;
  BizError?: BizError;
}

export interface RowSystemInfo {
  run_state?: RowRunState;
  /** Row the associated logID at execution time */
  log_id?: string;
  error?: RowRunError;
  /** Whether to jump evaluation object call trace */
  direct_object_trace?: boolean;
}

export interface ScoringScope {
  /** Upper Rating Range */
  max_score: number;
  /** Lower limit of rating range */
  min_score: number;
}

export interface SelectAnnotationLabelResultForWriteBackReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Manual labeling Marking task ID */
  manual_annotation_label_task_id?: Int64;
  item_id?: Int64;
  Base?: base.Base;
}

export interface SelectAnnotationLabelResultForWriteBackResp {
  BaseResp?: base.BaseResp;
}

export interface SourceRange {
  range?: Range;
}

export interface SubmitManualAnnotationLabelTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Manual labeling Marking task ID */
  manual_annotation_label_task_id?: Int64;
  /** Manual labeling Marking results */
  manual_annotation_label_results?: Array<ManualAnnotationLabelResult>;
  Base?: base.Base;
}

export interface SubmitManualAnnotationLabelTaskResp {
  BaseResp?: base.BaseResp;
}

export interface UpdateManualAnnotationItemReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_item_id: Int64;
  manual_annotation_item?: ManualAnnotationItem;
  Base?: base.Base;
}

export interface UpdateManualAnnotationItemResp {
  BaseResp?: base.BaseResp;
}

export interface UpdateManualAnnotationTaskReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id: Int64;
  manual_annotation_task: ManualAnnotationTask;
  Base?: base.Base;
}

export interface UpdateManualAnnotationTaskResp {
  BaseResp?: base.BaseResp;
}

export interface UpdateManualAnnotationTaskVisibleReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  manual_annotation_task_id: Int64;
  Base?: base.Base;
}

export interface UpdateManualAnnotationTaskVisibleResp {
  BaseResp?: base.BaseResp;
}

export interface WriteBackAnnotationResultsReq {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** human annotation task ID */
  manual_annotation_task_id?: Int64;
  Base?: base.Base;
}

export interface WriteBackAnnotationResultsResp {
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
