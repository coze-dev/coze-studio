/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as resource_common from './resource_common';

export type Int64 = string | number;

export interface BatchResourceCopyDoRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  ResourceLocators?: Array<resource_common.ResourceLocator>;
  /** The child resource map referenced by this resource */
  ChildrenCopyResults?: Array<resource_common.ResourceCopyResult>;
}

export interface BatchResourceCopyDoResponse {
  CopyResults?: Array<resource_common.ResourceCopyResult>;
}

export interface BatchSyncResourceRequest {
  ResourceList?: Array<resource_common.StaticResourceInfo>;
  Op?: resource_common.SyncOperation;
}

export interface BatchSyncResourceResponse {}

export interface LibraryResourceListRequest {
  /** Whether created by the current user, 0 - unfiltered, 1 - current user */
  user_filter?: number;
  /** [4,1] 0 means do not filter */
  res_type_filter?: Array<number>;
  /** name */
  name?: string;
  /** Published status, 0 - unfiltered, 1 - unpublished, 2 - published */
  publish_status_filter?: number;
  /** User's space ID */
  space_id: string;
  /** 6: optional i32 pages,//number of pages, the first page is 1. Default 1.ges, the first page is 1. Default 1.
The number of data bars read at one time, the default is 10, and the maximum is 100. */
  size?: number;
  /** 8: optional i32 offset,//data record offset, meaning read from the first (offset + 1) recordto start reading from the (offset + 1) record
Cursor, used for paging, default 0, the first request can not be passed, subsequent requests need to bring the last returned cursor */
  cursor?: string;
  /** The field used to specify the custom search, do not fill in the default only name matches, eg [] string {name, custom} matches the name and custom fields full_text */
  search_keys?: Array<string>;
  /** Do you need to return image review when the res_type_filter is [2 workflow] */
  is_get_imageflow?: boolean;
}

export interface LibraryResourceListResponse {
  code?: Int64;
  msg?: string;
  resource_list?: Array<resource_common.ResourceInfo>;
  /** 4  : i32 total,
Cursor, the cursor for the next request */
  cursor?: string;
  /** Is there still data to be pulled? */
  has_more?: boolean;
}

export interface LibraryResourceListRpcRequest {
  /** Whether created by the current user, 0 - unfiltered, 1 - current user */
  user_filter?: number;
  /** [4,1] 0 means do not filter */
  res_type_filter?: Array<number>;
  /** name */
  name?: string;
  /** Published status, 0 - unfiltered, 1 - unpublished, 2 - published */
  publish_status_filter?: number;
  /** User's space ID */
  space_id: string;
  /** Number of pages, the first page is 1. Default 1. */
  page?: number;
  /** The number of data bars read at one time, the default is 10, and the maximum is 100. */
  size?: number;
  /** Data record offset, meaning to start reading from the (offset + 1) record */
  offset?: number;
  /** Cursor, used for paging, default 0, the first request can not be passed, subsequent requests need to bring the last returned cursor */
  cursor?: string;
  /** user id */
  devID?: Int64;
  /** The field used to specify the custom search, do not fill in the default only name matches, eg [] string {name, custom} matches the name and custom fields full_text */
  search_keys?: Array<string>;
  is_get_imageflow?: boolean;
}

export interface LibraryResourceListRpcResponse {
  resource_list?: Array<resource_common.ResourceInfo>;
  /** Cursor, the cursor for the next request */
  cursor?: string;
  /** Is there still data to be pulled? */
  has_more?: boolean;
}

export interface MGetDisplayResourceInfoRequest {
  /** The maximum number of one page can be transferred, and the implementer can limit the maximum to 100. */
  ResIDs?: Array<Int64>;
  /** The current user, the implementation is used to determine the authority */
  CurrentUserID?: Int64;
}

export interface MGetDisplayResourceInfoResponse {
  ResourceList?: Array<resource_common.DisplayResourceInfo>;
}

export interface MGetProjectResourceInfoRequest {
  /** Project ID */
  ProjectID?: Int64;
  /** current user */
  CurrentUserID?: Int64;
  /** User space id */
  SpaceID?: Int64;
  /** Whether to ignore permissions and pull directly according to the project id */
  SkipPermission?: boolean;
  /** Specify the resources to obtain a version of the project */
  ProjectVersion?: Int64;
}

export interface MGetProjectResourceInfoResponse {
  ResourceList?: Array<resource_common.ProjectResourceInfo>;
}

export interface ProjectResourceListRequest {
  /** Project ID */
  project_id: string;
  /** User space id */
  space_id?: string;
  /** Specify the resources to obtain a version of the project */
  project_version?: string;
}

export interface ProjectResourceListResponse {
  code?: Int64;
  msg?: string;
  resource_groups?: Array<resource_common.ProjectResourceGroup>;
}

export interface ProjectResourceListRpcRequest {
  /** Project ID */
  ProjectID?: Int64;
  /** current user */
  CurrentUserID?: Int64;
  /** User space id */
  SpaceID?: Int64;
  /** Specify the resources to obtain a version of the project */
  ProjectVersion?: Int64;
}

export interface ProjectResourceListRpcResponse {
  resource_groups?: Array<resource_common.ProjectResourceGroup>;
}

export interface ResourceCopyCanceledRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
}

export interface ResourceCopyCanceledResponse {}

export interface ResourceCopyCancelRequest {
  /** Copy task ID, used to query task status or cancel or retry tasks */
  task_id?: string;
}

export interface ResourceCopyCancelResponse {
  code?: Int64;
  msg?: string;
}

export interface ResourceCopyCancelRpcRequest {
  /** Project ID */
  TaskID: Int64;
}

export interface ResourceCopyCancelRpcResponse {}

export interface ResourceCopyDetailRequest {
  /** Copy task ID, used to query task status or cancel or retry tasks */
  task_id?: string;
}

export interface ResourceCopyDetailResponse {
  code?: Int64;
  msg?: string;
  task_detail?: resource_common.ResourceCopyTaskDetail;
}

export interface ResourceCopyDispatchRequest {
  /** Scenario, only supports the operation of a single resource */
  scene?: resource_common.ResourceCopyScene;
  /** The resource ID selected by the user to copy/move */
  res_id?: string;
  res_type?: resource_common.ResType;
  /** Project ID */
  project_id?: string;
  res_name?: string;
  /** Target space id for cross-space replication */
  target_space_id?: string;
}

export interface ResourceCopyDispatchResponse {
  code?: Int64;
  msg?: string;
  /** Copy task ID, used to query task status or cancel or retry tasks */
  task_id?: string;
  /** The reason why the operation cannot be performed is to return multilingual text */
  failed_reasons?: Array<resource_common.ResourceCopyFailedReason>;
}

export interface ResourceCopyDispatchRpcRequest {
  Scene?: resource_common.ResourceCopyScene;
  ResID?: Int64;
  ResType?: resource_common.ResType;
  ProjectID?: Int64;
  /** The current user, the implementation is used to determine the authority */
  CurrentUserID?: Int64;
  ResName?: string;
  /** Target space id for cross-space replication */
  TargetSpaceID?: Int64;
}

export interface ResourceCopyDispatchRpcResponse {
  /** Copy task ID, used to query task status or cancel or retry tasks */
  TaskID?: Int64;
  FailedReasons?: Array<resource_common.ResourceCopyFailedReason>;
}

export interface ResourceCopyDoRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  ResourceLocator?: resource_common.ResourceLocator;
  /** The child resource map referenced by this resource */
  ChildrenCopyResults?: Array<resource_common.ResourceCopyResult>;
}

export interface ResourceCopyDoResponse {
  CopyResult?: resource_common.ResourceCopyResult;
}

export interface ResourceCopyEditLockRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  /** Resources to be manipulated */
  ResourceLocators?: Array<resource_common.ResourceLocator>;
}

export interface ResourceCopyEditLockResponse {}

export interface ResourceCopyEditUnlockRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  /** Resources to be manipulated */
  ResourceLocators?: Array<resource_common.ResourceLocator>;
}

export interface ResourceCopyEditUnlockResponse {}

export interface ResourceCopyPostProcessRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  /** Resources to be manipulated */
  ResourceLocators?: Array<resource_common.ResourceLocator>;
}

export interface ResourceCopyPostProcessResponse {}

export interface ResourceCopyPreCheckRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  /** Resources to be manipulated */
  ResourceLocators?: Array<resource_common.ResourceLocator>;
}

export interface ResourceCopyPreCheckResponse {
  /** The reason why the operation cannot be performed is to return multilingual text. If there is a problem, append to the array. */
  FailedReasons?: Array<resource_common.ResourceCopyCheckFailedReason>;
}

export interface ResourceCopyRefChangeRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  CopyResults?: Array<resource_common.ResourceCopyResult>;
}

export interface ResourceCopyRefChangeResponse {}

export interface ResourceCopyRefTreeRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  ResourceLocator?: resource_common.ResourceLocator;
}

export interface ResourceCopyRefTreeResponse {
  RefTreeNodes?: Array<resource_common.RefTreeNode>;
}

export interface ResourceCopyRetryRequest {
  /** Copy task ID, used to query task status or cancel or retry tasks */
  task_id?: string;
}

export interface ResourceCopyRetryResponse {
  code?: Int64;
  msg?: string;
  /** The reason why the operation cannot be performed is to return multilingual text */
  failed_reasons?: Array<resource_common.ResourceCopyFailedReason>;
}

export interface ResourceCopyRetryRpcRequest {
  /** Project ID */
  TaskID: Int64;
}

export interface ResourceCopyRetryRpcResponse {
  FailedReasons?: Array<resource_common.ResourceCopyFailedReason>;
}

export interface ResourceCopyTaskDetailRequest {
  /** Project ID */
  TaskID: Int64;
}

export interface ResourceCopyTaskDetailResponse {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  CopyResults?: Array<resource_common.ResourceCopyResult>;
  Status?: resource_common.TaskStatus;
  ResName?: string;
}

export interface ResourceCopyVisibleRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
  /** Resources to be manipulated */
  ResourceLocators?: Array<resource_common.ResourceLocator>;
}

export interface ResourceCopyVisibleResponse {}

export interface ResourceRefTreeInProjectRequest {
  /** Project ID */
  ProjectID: Int64;
  /** No pass is a draft */
  ProjectVersion?: Int64;
}

export interface ResourceRefTreeInProjectResponse {
  RefTreeNodes?: Array<resource_common.RefTreeNode>;
}

export interface ResourceTaskPreCheckRequest {
  /** environmental parameters */
  ResourceCopyEnv?: resource_common.ResourceCopyEnv;
}

export interface ResourceTaskPreCheckResponse {
  /** The reason why the operation cannot be performed is to return multilingual text. If there is a problem, append to the array. */
  FailedReasons?: Array<resource_common.ResourceCopyCheckFailedReason>;
}

export interface SyncResourceCompensateRequest {}

export interface SyncResourceCompensateResponse {}
/* eslint-enable */
