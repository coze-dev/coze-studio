/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as bot_common from './bot_common';

export type Int64 = string | number;

export enum SearchStrategy {
  /** semantic search */
  SemanticSearch = 0,
  /** Hybrid Search */
  HybridSearch = 1,
  /** Full Text Search */
  FullTextSearch = 20,
}

export interface ApiInfo {
  /** api id */
  api_id?: string;
  /** API name */
  name?: string;
  /** API description */
  description?: string;
}

export interface BackgroundImageDetail {
  origin_image_url?: string;
  image_url?: string;
  theme_color?: string;
  /** Gradual change of position */
  gradient_position?: GradientPosition;
  /** Crop canvas position */
  canvas_position?: CanvasPosition;
}

export interface BackgroundImageInfo {
  /** Web background cover */
  web_background_image?: BackgroundImageDetail;
  /** Mobile end background cover */
  mobile_background_image?: BackgroundImageDetail;
}

export interface BotConfig {
  character_name?: string;
  propmt?: string;
}

export interface BotInfo {
  /** bot id */
  bot_id?: string;
  /** bot name */
  name?: string;
  /** Bot description */
  description?: string;
  /** Bot image url */
  icon_url?: string;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
  /** version */
  version?: string;
  /** Prompt message */
  prompt_info?: PromptInfo;
  /** opening statement */
  onboarding_info?: OnboardingInfoV2;
  /** Bot type, single agent or multi agent */
  bot_mode?: bot_common.BotMode;
  /** Selected voice message */
  voice_data_list?: Array<VoiceData>;
  /** model information */
  model_info?: ModelInfo;
  /** Plugin information list */
  plugin_info_list?: Array<PluginInfo>;
  /** Knowledge Base Information */
  knowledge?: CommonKnowledge;
  /** Workflow information list */
  workflow_info_list?: Array<WorkflowInfo>;
  /** Quick Command Information List */
  shortcut_commands?: Array<ShortcutCommandInfo>;
  /** Timbre Configuration */
  voice_info_list?: Array<Voice>;
  /** Default user input type */
  default_user_input_type?: string;
  /** User Question Suggestions */
  suggest_reply_info?: SuggestReplyInfo;
  /** background image */
  background_image_info?: BackgroundImageInfo;
  /** Variable list */
  variables?: Array<Variable>;
  /** owner_id */
  owner_user_id?: string;
  folder_id?: string;
}

export interface BotOnboardingReq {
  source?: string;
  bot_id?: string;
}

export interface BotOnboardingResp {
  code: number;
  msg: string;
  onboarding?: Onboarding;
  user_id?: string;
  sender_info?: SenderInfo;
}

export interface CanvasPosition {
  width?: number;
  height?: number;
  left?: number;
  top?: number;
}

export interface ChatMessage {
  role?: string;
  type?: string;
  content?: string;
  content_type?: string;
  message_id?: string;
  reply_id?: string;
  section_id?: string;
  extra_info?: Record<string, string>;
  /** Normal, interrupted state, used when pulling the message list, this field is not available when chat is running. */
  status?: string;
  /** interrupt position */
  broken_pos?: number;
  meta_data?: MetaData;
  name?: string;
  /** Think content */
  reasoning_content?: string;
}

export interface ChatV1Req {
  bot_id: string;
  conversation_id?: string;
  bot_version?: string;
  user: string;
  query: string;
  chat_history?: Array<ChatMessage>;
  extra?: Record<string, string>;
  stream?: boolean;
  custom_variables?: Record<string, string>;
  /** The local message_id on the front end is passed back in the extra_info */
  local_message_id?: string;
  content_type?: string;
}

export interface ChatV1Resp {
  messages: Array<ChatMessage>;
  conversation_id: string;
  code?: Int64;
  msg?: string;
}

export interface ChatV1StreamResp {
  message: ChatMessage;
  is_finish?: boolean;
  index: Int64;
  conversation_id: string;
  seq_id?: Int64;
}

/** stream:false */
export interface ChatV2NoneStreamResp {
  messages?: Array<ChatMessage>;
  conversation_id?: string;
  code: Int64;
  msg: string;
}

export interface ChatV2Req {
  bot_id: string;
  conversation_id?: string;
  bot_version?: string;
  user: string;
  query: string;
  chat_history?: Array<ChatMessage>;
  stream?: boolean;
  custom_variables?: Record<string, string>;
  extra?: Record<string, string>;
  local_message_id?: string;
  meta_data?: MetaData;
  content_type?: string;
  tools?: Array<Tool>;
  /** Model ID, temporarily not exposed, internal use. */
  model_id?: string;
  /** bot_name of the current round of dialogue */
  bot_name?: string;
  /** Pass parameters to plugin/workflow etc downstream */
  extra_params?: Record<string, string>;
}

/** stream:true */
export interface ChatV2StreamResp {
  event: string;
  message?: ChatMessage;
  is_finish?: boolean;
  index?: Int64;
  conversation_id?: string;
  error_information?: ErrorInformation;
  seq_id?: Int64;
}

export interface ChatV3Request {
  bot_id: string;
  conversation_id?: string;
  user_id: string;
  stream?: boolean;
  additional_messages?: Array<EnterMessage>;
  custom_variables?: Record<string, string>;
  auto_save_history?: boolean;
  meta_data?: Record<string, string>;
  tools?: Array<Tool>;
  custom_config?: CustomConfig;
  /** Pass parameters to plugin/workflow etc downstream */
  extra_params?: Record<string, string>;
  /** Manually specify channel id chat. Currently only supports websdk (= 999) */
  connector_id?: string;
  /** Specify shortcut instructions */
  shortcut_command?: ShortcutCommandDetail;
  /** Key = parameter name value = value, passed to the workflows parameters parameter */
  parameters?: string;
  enable_card?: boolean;
}

/** no stream */
export interface ChatV3Response {
  data?: bot_common.ChatV3ChatDetail;
  code: number;
  msg: string;
}

export interface CommonKnowledge {
  /** Knowledge Base Information */
  knowledge_infos?: Array<KnowledgeInfo>;
}

export interface CreateDraftBotData {
  bot_id: string;
}

export interface CreateDraftBotRequest {
  space_id: string;
  name: string;
  description?: string;
  /** avatar file id */
  icon_file_id?: string;
  prompt_info?: PromptInfo;
  plugin_id_list?: PluginIdList;
  onboarding_info?: OnboardingInfo;
  voice_ids?: Array<string>;
  workflow_id_list?: WorkflowIdList;
  model_info_config?: ModelInfoConfig;
  suggest_reply_info?: SuggestReplyInfo;
}

export interface CreateDraftBotResponse {
  code: number;
  msg: string;
  data: CreateDraftBotData;
}

export interface CustomConfig {
  model_config?: ModelConfig;
  bot_config?: BotConfig;
}

export interface EnterMessage {
  /** user / assistant */
  role?: string;
  /** If it is not text, you need to parse JSON. */
  content?: string;
  meta_data?: Record<string, string>;
  /** text, card, object_string */
  content_type?: string;
  /** function_call, tool_output, knowledge, answer, follow_up, verbose,
Available when user enters: function_call, tool_output
User input is not supported: follow_up, knowledge, verbose, answer */
  type?: string;
  name?: string;
}

export interface ErrorInformation {
  err_code?: number;
  err_msg?: string;
}

export interface ExchangeTokenInfo {
  is_exchanged?: boolean;
}

export interface File {
  url: string;
  /** Suffix name. Reference platform */
  suffix_type: string;
  file_name?: string;
}

export interface FileData {
  url: string;
  uri: string;
}

export interface GetBotInfoReq {
  /** botId */
  bot_id: string;
  /** Channel ID, when used externally */
  connector_id: string;
  /** bot version, get the latest version if you don't pass it on. */
  version?: string;
}

export interface GetBotInfoResp {
  code: Int64;
  msg: string;
  bot_info?: BotInfo;
}

/** Open interface ------- individual developers -------
 req */
export interface GetBotOnlineInfoReq {
  /** botId */
  bot_id: string;
  /** Keep it first, don't expose it, and don't use the field */
  connector_id?: string;
  /** bot version, get the latest version if you don't pass it on. */
  version?: string;
}

/** resp */
export interface GetBotOnlineInfoResp {
  code: number;
  msg: string;
  data: BotInfo;
}

export interface GetSpacePublishedBotsListReq {
  /** botId */
  space_id: string;
  /** Keep it first, do not pass it through, and do not use the field */
  connector_id?: string;
  /** Spatial bots paging query parameters */
  page_index?: number;
  page_size?: number;
}

export interface GetSpacePublishedBotsListResp {
  code: number;
  msg: string;
  data: SpacePublishedBotsInfo;
}

export interface GetVoiceListReq {}

export interface GetVoiceListResp {
  code: Int64;
  msg: string;
  /** Supported voice messages */
  voice_data_list?: Array<VoiceData>;
}

export interface GradientPosition {
  left?: number;
  right?: number;
}

export interface Image {
  url: string;
  name?: string;
}

export interface Knowledge {
  /** Update Knowledge Base List replace all updates */
  dataset_ids?: Array<string>;
  /** Call automatically or on demand */
  auto_call?: boolean;
  /** search strategy */
  search_strategy?: SearchStrategy;
}

export interface KnowledgeInfo {
  /** Knowledge Base ID */
  id?: string;
  /** Knowledge base name */
  name?: string;
}

export interface MetaData {
  img?: Array<Image>;
  file?: Array<File>;
}

export interface ModelConfig {
  model_id?: string;
}

export interface ModelInfo {
  /** Model ID */
  model_id?: string;
  /** Model name */
  model_name?: string;
  /** Generate randomness, do not return without configuration */
  temperature?: number;
  /** Top p does not return without configuration */
  top_p?: number;
  /** Frequency penalty, no return without configuration */
  frequency_penalty?: number;
  /** There is a penalty, no configuration will not return. */
  presence_penalty?: number;
  /** When generating, sample the size of the candidate set and do not return if not configured */
  top_k?: number;
  /** number of carry context rounds */
  context_round?: number;
  /** Maximum reply length */
  max_tokens?: number;
  /** Output format text, markdown, json */
  response_format?: string;
  /** cache configuration */
  cache_type?: string;
  /** SP splicing current time */
  sp_current_time?: boolean;
  /** SP splicing anti-leakage instruction */
  sp_anti_leak?: boolean;
  /** Model personalized configuration parameters */
  parameters?: Record<string, string>;
}

export interface ModelInfoConfig {
  /** Model ID */
  model_id: string;
  /** Generative randomness */
  temperature?: number;
  /** top p */
  top_p?: number;
  /** frequency penalty */
  frequency_penalty?: number;
  /** There is punishment */
  presence_penalty?: number;
  /** When generating, sample the size of the candidate set */
  top_k?: number;
  /** number of carry context rounds */
  context_round?: number;
  /** Maximum reply length */
  max_tokens?: number;
  /** Output format text, markdown, json */
  response_format?: string;
  /** cache configuration */
  cache_type?: string;
  /** SP splicing current time */
  sp_current_time?: boolean;
  /** SP splicing anti-leakage instruction */
  sp_anti_leak?: boolean;
  /** Model personalized configuration parameters */
  parameters?: Record<string, string>;
}

export interface OauthAuthorizationCodeReq {
  code?: string;
  state?: string;
}

export interface OauthAuthorizationCodeResp {}

export interface OauthCallbackReq {
  /** TW use only */
  oauth_token?: string;
  oauth_token_secret?: string;
  oauth_callback_confirmed?: boolean;
  /** Store custom JSON structure */
  state?: string;
  /** TW use only */
  oauth_verifier?: string;
}

export interface OauthCallbackResp {}

export interface OauthExchangeTokenReq {
  code?: string;
  state?: string;
}

export interface OauthExchangeTokenResp {
  code?: number;
  msg?: string;
  data?: ExchangeTokenInfo;
}

export interface Onboarding {
  prologue: string;
  suggested_questions: Array<string>;
}

export interface OnboardingInfo {
  /** opening statement */
  prologue?: string;
  /** suggestion question */
  suggested_questions?: Array<string>;
}

export interface OnboardingInfoV2 {
  /** Coze Opening Dialog
opening statement */
  prologue?: string;
  /** suggestion question */
  suggested_questions?: Array<string>;
  /** Opener model */
  onboarding_mode?: bot_common.OnboardingMode;
  /** LLM Generation, User-defined Prompt */
  customized_onboarding_prompt?: string;
  /** The opening statement presets the problem display method, and the default is 0 random display. */
  suggested_questions_show_mode?: bot_common.SuggestedQuestionsShowMode;
}

export interface PluginIdInfo {
  plugin_id: string;
  api_id?: string;
}

export interface PluginIdList {
  id_list?: Array<PluginIdInfo>;
}

export interface PluginInfo {
  /** Plugin ID */
  plugin_id?: string;
  /** plugin name */
  name?: string;
  /** Plugin description */
  description?: string;
  /** Plugin image url */
  icon_url?: string;
  /** List of APIs included in the plugin */
  api_info_list?: Array<ApiInfo>;
}

export interface PrefixPromptInfo {
  /** prefix cue word */
  prefix_prompt?: string;
  /** Prefix prompt word part is not supported */
  dynamic_prompt?: string;
}

/** bot management */
export interface PromptInfo {
  /** Text prompt */
  prompt?: string;
  /** cue word pattern */
  prompt_mode?: string;
  /** Prompt content in prefix prompt word mode */
  prefix_prompt_info?: PrefixPromptInfo;
}

export interface PublishDraftBotData {
  bot_id?: string;
  version?: string;
}

export interface PublishDraftBotRequest {
  bot_id: string;
  connector_ids: Array<string>;
}

export interface PublishDraftBotResponse {
  code: number;
  msg: string;
  data?: PublishDraftBotData;
}

export interface SenderInfo {
  nick_name: string;
  icon_url: string;
}

export interface ShortcutCommandComponent {
  /** Panel parameters
parameter name */
  name?: string;
  /** parameter description */
  description?: string;
  /** Input type text, select, file */
  type?: string;
  /** When requesting a tool, the key of the parameter corresponds to the parameter name of the tool. If not, it will not be returned. */
  tool_parameter?: string;
  /** Options list when type is select or what types are supported when type is file image, doc, table, audio, video, zip, code, txt, ppt */
  options?: Array<string>;
  /** Default value, not returned when not configured */
  default_value?: string;
  /** Whether to hide or not to show, the shortcut command of the online bot tool type does not return the component with hide = true */
  is_hide?: boolean;
}

export interface ShortcutCommandDetail {
  command_id: string;
  /** Key = parameter name value = value object_string JSON String after object array serialization */
  parameters?: Record<string, string>;
}

export interface ShortcutCommandInfo {
  /** Quick Command ID */
  id?: string;
  /** Shortcut button name */
  name?: string;
  /** Quick Instruction */
  command?: string;
  /** shortcut description */
  description?: string;
  /** Command query template */
  query_template?: string;
  /** Quick command icon */
  icon_url?: string;
  /** Component list (parameter list) */
  components?: Array<ShortcutCommandComponent>;
  /** Tool information */
  tool?: ShortcutCommandToolInfo;
  /** When the multi instruction is executed by which node, it will not be returned without configuration */
  agent_id?: string;
  /** Chatsdk usage */
  send_type?: string;
  /** ChatSDK usage, form schema */
  card_schema?: string;
}

export interface ShortcutCommandToolInfo {
  name?: string;
  /** Tool type workflow plugin */
  type?: string;
  plugin_id?: string;
  plugin_api_name?: string;
  workflow_id?: string;
  params?: Array<ShortcutToolParam>;
}

export interface ShortcutToolParam {
  name?: string;
  is_required?: boolean;
  description?: string;
  type?: string;
  default_value?: string;
  /** Is it a panel parameter? */
  is_refer_component?: boolean;
}

export interface SpacePublishedBots {
  bot_id?: string;
  bot_name?: string;
  description?: string;
  icon_url?: string;
  publish_time?: string;
}

export interface SpacePublishedBotsInfo {
  space_bots?: Array<SpacePublishedBots>;
  total?: number;
}

/** v3 -- submit_tool_outputs */
export interface SubmitToolOutputsRequest {
  conversation_id: string;
  chat_id: string;
  stream?: boolean;
  tool_outputs: Array<ToolOutput>;
  connector_id?: string;
}

export interface SuggestReplyInfo {
  /** recovery mode */
  reply_mode?: string;
  /** Custom prompts in custom mode */
  customized_prompt?: string;
}

/** Align platform, transfer tools */
export interface Tool {
  plugin_id?: Int64;
  parameters?: string;
  api_name?: string;
}

/** Execution results submitted during the continuation of the chat */
export interface ToolOutput {
  tool_call_id: string;
  output: string;
}

export interface UpdateDraftBotRequest {
  bot_id: string;
  name?: string;
  description?: string;
  icon_file_id?: string;
  prompt_info?: PromptInfo;
  plugin_id_list?: PluginIdList;
  onboarding_info?: OnboardingInfo;
  voice_ids?: Array<string>;
  knowledge?: Knowledge;
  workflow_id_list?: WorkflowIdList;
  model_info_config?: ModelInfoConfig;
  suggest_reply_info?: SuggestReplyInfo;
}

export interface UpdateDraftBotResponse {
  code: number;
  msg: string;
}

export interface UploadData {}

export interface UploadReq {
  source?: string;
  bot_id?: string;
}

export interface UploadResp {
  code: number;
  msg: string;
  file_data?: FileData;
}

export interface Variable {
  /** variable name */
  keyword?: string;
  /** default value */
  default_value?: string;
  /** Variable type */
  variable_type?: string;
  /** Variable source */
  channel?: string;
  /** variable description */
  description?: string;
  /** Whether to enable */
  enable?: boolean;
  /** Variables support access in Prompt by default. After unchecking, access in Prompt will not be supported (only accessible in Workflow) */
  prompt_enable?: boolean;
}

export interface Voice {
  /** unique id */
  voice_id?: string;
  /** timbre language code */
  language_code?: string;
}

export interface VoiceData {
  /** unique id */
  id?: string;
  /** timbre language code */
  language_code?: string;
  /** timbre language name */
  language_name?: string;
  /** timbre name */
  name?: string;
  /** Tone style_id */
  style_id?: string;
  /** Preview text content */
  preview_text?: string;
  /** preview timbre content */
  preview_audio?: string;
}

export interface WorkflowIdInfo {
  id: string;
}

export interface WorkflowIdList {
  ids?: Array<WorkflowIdInfo>;
}

export interface WorkflowInfo {
  /** workflow_id */
  id?: string;
  /** Workflow name */
  name?: string;
  /** Workflow description */
  description?: string;
  /** Workflow image url */
  icon_url?: string;
}
/* eslint-enable */
