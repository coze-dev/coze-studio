/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum AgentType {
  Start_Agent = 0,
  LLM_Agent = 1,
  Task_Agent = 2,
  Global_Agent = 3,
  Bot_Agent = 4,
}

/** Version Compatibility: 0 - Old Version 1 - Rollback New Version 2 - Non-Rollback New Version 3 - Rollback New Version (no longer prompted) */
export enum AgentVersionCompat {
  OldVersion = 0,
  MiddleVersion = 1,
  NewVersion = 2,
  MiddleVersionNotPrompt = 3,
}

/** AnswerActions */
export enum AnswerActionsMode {
  Default = 1,
  Customize = 2,
}

export enum AnswerActionTriggerType {
  /** Platform preset Trigger action */
  Direct = 1,
  /** Click Action to display the custom H5 page */
  WebView = 2,
  /** Click Action to send a custom user message */
  SendMessage = 3,
}

export enum BacktrackMode {
  Current = 1,
  Previous = 2,
  Start = 3,
  MostSuitable = 4,
}

export enum BotMode {
  SingleMode = 0,
  MultiMode = 1,
  WorkflowMode = 2,
}

export enum BotSpecies {
  /** Bot type
Create from flow */
  Default = 0,
  /** Created from coze */
  Function = 1,
}

export enum BotStatus {
  Deleted = 0,
  Using = 1,
  Banned = 2,
}

export enum BotTableRWMode {
  LimitedReadWrite = 1,
  ReadOnly = 2,
  UnlimitedReadWrite = 3,
  RWModeMax = 4,
}

export enum BusinessType {
  Default = 0,
  DouyinAvatar = 1,
}

export enum CacheType {
  /** cache close */
  CacheClosed = 0,
  /** prefix cache */
  PrefixCache = 1,
}

/** The type of transmission allowed by the context */
export enum ContextMode {
  Chat = 0,
  FunctionCall_1 = 1,
  FunctionCall_2 = 2,
  FunctionCall_3 = 3,
}

export enum DefaultUserInputType {
  /** Not set */
  NotSet = 0,
  /** Text */
  Text = 1,
  /** Hold down the voice */
  Voice = 2,
  /** voice call */
  Call = 3,
  /** video call */
  VideoCall = 4,
}

export enum DisablePromptCalling {
  Off = 0,
  On = 1,
}

export enum FieldItemType {
  /** Text String */
  Text = 1,
  /** Digital Integer */
  Number = 2,
  /** Time Time */
  Date = 3,
  /** float Number */
  Float = 4,
  /** bool Boolean */
  Boolean = 5,
}

export enum FileboxInfoMode {
  Off = 0,
  On = 1,
}

export enum IndependentRecognitionModelType {
  /** Small model */
  SLM = 0,
  /** Large model */
  LLM = 1,
}

export enum IndependentTiming {
  /** Determine user input (front) */
  Pre = 1,
  /** Determine node output (postfix) */
  Post = 2,
  /** Front mode and rear mode support simultaneous selection */
  PreAndPost = 3,
}

export enum KnowledgeNoRecallReplyMode {
  Default = 0,
  CustomizePrompt = 1,
}

export enum KnowledgeShowSourceMode {
  ReplyBottom = 0,
  CardList = 1,
}

export enum KnowledgeType {
  Coze = 0,
  Volcano = 1,
}

export enum KnowledgeTypeMode {
  Coze = 0,
  Volcano = 1,
}

export enum MessageFeedbackDetailType {
  UnlikeDefault = 0,
  /** Harmful information */
  UnlikeHarmful = 1,
  /** incorrect information */
  UnlikeIncorrect = 2,
  /** Did not follow instructions */
  UnlikeNotFollowInstructions = 3,
  /** other */
  UnlikeOthers = 4,
}

export enum MessageFeedbackType {
  Default = 0,
  Like = 1,
  Unlike = 2,
}

export enum ModelFuncConfigStatus {
  FullSupport = 0,
  PoorSupport = 1,
  NotSupport = 2,
}

export enum ModelFuncConfigType {
  Plugin = 1,
  Workflow = 2,
  ImageFlow = 3,
  Trigger = 4,
  KnowledgeText = 5,
  KnowledgeTable = 6,
  KnowledgeAutoCall = 7,
  KnowledgeOnDemandCall = 8,
  Variable = 9,
  Database = 10,
  LongTermMemory = 11,
  FileBox = 12,
  Onboarding = 13,
  Suggestion = 14,
  ShortcutCommand = 15,
  BackGroundImage = 16,
  TTS = 17,
  MultiAgentRecognize = 18,
  KnowledgePhoto = 19,
  HookInfo = 20,
  KnowledgeValcanoUnstructured = 21,
  KnowledgeValcanoStructured = 22,
  Model = 23,
}

export enum ModelResponseFormat {
  Text = 0,
  Markdown = 1,
  JSON = 2,
}

export enum ModelStyle {
  Custom = 0,
  Creative = 1,
  Balance = 2,
  Precise = 3,
}

export enum MultiAgentConnectorType {
  Curve = 0,
  Straight = 1,
}

export enum MultiAgentSessionType {
  Flow = 1,
  Host = 2,
}

/** onboarding content generation mode */
export enum OnboardingMode {
  /** No. */
  NO_NEED = 1,
  /** Manually specify content (multi-language support is covered by LLM) */
  USE_MANUAL = 2,
  /** Generated by LLM */
  USE_LLM = 3,
}

export enum Operation {
  /** "=" */
  EQUAL = 1,
  /** "< >" or "! =" */
  NOT_EQUAL = 2,
  /** ">" */
  GREATER_THAN = 3,
  /** "<" */
  LESS_THAN = 4,
  /** ">=" */
  GREATER_EQUAL = 5,
  /** "<=" */
  LESS_EQUAL = 6,
  /** "IN" */
  IN = 7,
  /** "NOT IN" */
  NOT_IN = 8,
  /** "IS NULL" */
  IS_NULL = 9,
  /** "IS NOT NULL" */
  IS_NOT_NULL = 10,
  /** "LIKE" fuzzy match string */
  LIKE = 11,
  /** "NOT LIKE" inverse fuzzy match */
  NOT_LIKE = 12,
}

export enum ParamSource {
  /** default user input */
  Input = 0,
  /** reference variable */
  Variable = 1,
}

export enum PromptMode {
  Standard = 0,
  /** prefix cue word */
  PrefixPrompt = 1,
}

export enum RecognitionMode {
  FunctionCall = 1,
  Independent = 2,
}

export enum ReferenceInfoStatus {
  /** 1: Updates are available */
  HasUpdates = 1,
  /** 2: Deleted */
  IsDelete = 2,
}

/** struct ContentAttachment {
    1: required string FileID (api.body = "file_id")
}
 struct MetaContent{
     1: required string Type (agw.key="type"),
     2: optional string Text ( agw.key="text"),
     3: optional string FileID (agw.key="file_id"),
     4: optional string FileURL (agw.key="file_url"),
     5: optional string Card (agw.key="card"),
 }
 struct EnterMessage  {
     1: required string Role (agw.key = "role")
     2: string Content (agw.key = "content")//contentntent
     3: map<string,string> MetaData(agw.key = "meta_data")
     4: string ContentType(agw.key = "content_type")//text/card/object_string
     5: string Type(agw.key = "type")
 }
 struct OpenMessageApi {
     1: string Id (agw.key = "id")//primary key IDary key ID
     2: string BotId (agw.key = "bot_id")//bot id//TODO All i64 plus annotation str, imported parameters and exported parameters are requiredn str, imported parameters and exported parameters are required
     3: string Role(agw.key = "role")
     4: string Content (agw.key = "content")//contentntent
     5: string ConversationId(agw.key = "conversation_id")   // conversation id
     6: map<string,string> MetaData(agw.key = "meta_data")
     7: string CreatedAt (agw.key = "created_at")//creation timetion time
     8: string UpdatedAt (agw.key = "updated_at")//Update time//Change TODO time to intO time has been changed to int.
     9: string ChatId(agw.key = "chat_id")
     10: string ContentType(agw.key = "content_type")
     11: string Type(agw.key = "type")
 } */
export enum ReferenceUpdateType {
  ManualUpdate = 1,
  AutoUpdate = 2,
}

export enum Scene {
  Default = 0,
  Explore = 1,
  BotStore = 2,
  CozeHome = 3,
  Playground = 4,
  /** evaluation platform */
  Evaluation = 5,
  AgentAPP = 6,
  /** Prompt optimization */
  PromptOptimize = 7,
  /** Createbot's nl2bot features */
  GenerateAgentInfo = 8,
}

export enum SearchStrategy {
  /** semantic search */
  SemanticSearch = 0,
  /** Hybrid Search */
  HybirdSearch = 1,
  /** Full Text Search */
  FullTextSearch = 20,
}

export enum SocietyVisibility {
  /** Visible to all */
  Public = 1,
  /** Visible to host only */
  Anonymous = 2,
  /** custom */
  Custom = 3,
}

export enum SuggestedQuestionsShowMode {
  Random = 0,
  All = 1,
}

export enum SuggestReplyMode {
  System = 0,
  Custom = 1,
  Disable = 2,
  /** Agent specific, multiplexed source Bot configuration */
  OriBot = 3,
}

export enum TabType {
  /** list<string> */
  ListString = 1,
  /** string */
  String = 2,
  /** int64 */
  Integer = 3,
  /** float32 */
  Float = 4,
  /** bool */
  Boolean = 5,
}

export enum TimeCapsuleMode {
  /** close */
  Off = 0,
  /** open */
  On = 1,
}

export enum WorkflowMode {
  Workflow = 0,
  Imageflow = 1,
  SceneFlow = 2,
  ChatFlow = 3,
  All = 100,
}

export interface ActionIcon {
  /** Customized button type does not need to be passed */
  type?: string;
  /** default state */
  default_url?: string;
  /** The state of pressing the button */
  active_url?: string;
  /** default state */
  default_uri?: string;
  /** The state of pressing the button */
  active_uri?: string;
}

export interface Agent {
  agent_id?: string;
  agent_name?: string;
  /** Prompt message */
  prompt_info?: PromptInfo;
  /** List of plugins */
  plugin_info_list?: Array<PluginInfo>;
  /** dataset */
  knowledge?: Knowledge;
  /** Workflow List */
  workflow_info_list?: Array<WorkflowInfo>;
  /** model configuration */
  model_info?: ModelInfo;
  /** intent information */
  intents?: Array<Intent>;
  agent_type?: AgentType;
  /** Is it a rootagent? */
  root_agent?: boolean;
  reference_id?: string;
  first_version?: string;
  last_version?: string;
  agent_position?: AgentPosition;
  icon_uri?: string;
  jump_config?: JumpConfig;
  suggest_reply_info?: SuggestReplyInfo;
  description?: string;
  /** multi_agent version compatibility field */
  version_compat?: AgentVersionCompat;
  hook_info?: HookInfo;
  /** The current version of the subbot */
  current_version?: string;
  /** 1: Available update 2: Removed */
  reference_info_status?: ReferenceInfoStatus;
  /** Subbot update type */
  update_type?: ReferenceUpdateType;
}

export interface AgentForUpdate {
  /** The agw field names are specially mapped, note that */
  id?: string;
  /** The agw field names are specially mapped, note that */
  name?: string;
  /** Prompt message */
  prompt_info?: PromptInfo;
  /** List of plugins */
  plugin_info_list?: Array<PluginInfo>;
  /** dataset */
  knowledge?: Knowledge;
  /** Workflow List */
  workflow_info_list?: Array<WorkflowInfo>;
  /** model configuration */
  model_info?: ModelInfo;
  /** intent information */
  intents?: Array<Intent>;
  agent_type?: AgentType;
  /** Is it a rootagent? */
  root_agent?: boolean;
  reference_id?: string;
  first_version?: string;
  last_version?: string;
  agent_position?: AgentPosition;
  icon_uri?: string;
  jump_config?: JumpConfig;
  suggest_reply_info?: SuggestReplyInfo;
  description?: string;
  /** multi_agent version compatibility field */
  version_compat?: AgentVersionCompat;
  hook_info?: HookInfo;
}

export interface AgentPosition {
  x?: number;
  y?: number;
}

export interface AgentVersionCompatInfo {
  version_compat?: AgentVersionCompat;
  version?: string;
}

export interface AnswerActionConfig {
  /** The prefabricated one only needs to pass the key. */
  key?: string;
  /** default */
  name?: string;
  /** Send uri. */
  icon?: ActionIcon;
  /** Store the name of user i18 */
  name_i18n?: Record<string, string>;
  /** Direct has no value; WebView contains webview_url and webview_callback_psm keys; SendMessage contains send_message_prompt */
  trigger_rule?: AnswerActionTriggerRule;
  /** location */
  position?: number;
}

export interface AnswerActions {
  answer_actions_mode?: AnswerActionsMode;
  answer_action_configs?: Array<AnswerActionConfig>;
}

export interface AnswerActionTriggerRule {
  type?: AnswerActionTriggerType;
  need_preloading?: boolean;
  /** According to AnswerActionTriggerType */
  trigger_data?: Record<string, string>;
}

export interface BackgroundImageDetail {
  /** original image */
  origin_image_uri?: string;
  origin_image_url?: string;
  /** Actual use of pictures */
  image_uri?: string;
  image_url?: string;
  theme_color?: string;
  /** Gradual change of position */
  gradient_position?: GradientPosition;
  /** Crop canvas position */
  canvas_position?: CanvasPosition;
}

export interface BackgroundImageInfo {
  /** Web background cover */
  web_background_image?: BackgroundImageDetail;
  /** Mobile end background cover */
  mobile_background_image?: BackgroundImageDetail;
}

/** bot ext */
export interface BotExtInfo {
  answer_actions?: AnswerActions;
  card_ids?: Array<number>;
  prompt_id?: number;
  bot_template_name?: string;
  use_ugc_voice?: boolean;
  app_id?: number;
  /** Whether to bind the Mini Program logo */
  binding_mp?: boolean;
}

/** bot information */
export interface BotInfo {
  /** bot id */
  bot_id?: string;
  /** bot name */
  name?: string;
  /** Bot description */
  description?: string;
  /** Bot icon uri */
  icon_uri?: string;
  /** Bot icon url */
  icon_url?: string;
  /** creator id */
  creator_id?: string;
  /** creation time */
  create_time?: string;
  /** update time */
  update_time?: string;
  /** line of business */
  connector_id?: string;
  /** Version, ms */
  version?: string;
  /** model configuration */
  model_info?: ModelInfo;
  /** Prompt message */
  prompt_info?: PromptInfo;
  /** List of plugins */
  plugin_info_list?: Array<PluginInfo>;
  /** Workflow List */
  workflow_info_list?: Array<WorkflowInfo>;
  /** opening statement */
  onboarding_info?: OnboardingInfo;
  /** dataset */
  knowledge?: Knowledge;
  /** KV storage */
  variable_list?: Array<Variable>;
  /** Task management/preset tasks */
  task_info?: TaskInfo;
  /** data table */
  database_list?: Array<Database>;
  /** referral question */
  suggest_reply_info?: SuggestReplyInfo;
  /** Timbre Configuration */
  voices_info?: VoicesInfo;
  /** Additional information, extended fields */
  bot_ext_info?: BotExtInfo;
  /** Bot type, single agent or multi agent */
  bot_mode?: BotMode;
  /** Multi agent mode agent information */
  agents?: Array<Agent>;
  /** Bot type */
  bot_species?: BotSpecies;
  /** Bot tag information, user new field */
  bot_tag_info?: BotTagInfo;
  /** FileBox Information */
  filebox_info?: FileboxInfo;
  /** multi_agent structure */
  multi_agent_info?: MultiAgentInfo;
  /** Background cover list structure */
  background_image_info_list?: Array<BackgroundImageInfo>;
  shortcut_sort?: Array<string>;
  /** bot state */
  status?: BotStatus;
  /** Hook information */
  hook_info?: HookInfo;
  /** User query collection configuration */
  user_query_collect_conf?: UserQueryCollectConf;
  /** Orchestration information for workflow patterns */
  layout_info?: LayoutInfo;
  business_type?: BusinessType;
}

/** Update for bot information */
export interface BotInfoForUpdate {
  /** bot id */
  bot_id?: string;
  /** bot name */
  name?: string;
  /** Bot description */
  description?: string;
  /** Bot icon uri */
  icon_uri?: string;
  /** Bot icon url */
  icon_url?: string;
  /** creator id */
  creator_id?: string;
  /** creation time */
  create_time?: string;
  /** update time */
  update_time?: string;
  /** line of business */
  connector_id?: string;
  /** Version, ms */
  version?: string;
  /** model configuration */
  model_info?: ModelInfo;
  /** Prompt message */
  prompt_info?: PromptInfo;
  /** List of plugins */
  plugin_info_list?: Array<PluginInfo>;
  /** Workflow List */
  workflow_info_list?: Array<WorkflowInfo>;
  /** opening statement */
  onboarding_info?: OnboardingInfo;
  /** dataset */
  knowledge?: Knowledge;
  /** KV storage */
  variable_list?: Array<Variable>;
  /** Task management/preset tasks */
  task_info?: TaskInfo;
  /** data table */
  database_list?: Array<Database>;
  /** referral question */
  suggest_reply_info?: SuggestReplyInfo;
  /** Timbre Configuration */
  voices_info?: VoicesInfo;
  /** Additional information, extended fields */
  bot_ext_info?: BotExtInfo;
  /** Bot type, single agent or multi agent */
  bot_mode?: BotMode;
  /** Multi agent mode agent information */
  agents?: Array<AgentForUpdate>;
  /** Bot type */
  bot_species?: BotSpecies;
  /** Bot tag information, user new field */
  bot_tag_info?: BotTagInfo;
  /** FileBox Information */
  filebox_info?: FileboxInfo;
  /** multi_agent structure */
  multi_agent_info?: MultiAgentInfo;
  /** Background cover list structure */
  background_image_info_list?: Array<BackgroundImageInfo>;
  shortcut_sort?: Array<string>;
  hook_info?: HookInfo;
  /** User query collection configuration */
  user_query_collect_conf?: UserQueryCollectConf;
  /** Orchestration information for workflow patterns */
  layout_info?: LayoutInfo;
}

export interface BotTagInfo {
  /** Time capsule information tag key: time_capsule */
  time_capsule_info?: TimeCapsuleInfo;
}

export interface CanvasPosition {
  width?: number;
  height?: number;
  left?: number;
  top?: number;
}

export interface ChatV3ChatDetail {
  id: string;
  conversation_id: string;
  bot_id: string;
  created_at?: number;
  completed_at?: number;
  failed_at?: number;
  meta_data?: Record<string, string>;
  last_error?: LastError;
  status: string;
  usage?: Usage;
  required_action?: RequiredAction;
  section_id?: string;
}

export interface ChatV3MessageDetail {
  id: string;
  conversation_id: string;
  bot_id: string;
  role: string;
  type: string;
  content: string;
  content_type: string;
  meta_data?: Record<string, string>;
  chat_id: string;
  section_id?: string;
  created_at?: Int64;
  updated_at?: Int64;
  reasoning_content?: string;
}

export interface CompletionUsage {
  reasoning_tokens?: number;
}

export interface Condition {
  /** label signature */
  tab_name: string;
  operation: Operation;
  /** label value */
  tab_value: TabValue;
}

export interface Database {
  /** table id */
  table_id?: string;
  /** Table name */
  table_name?: string;
  /** Table Introduction */
  table_desc?: string;
  /** Table field information */
  field_list?: Array<FieldItem>;
  /** Whether to support calling in Prompt, the default is supported */
  prompt_disabled?: boolean;
  rw_mode?: BotTableRWMode;
}

export interface DraftBotInfoV2 {
  BotInfo?: BotInfo;
  CanvasData?: string;
  BaseCommitVersion?: Int64;
  CommitVersion?: Int64;
  /** TableInfo */
  TableInfo?: Record<string, TableDetail>;
  /** taskInfo */
  TaskInfo?: Record<string, TaskInfoDetail>;
}

export interface EmotionConfig {
  /** 1. Emotional categories */
  emotion?: string;
  /** 3. Emotional value */
  emotion_value?: number;
}

export interface FieldItem {
  /** field name */
  name?: string;
  /** Field description */
  desc?: string;
  /** field type */
  type?: FieldItemType;
  /** Is it required? */
  must_required?: boolean;
  /** The field Id is added as 0. */
  id?: string;
  /** Field type str */
  type_str?: string;
  /** Field type str */
  alterId?: Int64;
}

export interface FileboxInfo {
  Mode?: FileboxInfoMode;
}

export interface GradientPosition {
  left?: number;
  right?: number;
}

export interface HookInfo {
  /** Pre agent jump hook */
  pre_agent_jump_hook?: Array<HookItem>;
  /** Post agent jump hook */
  post_agent_jump_hook?: Array<HookItem>;
  /** Process hook */
  flow_hook?: Array<HookItem>;
  /** Atomic power hook */
  atomic_hook?: Array<HookItem>;
  /** Model call hook */
  llm_call_hook?: Array<HookItem>;
  /** Conversation result hook */
  res_parsing_hook?: Array<HookItem>;
  /** suggesion hook */
  suggestion_hook?: Array<HookItem>;
}

export interface HookItem {
  uri?: string;
  filter_rules?: Array<string>;
  strong_dep?: boolean;
  timeout_ms?: Int64;
}

export interface I18nLangVoiceParameterConfig {
  /** timbre id */
  video_id?: string;
  /** emotional configuration */
  emotion_config?: EmotionConfig;
}

export interface IndependentModeConfig {
  /** Judge the timing */
  judge_timing?: IndependentTiming;
  history_round?: number;
  model_type?: IndependentRecognitionModelType;
  model_id?: string;
  prompt?: string;
}

export interface Intent {
  intent_id?: string;
  prompt?: string;
  next_agent_id?: string;
  session_type?: MultiAgentSessionType;
}

export interface InterruptFunction {
  name?: string;
  arguments?: string;
}

export interface InterruptPlugin {
  id?: string;
  type?: string;
  function?: InterruptFunction;
  require_info?: InterruptRequireInfo;
}

export interface InterruptRequireInfo {
  infos?: Array<string>;
}

export interface JumpConfig {
  backtrack?: BacktrackMode;
  recognition?: RecognitionMode;
  independent_conf?: IndependentModeConfig;
}

export interface Knowledge {
  /** Knowledge Base Information */
  knowledge_info?: Array<KnowledgeInfo>;
  /** recall maximum data volume */
  top_k?: Int64;
  /** minimum match */
  min_score?: number;
  /** automatic recall */
  auto?: boolean;
  /** search strategy */
  search_strategy?: SearchStrategy;
  /** Whether to show the source */
  show_source?: boolean;
  /** No recall reply mode, default 0 */
  no_recall_reply_mode?: KnowledgeNoRecallReplyMode;
  /** Custom prompt for no recall reply, effective when NoRecallReplyMode = 1 */
  no_recall_reply_customize_prompt?: string;
  /** Source display method, default value 0 card list method */
  show_source_mode?: KnowledgeShowSourceMode;
  /** Recall policy, default value is true */
  recall_strategy?: RecallStrategy;
  /** The type of knowledge base bound under the current agent, multiagent is invalid */
  knowledge_type_mode?: KnowledgeTypeMode;
}

export interface KnowledgeInfo {
  /** Knowledge Base ID */
  id?: string;
  /** Knowledge base name */
  name?: string;
  /** Coze or Volcano Knowledge Base */
  type?: KnowledgeType;
  /** Volcano Side Knowledge Service Information */
  volcano_dataset_service_info?: VolcanoDatasetService;
  /** Volcano Knowledge Base tab filter */
  vol_dataset_tab_filter_condition?: VolDatasetTabFilterCondition;
}

export interface LastError {
  code: number;
  msg: string;
}

export interface LayoutInfo {
  /** workflowId */
  workflow_id?: string;
  /** PluginId */
  plugin_id?: string;
}

export interface MessageFeedback {
  /** feedback type */
  feedback_type?: MessageFeedbackType;
  /** segmentation type */
  detail_types?: Array<MessageFeedbackDetailType>;
  /** Negative feedback custom content, corresponding to user selection Others */
  detail_content?: string;
}

export interface ModelInfo {
  /** Model ID */
  model_id?: string;
  /** Temperature, model output randomness, the larger the value, the more random, the smaller the more conservative (0-1] */
  temperature?: number;
  /** Maximum Token Reply */
  max_tokens?: number;
  /** Another model's output randomness, the larger the value, the more random [0, 1] */
  top_p?: number;
  /** Frequency penalty, adjust the frequency of words in the generated content, the fewer positive words are [-1.0, 1.0] */
  frequency_penalty?: number;
  /** There is a penalty, adjust the frequency of new words in the generated content, avoid repeating words with positive values, and use new words [-1.0, 1.0] */
  presence_penalty?: number;
  /** contextual policy */
  short_memory_policy?: ShortMemoryPolicy;
  /** When generating, sample the size of the candidate set */
  top_k?: number;
  /** model reply content format */
  response_format?: ModelResponseFormat;
  /** User-selected model style */
  model_style?: ModelStyle;
  /** cache configuration */
  cache_type?: CacheType;
  /** SP splicing current time */
  sp_current_time?: boolean;
  /** SP splicing anti-leakage instruction */
  sp_anti_leak?: boolean;
  /** SP stitching voiceprint information */
  sp_voice_info?: boolean;
  /** personalized configuration parameters */
  parameters?: Record<string, string>;
}

export interface MultiAgentInfo {
  /** multi_agent session takeover */
  session_type?: MultiAgentSessionType;
  /** multi_agent version compatibility field, front-end use */
  version_compat_info?: AgentVersionCompatInfo;
  /** multi_agent connection type, front end */
  connector_type?: MultiAgentConnectorType;
}

export interface OnboardingInfo {
  /** Coze Opening Dialog
opening statement */
  prologue?: string;
  /** suggestion question */
  suggested_questions?: Array<string>;
  /** Opener model */
  onboarding_mode?: OnboardingMode;
  /** LLM Generation, User-defined Prompt */
  customized_onboarding_prompt?: string;
  /** The opening statement presets the problem display method, and the default is 0 random display. */
  suggested_questions_show_mode?: SuggestedQuestionsShowMode;
}

export interface PluginInfo {
  /** Plugin ID */
  plugin_id?: string;
  /** api Id */
  api_id?: string;
  /** API name O project */
  api_name?: string;
}

export interface PluginParameter {
  name?: string;
  desc?: string;
  required?: boolean;
  type?: string;
  sub_parameters?: Array<PluginParameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: string;
}

export interface PrefixPromptInfo {
  /** prefix cue word */
  prefix_prompt?: string;
  /** Prefix prompt word part is not supported */
  dynamic_prompt?: string;
}

export interface PromptInfo {
  /** Text prompt */
  prompt?: string;
  /** cue word pattern */
  prompt_mode?: PromptMode;
  /** Prompt content in prefix prompt word mode */
  prefix_prompt_info?: PrefixPromptInfo;
}

export interface PromptUsage {
  cached_tokens?: number;
}

export interface RecallStrategy {
  use_rerank?: boolean;
  use_rewrite?: boolean;
  use_nl2sql?: boolean;
}

export interface RequiredAction {
  type?: string;
  submit_tool_outputs?: SubmitToolOutputs;
}

export interface ShortMemoryPolicy {
  /** The type of transmission allowed by the context */
  context_mode?: ContextMode;
  /** Number of rounds of context band */
  history_round?: number;
}

export interface SocietyVisibiltyConfig {
  /** Visibility in Social Scene: Public = 1, Anonymous = 2 */
  visibility_type?: SocietyVisibility;
  /** list of visible characters */
  visibility_roles?: Array<string>;
}

export interface SubmitToolOutputs {
  tool_calls?: Array<InterruptPlugin>;
}

/** suggest */
export interface SuggestReplyInfo {
  /** Coze Auto-Suggestion
suggestion problem model */
  suggest_reply_mode?: SuggestReplyMode;
  /** user-defined suggestion questions */
  customized_suggest_prompt?: string;
  /** The name of the ChainTask that runs the Prompt */
  chain_task_name?: string;
}

export interface TableDetail {
  /** table id */
  TableId?: string;
  /** Table name */
  TableName?: string;
  /** Table Introduction */
  TableDesc?: string;
  /** Table field information */
  FieldList?: Array<FieldItem>;
  /** Whether to support calling in Prompt, the default is supported */
  prompt_disabled?: boolean;
}

export interface TabValue {
  type?: TabType;
  /** local default */
  local_input?: string;
  /** Sources of imported parameters */
  param_source?: ParamSource;
  /** Reference variable key */
  variable_ref?: string;
}

export interface TaskInfo {
  /** Scheduled Tasks on Coze
User starts task */
  user_task_allowed?: boolean;
  /** Allow preset tasks */
  enable_preset_task?: Int64;
}

export interface TaskInfoDetail {
  /** Tasks Detail
task unique identifier */
  TaskId?: string;
  /** The query executed when the timer fires, for example: Remind me to drink water. Phase 2: TriggerType == "Time" */
  UserQuestion?: string;
  /** Timed task creation time */
  CreateTime?: string;
  /** The time when the scheduled task will next execute */
  NextTime?: string;
  /** Task Status: Valid/Invalid */
  Status?: Int64;
  /** 1-Draft, 2-Online */
  PresetType?: number;
  /** crontab expression for timed tasks */
  CronExpr?: string;
  /** Treated UserQuestions, such as Drinking Water */
  TaskContent?: string;
  /** Time Zone */
  TimeZone?: string;
  /** task name */
  TaskName?: string;
  /** "Time", "Event" */
  TriggerType?: string;
  /** "Bot query", "Plugin", "Workflow" */
  Action?: string;
  /** Action == "Bot query" */
  BotQuery?: string;
  /** Both plugins and workflows use this field */
  PluginName?: string;
  /** Both plugins and workflows use this field */
  PluginInput?: TaskPluginInput;
  /** TriggerType == "Event" */
  WebhookUrl?: string;
  /** TriggerType == "Event" */
  WebhookBearerToken?: string;
  /** TriggerType == "Event" */
  WebhookOutput?: TaskWebhookOutput;
  /** Traceability ID. Generated when created, updated/released unchanged */
  OriginId?: string;
}

export interface TaskPluginInput {
  Params?: Array<TaskPluginInputField>;
}

export interface TaskPluginInputField {
  Name?: string;
  /** "Input", "Reference" */
  Type?: string;
  Value?: string;
}

export interface TaskWebhookField {
  Name?: string;
  Type?: string;
  Description?: string;
  Children?: Array<TaskWebhookField>;
}

export interface TaskWebhookOutput {
  Params?: Array<TaskWebhookField>;
}

/** Time Capsule Information */
export interface TimeCapsuleInfo {
  time_capsule_mode?: TimeCapsuleMode;
  disable_prompt_calling?: DisablePromptCalling;
  /** Time capsule expiration time, in days (0 means permanent) */
  time_capsule_time_to_live?: string;
}

export interface Usage {
  token_count?: number;
  output_count?: number;
  input_count?: number;
  input_tokens_details?: PromptUsage;
  output_tokens_details?: CompletionUsage;
}

export interface UserLabel {
  label_id?: string;
  label_name?: string;
  icon_uri?: string;
  icon_url?: string;
  jump_link?: string;
}

export interface UserQueryCollectConf {
  /** Whether to turn on the collection switch */
  is_collected?: boolean;
  /** Privacy Policy Link */
  private_policy?: string;
}

export interface Variable {
  /** key, Field */
  key?: string;
  /** describe */
  description?: string;
  /** default value */
  default_value?: string;
  /** Whether the system value is the system value */
  is_system?: boolean;
  /** Whether to support calling in Prompt, the default is supported */
  prompt_disabled?: boolean;
  /** Visibility in Social Scene: Public = 1, Anonymous = 2 */
  society_visibility_config?: SocietyVisibiltyConfig;
  /** Whether to disable, the default is false to enable */
  is_disabled?: boolean;
}

export interface VideoCallConfig {
  /** Whether to close */
  video_call?: boolean;
  /** Extract frame number per second (range 1~ 24) */
  frames_per_second?: number;
  /** Extract the number of seconds before starting to speak (range 0~ 10s) */
  pre_speech_seconds?: number;
}

export interface VoiceprintRecognitionConfig {
  /** Whether to turn off voiceprint recognition */
  close_voice_print_recognition?: boolean;
  /** hit threshold */
  hit_threshold?: number;
  /** Whether to use the historical switch when the value is null */
  use_history_if_empty?: boolean;
}

/** tts Voices */
export interface VoicesInfo {
  /** Coze Voices
Whether to turn on sound true: disable false: turn on */
  muted?: boolean;
  /** Multi-voice voice configuration */
  i18n_lang_voice?: Record<string, Int64>;
  /** Whether to play automatically */
  autoplay?: boolean;
  /** autoplay timbre */
  autoplay_voice?: Record<string, Int64>;
  /** Whether to turn off voice calls, true: turn off false: turn on, default is false */
  voice_call?: boolean;
  /** Default user input type */
  default_user_input_type?: DefaultUserInputType;
  /** Multi-voice tone configuration, string type */
  i18n_lang_voice_str?: Record<string, string>;
  video_call_config?: VideoCallConfig;
  voiceprint_recognition_config?: VoiceprintRecognitionConfig;
  i18n_lang_voice_parameter_config?: Record<
    string,
    I18nLangVoiceParameterConfig
  >;
}

export interface VolcanoDatasetService {
  /** Volcano side knowledge service id string */
  id?: string;
  /** name */
  name?: string;
}

export interface VolDatasetTabFilterCondition {
  conditions?: Array<Condition>;
  nestedConditions?: VolDatasetTabFilterCondition;
  /** "AND" or "OR" */
  logic: string;
}

export interface WorkflowInfo {
  /** WorkflowId */
  workflow_id?: string;
  /** Plugin ID */
  plugin_id?: string;
  /** api Id */
  api_id?: string;
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  /** workflow name */
  workflow_name?: string;
  desc?: string;
  parameters?: Array<PluginParameter>;
  plugin_icon?: string;
}
/* eslint-enable */
