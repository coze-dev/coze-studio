/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum ActionType {
  BotQuery = 1,
  Plugin = 2,
  Workflow = 3,
}

/** corresponding front end */
export enum BotTaskMode {
  Unknown = 0,
  Webhook = 1,
}

/** corresponding front end */
export enum BotTaskTriggerType {
  Unknown = 0,
  Time = 1,
  Event = 2,
}

export enum ChatType {
  /** Default mode, does not carry historical context */
  NoHistory = 0,
  /** Carry context */
  NeedHistory = 1,
}

export enum SubTaskType {
  /** user template task */
  UserTaskTemplate = 1,
}

/** 0-Not triggered, 1-Triggered, 2-plugin/workflow successful, 3-Pending push, 4-Push successful, 5-Push failed */
export enum TaskExecStatus {
  NoTriggered = 0,
  /** Triggered */
  Triggered = 1,
  /** Plugin ran successfully */
  DoAction = 2,
  /** to be pushed */
  WaitToPush = 3,
  /** Push successful */
  PushSuccess = 4,
  /** push failed */
  PushFail = 5,
}

export enum TaskStatus {
  /** initialization state */
  Init = 0,
  /** Effective status */
  Activated = 1,
  /** failure state */
  Deactivated = 2,
  /** suspended state */
  Suspended = 3,
}

export enum TaskType {
  /** Preset tasks, including timing and webhooks, are configured on coze */
  Preset = 1,
  /** User task, obtained by the user talking to the model */
  UserTask = 2,
  /** Plugin background tasks, such as asynchronous plugin scenarios, background tasks, do not need to be displayed to developers/users */
  PluginRunTask = 3,
}

export interface Action {
  action_type: ActionType;
  /** Only action_type == 1 */
  bot_query_action?: ActionBotQuery;
  /** Only action_type == 2 */
  plugin_action?: ActionPlugin;
  /** Only action_type == 3 */
  workflow_action?: ActionWorkflow;
}

export interface ActionBotQuery {
  content: string;
}

export interface ActionPlugin {
  plugin_id: string;
  api_name: string;
  params: string;
  /** Front-end pass-through, server level does not know */
  extra?: string;
}

export interface ActionWorkflow {
  workflow_id: string;
  plugin_id: string;
  params: string;
  /** Front-end pass-through, server level does not know */
  extra?: string;
}

export interface AgentTaskExecInfo {
  /** task id */
  trigger_id?: Int64;
  /** Trigger ID */
  serial_id?: string;
  /** task type */
  trigger_type?: TaskType;
  /** event type */
  event_type?: BotTaskTriggerType;
  /** Agent version */
  bot_version?: string;
  /** User ID, only user triggers have */
  user_id?: string;
  /** channel */
  connector_id?: Int64;
  /** execution result */
  exec_result?: TaskExecStatus;
  /** From the next run event, seconds */
  next_exec_duration?: number;
  /** Effective status, true is effective */
  valid_status?: boolean;
  /** configuration */
  config?: string;
}

export interface PresetTimeTriggerData {
  /** Cron expression */
  cron_expr: string;
  time_zone?: string;
  cron_expr_text?: string;
}

export interface PresetWebhookTriggerData {
  url: string;
  bearer_token: string;
  output_schema: string;
  /** Default input during debugging */
  default_output?: string;
  credential_key?: string;
}

/** Bot adds automation
  */
export interface TaskInfo {
  id: Int64;
  id_str: string;
  connector_id: Int64;
  name: string;
  trigger: Trigger;
  action: Action;
  status: TaskStatus;
  /** Second timestamp */
  create_time: Int64;
  /** Generate when created, edit/publish unchanged */
  origin_id: Int64;
  creator_uid?: string;
  /** Chat type */
  chat_type?: ChatType;
  /** task configuration */
  config?: string;
  /** Published channel, agent only supports Feishu. */
  connector_ids?: Array<Int64>;
  /** aggregate field */
  bot_version?: string;
  /** Last execution result */
  exec_result?: TaskExecStatus;
  /** From the next run event, seconds */
  next_exec_duration?: number;
  /** Effective status, true is effective */
  valid_status?: boolean;
}

export interface Trigger {
  task_type: TaskType;
  /** "time", "webhook", "oauth2_webhook","long_task" */
  event_type: string;
  /** Only task_type == 1 & & (event_type == "time" | | trigger_type == time) */
  preset_time_data?: PresetTimeTriggerData;
  /** Only task_type == 1 & & (event_type == "webhook" | | (trigger_type == event & & mode == webhook)) */
  preset_webhook_data?: PresetWebhookTriggerData;
  /** Only task_type == 2 & & (event_type == "time" | | trigger_type == time) */
  user_task_time_data?: UserTaskTimeTriggerData;
  trigger_type: BotTaskTriggerType;
  mode: BotTaskMode;
}

export interface UserTaskTimeTriggerData {
  /** Cron expression */
  cron_expr: string;
  time_zone?: string;
  conversation_id: string;
  user_id: string;
  /** Secondtimestamp */
  start_time?: Int64;
  /** Secondtimestamp */
  stop_time?: Int64;
  /** Periodic task. Need to pass start time */
  trigger_only_once?: boolean;
  /** Pushed cron expression */
  push_cron_expr?: string;
}
/* eslint-enable */
