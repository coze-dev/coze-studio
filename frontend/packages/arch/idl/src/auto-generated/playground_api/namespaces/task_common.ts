/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum IntelligenceTaskActionEventMsgEventType {
  TaskSuccess = 1,
  TaskFailed = 2,
  TaskCanceled = 3,
}

export enum IntelligenceTaskActionType {
  Copy = 1,
  Move = 2,
  Publish = 3,
}

export enum IntelligenceTaskEntityLocationType {
  Project = 1,
  Space = 2,
  Online = 3,
  Template = 4,
  Agent = 5,
}

export enum IntelligenceTaskEntityType {
  Plugin = 1,
  Workflow = 2,
  Imageflow = 3,
  Knowledge = 4,
  UI = 5,
  Project = 6,
  Database = 7,
  Variable = 8,
  Trigger = 9,
  Agent = 10,
  Prompt = 11,
  Shortcut = 12,
}

export enum IntelligenceTaskStatus {
  Success = 1,
  Processing = 2,
  Failed = 3,
  Canceled = 4,
}

export enum IntelligenceTaskType {
  /** Copy resources within a project to the same project */
  CopyResourceInProject = 1,
  /** Copy Project Resources to Library */
  CopyProjectResourceToLibrary = 2,
  /** Move Project Resources to Library */
  MoveProjectResourceToLibrary = 3,
  /** Copy Library Resources to Project */
  CopyLibraryResourceToProject = 4,
  /** Copy item */
  CopyProject = 5,
  /** Project Publish to Channel */
  PublishProject = 6,
  /** Copy project template */
  CopyTemplateToProject = 7,
  /** Project Publish to Template */
  PublishProjectTemplate = 8,
  /** Project template on the shelves */
  LaunchProjectTemplate = 9,
  /** Project Archive */
  ArchiveProject = 10,
  /** project rollback */
  RollbackProject = 11,
  /** Cross-spatial replication of a single resource */
  CrossSpaceCopy = 12,
  /** item cross-spatial replication */
  CrossSpaceCopyProject = 13,
}

export interface ExtraInfo {
  /** List of child entity IDs associated with the main operating entity'Business pass-through field json string ' */
  SubSourceInfoList?: Array<SubSourceInfo>;
  /** ID list for child entity mapping'business passthrough field json string' */
  SourceMappingList?: Array<SourceMapping>;
  /** The name of the main operating entity */
  Name?: string;
  /** Icon URL of the main operating entity */
  Icon?: string;
  /** Agent replication mapping */
  OldAgentIdToNewIdMap?: Record<Int64, Int64>;
}

export interface FailedReasonDetail {
  /** reason for failure */
  FailedReason?: string;
  /** Operating Entity ID */
  EntityId?: Int64;
  /** Operating Entity Type */
  EntityType?: IntelligenceTaskEntityType;
  /** entity name */
  EntityName?: string;
}

/** task mq schema */
export interface IntelligenceTaskActionEventMsg {
  TaskId?: Int64;
  EventType?: IntelligenceTaskActionEventMsgEventType;
  /** Event time ms */
  TimeStamp?: Int64;
  /** Task details */
  TaskInfo?: IntelligenceTaskInfo;
}

export interface IntelligenceTaskEntityLocationInfo {
  /** 'Location type' */
  LocationType?: IntelligenceTaskEntityLocationType;
  /** 'Location space id' */
  SpaceId?: string;
  /** 'Location project id' */
  ProjectId?: string;
  /** 'Location entity version' */
  Version?: string;
}

/** Task resource party implementation interface definition, external referenceable */
export interface IntelligenceTaskInfo {
  /** Task ID */
  TaskId?: string;
  /** Task creator id */
  UserId?: string;
  /** Operating Entity Type */
  EntityType?: IntelligenceTaskEntityType;
  /** Operating Entity ID */
  EntityId?: string;
  /** 'Type of operation' */
  ActionType?: IntelligenceTaskActionType;
  /** 'Source location information */
  SourceLocationInfo?: IntelligenceTaskEntityLocationInfo;
  /** 'Target location information' */
  TargetLocationInfo?: IntelligenceTaskEntityLocationInfo;
  /** 'Business pass-through field json string ' */
  Extra?: string;
  /** task status */
  Status?: IntelligenceTaskStatus;
  /** number of retries */
  RetryNum?: number;
  /** summary of reasons for failure */
  FailedReasons?: Array<FailedReasonDetail>;
  /** project type */
  TaskType?: IntelligenceTaskType;
  /** creation time */
  CreateTime?: Int64;
  /** update time */
  UpdateTime?: Int64;
}

export interface IntelligenceTaskLog {}

export interface SourceMapping {
  EntityType: IntelligenceTaskEntityType;
  OriginalId: Int64;
  TargetId: Int64;
  /** Other information, such as plugin tool mapping information */
  TargetResInfo?: string;
}

export interface SubSourceInfo {
  EntityType: IntelligenceTaskEntityType;
  Ids: Array<Int64>;
}

export interface TaskCancelRequest {
  TaskInfo: IntelligenceTaskInfo;
}

export interface TaskCancelResponse {}

export interface TaskChangeRefRequest {
  TaskInfo: IntelligenceTaskInfo;
}

export interface TaskChangeRefResponse {
  /** Optionally returned failure reason on failure */
  FailedReasons?: Array<FailedReasonDetail>;
}

export interface TaskExecuteRequest {
  TaskInfo: IntelligenceTaskInfo;
}

export interface TaskExecuteResponse {
  /** Optionally returned failure reason on failure */
  FailedReasons?: Array<FailedReasonDetail>;
  /** ID list for child entity mapping */
  SourceMappingList?: Array<SourceMapping>;
}

export interface TaskPostProcessRequest {
  TaskInfo: IntelligenceTaskInfo;
}

export interface TaskPostProcessResponse {
  /** Optionally returned failure reason on failure */
  FailedReasons?: Array<FailedReasonDetail>;
}

export interface TaskPreCheckRequest {
  TaskInfo: IntelligenceTaskInfo;
}

export interface TaskPreCheckResponse {
  /** Optionally returned failure reason on failure */
  FailedReasons?: Array<FailedReasonDetail>;
}

export interface TaskSubSourceRequest {
  /** The entity to be processed by the task, and the corresponding sub-resource */
  TaskInfo: IntelligenceTaskInfo;
}

export interface TaskSubSourceResponse {
  /** Optionally returned failure reason on failure */
  FailedReasons?: Array<FailedReasonDetail>;
  /** List of sub-resources corresponding to the entity */
  SubSourceMap?: Record<Int64, Array<SubSourceInfo>>;
}
/* eslint-enable */
