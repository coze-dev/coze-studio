/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum ActionKey {
  /** copy */
  Copy = 1,
  /** delete */
  Delete = 2,
  /** enable/disable */
  EnableSwitch = 3,
  /** edit */
  Edit = 4,
  /** Switch to funcflow */
  SwitchToFuncflow = 8,
  /** Switch to chatflow */
  SwitchToChatflow = 9,
  /** Cross-spatial replication */
  CrossSpaceCopy = 10,
}

export enum CopyStatus {
  Successful = 1,
  Processing = 2,
  Failed = 3,
  /** If it is KeepOrigin, it means that the resource does not need to be changed, and the resource party does not need to set Target related information; the referencing party can directly ignore it. */
  KeepOrigin = 4,
  /** Represents when rolling back to draft, the resource changes from Yes - > No */
  Deleted = 5,
}

export enum ProjectResourceActionKey {
  /** rename */
  Rename = 1,
  /** Create a copy/copy to the current project */
  Copy = 2,
  /** Copy to repository */
  CopyToLibrary = 3,
  /** Move to Library */
  MoveToLibrary = 4,
  /** delete */
  Delete = 5,
  /** enable */
  Enable = 6,
  /** disable */
  Disable = 7,
  /** Switch to funcflow */
  SwitchToFuncflow = 8,
  /** Switch to chatflow */
  SwitchToChatflow = 9,
  /** Modify description */
  UpdateDesc = 10,
}

export enum ProjectResourceGroupType {
  Workflow = 1,
  Plugin = 2,
  Data = 3,
}

export enum PublishStatus {
  /** unpublished */
  UnPublished = 1,
  /** Published */
  Published = 2,
}

export enum ResourceCopyScene {
  /** Copy resources within the project, shallow copy */
  CopyProjectResource = 1,
  /** Copy the project resources to the Library, and publish after copying */
  CopyResourceToLibrary = 2,
  /** Move project resources to Library, copy to publish, and delete project resources later */
  MoveResourceToLibrary = 3,
  /** Copy Library Resources to Project */
  CopyResourceFromLibrary = 4,
  /** Copy the project, along with the resources. Copy the current draft. */
  CopyProject = 5,
  /** The project is published to the channel, and the associated resources need to be published (including the store). Publish with the current draft. */
  PublishProject = 6,
  /** Copy the project template. */
  CopyProjectTemplate = 7,
  /** The project is published to a template, and the specified version of the project is published as a temporary template. */
  PublishProjectTemplate = 8,
  /** The template is approved, put on the shelves, and the official template is copied according to the temporary template. */
  LaunchTemplate = 9,
  /** Draft version archive */
  ArchiveProject = 10,
  /** Online version loaded into draft, draft version loaded into draft */
  RollbackProject = 11,
  /** Cross-spatial replication of a single resource */
  CrossSpaceCopy = 12,
  /** item cross-spatial replication */
  CrossSpaceCopyProject = 13,
}

export enum ResType {
  Plugin = 1,
  Workflow = 2,
  Imageflow = 3,
  Knowledge = 4,
  UI = 5,
  Prompt = 6,
  Database = 7,
  Variable = 8,
  Voice = 9,
}

export enum SyncOperation {
  Upsert = 1,
  Delete = 2,
}

/** struct ResourceCopyExtraInfo{
    //Indicates that after operating the resource, the resource should be changed to this namefter manipulating the resource, the resource should be changed to this name
    1 : optional string ResourceName (go.tag = "json:\"resource_name\"", agw.key = "resource_name")
    //Indicates the version number after the resource is publishedthe version number of the resource after it was published
    2 : optional string VersionNum  (go.tag = "json:\"version_num\"", agw.key = "version_num")
    //Version description of this versionion description of this version
    3 : optional string VersionDesc  (go.tag = "json:\"version_desc\"", agw.key = "version_desc")
    //Different information for each resource, for plugins, is a personal information collection declaration. schema and conventions for each resource partyn, and the plugin is a personal information collection declaration. schema and conventions for each resource party
    4 : optional string ResourceExtendInfo  (go.tag = "json:\"resource_extend_info\"", agw.key = "resource_extend_info")
} */
export enum TaskStatus {
  Successed = 1,
  Processing = 2,
  Failed = 3,
  Canceled = 4,
}

/** For display, the implementer provides display information */
export interface DisplayResourceInfo {
  /** Resource ID */
  ResID?: Int64;
  /** resource description */
  Desc?: string;
  /** Resource Icon, full url */
  Icon?: string;
  /** Resource status, each type of resource defines itself */
  BizResStatus?: number;
  /** Whether to enable multi-person editing */
  CollaborationEnable?: boolean;
  /** Business carry extended information to res_type distinguish, each res_type defined schema and meaning is not the same, need to judge before use res_type */
  BizExtend?: Record<string, string>;
  /** Different types of different operation buttons are agreed upon by the resource implementer and the front end. Return is displayed, if you want to hide a button, do not return; */
  Actions?: Array<ResourceAction>;
  /** Whether to ban entering the details page */
  DetailDisable?: boolean;
  /** resource name */
  Name?: string;
  /** Resource release status, 1 - unpublished, 2 - published */
  PublishStatus?: PublishStatus;
  /** Last edited, unix timestamp */
  EditTime?: Int64;
}

export interface ProjectResourceAction {
  /** An operation corresponds to a unique key, and the key is constrained by the resource side */
  key: ProjectResourceActionKey;
  /** ture = can operate this Action, false = grey out */
  enable: boolean;
  /** When enable = false, prompt the copywriter. The backend returns the Starling Key, be careful to put it under the same space. */
  hint?: string;
}

export interface ProjectResourceGroup {
  /** resource grouping */
  group_type?: ProjectResourceGroupType;
  resource_list?: Array<ProjectResourceInfo>;
}

/** The implementer provides display information */
export interface ProjectResourceInfo {
  /** Resource ID */
  res_id?: string;
  /** resource name */
  name?: string;
  /** Different types of different operation buttons are agreed upon by the resource implementer and the front end. Return is displayed, if you want to hide a button, do not return; */
  actions?: Array<ProjectResourceAction>;
  /** Is the user read-only to the resource?
4: bool ReadOnly (go.tag = "json:\"read_only\"", agw.key = "read_only")
resource type */
  res_type?: ResType;
  /** Resource subtype, defined by the resource implementer. Plugin: 1-Http; 2-App; 6-Local; Knowledge: 0-text; 1-table; 2-image; UI: 1-Card */
  res_sub_type?: number;
  /** Business carry extended information to res_type distinguish, each res_type defined schema and meaning is not the same, need to judge before use res_type */
  biz_extend?: Record<string, string>;
  /** Resource status, each type of resource defines itself. The front end agrees with each resource party. */
  biz_res_status?: number;
  /** The edited version of the current resource */
  version_str?: string;
  res_third_type?: number;
}

export interface RefTreeNode {
  ResourceLocator?: ResourceLocator;
  /** References to sub-resources can occur multiple times at different levels. A-B, A-C-B, A-D, B can appear in ChildrenNodes of A and C at the same time */
  ChildrenNodes?: Array<RefTreeNode>;
  /** The latest version of the current resource, for temporary use */
  LatestPublishVersionStr?: string;
}

/** Library Resource Operations */
export interface ResourceAction {
  /** An operation corresponds to a unique key, and the key is constrained by the resource side */
  key: ActionKey;
  /** ture = can operate this Action, false = grey out */
  enable: boolean;
}

export interface ResourceCopyCheckFailedReason {
  ResourceLocator?: ResourceLocator;
  ResName?: string;
  Reason?: string;
}

export interface ResourceCopyEnv {
  Scene?: ResourceCopyScene;
  /** Original project ID. Values if the copied resource is in the project. Scenario: CopyProjectResource, CopyResourceToLibrary, MoveResourceToLibrary, CopyProject */
  OriginProjectID?: Int64;
  /** Target project ID. If the copied resource is to be assigned project_id, there is a value. Scenario: CopyProjectResource, CopyResourceFromLibrary, CopyProject */
  TargetProjectID?: Int64;
  /** The ID of the resource to be copied/moved by the user. Valued if the target of the operation is a resource. Scenario: CopyProjectResource, CopyResourceToLibrary, MoveResourceToLibrary, CopyResourceFromLibrary */
  ResourceLocator?: ResourceLocator;
  /** The only constraint of the secondary task, the control idempotent. If there is one, it will be passed, and there is no need to pass it when initiating the task. */
  TaskUniqKey?: string;
  /** When the project is published, the project version. Scenario: PublishProject, PublishProjectTemplate */
  TargetProjectVersion?: Int64;
  OriginProjectSpaceID?: Int64;
  TargetProjectSpaceID?: Int64;
  /** operator user id */
  CurrentUserID?: Int64;
  /** When publishing a template, the original project version. or when copying a template, the project version of the template. */
  OriginProjectVersion?: Int64;
  /** 0/default-app, the default is app, which is the previous project; 1-bot or agent */
  ProjectType?: number;
}

export interface ResourceCopyFailedReason {
  res_id?: string;
  res_type?: ResType;
  res_name?: string;
  reason?: string;
  /** abandoned */
  publish_version?: Int64;
  /** The current version of the resource, either nil or empty string, is considered the latest version. Project release or Library release. */
  publish_version_str?: string;
}

/** Copy result for each resource, including before and after mapping information */
export interface ResourceCopyResult {
  OriginResourceLocator?: ResourceLocator;
  TargetResourceLocator?: ResourceLocator;
  CopyStatus?: CopyStatus;
  /** Release version number or version name, 0.0.1 */
  TargetPublishVersionNum?: string;
  /** Other information, such as plugin tool mapping information. Schema and resource party conventions */
  TargetResInfo?: string;
  /** Reasons for unsuccessful replication */
  FailedReason?: string;
}

export interface ResourceCopyTaskDetail {
  task_id?: string;
  /** task status */
  status?: TaskStatus;
  /** Replicated resource id */
  res_id?: string;
  res_type?: ResType;
  scene?: ResourceCopyScene;
  /** Resource name before replication */
  res_name?: string;
}

/** front end */
export interface ResourceInfo {
  /** Resource ID */
  res_id?: string;
  /** resource type */
  res_type?: ResType;
  /** Resource subtype, defined by the resource implementer.
Plugin：1-Http; 2-App; 6-Local；Knowledge：0-text; 1-table; 2-image；UI：1-Card */
  res_sub_type?: number;
  /** resource name */
  name?: string;
  /** resource description */
  desc?: string;
  /** Resource Icon, full url */
  icon?: string;
  /** Resource creator */
  creator_id?: string;
  /** Resource creator */
  creator_avatar?: string;
  /** Resource creator */
  creator_name?: string;
  /** Resource creator */
  user_name?: string;
  /** Resource release status, 1 - unpublished, 2 - published */
  publish_status?: PublishStatus;
  /** Resource status, each type of resource defines itself */
  biz_res_status?: number;
  /** Whether to enable multi-person editing */
  collaboration_enable?: boolean;
  /** Last edited, unix timestamp */
  edit_time?: Int64;
  /** Resource Ownership Space ID */
  space_id?: string;
  /** Business carry extended information to res_type distinguish, each res_type defined schema and meaning is not the same, need to judge before use res_type */
  biz_extend?: Record<string, string>;
  /** Different types of different operation buttons are agreed upon by the resource implementer and the front end. Return is displayed, if you want to hide a button, do not return; */
  actions?: Array<ResourceAction>;
  /** Whether to ban entering the details page */
  detail_disable?: boolean;
  /** [Data delay optimization] Delete identifier, true-deleted-frontend hides the item, false-normal */
  del_flag?: boolean;
  res_third_type?: number;
}

/** A structure used to locate a resource's data: a version of a resource */
export interface ResourceLocator {
  ResID?: Int64;
  ResType?: ResType;
  /** Discard, do not use */
  PublishVersion?: Int64;
  /** The current version of the resource, either nil or empty string, is considered the latest version. Project release or Library release. */
  PublishVersionStr?: string;
}

/** For synchronization, key information for ES */
export interface StaticResourceInfo {
  /** Resource ID */
  res_id: Int64;
  /** Resource Type, 1-Plugin; 2-Workflow; 3-Imageflow; 4-Knowledge; 5-UI; 6-Prompt */
  res_type: ResType;
  /** Resource subtype, defined by the resource implementer. Plugin: 1-Http; 2-App; 6-Local; Knowledge: 1-text; 2-table; 3-image */
  res_sub_type?: number;
  /** resource name */
  name?: string;
  /** Resource creator */
  creator_id?: Int64;
  /** Resource release status, 1 - unpublished, 2 - published */
  publish_status?: PublishStatus;
  /** Last edited, unix timestamp */
  edit_time?: Int64;
  /** Resource Ownership Space ID */
  space_id?: Int64;
  /** Data versioning when writing resources, to solve timing issues, no business implications. You can specify a millisecond timestamp implementation. */
  data_version?: Int64;
  /** Business custom field - for prompt is the body, this field can be used to search */
  full_text?: string;
  res_third_type?: number;
}

/** synchronous resource mq compensation */
export interface SyncResourceCompensateMsg {
  /** marshal []*resource_common.StaticResourceInfo） */
  ResourceList?: string;
  /** resource_common.SyncOperation */
  Op?: Int64;
  SendTime?: string;
}
/* eslint-enable */
