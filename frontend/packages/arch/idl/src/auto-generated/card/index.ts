/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './namespaces/base';
import * as bot_common from './namespaces/bot_common';
import * as card from './namespaces/card';
import * as copilot_common from './namespaces/copilot_common';
import * as permission from './namespaces/permission';
import * as resource_common from './namespaces/resource_common';
import * as retriever from './namespaces/retriever';
import * as shortcut_command from './namespaces/shortcut_command';

export {
  base,
  bot_common,
  card,
  copilot_common,
  permission,
  resource_common,
  retriever,
  shortcut_command,
};
export * from './namespaces/base';
export * from './namespaces/bot_common';
export * from './namespaces/card';
export * from './namespaces/copilot_common';
export * from './namespaces/permission';
export * from './namespaces/resource_common';
export * from './namespaces/retriever';
export * from './namespaces/shortcut_command';

export type Int64 = string | number;

export default class CardService<T> {
  private request: any = () => {
    throw new Error('CardService.request is undefined');
  };
  private baseURL: string | ((path: string) => string) = '';

  constructor(options?: {
    baseURL?: string | ((path: string) => string);
    request?<R>(
      params: {
        url: string;
        method: 'GET' | 'DELETE' | 'POST' | 'PUT' | 'PATCH';
        data?: any;
        params?: any;
        headers?: any;
      },
      options?: T,
    ): Promise<R>;
  }) {
    this.request = options?.request || this.request;
    this.baseURL = options?.baseURL || '';
  }

  private genBaseURL(path: string) {
    return typeof this.baseURL === 'string'
      ? this.baseURL + path
      : this.baseURL(path);
  }

  /**
   * POST /api/card_builder/delete_template
   *
   * Delete Card Template
   */
  DeleteCardTemplate(
    req: card.DeleteCardTemplateRequest,
    options?: T,
  ): Promise<card.DeleteCardTemplateResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/delete_template');
    const method = 'POST';
    const data = {
      creator_id: _req['creator_id'],
      template_id: _req['template_id'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/upload_file
   *
   * Upload card related resources
   */
  CardUploadFile(
    req?: card.CardUploadFileRequest,
    options?: T,
  ): Promise<card.CardUploadFileResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/upload_file');
    const method = 'POST';
    const data = {
      file_name: _req['file_name'],
      data: _req['data'],
      scene: _req['scene'],
      base: _req['base'],
    };
    const headers = { 'Content-Type': _req['Content-Type'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/query_history
   *
   * Card Release History
   */
  QueryCardHistory(
    req: card.QueryCardHistoryRequest,
    options?: T,
  ): Promise<card.QueryCardHistoryResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/query_history');
    const method = 'POST';
    const data = {
      card_id: _req['card_id'],
      user_id: _req['user_id'],
      page: _req['page'],
      size: _req['size'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/publish
   *
   * Post card
   */
  CardMetaPublish(
    req: card.CardMetaPublishRequest,
    options?: T,
  ): Promise<card.CardMetaPublishResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/publish');
    const method = 'POST';
    const data = {
      creator_id: _req['creator_id'],
      draft_card_id: _req['draft_card_id'],
      card_id: _req['card_id'],
      description: _req['description'],
      version_name: _req['version_name'],
      thumbnail_info: _req['thumbnail_info'],
      base: _req['base'],
    };
    const headers = { 'use-builder-psm': _req['use-builder-psm'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/update
   *
   * The new card update interface, the original card update on agw is invalid.
   */
  UpdateCardInfo(
    req: card.UpdateCardInfoRequest,
    options?: T,
  ): Promise<card.UpdateCardInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/update');
    const method = 'POST';
    const data = {
      card_id: _req['card_id'],
      name: _req['name'],
      card_status: _req['card_status'],
      creator_id: _req['creator_id'],
      edit_card: _req['edit_card'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/save_template
   *
   * Save Card Template
   */
  SaveCardTemplate(
    req: card.SaveCardTemplateRequest,
    options?: T,
  ): Promise<card.SaveCardTemplateResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/save_template');
    const method = 'POST';
    const data = {
      creator_id: _req['creator_id'],
      channel_type: _req['channel_type'],
      thumbnail: _req['thumbnail'],
      name: _req['name'],
      dsl_content: _req['dsl_content'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/mget_template
   *
   * Get card templates in bulk
   */
  MGetCardTemplate(
    req: card.MGetCardTemplateRequest,
    options?: T,
  ): Promise<card.MGetCardTemplateResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/mget_template');
    const method = 'POST';
    const data = {
      creator_id: _req['creator_id'],
      size: _req['size'],
      page: _req['page'],
      channel_type: _req['channel_type'],
      category: _req['category'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/get_card_info
   *
   * Check card information
   */
  GetCardInfo(
    req: card.GetCardInfoRequest,
    options?: T,
  ): Promise<card.GetCardInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/get_card_info');
    const method = 'POST';
    const data = {
      card_id: _req['card_id'],
      channel_type: _req['channel_type'],
      version_num: _req['version_num'],
      creator_id: _req['creator_id'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/op_card/query_cards
   *
   * -------------- Operating Platform Interface --------------
   */
  QueryCards(
    req?: card.QueryCardsRequest,
    options?: T,
  ): Promise<card.QueryCardsResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/op_card/query_cards');
    const method = 'POST';
    const data = { card_condition: _req['card_condition'], base: _req['base'] };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/save_generate_history
   *
   * Save generated card results
   */
  SaveGenerateHistory(
    req: card.SaveGenerateHistoryRequest,
    options?: T,
  ): Promise<card.SaveGenerateHistoryResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/save_generate_history');
    const method = 'POST';
    const data = {
      record_id: _req['record_id'],
      card_id: _req['card_id'],
      UserID: _req['UserID'],
      transfer_status: _req['transfer_status'],
      channel_info: _req['channel_info'],
      ai_schema: _req['ai_schema'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/list_card_generate_history
   *
   * Query the list of AI-generated card histories
   */
  ListCardGenerateHistory(
    req: card.ListCardGenerateHistoryRequest,
    options?: T,
  ): Promise<card.ListCardGenerateHistoryResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/list_card_generate_history');
    const method = 'POST';
    const data = {
      UserID: _req['UserID'],
      card_id: _req['card_id'],
      page: _req['page'],
      size: _req['size'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/get_default_prompt
   *
   * Get generate card default prompt word
   */
  GetDefaultPrompt(
    req: card.GetDefaultPromptRequest,
    options?: T,
  ): Promise<card.GetDefaultPromptResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/get_default_prompt');
    const method = 'POST';
    const data = {
      UserID: _req['UserID'],
      tool_type: _req['tool_type'],
      plugin_id: _req['plugin_id'],
      api_id: _req['api_id'],
      workflow_id: _req['workflow_id'],
      language: _req['language'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/generate_card
   *
   * AI-generated cards
   */
  GenerateCard(
    req: card.GenerateCardRequest,
    options?: T,
  ): Promise<card.GenerateCardResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/generate_card');
    const method = 'POST';
    const data = {
      card_id: _req['card_id'],
      description: _req['description'],
      UserID: _req['UserID'],
      language: _req['language'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/get_card_tcc_info
   *
   * Query the tcc configuration interface
   */
  GetCardTccInfo(
    req?: card.GetCardTccInfoRequest,
    options?: T,
  ): Promise<card.GetCardTccInfoResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/get_card_tcc_info');
    const method = 'POST';
    const data = { Base: _req['Base'] };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/preview
   *
   * Card preview interface
   */
  PreviewCard(
    req?: card.PreviewCardRequest,
    options?: T,
  ): Promise<card.PreviewCardResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/preview');
    const method = 'POST';
    const data = {
      DraftID: _req['DraftID'],
      ChannelType: _req['ChannelType'],
      Base: _req['Base'],
    };
    const headers = { 'use-builder-psm': _req['use-builder-psm'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/query_card_list
   *
   * Query the card list (first-level navigation bar page)
   */
  QueryCardList(
    req?: card.QueryCardListRequest,
    options?: T,
  ): Promise<card.QueryCardListResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/query_card_list');
    const method = 'POST';
    const data = {
      page: _req['page'],
      size: _req['size'],
      condition: _req['condition'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/mget_card_info
   *
   * Batch query card information
   */
  MGetCardInfo(
    req: card.MGetCardInfoRequest,
    options?: T,
  ): Promise<card.MGetCardInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/mget_card_info');
    const method = 'POST';
    const data = { card_ids: _req['card_ids'], base: _req['base'] };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/generate_cards_thumbnail
   *
   * Batch generation of card thumbnails
   */
  GenerateCardsThumbnail(
    req: card.GenerateCardsThumbnailRequest,
    options?: T,
  ): Promise<card.GenerateCardsThumbnailResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/generate_cards_thumbnail');
    const method = 'POST';
    const data = { card_ids: _req['card_ids'], base: _req['base'] };
    const headers = {
      'space-id': _req['space-id'],
      'use-builder-psm': _req['use-builder-psm'],
    };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/generate_card_stream
   *
   * Generate card stream output interface
   */
  GenerateCardStream(
    req: card.GenerateCardStreamRequest,
    options?: T,
  ): Promise<card.GenerateCardStreamResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/generate_card_stream');
    const method = 'POST';
    const data = {
      card_id: _req['card_id'],
      description: _req['description'],
      UserID: _req['UserID'],
      language: _req['language'],
      user_data: _req['user_data'],
      prompt_version: _req['prompt_version'],
      reference: _req['reference'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/gen_card_channel_thumbnail
   *
   * Generate card thumbnail
   */
  GenCardChannelsThumbnail(
    req?: card.GenCardChannelsThumbnailRequest,
    options?: T,
  ): Promise<card.GenCardChannelsThumbnailResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/gen_card_channel_thumbnail');
    const method = 'POST';
    const data = {
      DraftID: _req['DraftID'],
      Channels: _req['Channels'],
      CardID: _req['CardID'],
      Base: _req['Base'],
    };
    const headers = { 'use-builder-psm': _req['use-builder-psm'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/get_task_progress
   *
   * Query the analysis of the paper (polling)
   */
  GetTaskProgress(
    req: card.GetTaskProgressRequest,
    options?: T,
  ): Promise<card.GetTaskProgressResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/get_task_progress');
    const method = 'POST';
    const data = {
      dataset_id: _req['dataset_id'],
      document_ids: _req['document_ids'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/save_instance
   *
   * Update instance information
   */
  UpdateAgentInstanceInfo(
    req: card.UpdateAgentInstanceInfoRequest,
    options?: T,
  ): Promise<card.UpdateAgentInstanceInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/save_instance');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      instance_id: _req['instance_id'],
      update_param: _req['update_param'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/analyzing_paper
   *
   * parsing paper
   */
  AnalyzingPaper(
    req: card.AnalyzingPaperRequest,
    options?: T,
  ): Promise<card.AnalyzingPaperResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/analyzing_paper');
    const method = 'POST';
    const data = { uri: _req['uri'], name: _req['name'], base: _req['base'] };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/delete_instance
   *
   * Delete instance
   */
  DeleteAgentInstance(
    req: card.DeleteAgentInstanceRequest,
    options?: T,
  ): Promise<card.DeleteAgentInstanceResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/delete_instance');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      instance_id: _req['instance_id'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/create_instance
   *
   * New instance
   */
  CreateAgentInstance(
    req: card.CreateAgentInstanceRequest,
    options?: T,
  ): Promise<card.CreateAgentInstanceResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/create_instance');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      name: _req['name'],
      init_param: _req['init_param'],
      content: _req['content'],
      idem_key: _req['idem_key'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/get_instance_detail
   *
   * Query instance details
   */
  GetAgentInstanceDetail(
    req: card.GetAgentInstanceDetailRequest,
    options?: T,
  ): Promise<card.GetAgentInstanceDetailResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/get_instance_detail');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      instance_id: _req['instance_id'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/instance_list
   *
   * Query instance list
   */
  ListAgentInstance(
    req: card.ListAgentInstanceRequest,
    options?: T,
  ): Promise<card.ListAgentInstanceResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/instance_list');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      size: _req['size'],
      page: _req['page'],
      sort_cond: _req['sort_cond'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/list_slice
   *
   * Query sharding information
   */
  ListSlice(
    req: card.ListSliceRequest,
    options?: T,
  ): Promise<card.ListSliceResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/list_slice');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      InstanceID: _req['InstanceID'],
      dataset_id: _req['dataset_id'],
      document_id: _req['document_id'],
      page: _req['page'],
      size: _req['size'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/get
   *
   * Enquire about agent details
   */
  GetAgentDetail(
    req: card.GetAgentDetailRequest,
    options?: T,
  ): Promise<card.GetAgentDetailResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/get');
    const method = 'POST';
    const data = { agent_id: _req['agent_id'], base: _req['base'] };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/biz_universal
   *
   * Agent Business Logic Common Interface
   */
  AgentBizUniversal(
    req: card.AgentBizUniversalRequest,
    options?: T,
  ): Promise<card.AgentBizUniversalResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/biz_universal');
    const method = 'POST';
    const data = {
      api_path: _req['api_path'],
      method: _req['method'],
      query: _req['query'],
      body: _req['body'],
      Base: _req['Base'],
    };
    const headers = { 'Content-Type': _req['Content-Type'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/upload_file
   *
   * Upload file resource interface
   */
  AgentUploadFile(
    req?: card.AgentUploadFileRequest,
    options?: T,
  ): Promise<card.AgentUploadFileResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/agent/upload_file');
    const method = 'POST';
    const data = { data: _req['data'], Base: _req['Base'] };
    const headers = { 'Content-Type': _req['Content-Type'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/generate_card_variables
   *
   * Generate user data interface
   */
  GenerateCardVariables(
    req: card.GenerateCardVariablesRequest,
    options?: T,
  ): Promise<card.GenerateCardVariablesResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/generate_card_variables');
    const method = 'POST';
    const data = {
      card_id: _req['card_id'],
      language: _req['language'],
      desc: _req['desc'],
      channel_type: _req['channel_type'],
      base: _req['base'],
    };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/translate_result_get
   *
   * Query Translation Paper Results
   */
  GetPaperTranslateResult(
    req: card.GetPaperTranslateResultRequest,
    options?: T,
  ): Promise<card.GetPaperTranslateResultResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/translate_result_get');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      instance_id: _req['instance_id'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/translate_paper
   *
   * Translated paper
   */
  TranslatePaper(
    req: card.TranslatePaperRequest,
    options?: T,
  ): Promise<card.TranslatePaperResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/translate_paper');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      instance_id: _req['instance_id'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/get_image_info
   *
   * Get picture
   */
  GetImageInfo(
    req: card.GetImageInfoRequest,
    options?: T,
  ): Promise<card.GetImageInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/get_image_info');
    const method = 'POST';
    const data = {
      file_name: _req['file_name'],
      need_data: _req['need_data'],
      Base: _req['Base'],
    };
    const headers = { 'x-jwt-token': _req['x-jwt-token'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/get_jwt_token
   *
   * Get image jwt
   */
  GetJwtToken(
    req?: card.GetJwtTokenRequest,
    options?: T,
  ): Promise<card.GetJwtTokenResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/get_jwt_token');
    const method = 'POST';
    const data = { expire_time: _req['expire_time'], Base: _req['Base'] };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/translate_text
   *
   * Translate text
   */
  TranslateText(
    req?: card.TranslateTextRequest,
    options?: T,
  ): Promise<card.TranslateTextResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/agent/translate_text');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      instance_id: _req['instance_id'],
      text: _req['text'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/save_reference
   *
   * Parse and save references
   */
  AnalyseAgentReference(
    req?: card.AnalyseAgentReferenceRequest,
    options?: T,
  ): Promise<card.AnalyseAgentReferenceResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/agent/save_reference');
    const method = 'POST';
    const data = {
      references: _req['references'],
      fast_mode: _req['fast_mode'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/get_reference
   *
   * Access to reference materials
   */
  GetAgentReference(
    req?: card.GetAgentReferenceRequest,
    options?: T,
  ): Promise<card.GetAgentReferenceResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/agent/get_reference');
    const method = 'POST';
    const data = { reference_url: _req['reference_url'], Base: _req['Base'] };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/get_accompanied_image
   *
   * Use workflow to get text images
   */
  GetAgentAccompaniedImage(
    req?: card.GetAgentAccompaniedImageRequest,
    options?: T,
  ): Promise<card.GetAgentAccompaniedImageResponse> {
    const _req = req || {};
    const url = this.genBaseURL(
      '/api/card_builder/agent/get_accompanied_image',
    );
    const method = 'POST';
    const data = {
      scene: _req['scene'],
      param: _req['param'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/save_setting
   *
   * Save agent user configuration
   */
  SaveAgentUserSettings(
    req: card.SaveAgentUserSettingsRequest,
    options?: T,
  ): Promise<card.SaveAgentUserSettingsResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/save_setting');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      setting: _req['setting'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/get_settings
   *
   * Get agent user configuration
   */
  GetAgentUserSettings(
    req: card.GetAgentUserSettingsRequest,
    options?: T,
  ): Promise<card.GetAgentUserSettingsResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/get_settings');
    const method = 'POST';
    const data = {
      agent_id: _req['agent_id'],
      setting_keys: _req['setting_keys'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/api_trigger
   *
   * forward streaming API call
   */
  AgentTriggerOpenAPIStream(
    req: card.AgentTriggerOpenAPIStreamRequest,
    options?: T,
  ): Promise<card.AgentTriggerOpenAPIStreamResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/api_trigger');
    const method = 'POST';
    const data = {
      scene: _req['scene'],
      api_type: _req['api_type'],
      token: _req['token'],
      body: _req['body'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/get_file_info
   *
   * Get file
   */
  GetFileInfo(
    req?: card.GetFileInfoRequest,
    options?: T,
  ): Promise<card.GetFileInfoResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/get_file_info');
    const method = 'POST';
    const data = {
      file_name: _req['file_name'],
      file_url: _req['file_url'],
      need_data: _req['need_data'],
      Base: _req['Base'],
    };
    const headers = { 'x-jwt-token': _req['x-jwt-token'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/plugin_get_jwt
   *
   * Create plugins, generate JWT
   */
  GetJwtTokenForPlugin(
    req: card.GetJwtTokenForPluginRequest,
    options?: T,
  ): Promise<card.GetJwtTokenForPluginResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/plugin_get_jwt');
    const method = 'POST';
    const data = { scene: _req['scene'], Base: _req['Base'] };
    const headers = { Authorization: _req['Authorization'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/get_card_user_setting
   *
   * Get Card User Configuration
   */
  GetCardUserSettings(
    req?: card.GetCardUserSettingsRequest,
    options?: T,
  ): Promise<card.GetCardUserSettingsResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/get_card_user_setting');
    const method = 'POST';
    const data = {
      creator_id: _req['creator_id'],
      setting_keys: _req['setting_keys'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/save_card_user_setting
   *
   * Save card user profile
   */
  SaveCardUserSettings(
    req?: card.SaveCardUserSettingsRequest,
    options?: T,
  ): Promise<card.SaveCardUserSettingsResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/save_card_user_setting');
    const method = 'POST';
    const data = {
      creator_id: _req['creator_id'],
      user_settings: _req['user_settings'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/agent/plugin_get_accompanied_image
   *
   * For creating plugins, dump text images
   */
  GetAgentAccompaniedImageForPlugin(
    req: card.GetAgentAccompaniedImageForPluginRequest,
    options?: T,
  ): Promise<card.GetAgentAccompaniedImageForPluginResponse> {
    const _req = req;
    const url = this.genBaseURL(
      '/api/card_builder/agent/plugin_get_accompanied_image',
    );
    const method = 'POST';
    const data = { origin_url: _req['origin_url'], Base: _req['Base'] };
    const headers = { Authorization: _req['Authorization'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/agent/coze_api_trigger
   *
   * forwarding non-streaming API calls
   */
  AgentTriggerCozeAPI(
    req: card.AgentTriggerCozeAPIRequest,
    options?: T,
  ): Promise<card.AgentTriggerCozeAPIResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/agent/coze_api_trigger');
    const method = 'POST';
    const data = {
      scene: _req['scene'],
      api_type: _req['api_type'],
      token: _req['token'],
      body: _req['body'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/get_tcc_config
   *
   * Get tcc configuration
   */
  GeneralGetTccConfig(
    req: card.GeneralGetTccConfigRequest,
    options?: T,
  ): Promise<card.GeneralGetTccConfigResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/get_tcc_config');
    const method = 'POST';
    const data = {
      key: _req['key'],
      space: _req['space'],
      tcc_service_id: _req['tcc_service_id'],
      value_option: _req['value_option'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/op_card/update_template
   *
   * Update the official template
   */
  UpdateTemplate(
    req?: card.UpdateTemplateRequest,
    options?: T,
  ): Promise<card.UpdateTemplateResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/op_card/update_template');
    const method = 'POST';
    const data = {
      ids: _req['ids'],
      operator: _req['operator'],
      stage: _req['stage'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/generate_card_suggestion
   *
   * Returns suggested card RAG information based on user input
   */
  GenerateCardSuggestion(
    req: card.GenerateCardSuggestionRequest,
    options?: T,
  ): Promise<card.GenerateCardSuggestionResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/generate_card_suggestion');
    const method = 'POST';
    const data = {
      description: _req['description'],
      candidates_number: _req['candidates_number'],
      base: _req['base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/card_builder/async_gen_thumbnail
   *
   * Asynchronous generation of thumbnails
   */
  AsyncGenThumbnail(
    req?: card.AsyncGenThumbnailRequest,
    options?: T,
  ): Promise<card.AsyncGenThumbnailResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/card_builder/async_gen_thumbnail');
    const method = 'POST';
    const data = { messages: _req['messages'], Base: _req['Base'] };
    const headers = { 'space-id': _req['space-id'] };
    return this.request({ url, method, data, headers }, options);
  }

  /**
   * POST /api/card_builder/check_card_length
   *
   * Check if the card is too long during user creation
   */
  CheckCardLength(
    req: card.CheckCardLengthRequest,
    options?: T,
  ): Promise<card.CheckCardLengthResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/card_builder/check_card_length');
    const method = 'POST';
    const data = { DraftID: _req['DraftID'], Base: _req['Base'] };
    const headers = { 'use-builder-psm': _req['use-builder-psm'] };
    return this.request({ url, method, data, headers }, options);
  }
}
/* eslint-enable */
