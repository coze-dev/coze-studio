/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as shortcut_command from './shortcut_command';

export type Int64 = string | number;

export enum ActionKey {
  /** copy */
  Copy = 1,
  /** delete */
  Delete = 2,
  /** enable/disable */
  EnableSwitch = 3,
  /** edit */
  Edit = 4,
  /** Switch to funcflow */
  SwitchToFuncflow = 8,
  /** Switch to chatflow */
  SwitchToChatflow = 9,
  /** Cross-spatial replication */
  CrossSpaceCopy = 10,
}

export enum AgentBizUniversalMethod {
  Unknown = 0,
  Get = 1,
  Post = 2,
}

export enum AgentTriggerAPIType {
  Unknown = 0,
  Workflow = 1,
  Chat = 2,
  ChatV3 = 3,
}

export enum AIGenerateCardStatus {
  /** AI Schema generated and formatted as expected */
  Init = 0,
  /** AI Schema Transfer Card Successful */
  Success = 1,
  /** The format does not match expectations */
  Invalid = 2,
  /** The format is as expected but the transfer card fails. */
  Failed = 3,
  /** Manual termination, partially successful */
  Interrupt = 4,
}

export enum AISchemaTransferStatus {
  Success = 1,
  Failed = 2,
  Interrupt = 3,
}

export enum AuditStatus {
  /** The link content does not pass. */
  LinkRejected = -60,
  /** Video content does not pass */
  VideoRejected = -50,
  /** Audio content does not pass */
  AudioRejected = -40,
  /** The picture content does not pass. */
  ImageRejected = -30,
  /** Text content does not pass */
  TextRejected = -20,
  /** The review failed (see details for the reasons). */
  Rejected = -1,
  /** approved */
  Approved = 1,
  /** pending review */
  Pending = 100,
}

export enum CardCategory {
  /** template card */
  Template = 1,
  /** custom card */
  Custom = 2,
}

export enum CardDisplayType {
  /** foundation */
  Basic = 1,
  /** list */
  List = 2,
  /** custom card */
  Custom = 3,
  /** horizontal list */
  Slide = 4,
}

export enum CardStatus {
  Draft = 0,
  Published = 1,
  UnPublish = 2,
}

export enum CardThumbnailStatus {
  /** undefined */
  Default = 0,
  /** Empty card */
  Empty = 1,
  /** to be generated */
  NeedGenerate = 2,
  /** Generating */
  Generating = 3,
  /** generation failed */
  Failed = 4,
  /** Generated successfully */
  Success = 5,
  /** Published card edited to be republished */
  NeedPublish = 6,
}

export enum ChannelType {
  Default = 0,
  Doubao = 100,
  CiCi = 101,
  Feishu = 200,
  WhatsApp = 300,
  Discord = 301,
  Twitter = 302,
  Telegram = 303,
  Messenger = 304,
  LINE = 305,
  Instagram = 306,
  Slack = 307,
  Reddit = 308,
}

export enum CopyStatus {
  Succeed = 0,
  Fail = 1,
}

export enum DocumentType {
  /** Uploading */
  Processing = 0,
  /** take effect */
  Enable = 1,
  /** failure */
  Disable = 2,
  /** delete */
  Deleted = 3,
  /** fail */
  Failed = 9,
}

export enum PublishStatus {
  /** unpublished */
  UnPublished = 1,
  /** Published */
  Published = 2,
}

export enum Scene {
  /** Card, the actual corresponding file type is picture. */
  Card = 0,
  /** Agent, the actual corresponding file type is PDF. */
  Agent = 1,
  /** Audio */
  Audio = 2,
  /** thumbnail */
  Thumbnail = 3,
  /** video */
  Video = 4,
}

export enum SliceStatus {
  /** unvectorized */
  PendingVectoring = 0,
  /** vectorized */
  FinishVectoring = 1,
  /** disable */
  Deactive = 9,
}

export enum SortField {
  Default = 0,
  /** update time */
  UpdateTime = 1,
  /** release time */
  PublishTime = 2,
}

export enum SortOrderType {
  /** descending order */
  Desc = 0,
  /** ascending order */
  Asc = 1,
}

export enum Stage {
  Copy = 1,
  Replace = 2,
  RollBack = 3,
}

export enum TccServiceID {
  Card = 0,
  CardBuilder = 1,
}

/** -------------- Operating Platform Interface end -------------- */
export enum ToolType {
  Plugin = 1,
  Workflow = 2,
  Widget = 3,
}

export interface AgentBizUniversalData {
  body?: string;
}

export interface AgentBizUniversalRequest {
  /** API path, you need to include path parameters */
  api_path: string;
  /** request method */
  method: AgentBizUniversalMethod;
  /** Query parameter, format "a = 1 & b = 2" */
  query?: string;
  /** Body parameters */
  body?: string;
  'Content-Type': string;
  Base?: base.Base;
}

export interface AgentBizUniversalResponse {
  data?: AgentBizUniversalData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface AgentConfig {
  /** shortcut instruction binding configuration */
  command_relation_map?: Record<string, string>;
}

export interface AgentInfo {
  /** agentID */
  agent_id: string;
  /** botID of the corresponding platform */
  bot_id?: string;
  /** name */
  name?: string;
  /** Additional information */
  description?: string;
  /** Create timestamp */
  create_time?: Int64;
  /** Update timestamp */
  update_time?: Int64;
  /** Bot version number */
  bot_version?: string;
  /** Quick Command Configuration List */
  shortcut_command_list?: Array<shortcut_command.ShortcutCommand>;
  /** Agent common configuration */
  agent_config?: AgentConfig;
}

export interface AgentInstanceInfo {
  /** agentID */
  agent_id: string;
  /** botID of the corresponding platform */
  bot_id?: string;
  /** Instance ID */
  instance_id: string;
  /** Session ID */
  session_id?: string;
  /** name */
  name?: string;
  /** creator ID */
  creator_id?: string;
  /** Content (thesis tos address or research report content) */
  content?: string;
  /** Additional information */
  init_param_info?: Record<string, string>;
  /** Create timestamp */
  create_time?: Int64;
  /** Update timestamp */
  update_time?: Int64;
}

export interface AgentTriggerCozeAPIData {
  content?: string;
}

export interface AgentTriggerCozeAPIRequest {
  /** Scene to obtain the corresponding coze token */
  scene: string;
  /** Type, which streaming API needs to be called//Currently only workflow is supported. */pports workflow */
  api_type: AgentTriggerAPIType;
  /** Authentication token */
  token: string;
  /** api body, json string */
  body?: string;
  Base?: base.Base;
}

export interface AgentTriggerCozeAPIResponse {
  data?: AgentTriggerCozeAPIData;
  BaseResp?: base.BaseResp;
}

export interface AgentTriggerOpenAPIStreamRequest {
  /** Scene to obtain the corresponding coze token */
  scene: string;
  /** Type, which streaming API needs to be called */
  api_type: AgentTriggerAPIType;
  /** Authentication token */
  token: string;
  /** api body, json string */
  body?: string;
  Base?: base.Base;
}

export interface AgentTriggerOpenAPIStreamResponse {
  /** specific content */
  message?: string;
  finished?: boolean;
  BaseResp?: base.BaseResp;
}

export interface AgentUploadFileData {
  /** URI */
  name?: string;
  /** size */
  size?: Int64;
  /** file type */
  content_type?: string;
  /** URI */
  uri?: string;
  /** Thumbnail URI */
  thumbnail_uri?: string;
  /** URI uploaded to Coze side */
  coze_uri?: string;
  tiny_uri?: string;
}

export interface AgentUploadFileRequest {
  /** Multipart/form-data format, containing only one file in the binary with name = "resource" */
  data?: Blob;
  'Content-Type'?: string;
  Base?: base.Base;
}

export interface AgentUploadFileResponse {
  data?: AgentUploadFileData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface AnalyseAgentReferenceRequest {
  /** reference */
  references?: Array<ReferenceData>;
  /** Fast mode: add concurrency and set timeout to improve return speed */
  fast_mode?: boolean;
  Base?: base.Base;
}

export interface AnalyseAgentReferenceResponse {
  /** Parse the remaining data after filtering */
  data?: Array<ReferenceData>;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface AnalyzingPaperRequest {
  /** It needs to be determined with the platform whether the concept of SpaceID is still required in the agent. */
  'space-id'?: string;
  uri: string;
  name: string;
  base?: base.Base;
}

export interface AnalyzingPaperResponse {
  /** Paper ID, unique ID on the agent side */
  paper_id: string;
  /** Dataset ID, used for rotation analysis progress */
  dataset_id: string;
  /** Document ID, used for rotation analysis progress */
  document_id: string;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface AsyncGenThumbnailRequest {
  messages?: Array<GenThumbnailMessage>;
  'space-id'?: string;
  Base?: base.Base;
}

export interface AsyncGenThumbnailResponse {
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface CardBasicInfo {
  card_id?: string;
  /** Draft ID */
  draft_card_id?: string;
  /** Card name */
  name?: string;
  /** Author ID */
  creator_id?: string;
  /** Card type */
  card_category?: CardCategory;
  /** Card display type */
  card_display_type?: CardDisplayType;
  /** Card version number */
  version_num?: Int64;
  /** Card version name */
  version_name?: string;
  /** release description */
  description?: string;
  /** Primary thumbnail */
  thumbnail?: string;
  /** Millisecond timestamp */
  update_time?: Int64;
  /** attribute information */
  properties?: string;
  properties_hash?: string;
  /** The template card will only be available. */
  basic_card_id?: string;
  /** The template card will only be available. */
  list_card_id?: string;
  /** release status */
  card_status?: CardStatus;
  /** release time */
  publish_time?: Int64;
  /** Card thumbnail generation status */
  thumb_status?: CardThumbnailStatus;
  /** Card creator name */
  creator_name?: string;
  /** Card creator avatar ' */
  creator_avatar?: string;
  /** moderation status */
  audit_status?: AuditStatus;
  /** Failed the review Details */
  audit_failure_details?: Array<number>;
  /** The latest approved string version number */
  latest_approved_version_name?: string;
  /** The latest approved digital version number. */
  latest_approved_version_code?: string;
  /** Space ID */
  space_id?: string;
}

export interface CardChannelInfo {
  channel?: ChannelType;
  thumbnail?: string;
}

export interface CardChannelsThumbnail {
  imgUrl?: string;
  imgUri?: string;
  /** Online compatibility, with string */
  channel?: string;
  status?: number;
}

export interface CardCondition {
  id?: string;
  space_id?: string;
  name?: string;
  creator_id?: string;
  page?: number;
  size?: number;
  status?: CardStatus;
  create_time_range?: TimeRange;
  channel?: ChannelType;
}

export interface CardCopyResult {
  /** Copy result status 0 success 1 failure */
  CopyStatus?: CopyStatus;
  /** reason for failure */
  FailReason?: string;
  /** Copy card ID */
  CardID?: Int64;
}

export interface CardGenerateRecordInfo {
  id?: string;
  card_id?: string;
  /** save time */
  create_time?: string;
  /** user input */
  user_description?: string;
  /** AI output information */
  ai_schema?: string;
  /** Card information for each channel */
  channel_info?: Array<CardChannelInfo>;
}

export interface CardHistoryData {
  total: Int64;
  history_infos: Array<PublishHistoryInfo>;
}

export interface CardInfoData {
  card_id?: string;
  /** Draft ID */
  draft_card_id?: string;
  /** Card name */
  name?: string;
  creator_id?: string;
  /** Card type */
  card_category?: CardCategory;
  /** Card display type */
  card_display_type?: CardDisplayType;
  /** Card version number */
  version_num?: string;
  /** Card version name */
  version_name?: string;
  /** release description */
  description?: string;
  /** Millisecond timestamp */
  update_time?: string;
  properties_hash?: string;
  card_meta_info?: Array<CardMetaInfo>;
  card_status?: CardStatus;
  properties?: string;
  /** Card thumbnail generation status */
  thumb_status?: CardThumbnailStatus;
  /** moderation status */
  audit_status?: AuditStatus;
  /** Failed the review Details */
  audit_failure_details?: Array<number>;
  card_basic_info?: CardBasicInfo;
}

export interface CardInfoForOP {
  id?: string;
  name?: string;
  space_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  thumbnail?: string;
  dsl_map?: Record<number, string>;
  status?: number;
  creator_id?: string;
}

export interface CardInstanceInfo {
  /** Card Instance ID */
  InstanceID?: Int64;
  CardBody?: string;
}

export interface CardMetaInfo {
  dsl_content?: string;
  lynx_url?: string;
  thumbnail?: string;
  channel_type?: ChannelType;
  version_num?: string;
  /** moderation status */
  audit_status?: AuditStatus;
  /** Failed the review Details */
  audit_failure_details?: Array<number>;
}

export interface CardMetaPublishData {
  card_id: string;
  version_num: string;
  /** moderation status */
  audit_status: number;
  /** Failed the review Details */
  audit_failure_details?: Array<number>;
}

export interface CardMetaPublishRequest {
  /** author */
  creator_id: Int64;
  /** Draft Card ID */
  draft_card_id: string;
  /** Card ID */
  card_id: string;
  description?: string;
  version_name: string;
  thumbnail_info?: Array<ThumbnailInfo>;
  'use-builder-psm'?: string;
  base?: base.Base;
}

export interface CardMetaPublishResponse {
  data?: CardMetaPublishData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CardSuggestionData {
  business_id?: string;
  unique_id?: string;
  card_id?: string;
  version_num?: string;
  dsl_content?: string;
  image_theme?: string;
  image_desc?: string;
  image_weight?: string;
}

export interface CardTemplateInfo {
  /** template ID */
  template_id: string;
  /** creator ID */
  creator_id: string;
  /** template name */
  name: string;
  /** channel */
  channel_type: ChannelType;
  /** Thumbnail URI */
  thumbnail: string;
  /** dsl */
  dsl_content: string;
  category: CardCategory;
  create_time: Int64;
}

export interface CardThumbnailInfo {
  CardID?: Int64;
  ThumbStatus?: CardThumbnailStatus;
  ThumbnailUri?: string;
}

export interface CardUpdateInfo {
  CardID?: Int64;
  LatestVersion?: Int64;
  NeedUpdate?: boolean;
}

export interface CardUploadFileRequest {
  /** file name */
  file_name?: string;
  /** file data */
  data?: Blob;
  /** MIME type */
  'Content-Type'?: string;
  /** scene */
  scene?: Scene;
  base?: base.Base;
}

export interface CardUploadFileResponse {
  data?: UploadFileData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CardVersion {
  CardID?: Int64;
  VersionNum?: Int64;
}

export interface CheckCardLengthRequest {
  /** Draft ID */
  DraftID: string;
  'use-builder-psm'?: string;
  Base?: base.Base;
}

export interface CheckCardLengthResponse {
  is_over_length?: Partial<Record<ChannelType, boolean>>;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CreateAgentInstanceRequest {
  /** agentID, corresponding to the platform botID */
  agent_id: string;
  /** Name (not necessarily, a name may be generated automatically) */
  name: string;
  /** Parameters specific to each agent, such as the datasetID required by the paper agent */
  init_param?: Record<string, string>;
  /** Agent content, such as thesis master is a TOS URI */
  content?: string;
  /** Idempotent key (if passed, it will be handled idempotently) */
  idem_key?: string;
  base?: base.Base;
}

export interface CreateAgentInstanceResponse {
  /** Instance ID, generated by the agent itself */
  instance_id: string;
  /** Session ID, Association Session ID */
  session_id: string;
  /** name */
  name: string;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface DeleteAgentInstanceRequest {
  /** agentID */
  agent_id: string;
  /** Instance ID */
  instance_id: string;
  base?: base.Base;
}

export interface DeleteAgentInstanceResponse {
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface DeleteCardTemplateData {
  success: boolean;
}

export interface DeleteCardTemplateRequest {
  /** creator ID */
  creator_id: string;
  /** template ID */
  template_id: string;
  /** Space ID */
  'space-id': string;
  base?: base.Base;
}

export interface DeleteCardTemplateResponse {
  data?: DeleteCardTemplateData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

/** For display, the implementer provides display information */
export interface DisplayResourceInfo {
  /** Resource ID */
  ResID?: Int64;
  /** resource description */
  Desc?: string;
  /** Resource Icon, full url */
  Icon?: string;
  /** Resource status, each type of resource defines itself */
  BizResStatus?: number;
  /** Whether to enable multi-person editing */
  CollaborationEnable?: boolean;
  /** Business carry extended information to res_type distinguish, each res_type defined schema and meaning is not the same, need to judge before use res_type */
  BizExtend?: Record<string, string>;
  /** Different types of different operation buttons are agreed upon by the resource implementer and the front end. Return is displayed, if you want to hide a button, do not return; */
  Actions?: Array<ResourceAction>;
  /** Whether to ban entering the details page */
  DetailDisable?: boolean;
  /** resource name */
  Name?: string;
  /** Resource release status, 1 - unpublished, 2 - published */
  PublishStatus?: PublishStatus;
  /** Last edited, unix timestamp */
  EditTime?: Int64;
}

/** Online compatibility, no tagging */
export interface GenCardChannelsThumbnailData {
  Thumbnails?: Array<CardChannelsThumbnail>;
}

export interface GenCardChannelsThumbnailRequest {
  DraftID?: string;
  Channels?: Array<ChannelType>;
  CardID?: string;
  'use-builder-psm'?: string;
  Base?: base.Base;
}

export interface GenCardChannelsThumbnailResponse {
  data?: GenCardChannelsThumbnailData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GeneralGetTccConfigData {
  /** Configuration value, a json-string. */
  config?: string;
}

export interface GeneralGetTccConfigRequest {
  /** tcc key */
  key: string;
  /** TCC space name */
  space: string;
  /** TCC service id */
  tcc_service_id: TccServiceID;
  /** value handling options */
  value_option?: ValueOption;
  Base?: base.Base;
}

export interface GeneralGetTccConfigResponse {
  data?: GeneralGetTccConfigData;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GenerateCardData {
  record_id: string;
  card_id: string;
  ai_schema?: string;
}

export interface GenerateCardRequest {
  'space-id': string;
  card_id: string;
  description: string;
  UserID: Int64;
  language?: string;
  base?: base.Base;
}

export interface GenerateCardResponse {
  data?: GenerateCardData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GenerateCardsThumbnailRequest {
  'space-id': string;
  card_ids?: Array<string>;
  'use-builder-psm'?: string;
  base?: base.Base;
}

export interface GenerateCardsThumbnailResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GenerateCardStreamRequest {
  'space-id': string;
  card_id: string;
  description: string;
  UserID: Int64;
  language?: string;
  user_data?: string;
  /** Prompt version, corresponding to a task, the second phase needs to be added, 2 is the second phase, and so on */
  prompt_version?: string;
  reference?: string;
  base?: base.Base;
}

export interface GenerateCardStreamResponse {
  message?: string;
  finished?: boolean;
  record_id?: string;
  BaseResp?: base.BaseResp;
}

export interface GenerateCardSuggestionData {
  card_suggestion_data_list?: Array<CardSuggestionData>;
}

export interface GenerateCardSuggestionRequest {
  description: string;
  candidates_number: Int64;
  base?: base.Base;
}

export interface GenerateCardSuggestionResponse {
  data?: GenerateCardSuggestionData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GenerateCardVariablesData {
  card_variables?: string;
}

export interface GenerateCardVariablesRequest {
  'space-id': string;
  card_id: string;
  language: string;
  desc: string;
  /** channel type */
  channel_type: ChannelType;
  base?: base.Base;
}

export interface GenerateCardVariablesResponse {
  data?: GenerateCardVariablesData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GenThumbnailMessage {
  card_id?: string;
  channel?: ChannelType;
}

export interface GetAgentAccompaniedImageData {
  image_urls?: Array<string>;
}

export interface GetAgentAccompaniedImageForPluginData {
  image_url?: string;
}

export interface GetAgentAccompaniedImageForPluginRequest {
  Authorization: string;
  origin_url?: string;
  Base?: base.Base;
}

export interface GetAgentAccompaniedImageForPluginResponse {
  data?: GetAgentAccompaniedImageForPluginData;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetAgentAccompaniedImageRequest {
  /** call scenario */
  scene?: string;
  /** Parameters that need to be passed to call workflow (jsonString) */
  param?: string;
  Base?: base.Base;
}

export interface GetAgentAccompaniedImageResponse {
  data?: GetAgentAccompaniedImageData;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetAgentDetailRequest {
  /** agentID */
  agent_id: string;
  base?: base.Base;
}

export interface GetAgentDetailResponse {
  /** instance information */
  agent?: AgentInfo;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetAgentInstanceDetailRequest {
  /** agentID */
  agent_id: string;
  /** Instance ID */
  instance_id: string;
  base?: base.Base;
}

export interface GetAgentInstanceDetailResponse {
  /** instance information */
  instance?: AgentInstanceInfo;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetAgentReferenceRequest {
  reference_url?: Array<string>;
  Base?: base.Base;
}

export interface GetAgentReferenceResponse {
  data?: Array<ReferenceData>;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetAgentUserSettingsData {
  setting_map?: Record<string, UserSetting>;
}

export interface GetAgentUserSettingsRequest {
  /** agentID */
  agent_id: string;
  /** User configuration key */
  setting_keys?: Array<string>;
  Base?: base.Base;
}

export interface GetAgentUserSettingsResponse {
  data?: GetAgentUserSettingsData;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetCardInfoRequest {
  card_id: string;
  /** If you don't specify a channel, return to all channels */
  channel_type?: ChannelType;
  /** If no version is specified, then the latest version is returned */
  version_num?: string;
  creator_id?: string;
  /** Space ID */
  'space-id'?: string;
  base?: base.Base;
}

export interface GetCardInfoResponse {
  data?: CardInfoData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetCardPluginRelationData {
  plugin_ids?: Array<Int64>;
}

export interface GetCardTccInfoRequest {
  Base?: base.Base;
}

export interface GetCardTccInfoResponse {
  card_builder_package_detail: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetCardUserSettingsData {
  user_settings?: Array<UserSetting>;
}

export interface GetCardUserSettingsRequest {
  /** user id */
  creator_id?: string;
  /** User configuration key */
  setting_keys?: Array<string>;
  Base?: base.Base;
}

export interface GetCardUserSettingsResponse {
  /** user id */
  data?: GetCardUserSettingsData;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface GetDefaultPromptData {
  title: string;
  desc: string;
  prompt: string;
  success: boolean;
  prompts?: Array<string>;
}

export interface GetDefaultPromptRequest {
  'space-id': string;
  UserID: Int64;
  tool_type: ToolType;
  plugin_id?: string;
  api_id?: string;
  workflow_id?: string;
  language?: string;
  base?: base.Base;
}

export interface GetDefaultPromptResponse {
  data?: GetDefaultPromptData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetFileInfoData {
  url?: string;
  data?: string;
}

export interface GetFileInfoRequest {
  file_name?: string;
  /** Priority is given to using the url. If the url fails, look at the fileName. */
  file_url?: string;
  need_data?: boolean;
  'x-jwt-token'?: string;
  Base?: base.Base;
}

export interface GetFileInfoResponse {
  data?: GetFileInfoData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetImageInfoData {
  url?: string;
  data?: string;
  content_type?: string;
}

export interface GetImageInfoRequest {
  file_name: string;
  need_data: boolean;
  'x-jwt-token'?: string;
  Base?: base.Base;
}

export interface GetImageInfoResponse {
  data?: GetImageInfoData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetJwtTokenData {
  token?: string;
}

export interface GetJwtTokenForPluginData {
  token?: string;
}

export interface GetJwtTokenForPluginRequest {
  Authorization: string;
  /** Additional JWT authentication parameters need to be stored, and the corresponding configuration Key will not be transferred to the default configuration. */
  scene?: string;
  Base?: base.Base;
}

export interface GetJwtTokenForPluginResponse {
  data?: GetJwtTokenForPluginData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetJwtTokenRequest {
  expire_time?: number;
  Base?: base.Base;
}

export interface GetJwtTokenResponse {
  data?: GetJwtTokenData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetPaperTranslateResultRequest {
  agent_id: string;
  /** Paper corresponding InstanceID */
  instance_id: string;
  base?: base.Base;
}

export interface GetPaperTranslateResultResponse {
  data?: TranslateResultData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetTaskProgressRequest {
  'space-id'?: string;
  dataset_id: string;
  document_ids: Array<string>;
  base?: base.Base;
}

export interface GetTaskProgressResponse {
  data_list: Array<TaskProgressData>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface InstanceUpdateParam {
  /** name */
  name?: string;
  /** content */
  content?: string;
  /** Parameters specific to each agent, such as the datasetID required by the paper agent */
  init_param?: Record<string, string>;
}

export interface ListAgentInstanceRequest {
  /** agentID */
  agent_id: string;
  /** paging size */
  size?: number;
  /** page count */
  page?: number;
  /** sort field */
  sort_cond?: SortCondition;
  base?: base.Base;
}

export interface ListAgentInstanceResponse {
  /** instance list */
  instance_list: Array<AgentInstanceInfo>;
  /** total */
  total: Int64;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface ListCardGenerateHistoryData {
  total: Int64;
  history_infos: Array<CardGenerateRecordInfo>;
}

export interface ListCardGenerateHistoryRequest {
  'space-id': string;
  UserID: Int64;
  card_id: string;
  page: number;
  size: number;
  base?: base.Base;
}

export interface ListCardGenerateHistoryResponse {
  data?: ListCardGenerateHistoryData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface ListSliceRequest {
  /** agentID */
  agent_id: string;
  /** Instance ID */
  InstanceID: string;
  dataset_id: string;
  document_id: string;
  page?: number;
  size?: number;
  base?: base.Base;
}

export interface ListSliceResponse {
  slices?: Array<SliceInfo>;
  total?: string;
  hasmore?: boolean;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface MGetCardInfoRequest {
  'space-id': string;
  card_ids?: Array<string>;
  base?: base.Base;
}

export interface MGetCardInfoResponse {
  card_basic_infos: Array<CardBasicInfo>;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface MGetCardTemplateData {
  total: Int64;
  card_templates: Array<CardTemplateInfo>;
}

export interface MGetCardTemplateRequest {
  /** user ID */
  creator_id?: string;
  /** paging size */
  size?: Int64;
  /** paging */
  page?: Int64;
  /** channel */
  channel_type: ChannelType;
  category: CardCategory;
  'space-id'?: string;
  base?: base.Base;
}

export interface MGetCardTemplateResponse {
  data?: MGetCardTemplateData;
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface PreviewCardData {
  /** {Channel: DSL} */
  Content: string;
  /** Preview SDK address */
  SDKUrl?: string;
}

export interface PreviewCardRequest {
  /** Draft ID */
  DraftID?: string;
  /** Channel ID */
  ChannelType?: ChannelType;
  'use-builder-psm'?: string;
  Base?: base.Base;
}

export interface PreviewCardResponse {
  data?: PreviewCardData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface PublishHistoryInfo {
  card_id?: string;
  /** Card draft id */
  draft_id?: string;
  /** Card name */
  name?: string;
  /** Card version number */
  version_num?: string;
  /** release time */
  publish_time?: string;
  /** Card version name */
  version_name?: string;
  /** release description */
  description?: string;
  /** moderation status */
  audit_status: number;
  /** Failed the review Details */
  audit_failure_details?: Array<number>;
}

export interface QueryCardHistoryRequest {
  'space-id': string;
  card_id: string;
  user_id: string;
  page: number;
  size: number;
  base?: base.Base;
}

export interface QueryCardHistoryResponse {
  data?: CardHistoryData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface QueryCardListCondition {
  /** Only show what you create. */
  only_myself?: boolean;
  /** state */
  status?: CardStatus;
  /** Search keywords */
  keyword?: string;
  /** sort condition */
  sort_condition?: SortCondition;
}

export interface QueryCardListRequest {
  /** Space ID */
  'space-id'?: Int64;
  page?: number;
  size?: number;
  /** Additional query conditions */
  condition?: QueryCardListCondition;
  base?: base.Base;
}

export interface QueryCardListResponse {
  card_info_list?: Array<CardBasicInfo>;
  total?: number;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface QueryCardsData {
  cards?: Array<CardInfoForOP>;
  count?: number;
}

export interface QueryCardsRequest {
  card_condition?: CardCondition;
  base?: base.Base;
}

export interface QueryCardsResponse {
  data?: QueryCardsData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface ReferenceData {
  /** Url */
  url?: string;
  /** content */
  content?: string;
  /** icon */
  icon?: string;
  /** Site name */
  website_name?: string;
  /** title */
  title?: string;
  /** Was it manually added by the user? */
  is_user_add?: boolean;
}

export interface ResourceAction {
  /** An operation corresponds to a unique key, and the key is constrained by the resource side */
  key: ActionKey;
  /** ture = can operate this Action, false = grey out */
  enable: boolean;
}

export interface SaveAgentUserSettingsRequest {
  /** agentID */
  agent_id: string;
  /** user configuration */
  setting?: Array<UserSetting>;
  Base?: base.Base;
}

export interface SaveAgentUserSettingsResponse {
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface SaveCardData {
  template_id: string;
}

export interface SaveCardTemplateRequest {
  /** creator ID */
  creator_id: string;
  /** channel type */
  channel_type: ChannelType;
  /** Thumbnail URI */
  thumbnail: string;
  /** template name */
  name: string;
  /** dsl */
  dsl_content: string;
  /** Space ID */
  'space-id': string;
  base?: base.Base;
}

export interface SaveCardTemplateResponse {
  data?: SaveCardData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface SaveCardUserSettingsRequest {
  /** user id */
  creator_id?: string;
  /** user configuration */
  user_settings?: Array<UserSetting>;
  Base?: base.Base;
}

export interface SaveCardUserSettingsResponse {
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface SaveGenerateHistoryRequest {
  record_id: string;
  card_id: string;
  'space-id': string;
  UserID: Int64;
  /** AI schema to card UIDL conversion result */
  transfer_status?: AISchemaTransferStatus;
  /** Card information for each channel */
  channel_info?: Array<CardChannelInfo>;
  /** AI schema */
  ai_schema?: string;
  base?: base.Base;
}

export interface SaveGenerateHistoryResponse {
  BaseResp?: base.BaseResp;
}

export interface SliceInfo {
  slice_id?: string;
  content?: string;
  Status?: SliceStatus;
  /** serial number */
  sequence?: string;
  /** Meta information related to sharding, extra- > chunk_info field in the transparent slice table (json) */
  chunk_meta_info?: string;
}

export interface SortCondition {
  /** sort field */
  field?: SortField;
  /** sort type */
  order_type?: SortOrderType;
}

export interface TaskProgressData {
  document_id?: string;
  /** Progress, 0-100 */
  progress?: number;
  status?: DocumentType;
  /** A detailed description of the status; if the slice fails, a failure message is returned */
  status_descript?: string;
}

export interface ThumbnailInfo {
  channel_type?: ChannelType;
  /** thumbnail */
  thumbnail?: string;
  /** Is it the main image? */
  main_image?: boolean;
}

/** -------------- Operating Platform Interface start -------------- */
export interface TimeRange {
  start_time: string;
  end_time: string;
}

export interface TranslatePaperRequest {
  agent_id: string;
  /** Paper corresponding InstanceID */
  instance_id: string;
  base?: base.Base;
}

export interface TranslatePaperResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface TranslateResult {
  /** Image address */
  image_url?: string;
  /** Parsed text message tos address */
  text_blocks_url?: string;
  /** Original image address */
  ori_image_url?: string;
  /** Page 0 Start */
  page_no?: number;
  /** The page processing status (0 Not started 1 Success 2 Failed) */
  status?: number;
}

export interface TranslateResultData {
  /** Task status (0 not started 1 in progress 2 completed 3 failed) */
  task_status?: number;
  /** Return result */
  result?: Array<TranslateResult>;
}

export interface TranslateTextData {
  /** translation result */
  trans_result?: Record<string, string>;
}

export interface TranslateTextRequest {
  agent_id?: string;
  instance_id?: string;
  text?: Array<string>;
  base?: base.Base;
}

export interface TranslateTextResponse {
  data?: TranslateTextData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface UpdateAgentInstanceInfoRequest {
  /** agentID */
  agent_id: string;
  /** Instance ID */
  instance_id: string;
  /** update parameters */
  update_param?: InstanceUpdateParam;
  base?: base.Base;
}

export interface UpdateAgentInstanceInfoResponse {
  code?: Int64;
  msg?: string;
  BaseResp: base.BaseResp;
}

export interface UpdateCardInfoRequest {
  card_id: string;
  name?: string;
  card_status?: CardStatus;
  creator_id?: string;
  /** Have you edited the card? */
  edit_card?: boolean;
  base?: base.Base;
}

export interface UpdateCardInfoResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UpdateTemplateRequest {
  ids?: Array<string>;
  operator?: string;
  stage?: Stage;
  Base?: base.Base;
}

export interface UpdateTemplateResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface UploadFileData {
  /** File URL */
  upload_url?: string;
  /** File URI, submit using this */
  upload_uri?: string;
}

export interface UserSetting {
  setting_key?: string;
  setting_value?: string;
}

export interface ValueOption {
  /** Remove line breaks */
  remove_newline?: boolean;
  /** Remove spaces */
  remove_space?: boolean;
}
/* eslint-enable */
