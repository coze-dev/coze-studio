/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as eval_set from './eval_set';
import * as base from './base';
import * as datasetv2 from './datasetv2';
import * as common from './common';

export type Int64 = string | number;

export interface BatchCreateEvaluationSetItemsReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  items?: Array<eval_set.EvaluationSetItem>;
  /** When there is invalid data in items, no data will be written by default; set skipInvalidItems=true will skip invalid data and write valid data//When there is invalid data in items, no data will be written by default; set skipInvalidItems=true will skip invalid data and write valid data */ult; setting skipInvalidItems=true will skip invalid data and write valid data */
  skip_invalid_items?: boolean;
  /** Bulk write items If the dataset capacity limit is exceeded, no data will be written by default; setting partialAdd = true will write the first N items that do not exceed the capacity limit */
  allow_partial_add?: boolean;
  base?: base.Base;
}

export interface BatchCreateEvaluationSetItemsResp {
  /** Key: item index in items */
  added_items?: Record<number, Int64>;
  errors?: Array<datasetv2.ItemErrorGroup>;
  baseResp?: base.BaseResp;
}

export interface BatchDeleteEvaluationSetItemsReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  item_ids?: Array<Int64>;
  base?: base.Base;
}

export interface BatchDeleteEvaluationSetItemsResp {
  baseResp?: base.BaseResp;
}

export interface BatchGetEvaluationSetItemsReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  version_id?: Int64;
  item_ids?: Array<Int64>;
  base?: base.Base;
}

export interface BatchGetEvaluationSetItemsResp {
  items?: Array<eval_set.EvaluationSetItem>;
  baseResp?: base.BaseResp;
}

export interface BatchGetEvaluationSetVersionsReq {
  space_id: Int64;
  version_ids: Array<Int64>;
  deleted_at?: boolean;
  base?: base.Base;
}

export interface BatchGetEvaluationSetVersionsResp {
  versioned_evaluation_set?: Array<VersionedEvaluationSet>;
  baseResp?: base.BaseResp;
}

export interface CreateEvaluationSetReq {
  space_id: Int64;
  name?: string;
  description?: string;
  evaluation_set_schema?: eval_set.EvaluationSetSchema;
  base?: base.Base;
}

export interface CreateEvaluationSetResp {
  evaluation_set_id?: Int64;
  baseResp?: base.BaseResp;
}

export interface CreateEvaluationSetVersionReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  /** The displayed version number, SemVer2 three-stage, needs to be larger than the previous version */
  version?: string;
  desc?: string;
  base?: base.Base;
}

export interface CreateEvaluationSetVersionResp {
  id?: Int64;
  baseResp?: base.BaseResp;
}

export interface DeleteEvaluationSetReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  base?: base.Base;
}

export interface DeleteEvaluationSetResp {
  baseResp?: base.BaseResp;
}

export interface GetEvaluationSetReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  deleted_at?: boolean;
  base?: base.Base;
}

export interface GetEvaluationSetResp {
  evaluation_set?: eval_set.EvaluationSet;
  baseResp?: base.BaseResp;
}

export interface GetEvaluationSetVersionReq {
  space_id: Int64;
  version_id: Int64;
  evaluation_set_id?: Int64;
  deleted_at?: boolean;
  base?: base.Base;
}

export interface GetEvaluationSetVersionResp {
  version?: eval_set.EvaluationSetVersion;
  evaluation_set?: eval_set.EvaluationSet;
  baseResp?: base.BaseResp;
}

export interface ListEvaluationSetItemsReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  version_id?: Int64;
  page?: number;
  /** Page size (0,200], default is 20 */
  page_size?: number;
  cursor?: string;
  orderBy?: common.OrderBy;
  base?: base.Base;
}

export interface ListEvaluationSetItemsResp {
  items?: Array<eval_set.EvaluationSetItem>;
  total?: Int64;
  nextCursor?: string;
  baseResp?: base.BaseResp;
}

export interface ListEvaluationSetsReq {
  space_id: Int64;
  /** Support fuzzy search */
  name?: string;
  creators?: Array<string>;
  evaluation_set_ids?: Array<Int64>;
  page?: number;
  /** Page size (0,200], default is 20 */
  page_size?: number;
  cursor?: string;
  /** Sort order, the default is arranged in createdAt order, currently only supports sorting by createdAt and UpdatedAt */
  orderBy?: common.OrderBy;
  base?: base.Base;
}

export interface ListEvaluationSetsResp {
  evaluation_sets?: Array<eval_set.EvaluationSet>;
  total?: Int64;
  nextCursor?: string;
  baseResp?: base.BaseResp;
}

export interface ListEvaluationSetVersionsReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  /** Based on version number fuzzy match */
  version_like?: string;
  page?: number;
  /** Page size (0,200], default is 20 */
  page_size?: number;
  cursor?: string;
  base?: base.Base;
}

export interface ListEvaluationSetVersionsResp {
  versions?: Array<eval_set.EvaluationSetVersion>;
  total?: Int64;
  nextCursor?: string;
  baseResp?: base.BaseResp;
}

export interface UpdateEvaluationSetItemReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  item_id: Int64;
  /** Each round of dialogue */
  turns?: Array<eval_set.Turn>;
  base?: base.Base;
}

export interface UpdateEvaluationSetItemResp {
  baseResp?: base.BaseResp;
}

export interface UpdateEvaluationSetReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  name?: string;
  description?: string;
  base?: base.Base;
}

export interface UpdateEvaluationSetResp {
  baseResp?: base.BaseResp;
}

export interface UpdateEvaluationSetSchemaReq {
  space_id: Int64;
  evaluation_set_id: Int64;
  /** When fieldSchema.key is empty: insert a new column
When fieldSchema.key is not empty: update the corresponding column
In the case of hard deletion (data recovery is not supported), there is no need to write the field list of imported parameters;
In the case of soft deletion (supporting data recovery), the field list of imported parameters still needs to be retained, and the delete of this field needs to be set to true */
  fields?: Array<eval_set.FieldSchema>;
  base?: base.Base;
}

export interface UpdateEvaluationSetSchemaResp {
  baseResp?: base.BaseResp;
}

export interface VersionedEvaluationSet {
  version?: eval_set.EvaluationSetVersion;
  evaluation_set?: eval_set.EvaluationSet;
}
/* eslint-enable */
