/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export enum CozeBotInfoType {
  /** Draft bot */
  DraftBot = 1,
  /** Shop bot */
  ProductBot = 2,
}

export enum EvalTargetRunStatus {
  Unknown = 0,
  Success = 1,
  Fail = 2,
}

export enum EvalTargetType {
  /** CozeBot */
  CozeBot = 1,
  /** Prompt */
  FornaxPrompt = 2,
}

export enum ModelPlatform {
  Unknown = 0,
  GPTOpenAPI = 1,
  MAAS = 2,
}

export enum SubmitStatus {
  Undefined = 0,
  /** not submitted */
  UnSubmit = 1,
  /** Submitted */
  Submitted = 2,
}

/** Coze2.0Bot */
export interface CozeBot {
  bot_id?: Int64;
  bot_version?: string;
  bot_info_type?: CozeBotInfoType;
  model_info?: ModelInfo;
  /** DTO is used, no database is stored */
  bot_name?: string;
  /** DTO is used, no database is stored */
  avatar_url?: string;
  /** DTO is used, no database is stored */
  description?: string;
  /** If it is a release version, this field is not empty */
  publish_version?: string;
  base_info?: common.BaseInfo;
}

export interface EvalPrompt {
  prompt_id?: string;
  version?: string;
  /** DTO is used, no database is stored */
  name?: string;
  /** DTO is used, no database is stored */
  prompt_key?: string;
  /** DTO is used, no database is stored */
  submit_status?: SubmitStatus;
  /** DTO is used, no database is stored */
  description?: string;
}

/** TODO TargetVersion information here to check */
export interface EvalTarget {
  /** Basic information
A unique identifier for an object */
  id?: Int64;
  /** Space ID */
  space_id?: Int64;
  /** Source object ID, such as prompt ID */
  source_target_id?: string;
  /** Object Type */
  eval_target_type?: EvalTargetType;
  /** version information
target version */
  eval_target_version?: EvalTargetVersion;
  /** System information */
  base_info?: common.BaseInfo;
}

export interface EvalTargetContent {
  /** Input schema */
  input_schemas?: Array<common.ArgsSchema>;
  /** Output schema */
  output_schemas?: Array<common.ArgsSchema>;
  /** 101-200 EvalTarget Type
When EvalTargetType = 0, pass this field. When the evaluation object is CozeBot, you need to set the CozeBot information. */
  coze_bot?: CozeBot;
  /** When EvalTargetType = 1, pass this field. When the evaluation object is EvalPrompt, you need to set the Prompt information */
  prompt?: EvalPrompt;
}

export interface EvalTargetInputData {
  /** session history */
  history_messages?: Array<common.Message>;
  /** variable */
  input_fields?: Record<string, common.Content>;
  ext?: Record<string, string>;
}

export interface EvalTargetOutputData {
  /** variable */
  output_fields?: Record<string, common.Content>;
  /** running consumption */
  eval_target_usage?: EvalTargetUsage;
  /** running error */
  eval_target_run_error?: EvalTargetRunError;
  /** running time */
  time_consuming_ms?: Int64;
}

export interface EvalTargetRecord {
  /** evaluation record ID */
  id?: Int64;
  /** Space ID */
  space_id?: Int64;
  target_id?: Int64;
  target_version_id?: Int64;
  /** Experiment execution ID */
  experiment_run_id?: Int64;
  /** Evaluation Set Item ID */
  item_id?: Int64;
  /** review set item round ID */
  turn_id?: Int64;
  /** Link ID */
  trace_id?: string;
  /** Link ID */
  log_id?: string;
  /** input data */
  eval_target_input_data?: EvalTargetInputData;
  /** output data */
  eval_target_output_data?: EvalTargetOutputData;
  status?: EvalTargetRunStatus;
  base_info?: common.BaseInfo;
}

export interface EvalTargetRunError {
  code?: number;
  message?: string;
}

export interface EvalTargetUsage {
  input_tokens?: Int64;
  output_tokens?: Int64;
}

export interface EvalTargetVersion {
  /** Basic information
version unique identifier */
  id?: Int64;
  /** Space ID */
  space_id?: Int64;
  /** object unique identifier */
  target_id?: Int64;
  /** Source object version, e.g. prompt is 0.0.1, bot is version number 12233, etc */
  source_target_version?: string;
  /** target content */
  eval_target_content?: EvalTargetContent;
  /** System information */
  base_info?: common.BaseInfo;
}

export interface ModelInfo {
  model_id?: Int64;
  model_name?: string;
  /** DTO is used, no database is stored */
  show_name?: string;
  /** DTO is used, no database is stored */
  max_tokens?: Int64;
  /** Model family information */
  model_family?: Int64;
  /** Model Platform */
  platform?: ModelPlatform;
}
/* eslint-enable */
