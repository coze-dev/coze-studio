/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as datasetv2 from './datasetv2';
import * as evaluator from './evaluator';
import * as eval_set from './eval_set';
import * as eval_target from './eval_target';
import * as common from './common';
import * as stone_fornax_evaluation_eval_target from './stone_fornax_evaluation_eval_target';

export type Int64 = string | number;

/** aggregator type */
export enum AggregatorType {
  Average = 1,
  Sum = 2,
  Max = 3,
  Min = 4,
  /** The distribution of scores. */
  Distribution = 5,
}

export enum DataType {
  /** Default, floating-point value types with decimals */
  Double = 0,
  /** score distribution */
  ScoreDistribution = 1,
}

export enum ExptAggregateCalculateStatus {
  Unknown = 0,
  Idle = 1,
  Calculating = 2,
}

export enum ExptRetryMode {
  Unknown = 0,
  RetryAll = 1,
  RetryFailure = 2,
  RetryTargetItems = 3,
}

export enum ExptStatus {
  Unknown = 0,
  /** to be implemented */
  Pending = 2,
  /** in progress */
  Processing = 3,
  /** successful execution */
  Success = 11,
  /** execution failed */
  Failed = 12,
  /** user termination */
  Terminated = 13,
  /** Abnormal termination within the system */
  SystemTerminated = 14,
}

export enum FieldType {
  Unknown = 0,
  /** Evaluator score, FieldKey is evaluatorVersionID, value is score */
  EvaluatorScore = 1,
  CreatorBy = 2,
  ExptStatus = 3,
  TurnRunState = 4,
  TargetID = 5,
  EvalSetID = 6,
  EvaluatorID = 7,
  TargetType = 8,
  SourceTarget = 9,
  EvaluatorVersionID = 20,
  TargetVersionID = 21,
  EvalSetVersionID = 22,
}

export enum FilterLogicOp {
  Unknown = 0,
  And = 1,
  Or = 2,
}

export enum FilterOperatorType {
  Unknown = 0,
  /** equal to */
  Equal = 1,
  /** Not equal to */
  NotEqual = 2,
  /** greater than */
  Greater = 3,
  /** greater than or equal to */
  GreaterOrEqual = 4,
  /** less than */
  Less = 5,
  /** less than or equal to */
  LessOrEqual = 6,
  /** contain */
  In = 7,
  /** Do not include */
  NotIn = 8,
}

export enum ItemRunState {
  Unknown = -1,
  /** in line */
  Queueing = 0,
  /** in progress */
  Processing = 1,
  /** success */
  Success = 2,
  /** fail */
  Fail = 3,
  /** terminate execution */
  Terminal = 5,
}

export enum TurnRunState {
  /** Not started */
  Queueing = 0,
  /** successful execution */
  Success = 1,
  /** execution failed */
  Fail = 2,
  Processing = 3,
  Terminal = 4,
}

export interface AggregateData {
  data_type: DataType;
  value?: number;
  score_distribution?: ScoreDistribution;
}

/** Aggregation results of an aggregator type */
export interface AggregatorResult {
  aggregator_type: AggregatorType;
  data?: AggregateData;
}

export interface CheckExperimentNameRequest {
  space_id: Int64;
  name?: string;
  Base?: base.Base;
}

export interface CheckExperimentNameResponse {
  pass?: boolean;
  message?: string;
  BaseResp?: base.BaseResp;
}

export interface CloneExperimentRequest {
  expt_id?: Int64;
  space_id?: Int64;
  Base?: base.Base;
}

export interface CloneExperimentResponse {
  experiment?: Experiment;
  BaseResp?: base.BaseResp;
}

export interface ColumnEvalSetField {
  /** unique key */
  key?: string;
  /** display name */
  name?: string;
  /** describe */
  description?: string;
  /** Type, such as, text, pictures, etc. */
  content_type?: string;
  /** Default rendering formats such as code, json, etc. mai */
  default_display_format?: datasetv2.FieldDisplayFormat;
}

export interface ColumnEvaluator {
  evaluator_version_id: Int64;
  evaluator_id: Int64;
  evaluator_type: evaluator.EvaluatorType;
  /** Evaluator name */
  name?: string;
  /** Evaluator version */
  version?: string;
  /** Evaluator Description */
  description?: string;
}

export interface DeleteExperimentRequest {
  space_id: Int64;
  expt_id: Int64;
  Base?: base.Base;
}

export interface DeleteExperimentResponse {
  BaseResp?: base.BaseResp;
}

/** Evaluator version granularity aggregation results */
export interface EvaluatorAggregateResult {
  /** Graphs contain experimental and evaluator information. Support jumping to view experimental related evaluation sets and evaluator details */
  evaluator_version_id: Int64;
  aggregator_results?: Array<AggregatorResult>;
  name?: string;
  /** Evaluator version */
  version?: string;
}

export interface EvaluatorFieldMapping {
  evaluator_version_id: Int64;
  from_eval_set?: Array<FieldMapping>;
  from_target?: Array<FieldMapping>;
}

export interface Experiment {
  id?: Int64;
  name?: string;
  desc?: string;
  creator_by?: string;
  status?: ExptStatus;
  status_message?: string;
  start_time?: Int64;
  end_time?: Int64;
  eval_set_version_id?: Int64;
  target_version_id?: Int64;
  evaluator_version_ids?: Array<Int64>;
  eval_set?: eval_set.EvaluationSet;
  eval_target?: eval_target.EvalTarget;
  evaluators?: Array<evaluator.Evaluator>;
  eval_set_id?: Int64;
  target_id?: Int64;
  base_info?: common.BaseInfo;
  expt_stats?: ExptStatistics;
  target_field_mapping?: TargetFieldMapping;
  evaluator_field_mapping?: Array<EvaluatorFieldMapping>;
}

export interface ExperimentFilter {
  filters?: Filters;
}

export interface ExperimentResult {
  experiment_id: Int64;
  payload?: ExperimentTurnPayload;
}

/** Actual row-level payload */
export interface ExperimentTurnPayload {
  turn_id?: Int64;
  /** evaluation dataset data */
  eval_set?: TurnEvalSet;
  /** Object Results */
  target_output?: TurnTargetOutput;
  /** Evaluation rule execution result */
  evaluator_output?: TurnEvaluatorOutput;
  /** Evaluation system related data logs, errors */
  system_info?: TurnSystemInfo;
}

/** Experimental particle size polymerization results */
export interface ExptAggregateResult {
  experiment_id: Int64;
  /** Evaluator dimension aggregation result, key is evaluator_version_id */
  evaluator_results?: Record<Int64, EvaluatorAggregateResult>;
  /** Aggregate Compute State */
  status?: ExptAggregateCalculateStatus;
}

export interface ExptFilterOption {
  fuzzy_name?: string;
  filters?: Filters;
}

export interface ExptStatistics {
  evaluator_aggregate_results?: Array<EvaluatorAggregateResult>;
  token_usage?: TokenUsage;
  credit_cost?: number;
  pending_turn_cnt?: number;
  success_turn_cnt?: number;
  fail_turn_cnt?: number;
  terminated_turn_cnt?: number;
  processing_turn_cnt?: number;
}

export interface FieldMapping {
  field_name?: string;
  const_value?: string;
  from_field_name?: string;
}

/** field filter */
export interface FilterCondition {
  /** Filter fields, such as evaluator IDs */
  field?: FilterField;
  /** Operators such as equal to, contain, greater than, less than, etc */
  operator?: FilterOperatorType;
  /** Operational values; support for multiple types of operational values;
When Operator is In, NotIn, Values are separated by commas */
  value?: string;
  source_target?: SourceTarget;
}

export interface FilterField {
  field_type: FieldType;
  filed_key?: string;
}

export interface Filters {
  /** filter condition */
  filter_conditions?: Array<FilterCondition>;
  /** Logical operation between filter conditions, default to And */
  logic_op?: FilterLogicOp;
}

export interface ItemResult {
  item_id: Int64;
  /** Row particle size experiment results Details */
  turn_results?: Array<TurnResult>;
  system_info?: ItemSystemInfo;
  /** Item index in eval_set */
  item_index?: Int64;
}

export interface ItemSystemInfo {
  item_run_state?: ItemRunState;
  /** Row the associated logID at execution time */
  log_id?: string;
  error?: RunError;
}

export interface KillExperimentRequest {
  expt_id?: Int64;
  space_id?: Int64;
  Base?: base.Base;
}

export interface KillExperimentResponse {
  BaseResp?: base.BaseResp;
}

export interface MDeleteExperimentRequest {
  space_id: Int64;
  expt_ids: Array<Int64>;
  Base?: base.Base;
}

export interface MDeleteExperimentResponse {
  BaseResp?: base.BaseResp;
}

export interface MGetExperimentAggrResultRequest {
  space_id: Int64;
  experiment_ids: Array<Int64>;
  Base?: base.Base;
}

export interface MGetExperimentAggrResultResponse {
  expt_aggregate_result?: Array<ExptAggregateResult>;
  BaseResp?: base.BaseResp;
}

export interface MGetExperimentRequest {
  space_id: Int64;
  expt_ids: Array<Int64>;
  Base?: base.Base;
}

export interface MGetExperimentResponse {
  experiments?: Array<Experiment>;
  BaseResp?: base.BaseResp;
}

export interface MGetExperimentResultRequest {
  space_id: Int64;
  experiment_ids: Array<Int64>;
  /** Benchmark experiment ID for experimental comparison */
  baseline_experiment_id?: Int64;
  /** key: experiment_id */
  filters?: Record<Int64, ExperimentFilter>;
  page?: Int64;
  page_size?: Int64;
  Base?: base.Base;
}

export interface MGetExperimentResultResponse {
  /** Dataset header information */
  column_eval_set_fields: Array<ColumnEvalSetField>;
  /** Evaluator header information */
  column_evaluators?: Array<ColumnEvaluator>;
  /** Item particle size experiment results Details */
  item_results?: Array<ItemResult>;
  total?: Int64;
  BaseResp?: base.BaseResp;
}

export interface PullExperimentsRequest {
  space_id: Int64;
  page?: number;
  page_size?: number;
  filter_option?: ExptFilterOption;
  order_bys?: Array<common.OrderBy>;
  Base?: base.Base;
}

export interface PullExperimentsResponse {
  experiments?: Array<Experiment>;
  total?: number;
  BaseResp?: base.BaseResp;
}

export interface RetryExperimentRequest {
  retry_mode?: ExptRetryMode;
  space_id?: Int64;
  expt_id?: Int64;
  item_ids?: Array<Int64>;
  Base?: base.Base;
}

export interface RetryExperimentResponse {
  run_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface RunError {
  code: Int64;
  /** Code corresponding message */
  message?: string;
  /** Error details */
  detail?: string;
}

export interface ScoreDistribution {
  score_distribution_items?: Array<ScoreDistributionItem>;
}

export interface ScoreDistributionItem {
  /** Aggregations other than TOP5 are displayed as "Other" */
  score: string;
  count: Int64;
  percentage: number;
}

export interface SourceTarget {
  eval_target_type?: eval_target.EvalTargetType;
  source_target_ids?: Array<string>;
}

export interface SubmitExperimentRequest {
  space_id: Int64;
  eval_set_version_id?: Int64;
  TargetVersionID?: Int64;
  evaluator_version_ids?: Array<Int64>;
  name?: string;
  desc?: string;
  eval_set_id?: Int64;
  TargetID?: Int64;
  target_field_mapping?: TargetFieldMapping;
  evaluator_field_mapping?: Array<EvaluatorFieldMapping>;
  item_concur_num?: number;
  evaluators_concur_num?: number;
  create_eval_target_param?: stone_fornax_evaluation_eval_target.CreateEvalTargetParam;
  Base?: base.Base;
}

export interface SubmitExperimentResponse {
  experiment?: Experiment;
  run_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface TargetFieldMapping {
  from_eval_set?: Array<FieldMapping>;
}

export interface TokenUsage {
  input_tokens?: Int64;
  output_tokens?: Int64;
}

export interface TurnEvalSet {
  turn?: eval_set.Turn;
}

export interface TurnEvaluatorOutput {
  /** key: evaluator_version_id */
  evaluator_records?: Record<Int64, evaluator.EvaluatorRecord>;
}

/** Row-level results, possibly including multiple experiments */
export interface TurnResult {
  /** May be empty */
  turn_id?: Int64;
  /** The experimental sequence participating in the comparison is 1 in length for a single report sequence. */
  experiment_results?: Array<ExperimentResult>;
  /** Turn in items */
  turn_index?: Int64;
}

export interface TurnSystemInfo {
  turn_run_state?: TurnRunState;
  /** Row the associated logID at execution time */
  log_id?: string;
  error?: RunError;
}

export interface TurnTargetOutput {
  eval_target_record?: eval_target.EvalTargetRecord;
}

export interface UpdateExperimentRequest {
  space_id: Int64;
  expt_id: Int64;
  name?: string;
  desc?: string;
  Base?: base.Base;
}

export interface UpdateExperimentResponse {
  experiment?: Experiment;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
