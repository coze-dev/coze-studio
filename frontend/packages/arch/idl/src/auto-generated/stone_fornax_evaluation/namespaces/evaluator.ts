/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export enum BuiltinTemplateType {
  Prompt = 1,
  Code = 2,
}

export enum EvaluatorRunStatus {
  /** Running state, state flow under asynchronous, only Success/Fail under synchronization */
  Unknown = 0,
  Success = 1,
  Fail = 2,
}

export enum EvaluatorType {
  Prompt = 1,
  Code = 2,
}

export enum LanguageType {
  Python = 1,
  JS = 2,
}

export enum PromptSourceType {
  BuiltinTemplate = 1,
  FornaxPrompt = 2,
  Custom = 3,
}

export enum ToolType {
  Function = 1,
  /** for gemini native tool */
  GoogleSearch = 2,
}

export interface CodeEvaluator {
  language_type?: LanguageType;
  code?: string;
}

export interface Correction {
  /** Manual calibration score */
  score?: number;
  /** Manual calibration reason */
  explain?: string;
  /** Corrector */
  updated_by?: string;
}

export interface Evaluator {
  /** Evaluator ID */
  evaluator_id?: Int64;
  /** Space ID */
  space_id?: Int64;
  /** Evaluator Type */
  evaluator_type?: EvaluatorType;
  /** display name */
  name?: string;
  /** describe */
  description?: string;
  /** Has the draft been submitted? */
  draft_submitted?: boolean;
  base_info?: common.BaseInfo;
  /** The current version content can be a draft version */
  current_version?: EvaluatorVersion;
  latest_version?: string;
}

export interface EvaluatorContent {
  /** Whether to accept chat history */
  receive_chat_history?: boolean;
  /** Input schema */
  input_schemas?: Array<common.ArgsSchema>;
  /** 101-200 Evaluator Types */
  prompt_evaluator?: PromptEvaluator;
  code_evaluator?: CodeEvaluator;
}

export interface EvaluatorInputData {
  /** session history */
  history_messages?: Array<common.Message>;
  /** variable */
  input_fields?: Record<string, common.Content>;
}

export interface EvaluatorOutputData {
  /** running result */
  evaluator_result?: EvaluatorResult;
  /** running consumption */
  evaluator_usage?: EvaluatorUsage;
  /** running error */
  evaluator_run_error?: EvaluatorRunError;
  /** running time */
  time_consuming_ms?: Int64;
}

export interface EvaluatorRecord {
  /** evaluation record ID */
  id?: Int64;
  /** Add experimental ID field */
  experiment_id?: Int64;
  /** Experiment ID */
  experiment_run_id?: Int64;
  /** Conversation ID */
  item_id?: Int64;
  /** Conversation ID */
  turn_id?: Int64;
  /** Evaluator Version ID */
  evaluator_version_id?: Int64;
  /** Link ID */
  trace_id?: string;
  /** Link ID */
  log_id?: string;
  /** input data */
  evaluator_input_data?: EvaluatorInputData;
  /** output data */
  evaluator_output_data?: EvaluatorOutputData;
  status?: EvaluatorRunStatus;
  base_info?: common.BaseInfo;
}

export interface EvaluatorResult {
  /** score */
  score?: number;
  /** calibration score */
  correction?: Correction;
  /** reasoning process */
  reasoning?: string;
}

export interface EvaluatorRunError {
  code?: number;
  message?: string;
}

export interface EvaluatorUsage {
  input_tokens?: Int64;
  output_tokens?: Int64;
}

export interface EvaluatorVersion {
  /** Version ID */
  id?: Int64;
  /** version number */
  version?: string;
  /** version description */
  description?: string;
  base_info?: common.BaseInfo;
  evaluator_content?: EvaluatorContent;
}

export interface Function {
  name?: string;
  description?: string;
  parameters?: string;
}

export interface PromptEvaluator {
  /** MessageList */
  message_list?: Array<common.Message>;
  model_config?: common.ModelConfig;
  prompt_source_type?: PromptSourceType;
  prompt_template_key?: string;
  prompt_template_name?: string;
  tools?: Array<ToolCombine>;
}

export interface Tool {
  type?: ToolType;
  function_def?: Function;
}

export interface ToolCombine {
  /** Tool Definition */
  tool_def?: Tool;
  /** Mock data */
  mock_response?: Array<string>;
  /** Whether to disable */
  disable?: boolean;
}
/* eslint-enable */
