/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';
import * as base from './base';
import * as flow_devops_evaluation_callback_common from './flow_devops_evaluation_callback_common';
import * as flow_devops_evaluation_evaluator_callback from './flow_devops_evaluation_evaluator_callback';

export type Int64 = string | number;

export enum ContentType {
  Txt = 1,
  Image = 2,
  Audio = 3,
  Video = 4,
  Link = 6,
  Music = 7,
  Tako = 8,
  File = 9,
  Card = 50,
  BotCard = 51,
  APP = 100,
  OutputSearchResult = 200,
}

/** The type of processing flow when the Evaluator executes, expressing the attribute information of the Evaluator implementation
 EvaluatorID is not enumerable, but EvaluatorProcessType is enumerable
 EvaluatorProcessType is the information that must be determined when creating the Evaluator. */
export enum EvaluatorProcessType {
  Prompt = 1,
  PythonCode = 2,
  JSCode = 3,
  BuildinFunc = 4,
  BuildinPrompt = 5,
  /** Currently includes RPCCallback and HTTPCallback. */
  CustomCallback = 6,
  /** manual evaluation */
  Manual = 7,
  /** custom metric reporting */
  CustomMetric = 8,
  /** Dedicated test rules */
  BuiltinSpecTest = 9,
  /** Fornax platform Prompt development prompts */
  FornaxPrompt = 10,
  /** Coze2.0 referee model evaluator */
  CozePrompt = 11,
}

export enum LLMResponseFormat {
  TEXT = 0,
  MARKDOWN = 1,
  JSON = 2,
}

export enum ReplyType {
  Answer = 1,
  Suggest = 2,
  LLMOutput = 3,
  ToolOutput = 4,
  DataSet = 5,
  QueryKeyword = 6,
  IntermediateOutput = 7,
}

export enum RuleRunState {
  /** Running state, state flow under asynchronous, only Success/Fail under synchronization */
  NotInit = 0,
  Init = 1,
  Processing = 2,
  Success = 3,
  Fail = 4,
}

export enum SupportUpdateRuleGroupField {
  Name = 4,
  Desc = 5,
}

export interface AddToHubEvaluatorTypeMeta {
  evaluator_hub_id: Int64;
  /** display name */
  name?: string;
  /** weight */
  weight?: Int64;
  /** evaluation granularity */
  granularity?: flow_devops_evaluation_entity.EvaluatorGranularity;
  prompt_rule?: PromptRule;
  python_rule?: PythonRule;
  js_rule?: JSRule;
  manual_rule?: ManualRule;
  fornax_prompt_rule?: FornaxPromptRule;
}

export interface BatchGetRuleGroupMetaRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule_group_ids: Array<Int64>;
  /** True response returns the number of rules, which currently affects the performance of the interface */
  need_rules_count?: boolean;
  Base?: base.Base;
}

export interface BatchGetRuleGroupMetaResponse {
  metas?: Array<RuleGroupMeta>;
  BaseResp?: base.BaseResp;
}

export interface BuildinFuncRule {
  contents?: Array<string>;
}

export interface BuildinPromptRule {
  contents?: Array<string>;
  model_name?: string;
  /** 20240815 server level internal use */
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

export interface CopyRuleGroupRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  source_rule_group_id: Int64;
  /** Creates a new rule_group_id for empty time and adds rules to the target rule_group without empty time */
  target_rule_group_id?: Int64;
  /** Copy to target space, when empty, copy to SpaceID space by default */
  to_space_id?: Int64;
  cid?: string;
  Base?: base.Base;
}

export interface CopyRuleGroupResponse {
  /** If the req. TargetRuleGroupID is empty, it is the generated new id. If it is not empty, it is the TargetRuleGroupID. */
  rule_group_id: Int64;
  /** The copied rules, IDs are all new */
  copied_rules: Array<Rule>;
  /** Destination space ID copied to */
  to_space_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface CozePromptRule {
  model_info: ModelInfo;
  prompt: string;
}

export interface CreateRuleAndSaveToHubRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule: Rule;
  rule_group_id: Int64;
  /** When saving to the Hub, support custom tagging and modal tagging of evaluatorType */
  tags?: Array<string>;
  modal_tags?: Array<string>;
  cid?: string;
  Base?: base.Base;
}

export interface CreateRuleAndSaveToHubResponse {
  rule?: Rule;
  evaluator_hub_id?: Int64;
  BaseResp?: base.BaseResp;
}

export interface CreateRuleGroupRequest {
  'FlowDevops-Agw-UserId'?: string;
  name?: string;
  desc?: string;
  'FlowDevops-Agw-AppId'?: number;
  /** Rules interface visible */
  publish_to_rule_group?: boolean;
  space_id: Int64;
  /** Whether to tag, not by default */
  tag_list?: Array<flow_devops_evaluation_entity.TagInfo>;
  cid?: string;
  Base?: base.Base;
}

export interface CreateRuleGroupResponse {
  rule_group?: RuleGroup;
  BaseResp?: base.BaseResp;
}

export interface CreateRuleRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Add rule to target rule_group */
  rule_group_id: Int64;
  rule: Rule;
  cid?: string;
  Base?: base.Base;
}

export interface CreateRuleResponse {
  rule?: Rule;
  BaseResp?: base.BaseResp;
}

export interface CreateRulesRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  /** Add rule to target rule_group */
  rule_group_id: Int64;
  rules: Array<Rule>;
  cid?: string;
  Base?: base.Base;
}

export interface CreateRulesResponse {
  rules?: Array<Rule>;
  BaseResp?: base.BaseResp;
}

export interface CustomCallback {
  content?: string;
  /** Callback the env of the business party */
  env?: string;
}

/** custom indicator rules */
export interface CustomMetricsRule {
  data_type: flow_devops_evaluation_entity.EvaluateResultDataType;
  value_type?: flow_devops_evaluation_entity.EvaluateResultValueType;
}

export interface DebugRuleRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule: Rule;
  data: RunRuleInputData;
  Base?: base.Base;
}

export interface DebugRuleResponse {
  result: RunRuleResult;
  BaseResp?: base.BaseResp;
}

export interface DeleteEvaluatorHubRequest {
  evaluator_hub_id: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
}

export interface DeleteEvaluatorHubResponse {
  BaseResp?: base.BaseResp;
}

export interface DeleteEvaluatorTypeRequest {
  evaluator_type: string;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  cid?: string;
}

export interface DeleteEvaluatorTypeResponse {
  BaseResp?: base.BaseResp;
}

export interface DeleteRuleGroupRequest {
  'FlowDevops-Agw-UserId'?: string;
  rule_group_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  cid?: string;
  Base?: base.Base;
}

export interface DeleteRuleGroupResponse {
  BaseResp?: base.BaseResp;
}

export interface EvalautorTypeMeta {
  name: string;
  evaluator_type: Int64;
  process_type: EvaluatorProcessType;
  tool_tip_content?: string;
  is_positive?: boolean;
  /** Json Schema description of evaluator rules bound to evaluators */
  rule_config_json_schema?: string;
  /** Only process_type = 4 takes effect, true for Is, false for NotIs, and the rest of the rules are empty */
  builtin_func_use_is_syntax?: boolean;
  receive_chat_history?: boolean;
  /** List of optional models for the rule */
  available_model_name?: Array<string>;
  /** modal label */
  modal_tag?: Array<string>;
  /** Custom label display */
  tags?: Array<string>;
  /** When true, it means it was saved to the hub */
  is_add_to_hub?: boolean;
  /** User saves EvalautorTypeMeta information to hub */
  hub_evaluator_type_meta?: AddToHubEvaluatorTypeMeta;
  /** sample */
  sample?: string;
}

export interface EvaluatorTypeDetailInfo {
  evaluator_type?: Int64;
  evaluator_type_name: string;
  space_id: string;
  callback_type: flow_devops_evaluation_entity.CallbackType;
  description?: string;
  /** Json Schema description of evaluator rules bound to evaluators */
  rule_config_json_schema?: string;
  creator_id?: Int64;
  rpc_callback_evaluator_params?: RPCCallbackEvaluatorParams;
  http_callback_evaluator_params?: HttpCallbackEvaluatorParams;
}

export interface FornaxPromptRule {
  /** The unique identifier of prompt in prompt development */
  prompt_id: Int64;
  /** Prompt version */
  version?: string;
  /** Server level internal use */
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

export interface GetEvaluatorTypeRequest {
  evaluator_type: Int64;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
}

export interface GetEvaluatorTypeResponse {
  evaluator_type_detail_info: EvaluatorTypeDetailInfo;
  BaseResp?: base.BaseResp;
}

export interface GetRuleGroupMetaRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule_group_id: Int64;
  Base?: base.Base;
}

export interface GetRuleGroupMetaResponse {
  meta?: RuleGroupMeta;
  BaseResp?: base.BaseResp;
}

export interface GetRuleGroupRulesRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule_group_id: Int64;
  Base?: base.Base;
}

export interface GetRuleGroupRulesResponse {
  rules?: Array<Rule>;
  default_custom_metrics_rules?: Array<Rule>;
  BaseResp?: base.BaseResp;
}

export interface GetRulesRequest {
  'FlowDevops-Agw-UserId'?: string;
  rule_ids?: Array<Int64>;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetRulesResponse {
  /** Len and subscripts are consistent with MGetRulesRequest. RuleIDs */
  rules?: Array<Rule>;
  BaseResp?: base.BaseResp;
}

export interface HttpCallbackEvaluatorParams {
  psm?: string;
  cluster?: string;
  /** Unit ms */
  timeout?: Int64;
  agent_execute_path?: string;
  http_auth_type?: flow_devops_evaluation_entity.HTTPAuthType;
  method?: flow_devops_evaluation_entity.HTTPMethod;
}

export interface JSRule {
  code: string;
}

/** ListCustomSupportRuleTypeFilter request filtering rules */
export interface ListCustomSupportRuleTypeFilter {
  evaluator_type_name?: string;
}

export interface ListCustomSupportRuleTypeRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  /** Empty first */
  cursor?: string;
  'FlowDevops-Agw-AppId'?: number;
  /** Default 20 */
  limit?: Int64;
  list_custom_support_rule_type_filter?: ListCustomSupportRuleTypeFilter;
  Base?: base.Base;
}

export interface ListCustomSupportRuleTypeResponse {
  types?: Array<EvalautorTypeMeta>;
  has_more?: boolean;
  next_cursor?: string;
  BaseResp?: base.BaseResp;
}

export interface ListEvaluatorTypeDetailRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  list_evaluator_type_filter?: ListEvaluatorTypeFilter;
  /** Empty first */
  cursor?: string;
  limit?: Int64;
}

export interface ListEvaluatorTypeDetailResponse {
  evaluator_type_detail_infos?: Array<EvaluatorTypeDetailInfo>;
  has_more?: boolean;
  next_cursor?: string;
  BaseResp?: base.BaseResp;
}

/** ListEvaluatorTypeFilter request filtering rules */
export interface ListEvaluatorTypeFilter {
  evaluator_type_name?: string;
  callback_type?: flow_devops_evaluation_entity.CallbackType;
  creator_id?: Int64;
}

export interface ListRuleGroupMetaRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  /** Empty first */
  cursor?: string;
  'FlowDevops-Agw-AppId'?: number;
  /** Default 20 */
  limit?: Int64;
  /** True response returns the number of rules, which currently affects the performance of the interface */
  need_rules_count?: boolean;
  tag_name?: string;
  tag_value?: string;
  /** -- search fields -- */
  fuzzy_name?: string;
  creator_id?: Int64;
  Base?: base.Base;
}

export interface ListRuleGroupMetaResponse {
  /** Return to meta only */
  metas?: Array<RuleGroupMeta>;
  has_more?: boolean;
  next_cursor?: string;
  BaseResp?: base.BaseResp;
}

export interface ListSupportRuleTypeRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  /** Empty first */
  cursor?: string;
  'FlowDevops-Agw-AppId'?: number;
  /** Default 20 */
  limit?: Int64;
  Base?: base.Base;
}

export interface ListSupportRuleTypeResponse {
  types?: Array<EvalautorTypeMeta>;
  has_more?: boolean;
  next_cursor?: string;
  BaseResp?: base.BaseResp;
}

export interface LLMSetting {
  model_version: string;
  temperature: number;
  respose_max_length: Int64;
}

/** Multi-dimensional manual evaluation scoring rules */
export interface ManualRule {
  /** Data types: numeric ratings, options, plain text */
  data_type: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** rating range */
  scope?: flow_devops_evaluation_entity.ScoringScope;
  options?: Array<flow_devops_evaluation_entity.EvaluateResultOption>;
}

export interface ModelInfo {
  model_id: Int64;
  temperature: number;
  max_tokens: Int64;
  top_p?: number;
  response_format?: LLMResponseFormat;
  presence_penalty?: number;
  frequency_penalty?: number;
  model_style?: Int64;
  model_name?: string;
}

export interface PromptRule {
  setting: LLMSetting;
  content: string;
  /** 20240815 server level internal use */
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

export interface PythonRule {
  code: string;
}

export interface RegisterEvaluatorTypeRequest {
  evaluator_type_detail_info: EvaluatorTypeDetailInfo;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
  cid?: string;
}

export interface RegisterEvaluatorTypeResponse {
  evaluator_type_detail_info: EvaluatorTypeDetailInfo;
  BaseResp?: base.BaseResp;
}

export interface RemoveRuleRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule_group_id: Int64;
  rule_id: Int64;
  cid?: string;
  Base?: base.Base;
}

export interface RemoveRuleResponse {
  BaseResp?: base.BaseResp;
}

export interface ReplyContent {
  reply_type: ReplyType;
  content_type: ContentType;
  content: string;
  input_token_cnt: Int64;
}

export interface RPCCallbackEvaluatorParams {
  psm?: string;
  cluster?: string;
  /** Unit ms */
  timeout?: Int64;
}

export interface Rule {
  /** rule id */
  rule_id?: Int64;
  /** evaluator identifier */
  evaluator_type: Int64;
  process_type: EvaluatorProcessType;
  /** Custom evaluator name */
  evaluator_type_name?: string;
  /** weight */
  weight?: Int64;
  creator_id?: Int64;
  /** display name */
  name?: string;
  /** evaluation granularity */
  granularity?: flow_devops_evaluation_entity.EvaluatorGranularity;
  receive_chat_history?: boolean;
  /** data type */
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** Different EvaluatorProcessType correspond to different structure definitions */
  prompt_rule?: PromptRule;
  python_rule?: PythonRule;
  js_rule?: JSRule;
  buildin_func_rule?: BuildinFuncRule;
  buildin_prompt_rule?: BuildinPromptRule;
  custom_callback?: CustomCallback;
  manual_rule?: ManualRule;
  custom_metrics?: CustomMetricsRule;
  spec_test_rule?: SpecTestRule;
  fornax_prompt_rule?: FornaxPromptRule;
  coze_prompt_rule?: CozePromptRule;
}

export interface RuleGroup {
  meta: RuleGroupMeta;
  rules: Array<Rule>;
}

export interface RuleGroupMeta {
  /** rule_group_id */
  id: Int64;
  name?: string;
  desc?: string;
  space_id: Int64;
  /** When true, the rule group is visible in the rules interface */
  is_published?: boolean;
  creator_id?: Int64;
  created_at?: Int64;
  updated_at?: Int64;
  deleted_at?: Int64;
  /** Default is empty */
  rules_count?: Int64;
}

export interface RunRuleInput {
  /** task id */
  TaskID?: Int64;
  /** evaluation rule id */
  RuleID: Int64;
  /** Evaluation data input: data set line content + evaluation target output content and history + evaluation target trace */
  InputData: RunRuleInputData;
}

export interface RunRuleInputData {
  /** 1: optional dataset. Row Row//Dataset content, including current input and expected outputuding current input and expected output
session history */
  history_messages?: Array<flow_devops_evaluation_callback_common.Message>;
  /** Evaluation target current round input */
  input?: flow_devops_evaluation_callback_common.Message;
  /** Evaluation target current round output */
  prediction?: ReplyContent;
  /** Evaluate target expected output */
  output?: string;
  /** variable */
  variables?: Record<string, flow_devops_evaluation_callback_common.Content>;
  /** Evaluation target This round input v2 */
  input_v2?: flow_devops_evaluation_callback_common.Content;
  /** Evaluation target expected output v2 */
  output_v2?: flow_devops_evaluation_callback_common.Content;
  /** Evaluation target current round output v2 */
  prediction_v2?: flow_devops_evaluation_callback_common.Content;
  /** Evaluate target trajectory */
  trajectory?: flow_devops_evaluation_evaluator_callback.Trajectory;
  /** Reserved extended field, no use scenario yet. The evaluation platform passes the customized information to the implementer of the evaluator Rule */
  ext?: Record<string, string>;
}

export interface RunRuleResult {
  /** rule running status */
  run_state: RuleRunState;
  /** Information at the time of error */
  err_msg?: string;
  /** score */
  score?: number;
  /** Information on the scoring process and results */
  score_content?: string;
  /** token count */
  tokens?: Int64;
  /** run start time */
  start_time?: Int64;
  /** run end time */
  end_time?: Int64;
  /** redundancy */
  extra?: string;
  input_tokens?: Int64;
  output_tokens?: Int64;
  /** The scoring range, such as the user LLM Prompt in the Coze scenario, determines the output scoring range of the evaluator */
  scoring_scope?: flow_devops_evaluation_entity.ScoringScope;
}

export interface SpecTestRule {
  content?: string;
}

export interface UpdateEvaluatorTypeRequest {
  evaluator_type_detail_info: EvaluatorTypeDetailInfo;
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
}

export interface UpdateEvaluatorTypeResponse {
  BaseResp?: base.BaseResp;
}

export interface UpdateRuleGroupRequest {
  'FlowDevops-Agw-UserId'?: string;
  id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  space_id: Int64;
  /** name, description, content */
  update_fields: Array<SupportUpdateRuleGroupField>;
  name?: string;
  desc?: string;
  cid?: string;
  Base?: base.Base;
}

export interface UpdateRuleGroupResponse {
  rule_group?: RuleGroup;
  BaseResp?: base.BaseResp;
}

export interface UpdateRuleRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: Int64;
  'FlowDevops-Agw-AppId'?: number;
  rule_group_id: Int64;
  rule_id: Int64;
  rule: Rule;
  cid?: string;
  Base?: base.Base;
}

export interface UpdateRuleResponse {
  rule?: Rule;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
