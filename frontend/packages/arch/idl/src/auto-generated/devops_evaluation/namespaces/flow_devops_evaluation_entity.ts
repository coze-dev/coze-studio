/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum CallbackType {
  /** RPC interface implementation */
  RPC = 1,
  /** Access services via psm, http protocol */
  PSMHTTP = 2,
  /** It is an open evaluation object type; the evaluation cannot be triggered through the platform, and the evaluated object reports the data by itself  */
  Open = 3,
}

/** Evaluation result data type */
export enum EvaluateResultDataType {
  Unknown = 0,
  /** numerical scoring */
  Score = 1,
  /** numerical value */
  Value = 2,
  /** option */
  Select = 3,
  /** plain text description */
  PlainText = 4,
}

/** Value type evaluation result The specific type of the value (EvaluateResultDataType = Value) */
export enum EvaluateResultValueType {
  /** Floating point value, default */
  Double = 0,
  /** integer value */
  Int = 1,
}

/** evaluation granularity */
export enum EvaluatorGranularity {
  Unknown = 0,
  /** single round of dialogue */
  Row = 1,
  /** dialogue group */
  RowGroup = 2,
}

/** The faas http function has its own authentication method if auth is enabled, which is different from http. */
export enum HTTPAuthType {
  /** default */
  default = 0,
  /** If the faas function turns on auth, you need to whitelist the evaluation service account secret */
  JWT = 1,
}

export enum HTTPMethod {
  Undefined = 0,
  Get = 1,
  Post = 2,
}

export enum ModelPlatform {
  Unknown = 0,
  GPTOpenAPI = 1,
  MAAS = 2,
}

/** Evaluation results optional */
export interface EvaluateResultOption {
  /** Option name */
  name: string;
  color?: string;
}

export interface ModelInfo {
  model_id?: Int64;
  model_name?: string;
  /** front-end display name */
  show_name?: string;
  /** front-end display name */
  max_tokens?: Int64;
  /** Model family information */
  model_family?: Int64;
  Platform?: ModelPlatform;
}

/** Tree structure */
export interface Node {
  /** The root node is empty */
  name?: string;
  /** Identification ID of the node */
  node_id?: Int64;
  children?: Array<Node>;
}

export interface OpenAPIHeader {
  /** Requester's application ID */
  'FlowDevops-Agw-OpenAPI-AppId': string;
  /** The space ID of the requester */
  'FlowDevops-Agw-OpenAPI-SpaceId': string;
  /** Requester's service account ID */
  'FlowDevops-Agw-OpenAPI-AccountId': string;
}

/** rating range */
export interface ScoringScope {
  /** Upper Rating Range */
  max_score: number;
  /** Lower limit of rating range */
  min_score: number;
}

export interface Session {
  'FlowDevops-Agw-UserId'?: string;
  'FlowDevops-Agw-AppId'?: number;
}

/** Labels for the Fornax tag management platform */
export interface Tag {
  tag_id: Int64;
  /** For secondary label label name format: "primary label name " + "/" + " secondary label name" */
  tag_name: string;
}

/** Tag */
export interface TagInfo {
  tag_name: string;
  tag_value: string;
}
/* eslint-enable */
