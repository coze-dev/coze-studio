/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as bot_common from './bot_common';
import * as plugin_common from './plugin_common';
import * as base from './base';

export type Int64 = string | number;

export enum AsyncStatus {
  /** create */
  Create = 1,
  /** success */
  Finish = 2,
  /** fail */
  Failed = 3,
}

export enum BotDeleteStatus {
  Deleted = 1,
}

export enum BotExploreStatus {
  Online = 1,
  Offline = 2,
}

export enum BotMode {
  SingleMode = 0,
  MultiMode = 1,
}

export enum ConnectorApiKeyStatus {
  Available = 1,
  Delete = 2,
  StopUse = 3,
}

export enum ConnectorId {
  doubao = 482431,
  cici = 489823,
  bot = 10000010,
  feishu = 10000011,
  obric = 10000012,
  discord = 10000028,
}

/** The type of transmission allowed by the context */
export enum ContextContentType {
  /** No processing version */
  USER_RES = 0,
  USER_LLM_RES = 1,
  USER_LLM_APILEN_RES = 2,
  USER_LLM_API_RES = 3,
}

export enum DraftBotStatus {
  Deleted = 0,
  Using = 1,
}

export enum FileBizType {
  BIZ_LABEL_ICON = 1,
}

export enum GrantType {
  WaitListOff = 1,
  AdminOpt = 2,
  WhiteList = 3,
}

export enum IconType {
  Bot = 1,
  User = 2,
  Plugin = 3,
  Dataset = 4,
}

export enum IntelligenceType {
  Bot = 1,
  Project = 2,
  DouyinAvatarBot = 3,
}

export enum IntentCaseType {
  /** Normal */
  None = 0,
  /** Refuse to answer */
  Reject = 1,
  /** owe recall */
  FalseNegative = 2,
  /** false recall */
  FalsePositive = 4,
}

export enum OrderBy {
  CreateTime = 0,
  UpdateTime = 1,
  Hot = 3,
}

export enum PluginProductStatus {
  /** default state */
  Default = 0,
  /** On the market */
  Listed = 1,
  /** removed from the market */
  Unlisted = 2,
  /** Pending market */
  Reviewing = 3,
}

export enum PluginPublishStatus {
  /** unpublished */
  UnPublished = 1,
  /** There is an update to be released. */
  PendingPublished = 2,
  /** Published, no updates */
  Published = 3,
}

export enum PluginStatus {
  /** default value */
  Draft = 0,
  SUBMITTED = 1,
  REVIEWING = 2,
  PREPARED = 3,
  PUBLISHED = 4,
  OFFLINE = 5,
  /** operation ban */
  BANNED = 6,
}

export enum PluginType {
  PLUGIN = 1,
  APP = 2,
  FUNC = 3,
  WORKFLOW = 4,
}

export enum Publish {
  NoPublish = 0,
  HadPublished = 1,
}

export enum PublishStatus {
  All = 0,
  Publish = 1,
  NoPublish = 2,
}

export enum QueryType {
  QueryByID = 0,
  QueryByName = 1,
}

export enum SpaceType {
  /** individual */
  Personal = 1,
  /** group */
  Team = 2,
}

export enum VisibilityType {
  /** invisible */
  Invisible = 0,
  /** visible */
  Visible = 1,
}

export enum WaitStatus {
  Wait = 1,
  Failed = 2,
  Grant = 3,
}

export interface ApiKeyInfo {
  space_id?: string;
  space_name?: string;
  creator_name?: string;
  env?: string;
  api_key?: string;
  status?: string;
  creator_time?: string;
  last_used_time?: string;
  creator_type?: string;
  api_key_id?: string;
}

export interface AppIDInfo {
  id?: string;
  name?: string;
  icon?: string;
}

export interface BasicInfo {
  id?: string;
  name?: string;
}

export interface BatchUpdateExploreBot {
  id: string;
  index?: number;
  category_id?: Array<string>;
}

export interface BatchUpdateExploreBotData {
  failed_explore_bot_id?: Array<string>;
}

export interface BatchUpdateExploreBotRequest {
  explore_status: BotExploreStatus;
  explore_bot?: Array<BatchUpdateExploreBot>;
}

export interface BatchUpdateExploreBotResponse {
  code?: Int64;
  msg?: string;
  data?: BatchUpdateExploreBotData;
}

export interface BotInfoCompareData {
  draft_bot?: DraftBot;
  bot_version?: DraftBot;
  flow_bot?: DraftBot;
}

export interface BotInfoCompareRequest {
  bot_id?: string;
  conn_id?: ConnectorId;
}

export interface BotInfoCompareResponse {
  code?: Int64;
  msg?: string;
  data?: BotInfoCompareData;
}

export interface BotSpace {
  /** Space id, newly created as 0 */
  id?: string;
  /** publishing platform */
  app_ids?: Array<AppIDInfo>;
  /** space name */
  name?: string;
  /** spatial description */
  description?: string;
  /** icon url */
  icon_url?: string;
  /** space type */
  space_type?: SpaceType;
}

export interface CancelPublishOfficialPluginRequest {
  /** Official plugin id */
  plugin_id: string;
}

export interface CancelPublishOfficialPluginResponse {
  code?: Int64;
  msg?: string;
}

export interface CategoryListData {
  categorys?: Array<ExploreBotCategory>;
}

export interface ChainEvent {
  root_id?: string;
  parent_run_id?: string;
  id?: string;
  message_id?: string;
  name?: string;
  run_type?: string;
  start_time?: string;
  duration?: string;
  question?: string;
  answer?: string;
  a_id?: string;
  inputs?: string;
  outputs?: string;
  q_create_time?: string;
  q_update_time?: string;
  a_create_time?: string;
  a_update_time?: string;
  a_status?: string;
  a_broken_position?: string;
  log_id?: string;
  extra?: string;
}

export interface CommonFileInfo {
  /** File type, suffix */
  file_type?: string;
  /** business type */
  biz_type?: FileBizType;
}

export interface ConnectorInfo {
  id?: string;
  name?: string;
  icon?: string;
}

export interface ConnInfo {
  conn_id?: string;
  name?: string;
}

export interface Creator {
  id?: string;
  name?: string;
  avatar_url?: string;
  /** Did you create it yourself? */
  self?: boolean;
}

/** DeleteOfficialPlugin */
export interface DeleteOfficialPluginRequest {
  /** Official plugin id */
  plugin_id: string;
}

export interface DeleteOfficialPluginResponse {
  code?: Int64;
  msg?: string;
}

export interface DeleteUserLabelRequest {
  label_id?: string;
}

export interface DeleteUserLabelResponse {
  code?: Int64;
  msg?: string;
}

export interface DraftBot {
  /** draftid */
  id?: string;
  name?: string;
  description?: string;
  icon_uri?: string;
  icon_url?: string;
  visibility?: VisibilityType;
  has_published?: Publish;
  app_ids?: Array<AppIDInfo>;
  create_time?: string;
  update_time?: string;
  creator_id?: string;
  space_id?: string;
  model_info?: ModelInfo;
  creator?: Creator;
  index?: string;
  bot_explore_status?: BotExploreStatus;
  space_name?: string;
  /** explore_id */
  explore_id?: string;
  last_online_time?: string;
  explore_bot_update_time?: string;
  /** bot mode */
  bot_mode?: BotMode;
  /** Whether to update the superheat */
  need_backlog?: boolean;
  /** category name */
  category_name?: string;
  /** Category ID */
  category_id?: string;
  work_info?: WorkInfo;
  intelligence_type?: IntelligenceType;
}

export interface DuplicateExploreBotRequest {
  bot_id?: string;
}

export interface DuplicateExploreBotResponse {
  code?: Int64;
  msg?: string;
  data?: DuplicateExploreBotResponseData;
}

export interface DuplicateExploreBotResponseData {
  bot_id?: string;
}

export interface ExploreBotCategory {
  id?: string;
  index?: number;
  name?: string;
  name_key?: string;
  bot_count?: number;
}

export interface ExportIntentCaseRequest {
  /** Millisecond timestamp */
  from_date?: string;
  to_date?: string;
  /** Filter dora data */
  is_dora?: number;
  /** 1: badcase 2: random session */
  data_source?: number;
  /** How many sessions to export */
  session_num?: number;
  /** Filter agent/plugin name */
  plugin_name?: Array<string>;
  /** Missing call 2 or wrong call 4 */
  intent_case_type?: Array<number>;
}

export interface ExportIntentCaseResponse {
  code?: Int64;
  msg?: string;
  url?: string;
}

export interface FetchChainEventListData {
  events?: Array<ChainEvent>;
  offset?: Int64;
  limit?: Int64;
}

export interface FetchChainEventListResponse {
  code?: Int64;
  msg?: string;
  data?: FetchChainEventListData;
}

export interface FetchChainEventRequest {
  start_time?: Int64;
  end_time?: Int64;
  /** 3:   optional string message_id */
  offset?: number;
  limit?: number;
  root_id?: string;
  log_id?: string;
}

export interface FetchMsgListData {
  messages?: Array<Msg>;
  page_index?: number;
  page_size?: number;
  total?: number;
}

export interface FetchMsgListRequest {
  start_time?: string;
  end_time?: string;
  content?: string;
  message_id?: string;
  device_id?: string;
  page_index?: number;
  page_size?: number;
  bot_id?: string;
  connector_id?: ConnectorId;
  user_id?: string;
  log_id?: string;
  conn_id?: string;
}

export interface FetchMsgListResponse {
  code?: Int64;
  msg?: string;
  data?: FetchMsgListData;
}

export interface GetAllUserLabelRequest {}

export interface GetAllUserLabelResponse {
  code?: Int64;
  msg?: string;
  user_labels?: Array<bot_common.UserLabel>;
}

/** ------- show api_key list ------- */
export interface GetApiKeyListRequest {
  space_id?: string;
  page_index?: number;
  page_size?: number;
}

export interface GetApiKeyListResponse {
  code?: Int64;
  msg?: string;
  data?: GetApiKeyListResponseData;
}

export interface GetApiKeyListResponseData {
  api_keys?: Array<ApiKeyInfo>;
  total?: number;
}

export interface GetBotMigrateProgressData {
  async_task?: Array<MigBotSpaceAsyncTask>;
  total?: number;
}

export interface GetBotMigrateProgressRequest {
  target_space_id?: string;
  bot_id?: string;
  page?: number;
  size?: number;
  final_status?: AsyncStatus;
}

export interface GetBotMigrateProgressResponse {
  code?: Int64;
  msg?: string;
  data: GetBotMigrateProgressData;
}

export interface GetCategoryListRequest {}

export interface GetCategoryListResponse {
  code?: Int64;
  msg?: string;
  data?: CategoryListData;
}

export interface GetConnIdData {
  conn_info?: Array<ConnInfo>;
}

export interface GetConnIdRequest {}

export interface GetConnIdResponse {
  code?: Int64;
  msg?: string;
  data?: GetConnIdData;
}

export interface GetIconRequest {
  icon_type?: IconType;
}

export interface GetIconResponse {
  code?: Int64;
  msg?: string;
  data?: GetIconResponseData;
}

export interface GetIconResponseData {
  icon_list?: Array<Icon>;
}

export interface GetIntentCaseDetailRequest {
  /** The specific format is determined by the front end. */
  from_date?: string;
  to_date?: string;
  agent_id?: string;
  case_types?: Array<IntentCaseType>;
  page?: number;
  page_size?: number;
}

export interface GetIntentCaseDetailResponse {
  code?: Int64;
  msg?: string;
  data?: Array<IntentCaseDetail>;
  total?: number;
}

export interface GetIntentCaseStatsRequest {
  /** The specific format is determined by the front end. */
  from_date?: string;
  to_date?: string;
  agent_id?: string;
}

export interface GetIntentCaseStatsResponse {
  code?: Int64;
  msg?: string;
  stats?: Array<IntentCaseStats>;
}

export interface GetLabelledUserRequest {
  /** page>=1 */
  page?: number;
  /** 0<size<=50 */
  size?: number;
  /** Search by id */
  user_id?: string;
  /** Search by username */
  user_unique_name?: string;
}

export interface GetLabelledUserResponse {
  code?: Int64;
  msg?: string;
  user_info?: Array<UserLabelInfo>;
  count?: number;
}

export interface GetOpAllBotListData {
  /** result */
  bot_draft_list?: Array<DraftBot>;
  /** total number */
  total?: number;
}

export interface GetOpAllBotListRequest {
  /** Space ID */
  space_id?: string;
  /** bot_name search */
  bot_name?: string;
  /** publishing platform */
  publish_platform?: Array<string>;
  /** paging */
  page_index?: number;
  /** paging size */
  page_size?: number;
  /** Has it been published? */
  is_publish?: PublishStatus;
  /** bot_id */
  bot_id?: string;
  /** Bulk query botid */
  batch_bot_id?: Array<string>;
  connector_id?: ConnectorId;
}

export interface GetOpAllBotListResponse {
  code?: Int64;
  msg?: string;
  data?: GetOpAllBotListData;
}

export interface GetOpExploreBotListData {
  /** result */
  bot_draft_list?: Array<DraftBot>;
  /** total number */
  total?: number;
}

export interface GetOpExploreBotListRequest {
  /** Whether to show */
  bot_status?: BotExploreStatus;
  /** Bot name fuzzy search */
  key_word?: string;
  /** paging */
  page_index?: number;
  /** paging size */
  page_size?: number;
  /** Category ID */
  category_id?: Array<string>;
  /** True means uncategorized */
  uncategorized?: boolean;
}

export interface GetOpExploreBotListResponse {
  code?: Int64;
  msg?: string;
  data?: GetOpExploreBotListData;
}

export interface GetOpSpaceListData {
  bot_space_list?: Array<BotSpace>;
}

export interface GetOpSpaceListRequest {
  /** space_name */
  name?: string;
}

export interface GetOpSpaceListResponse {
  code?: Int64;
  msg?: string;
  get_op_space_list_data?: GetOpSpaceListData;
}

export interface GetPluginListData {
  plugin_list?: Array<PluginData>;
  total?: Int64;
}

export interface GetPluginListRequest {
  page?: number;
  size?: number;
  status?: PluginStatus;
  plugin_ids?: Array<string>;
  space_id?: string;
  plugin_name?: string;
  order_by?: OrderBy;
}

export interface GetPluginListResponse {
  code?: Int64;
  msg?: string;
  data?: GetPluginListData;
}

export interface GetSSOUserInfoData {
  /** name */
  username?: string;
  /** region */
  region?: string;
  /** job number */
  employee_id?: Int64;
  /** email */
  email?: string;
  /** avatar address */
  avatar_url?: string;
  /** Userid of the developer platform */
  user_id?: string;
}

export interface GetSSOUserInfoRequest {}

export interface GetSSOUserInfoResponse {
  code?: Int64;
  msg?: string;
  data?: GetSSOUserInfoData;
}

export interface GetWaitListStatisticalRequest {}

export interface GetWaitListStatisticalResponse {
  code?: Int64;
  msg?: string;
  data: StatisticalInfo;
}

export interface GrantBotQualificationRequest {
  total?: Int64;
  timestamp?: Int64;
  user_ids?: Array<string>;
}

export interface GrantBotQualificationResponse {
  code?: Int64;
  msg?: string;
}

export interface HisData {
  name?: string;
  desc?: string;
  time?: string;
}

export interface Icon {
  url?: string;
  uri?: string;
}

export interface IntentCaseDetail {
  user_query?: string;
  answer?: string;
  system_prompt?: string;
  chat_history?: string;
  /** error type */
  case_type?: IntentCaseType;
  /** Currently selected Agent_id */
  current_agent_id?: string;
  /** After intent analysis, the Agent_id that should jump */
  analysis_agent_id?: string;
  date?: string;
  id?: string;
  /** The analysis reasons given by the model */
  analysis_reason?: string;
}

export interface IntentCaseStats {
  date?: string;
  /** The correct number of recalls */
  true_positive_cnt?: number;
  /** Rejection rate: reject_cnt/true_positive_cnt */
  reject_cnt?: number;
  /** Error recall rate: false_positive_cnt/(false_positive_cnt + true_positive_cnt) */
  false_positive_cnt?: number;
  /** Recall rate: false_negative_cnt/(true_positive_cnt + false_negative_cnt) */
  false_negative_cnt?: number;
}

export interface ListWaitingQueueRequest {
  page_size: number;
  page_no: number;
  wait_status?: WaitStatus;
  email?: string;
  user_id?: string;
  mobile?: string;
}

export interface ListWaitingQueueResponse {
  code?: Int64;
  msg?: string;
  data: WaitQueueData;
}

export interface LogoutRequest {}

export interface LogoutResponse {}

export interface MGetUserLabelInfoRequest {
  query_condition?: Array<string>;
  query_type?: QueryType;
}

export interface MGetUserLabelInfoResponse {
  code?: Int64;
  msg?: string;
  user_info?: Array<UserLabelInfo>;
}

export interface MGetUserUIDRequest {
  uid_list?: string;
}

export interface MGetUserUIDResponse {
  code?: Int64;
  msg?: string;
  data?: MGetUserUIDResponseData;
}

export interface MGetUserUIDResponseData {
  user_list?: Record<string, User>;
}

export interface MigBotSpaceAsyncTask {
  id?: string;
  primary_id?: string;
  task_name?: string;
  status?: AsyncStatus;
  task_info?: MigBotSpaceTaskInfo;
  sub_task_status?: MigBotSpaceSubTaskStatus;
  operator_id?: string;
  create_time?: string;
  bot_list?: Array<DraftBot>;
  trans_space?: TransBotSpace;
}

export interface MigBotSpaceSubTaskStatus {
  transfer_draft_bot_space?: boolean;
  transfer_plugin_space?: boolean;
  transfer_work_flow_space?: boolean;
  transfer_dataset_space?: boolean;
  transfer_card_space?: boolean;
  trans_fail_plugin?: Array<TransferFailResource>;
  trans_fail_dataset?: Array<TransferFailResource>;
}

export interface MigBotSpaceTaskInfo {
  target_space_id?: string;
  user_id?: string;
  bot_ids?: Array<string>;
}

export interface MigrateBotRequest {
  bot_ids?: Array<string>;
  target_space_id?: string;
}

export interface MigrateBotResponse {
  code?: Int64;
  msg?: string;
}

export interface ModelInfo {
  model?: string;
  temperature?: number;
  max_tokens?: number;
  top_p?: number;
  frequency_penalty?: number;
  presence_penalty?: number;
  ShortMemPolicy?: ShortMemPolicy;
  prompt_id?: number;
  card_ids?: Array<number>;
  model_name?: string;
}

export interface MSetPluginSpaceByIDsRequest {
  plugin_ids?: Array<string>;
  target_space_id: string;
}

export interface MSetPluginSpaceByIDsResponse {
  code?: Int64;
  msg?: string;
  repeat_plugin_list?: Array<BasicInfo>;
}

export interface Msg {
  message_id?: string;
  chat_start_time?: string;
  group_name?: string;
  user_id?: string;
  span_count?: number;
  llm_span_count?: number;
  tool_span_count?: number;
  tool_names?: Array<string>;
  content?: string;
  device_id?: string;
  connector_id?: string;
  log_id?: string;
}

export interface OfflineOfficialPluginRequest {
  /** Official plugin id */
  plugin_id: string;
}

export interface OfflineOfficialPluginResponse {
  code?: Int64;
  msg?: string;
}

export interface OnlineOfficialPluginRequest {
  /** Official plugin id */
  plugin_id: string;
}

export interface OnlineOfficialPluginResponse {
  code?: Int64;
  msg?: string;
}

export interface PluginApi {
  /** operationId */
  name?: string;
  /** summary */
  desc?: string;
  parameters?: Array<PluginParameter>;
  plugin_id?: string;
  plugin_name?: string;
  /** The serial number is the same as the playground */
  api_id?: string;
  record_id?: string;
  /** path */
  path?: string;
  response?: Array<PluginParameter>;
}

export interface PluginData {
  id?: string;
  name?: string;
  /** description_for_human */
  desc_for_human?: string;
  plugin_icon?: string;
  plugin_type?: PluginType;
  status?: PluginStatus;
  /** json */
  plugin_desc?: string;
  update_time?: Int64;
  creator?: string;
  space_id?: string;
  space_name?: string;
  /** number of citations */
  bot_quote?: number;
  /** plugin product status */
  plugin_product_status?: PluginProductStatus;
  /** release status */
  publish_status?: PluginPublishStatus;
  /** plugin channel */
  channel_id?: plugin_common.PluginChannel;
  /** plugin creator id */
  material_id?: string;
  /** tools */
  plugin_apis?: Array<PluginApi>;
  /** server url */
  server_url?: string;
}

export interface PluginParameter {
  name?: string;
  desc?: string;
  required?: boolean;
  type?: string;
  sub_parameters?: Array<PluginParameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: string;
  /** fromNodeId if the value of the imported parameter is a reference */
  from_node_id?: string;
  /** Which node's key is specifically referenced? */
  from_output?: Array<string>;
  /** If the imported parameter is the user's hand input, put it here */
  value?: string;
}

export interface PublishOfficialPluginRequest {
  /** Official plugin id */
  plugin_id: string;
}

export interface PublishOfficialPluginResponse {
  code?: Int64;
  msg?: string;
}

export interface RetryMigTaskRequest {
  task_id?: string;
  Base?: base.Base;
}

export interface RetryMigTaskResponse {
  code?: Int64;
  msg?: string;
}

export interface SaveCategoryRequest {
  categorys?: Array<ExploreBotCategory>;
}

export interface SaveCategoryResponse {
  code?: Int64;
  msg?: string;
}

export interface SaveUserLabelRequest {
  /** If the ID is passed, it will be updated, and if the ID is not passed, it will be created. */
  user_label?: bot_common.UserLabel;
}

export interface SaveUserLabelResponse {
  code?: Int64;
  msg?: string;
}

export interface SearchUserUIDRequest {
  /** Username, not nickname, requires precise search */
  username?: string;
}

export interface SearchUserUIDResponse {
  code?: Int64;
  msg?: string;
  data?: SearchUserUIDResponseData;
}

export interface SearchUserUIDResponseData {
  user_list?: Array<User>;
}

export interface ShortMemPolicy {
  ContextContentType?: ContextContentType;
  HistoryRound?: number;
}

export interface StatisticalInfo {
  today_add_wait_grant_count?: number;
  today_add_finish_grant_count?: number;
}

export interface TransBotSpace {
  SpaceId?: string;
  SpaceName?: string;
  OriSpaceId?: string;
  OriSpaceName?: string;
}

export interface TransferFailResource {
  id?: string;
  name?: string;
}

export interface UpdateAllowDomainRequest {
  /** Domain Name: Port */
  domain?: string;
}

export interface UpdateAllowDomainResponse {
  code?: Int64;
  msg?: string;
}

/** ------- change api_key ------- */
export interface UpdateApiKeyRequest {
  api_key_id?: string;
  operate_type?: number;
}

export interface UpdateApiKeyResponse {
  code?: Int64;
  msg?: string;
}

export interface UpdateExploreBotData {}

export interface UpdateExploreBotRequest {
  explore_bot_id: string;
  name?: string;
  description?: string;
  icon_uri?: string;
  index?: number;
  /** go online and go offline. */
  explore_status?: BotExploreStatus;
  /** delete */
  del_status?: BotDeleteStatus;
}

export interface UpdateExploreBotResponse {
  code?: Int64;
  msg?: string;
}

export interface UpdatePluginStatusRequest {
  plugin_id: string;
  status: PluginStatus;
}

export interface UpdatePluginStatusResponse {
  code?: Int64;
  msg?: string;
}

export interface UpdateUserLabelRequest {
  user_ids?: Array<string>;
  label_id?: string;
}

export interface UpdateUserLabelResponse {
  code?: Int64;
  msg?: string;
}

export interface UploadFileData {
  /** File URL */
  upload_url?: string;
  /** File URI, submit using this */
  upload_uri?: string;
}

export interface UploadFileRequest {
  /** Document related description */
  file_head?: CommonFileInfo;
  /** file data */
  data?: string;
}

export interface UploadFileResponse {
  code?: Int64;
  msg?: string;
  /** data */
  data?: UploadFileData;
}

export interface User {
  /** user uid */
  uid?: string;
  /** nickname */
  name?: string;
  /** avatar */
  avatar_url?: string;
}

export interface UserLabelInfo {
  user_id?: string;
  /** user name */
  user_unique_name?: string;
  user_label?: bot_common.UserLabel;
}

export interface WaitData {
  id?: string;
  uid?: string;
  mail?: string;
  using_for?: string;
  hear_from?: string;
  ext_message?: string;
  ip_region?: string;
  register_time?: string;
  grant_time?: string;
  grant_type?: GrantType;
  mobile?: string;
}

export interface WaitQueueData {
  waiting_count: number;
  waiting_list?: Array<WaitData>;
  page_size: number;
  page_no: number;
}

/** Information for each module in the workspace */
export interface WorkInfo {
  message_info?: string;
  /** 2:optional string   prompt */
  variable?: string;
  other_info?: string;
  history_info?: string;
  tools?: string;
  system_info_all?: string;
  dataset?: string;
  onboarding?: string;
  profile_memory?: string;
  table_info?: string;
  workflow?: string;
  task?: string;
  suggest_reply?: string;
}
/* eslint-enable */
