/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';

export type Int64 = string | number;

export interface ComponentMeta {
  /** A unique identifier for a component across spaces. Custom components may be determined by the component author himself. Readable. */
  type: string;
  /** The grouping to which the component belongs, such as ChatModel, Prompt, Retriever, etc. readable. */
  group: string;
  /** A Group corresponds to an interface name, which determines whether a specific slot can be entered. Readable. */
  interface_name: string;
  /** Group determines whether this component can enter the orchestration or only be configured as a slot. true can enter the orchestration and can be used as upstream of the passthrough node */
  is_composable: boolean;
  definition: Definition;
  /** In addition to the interface name above, what other interfaces can this component be used as to enter the corresponding Slot */
  assignable_to?: Array<string>;
}

export interface Definition {
  info: Info;
  /** For front-end frameworks, the server level is not aware of content */
  meta?: string;
  slots?: Array<Slot>;
  /** If a component can only enter the slot as a configuration, this field is empty */
  input?: TypeMeta;
  /** If a component can only enter the slot as a configuration, this field is empty */
  output?: TypeMeta;
  /** The fields inside are all expanded to basic types and written directly on the page. If a field in Config is a nested Object, that Object should not be a Component, otherwise it should enter the slot, not the config. */
  config?: TypeSchema;
}

export interface Doc {
  name: string;
  link: string;
}

export interface Info {
  name: string;
  icon?: string;
  description?: string;
  docs?: Array<Doc>;
}

export interface ListComponentsRequest {
  'FlowDevops-Agw-UserId'?: string;
  space_id: string;
  base?: base.Base;
}

export interface ListComponentsResponse {
  /** Key is group */
  official_components?: Record<string, Array<ComponentMeta>>;
  /** Key is group */
  custom_components?: Record<string, Array<ComponentMeta>>;
  base_resp?: base.BaseResp;
}

export interface Option {
  label: string;
  /** Result of JSON serialization */
  value: string;
}

export interface OptionEnum {
  ode?: string;
  options?: Array<Option>;
}

export interface Slot {
  /** readable */
  slot_name: string;
  /** The type accepted by this slot is usually an interface definition, which can be read */
  interface_name: string;
  required?: boolean;
  /** Array type slots */
  multiple?: boolean;
}

export interface TypeMeta {
  /** Type enumeration of input or output, number */
  type_id: string;
  /** A schema description of a structure, which can be input, output, config, or a field in it */
  schema: TypeSchema;
  /** readable */
  type_name?: string;
}

export interface TypeSchema {
  /** readable */
  type: string;
  /** When the type is an array, there is a value that represents the schema of the elements in the array */
  items?: TypeSchema;
  /** When the type is object, there is a value, the key is the field name, and the value is the schema of the field. */
  properties?: Record<string, TypeSchema>;
  /** When the type is object, there is a value, and the array elements are schemas for fields. */
  property_list?: Array<TypeSchema>;
  name?: string;
  title?: string;
  description?: string;
  /** Result of JSON serialization */
  default_value?: string;
  hidden?: boolean;
  read_only?: boolean;
  required?: boolean;
  option_enum?: OptionEnum;
  /** Customized information required by the front end, not perceived by the server level */
  style_meta?: string;
}
/* eslint-enable */
