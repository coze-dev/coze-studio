/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum AgentBacktrackMode {
  Current = 1,
  Previous = 2,
  Start = 3,
  MostSuitable = 4,
}

export enum AgentRecognitionMode {
  FunctionCall = 1,
  Independent = 2,
}

export enum AgentSessionType {
  /** The next conversation starts by default from the agent who replied last time. */
  Flow = 1,
  /** All conversations start at the start node. */
  Host = 2,
}

export enum AgentType {
  StartAgent = 0,
  LLMAgent = 1,
  TaskAgent = 2,
  GlobalAgent = 3,
  BotAgent = 4,
}

export enum BotMode {
  SingleAgent = 0,
  MultiAgent = 1,
}

export enum BotSource {
  Doubao = 0,
  Coze = 1,
}

export enum ContextMode {
  Chat = 0,
  FunctionCall1 = 1,
  FunctionCall2 = 2,
  FunctionCall3 = 3,
}

export enum FieldItemType {
  /** Text String */
  Text = 1,
  /** Digital Integer */
  Number = 2,
  /** Time Time */
  Date = 3,
  /** float Number */
  Float = 4,
  /** bool Boolean */
  Boolean = 5,
}

export enum FileboxInfoMode {
  /** Close file box */
  Off = 0,
  /** Open the file box */
  On = 1,
}

export enum IndependentRecognitionModelType {
  /** Small model */
  SLM = 0,
  /** Large model */
  LLM = 1,
}

export enum IndependentTiming {
  /** Determine user input (front) */
  Pre = 1,
  /** Determine node output (postfix) */
  Post = 2,
  /** Front mode and rear mode support simultaneous selection */
  PreAndPost = 3,
}

export enum KnowledgeSearchMode {
  /** semantic search */
  SemanticSearch = 0,
  /** Hybrid Search */
  HybirdSearch = 1,
  /** Full Text Search */
  FullTextSearch = 20,
}

export enum ResponseFormat {
  Text = 0,
  Markdown = 1,
  JSON = 2,
}

export enum SuggestReplyMode {
  System = 0,
  Custom = 1,
  Disable = 2,
  OriBot = 3,
}

export enum TimeCapsuleMode {
  /** shutting down long-term memory */
  Off = 0,
  /** Unlocking long-term memory */
  On = 1,
}

export enum VersionType {
  /** Online version */
  Online = 0,
  /** pre-release version */
  Pre = 1,
}

export interface Ability {
  /** function switch */
  switch_conf?: SwitchConf;
  /** plugin */
  plugin_list?: Array<PluginAPI>;
  /** Workflow */
  workflow_list?: Array<WorkflowAPI>;
  /** Knowledge Base */
  knowledge_list?: Array<Knowledge>;
  /** variable */
  variable_list?: Array<Variable>;
  /** database */
  database_list?: Array<Database>;
  /** long-term memory */
  time_capsule?: TimeCapsule;
  /** File box */
  file_box?: FileBox;
  /** trigger */
  trigger?: Trigger;
  /** Mini Program */
  applet?: Applet;
  /** Question suggestion */
  suggest?: Suggest;
  ext?: Ext;
}

export interface Agent {
  /** Agent basic information */
  agent_basic?: AgentBasic;
  /** Hook configuration */
  hook_info?: HookInfo;
  /** model information */
  model?: Model;
  /** Static information and hints for requests sent to LLM */
  prompt_info?: PromptInfo;
  /** Agent function configuration */
  ability?: Ability;
  /** jump configuration */
  jump_config?: AgentJumpConfig;
}

export interface AgentBasic {
  /** agent id */
  agent_id?: string;
  /** Agent name */
  name?: string;
  /** Agent avatar uri */
  icon_uri?: string;
  /** Agent type */
  agent_type?: AgentType;
  /** The bot id when the agent is a child bot. */
  reference_bot_id?: Int64;
  /** The bot version when the agent is a child bot */
  reference_bot_version?: string;
  /** Is it the root agent? */
  is_root_agent?: boolean;
}

export interface AgentIntent {
  /** jump condition */
  intent?: string;
  /** Agent id to jump to */
  next_agent_id?: string;
}

export interface AgentJumpConfig {
  backtrack?: AgentBacktrackMode;
  recognition?: AgentRecognitionMode;
  agent_intent?: Array<AgentIntent>;
  /** Agent application scenario */
  description?: string;
  /** Which node is the new round of session sent to? */
  session_type?: AgentSessionType;
  independent_conf?: IndependentModeConfig;
}

export interface Applet {
  /** Whether to bind the Mini Program */
  binding_mp?: boolean;
}

export interface Database {
  /** table id */
  table_id?: string;
  /** table name */
  table_name?: string;
  /** table description */
  table_desc?: string;
  /** Table field information */
  field_list?: Array<FieldItem>;
  /** Whether to support calling in Prompt, the default is supported */
  prompt_disabled?: boolean;
}

export interface Ext {
  /** Card List */
  card_id?: Array<string>;
}

export interface FieldItem {
  /** field name */
  name?: string;
  /** Field description */
  desc?: string;
  /** field type */
  type?: FieldItemType;
  /** Is it required? */
  must_required?: boolean;
  /** The field Id is added as 0. */
  id?: string;
  /** Field type str */
  type_str?: string;
}

export interface FileBox {
  /** List of sub-APIs contained in the file box */
  sub_api_list?: Array<PluginAPI>;
  mode?: FileboxInfoMode;
}

export interface HookInfo {
  /** Pre agent jump hook */
  pre_agent_jump_hook?: Array<HookItem>;
  /** Post agent jump hook */
  post_agent_jump_hook?: Array<HookItem>;
  /** Process hook */
  flow_hook?: Array<HookItem>;
  /** Atomic power hook */
  atomic_hook?: Array<HookItem>;
  /** Model call hook */
  llm_call_hook?: Array<HookItem>;
  /** Conversation result hook */
  res_parsing_hook?: Array<HookItem>;
  /** suggesion hook */
  suggestion_hook?: Array<HookItem>;
}

export interface HookItem {
  uri?: string;
  filter_rules?: Array<string>;
  strong_dep?: boolean;
  timeout_ms?: Int64;
}

export interface IndependentModeConfig {
  /** Judge the timing */
  judge_timing?: IndependentTiming;
  model_type?: IndependentRecognitionModelType;
  history_round?: number;
  model_id?: string;
  prompt?: string;
}

export interface Knowledge {
  /** Knowledge Base ID */
  id?: string;
  /** Knowledge base name */
  name?: string;
  /** number of recalls */
  top_k?: number;
  /** Minimum similarity threshold for recall */
  min_score?: number;
  /** Is it automatically recalled? */
  auto?: boolean;
  /** search strategy */
  search_mode?: KnowledgeSearchMode;
  /** Whether to show the source */
  show_source?: boolean;
}

export interface Model {
  /** Model ID */
  model_id?: string;
  /** temperature */
  temperature?: number;
  /** number of samples */
  top_k?: number;
  /** Sampling probability threshold */
  top_p?: number;
  /** frequency penalty */
  frequency_penalty?: number;
  /** There is punishment */
  presence_penalty?: number;
  /** Maximum reply length of the model */
  max_tokens?: number;
  /** reply format */
  response_format?: ResponseFormat;
  /** Compatible logic, historical logic is false, new addition passes true */
  use_optional_param?: boolean;
  /** Non-generic fields, passed in through json, passed through to the model */
  flex_config?: string;
}

export interface PluginAPI {
  /** Plugin ID */
  plugin_id?: string;
  /** api id */
  api_id?: string;
  /** API name */
  api_name?: string;
}

export interface PromptInfo {
  /** Bot design and reply logic */
  bot_persona?: string;
  /** Bot template name */
  template_name?: string;
  /** Types of context transfer allowed */
  context_mode?: ContextMode;
  /** Preserved historical dialogue maximum rounds */
  history_round?: number;
}

export interface Suggest {
  /** Suggest generation pattern */
  reply_mode?: SuggestReplyMode;
  /** Custom build prompt */
  customized_prompt?: string;
  /** Customize the task name corresponding to the build */
  task_name?: string;
}

export interface SwitchConf {
  /** Whether to enable plug-in function */
  enable_plugin?: boolean;
  /** Whether to start workflow */
  enable_workflow?: boolean;
  /** Whether to open the knowledge base */
  enable_knowledge?: boolean;
  /** Whether to use variables */
  enable_variable?: boolean;
  /** Whether to use a database */
  enable_database?: boolean;
  /** Whether to use long-term memory */
  enable_time_capsule?: boolean;
  /** Whether to use a file box */
  enable_file_box?: boolean;
  /** Whether to use triggers */
  enable_trigger?: boolean;
  /** Whether to use the Mini Program plugin */
  enable_applet?: boolean;
  /** Whether to suggest */
  enable_suggest?: boolean;
}

export interface TimeCapsule {
  mode?: TimeCapsuleMode;
}

export interface Trigger {
  /** Whether to allow bots to create tasks while talking to users */
  allow_user_task?: boolean;
  /** Is there a preset task? */
  enable_preset_task?: boolean;
}

export interface Variable {
  /** Variable key */
  key?: string;
  /** variable description */
  description?: string;
  /** variable default value */
  default_value?: string;
  /** Whether the system value is the system value */
  is_system?: boolean;
  /** Whether to support calling in Prompt, the default is supported */
  prompt_disabled?: boolean;
}

export interface WorkflowAPI {
  /** workflow id */
  workflow_id?: string;
  /** Plugin ID */
  plugin_id?: string;
  /** api id */
  api_id?: string;
}
/* eslint-enable */
