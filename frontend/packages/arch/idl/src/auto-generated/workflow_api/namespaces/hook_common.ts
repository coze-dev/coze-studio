/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as copilot_common from './copilot_common';
import * as bot_schema from './bot_schema';

export type Int64 = string | number;

/** Returns the operation of the underlying type. Basic types include: string, int, double, bool... */
export enum BasicTypeOP {
  /** No operation, maintain the current BotEngine state */
  None = 0,
  /** replace */
  Replace = 1,
  /** delete */
  Delete = 2,
}

/** /////////////////////// returns the protocol base type ///////////////////////////////////////////////////////
 For the design paradigm of a protocol that returns fields that need to be modified:
 1. Return the base type field to be modified, and define the field with the corresponding base type OP
 struct Result {
     1: optional Int64OP bot_id//Modified bot_idbot_id
     2: optional Int32OP bot_version//Modified bot_versionersion
 }

 2. To modify the composite type field, use CompositeTypeOP to construct an OP structure
 struct PluginListOP {
     1: CompositeTypeOP op//operation typeation type
     2: optional list < PluginAPI > plugin_list//pluginsugin
 }

 struct PluginAPI {
    1: required i64 plugin_id//plugin idin ID
    2: required string api_name//api nameame
}
 
 struct Result {
     1: optional Int64OP bot_id//Modified bot_idbot_id
     2: optional Int32OP bot_version//Modified bot_versionersion
     3: optional PluginListOP plugin_list//Modified plugin list modified plugins
 }
 
 3. If the nested type of the composite type to be modified during the evolution of subsequent protocol versions, such as adding fields to the nested struct type,
   For forward compatibility, the added field needs to use the type defined by the OP. Take the PluginAPI example above
 struct PluginAPI {
    1: required i64 plugin_id//plugin idin ID
    2: required string api_name//api nameame
    3: optional StrOP api_desc//api descriptionescription
}
 Returns an operation on a composite type. Composite types include: list, map, set, struct... */
export enum CompositeTypeOP {
  /** No operation, maintain the current BotEngine state */
  None = 0,
  /** Replace. If it is a composite type, such as list or map, the BotEngine collection will be replaced as a whole with the returned */
  ReplaceAll = 1,
  /** Adding or replacing elements to a collection is only valid for composite types, such as list and map, which merge the returned collection with the original BotEngine collection */
  Merge = 2,
}

export enum ExecuteMode {
  Unknown = 0,
  TestRun = 1,
  Run = 2,
}

export interface BizInfo {
  message_id?: Int64;
  conversation_id?: Int64;
  section_id?: Int64;
  conversation_type?: copilot_common.ConversationType;
}

export interface BotContext {
  bot_id: Int64;
  /** Single for bot_id */
  agent_id?: Int64;
  bot_version?: Int64;
  connector_id?: Int64;
  connector_uid?: string;
  /** Extended fields for chat scenes */
  scene_context?: Record<string, string>;
  /** User query */
  message?: Message;
  /** chat history */
  chat_context?: Array<Message>;
  /** ab parameter */
  ab_bot_engine?: string;
  /** 10: optional string ab_gpt_engine//gpt engine ab parameterers, not for the time being
Full ab parameters, very large, on demand */
  ab_param?: string;
  /** bot scheam */
  agent_schema?: bot_schema.Agent;
  /** Preorder hook write, pass through to each downstream */
  context_ext?: Record<string, string>;
  /** tool authentication information */
  auth_info?: copilot_common.ToolsAuthInfo;
  /** interrupt-restore signal */
  resume_info?: copilot_common.ResumeInfo;
}

export interface FunctionCall {
  name?: string;
  arguments?: string;
}

export interface Message {
  /** Value: system/user/assistant/tool/placeholder */
  role: string;
  content?: string;
  /** Some models support names, function message names are tool names */
  name?: string;
  /** Invoke procedure, existing only in the assistant message */
  tool_calls?: Array<ToolCall>;
  /** Call id, corresponding to id in tool_calls */
  tool_call_id?: string;
  function_call?: FunctionCall;
  /** Geographic location information will only be transmitted if authorized on the end. */
  location?: copilot_common.LocationInfo;
  /** Uploaded file */
  files?: Array<copilot_common.FileInfo>;
  /** Uploaded picture */
  images?: Array<copilot_common.ImageInfo>;
  /** business information */
  biz_info?: BizInfo;
  ext?: Record<string, string>;
  /** unique id */
  unique_id?: string;
}

export interface ToolCall {
  id?: string;
  type?: string;
  function?: FunctionCall;
  unique_id?: string;
}
/* eslint-enable */
