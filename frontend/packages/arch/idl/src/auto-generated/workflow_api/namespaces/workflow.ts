/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';

export type Int64 = string | number;

/** Subdivision types for File type parameters */
export enum AssistParameterType {
  DEFAULT = 1,
  IMAGE = 2,
  DOC = 3,
  CODE = 4,
  PPT = 5,
  TXT = 6,
  EXCEL = 7,
  AUDIO = 8,
  ZIP = 9,
  VIDEO = 10,
  SVG = 11,
  Voice = 12,
}

export enum AsyncSubWorkflowStatus {
  Waiting = 1,
  Running = 2,
  Success = 3,
  Fail = 4,
  Cancel = 5,
}

export enum AuthAction {
  Create = 1,
  Delete = 2,
  Save = 3,
  Submit = 4,
  Publish = 5,
  Merge = 6,
  Diff = 7,
  Revert = 8,
  Read = 9,
  ListHistory = 10,
  ListCollaborator = 11,
  SpaceAdmin = 12,
  SpaceOperator = 13,
  ListPluginPrice = 14,
}

export enum AuthType {
  Pass = 1,
  UnPass = 2,
}

export enum BasicNodeType {
  PluginAPI = 1,
  /** base node template */
  NodeTemplate = 2,
}

export enum BindBizType {
  Agent = 1,
  Scene = 2,
  /** Douyin doppelganger */
  DouYinBot = 3,
}

export enum BindStageType {
  Default = 0,
  Draft = 1,
  Commit = 2,
  Publish = 3,
}

export enum BrushDataType {
  /** Refresh all data */
  All = 1,
  /** Refresh by workflow ID */
  WorkflowId = 2,
  /** Refresh by space ID */
  SpaceId = 3,
  /** Refresh according to the ID range, you need to have an auto-incrementing primary key. */
  IdRange = 4,
}

export enum Caller {
  Canvas = 1,
  UIBuilder = 2,
}

export enum CheckType {
  /** In the returned process list, if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT, the is_pass of CheckResult is true */
  WebSDKPublish = 1,
  /** In the returned process list, if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT, the is_pass of CheckResult is true */
  SocialPublish = 2,
  /** In the returned process list, if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT, the is_pass of CheckResult is true; but if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT but the node in the process contains multi-session nodes, then the is_pass of CheckResult is false */
  BotAgent = 3,
  /** In the returned process list, if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT, the is_pass of CheckResult is true */
  BotSocialPublish = 4,
  /** In the returned process list, if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT, the is_pass of CheckResult is true; but if the process is a dialog flow, or the process imported parameter is BOT_USER_INPUT but the node in the process contains multi-session nodes, then the is_pass of CheckResult is false */
  BotWebSDKPublish = 5,
  /** In the returned process list, if the process is a workflow and contains a node containing a session management class node, or a question and answer node, or an input node, or an end plug-in node, the is_pass of CheckResult is false; if the process is a dialog flow, the is_pass of CheckResult is false; */
  MCPPublish = 6,
}

export enum CollaboratorMode {
  /** Turn off multiplayer collaboration mode */
  Close = 0,
  /** Enable multiplayer collaboration mode */
  Open = 1,
}

export enum CollaboratorOperationType {
  Add = 1,
  Remove = 2,
}

export enum CollaboratorType {
  /** Get workflow data with collaborator mode = 0 */
  GetHasCollaborator = 0,
  /** Get workflow data with no collaborator mode = 1 */
  GetNoCollaborator = 1,
  /** Update workflow data with collaborator mode = 0 */
  UpdateHasCollaborator = 2,
  /** Update workflow data with no collaborator mode = 1 */
  UpdateNoCollaborator = 3,
}

export enum ConditionType {
  Equal = 1,
  NotEqual = 2,
  LengthGt = 3,
  LengthGtEqual = 4,
  LengthLt = 5,
  LengthLtEqual = 6,
  Contains = 7,
  NotContains = 8,
  Null = 9,
  NotNull = 10,
  True = 11,
  False = 12,
  Gt = 13,
  GtEqual = 14,
  Lt = 15,
  LtEqual = 16,
}

export enum ContentType {
  Unknown = 0,
  Text = 1,
  Card = 3,
  Verbose = 4,
  Interrupt = 5,
}

export enum CreateEnv {
  Draft = 1,
  Release = 2,
}

export enum CreateMethod {
  ManualCreate = 1,
  NodeCreate = 2,
}

export enum DatasetType {
  Coze = 0,
  Volcano = 1,
}

/** Default imported parameter settings source */
export enum DefaultParamSource {
  /** default user input */
  Input = 0,
  /** reference variable */
  Variable = 1,
}

export enum DeleteAction {
  /** Blockwise Unbinding */
  BlockwiseUnbind = 1,
  /** Blockwise removal */
  BlockwiseDelete = 2,
}

export enum DeleteStatus {
  SUCCESS = 0,
  FAIL = 1,
}

export enum DeleteType {
  /** Can be deleted: No workflow product/product removed from the shelves/first time on the shelves and the review failed */
  CanDelete = 0,
  /** Review failed after deletion: The workflow product is on the shelves for the first time and is under review. */
  RejectProductDraft = 1,
  /** Products that need to be removed from the shelves first: workflow products have been put on the shelves. */
  UnListProduct = 2,
}

export enum DiffTypeMeta {
  /** Neither the draft nor the latest submitted version has been revised */
  NoChanges = 1,
  /** The draft has been revised */
  ChangesByDraft = 2,
  /** The latest modification */
  ChangesByLatest = 3,
  /** The draft and the latest submission have been revised */
  Conflict = 4,
}

export enum EventType {
  LocalPlugin = 1,
  Question = 2,
  RequireInfos = 3,
  SceneChat = 4,
  InputNode = 5,
  WorkflowLocalPlugin = 6,
  WorkflowOauthPlugin = 7,
}

export enum ExeternalRunMode {
  Sync = 0,
  Stream = 1,
}

export enum FieldType {
  Object = 1,
  String = 2,
  Integer = 3,
  Bool = 4,
  Array = 5,
  Number = 6,
}

export enum IfConditionRelation {
  And = 1,
  Or = 2,
}

export enum ImageflowTabType {
  /** Default, base node */
  BasicNode = 0,
  /** ToolMarket = 1//ToolMarket, subsequent expansion */ subsequent expansion */
  All = 10,
}

export enum InputMode {
  /** Type input */
  text = 1,
  /** Voice input */
  audio = 2,
}

export enum InputType {
  String = 1,
  Integer = 2,
  Boolean = 3,
  Number = 4,
  Array = 5,
  Object = 6,
}

/** This enumeration needs to be aligned with the plugin's PluginInterruptType */
export enum InterruptType {
  LocalPlugin = 1,
  Question = 2,
  RequireInfos = 3,
  SceneChat = 4,
  Input = 5,
  OauthPlugin = 7,
}

export enum NodeExeStatus {
  Waiting = 1,
  Running = 2,
  Success = 3,
  Fail = 4,
}

export enum NodeHistoryScene {
  Default = 0,
  TestRunInput = 1,
}

export enum NodePanelSearchType {
  /** Search all types */
  All = 0,
  /** Search the workflow in the repository */
  ResourceWorkflow = 1,
  /** Search workflow in project */
  ProjectWorkflow = 2,
  /** Search for favorite plugins */
  FavoritePlugin = 3,
  /** Search for plugins in the repository */
  ResourcePlugin = 4,
  /** Search for plugins in the project */
  ProjectPlugin = 5,
  /** Search for plugins in the plugin store */
  StorePlugin = 6,
}

export enum NodeTemplateLinkLimit {
  Both = 1,
  JustRight = 2,
  JustLeft = 3,
}

export enum NodeTemplateStatus {
  Valide = 1,
  Invalide = 2,
}

/** The node template type is basically the same as NodeType. One copy is due to the addition of an Imageflow type to avoid affecting the business semantics of the original NodeType */
export enum NodeTemplateType {
  Start = 1,
  End = 2,
  LLM = 3,
  Api = 4,
  Code = 5,
  Dataset = 6,
  If = 8,
  SubWorkflow = 9,
  Variable = 11,
  Database = 12,
  Message = 13,
  Imageflow = 14,
  Text = 15,
  ImageGenerate = 16,
  ImageReference = 17,
  Question = 18,
  Break = 19,
  LoopSetVariable = 20,
  Loop = 21,
  Intent = 22,
  DrawingBoard = 23,
  SceneVariable = 24,
  SceneChat = 25,
  DatasetWrite = 27,
  Batch = 28,
  Continue = 29,
  Input = 30,
  AssignVariable = 40,
  DatabaseUpdate = 42,
  DatabasesELECT = 43,
  DatabaseDelete = 44,
  Http = 45,
  DatabaseInsert = 46,
  ConversationUpdate = 51,
  ConversationDelete = 52,
  ConversationList = 53,
  ConversationHistoryList = 54,
  MessageCreate = 55,
  MessageUpdate = 56,
  MessageDelete = 57,
  ToJSON = 58,
  FromJSON = 59,
  DatasetDelete = 60,
  Audio2Text = 61,
  Text2Audio = 62,
  VideoAudioExtractor = 63,
  VideoFrameExtractor = 64,
  VideoGeneration = 65,
}

/** Node structure */
export enum NodeType {
  Start = 1,
  End = 2,
  LLM = 3,
  Api = 4,
  Code = 5,
  Dataset = 6,
  If = 8,
  SubWorkflow = 9,
  Variable = 11,
  Database = 12,
  Message = 13,
  Text = 15,
  ImageGenerate = 16,
  ImageReference = 17,
  Question = 18,
  Break = 19,
  LoopSetVariable = 20,
  Loop = 21,
  Intent = 22,
  DrawingBoard = 23,
  SceneVariable = 24,
  SceneChat = 25,
  DatasetWrite = 27,
  Batch = 28,
  Continue = 29,
  Input = 30,
  AssignVariable = 40,
  DatabaseUpdate = 42,
  DatabasesELECT = 43,
  DatabaseDelete = 44,
  Http = 45,
  DatabaseInsert = 46,
  ConversationUpdate = 51,
  ConversationDelete = 52,
  ConversationList = 53,
  ConversationHistoryList = 54,
  MessageCreate = 55,
  MessageUpdate = 56,
  MessageDelete = 57,
  ToJSON = 58,
  FromJSON = 59,
  DatasetDelete = 60,
  Audio2Text = 61,
  Text2Audio = 62,
  VideoAudioExtractor = 63,
  VideoFrameExtractor = 64,
  VideoGeneration = 65,
}

export enum OAuthStatus {
  Authorized = 1,
  Unauthorized = 2,
}

export enum OperateType {
  DraftOperate = 0,
  SubmitOperate = 1,
  PublishOperate = 2,
  PubPPEOperate = 3,
  SubmitPublishPPEOperate = 4,
}

export enum OrderBy {
  CreateTime = 0,
  UpdateTime = 1,
  PublishTime = 2,
  Hot = 3,
  Id = 4,
}

export enum OrderByType {
  Asc = 1,
  Desc = 2,
}

export enum ParameterLocation {
  Path = 1,
  Query = 2,
  Body = 3,
  Header = 4,
}

export enum ParameterType {
  String = 1,
  Integer = 2,
  Number = 3,
  Object = 4,
  Array = 5,
  Bool = 6,
}

export enum ParamRequirementType {
  CanNotDelete = 1,
  CanNotChangeName = 2,
  CanChange = 3,
  CanNotChangeAnything = 4,
}

export enum PermissionType {
  /** Can't view details */
  NoDetail = 1,
  /** You can check the details. */
  Detail = 2,
  /** Can be viewed and operated */
  Operate = 3,
}

export enum PersistenceModel {
  DB = 1,
  VCS = 2,
  External = 3,
}

export enum PluginParamTypeFormat {
  ImageUrl = 1,
}

export enum PluginType {
  PLUGIN = 1,
  APP = 2,
  FUNC = 3,
  WORKFLOW = 4,
  IMAGEFLOW = 5,
  LOCAL = 6,
}

export enum PrincipalType {
  User = 1,
  Service = 2,
}

/** Workflow Product Review Draft Status */
export enum ProductDraftStatus {
  /** default */
  Default = 0,
  /** Under review. */
  Pending = 1,
  /** approved */
  Approved = 2,
  /** The review failed. */
  Rejected = 3,
  /** Abandoned */
  Abandoned = 4,
}

export enum ReqSource {
  /** default */
  Default = 0,
  /** store service */
  Product = 1,
}

export enum ResourceType {
  Account = 1,
  Workspace = 2,
  App = 3,
  Bot = 4,
  Plugin = 5,
  Workflow = 6,
  Knowledge = 7,
  PersonalAccessToken = 8,
  Connector = 9,
  Card = 10,
  CardTemplate = 11,
  Conversation = 12,
  File = 13,
  ServicePrincipal = 14,
  Enterprise = 15,
}

export enum SchemaType {
  /** abandoned */
  DAG = 0,
  FDL = 1,
  /** abandoned */
  BlockWise = 2,
}

export enum SendVoiceMode {
  /** text message */
  text = 1,
  /** Send as voice */
  audio = 2,
}

export enum SuggestReplyInfoMode {
  /** close */
  Disable = 0,
  /** system */
  System = 1,
  /** custom */
  Custom = 2,
}

export enum SupportBatch {
  /** 1: Not supported */
  NOT_SUPPORT = 1,
  /** 2: Support */
  SUPPORT = 2,
}

export enum Tag {
  All = 1,
  Hot = 2,
  Information = 3,
  Music = 4,
  Picture = 5,
  UtilityTool = 6,
  Life = 7,
  Traval = 8,
  Network = 9,
  System = 10,
  Movie = 11,
  Office = 12,
  Shopping = 13,
  Education = 14,
  Health = 15,
  Social = 16,
  Entertainment = 17,
  Finance = 18,
  Hidden = 100,
}

export enum TerminatePlanType {
  USELLM = 1,
  USESETTING = 2,
}

export enum UserBehaviorType {
  /** Open collaborator */
  OpenCollaborators = 1,
  /** Add collaborators */
  AddCollaborators = 2,
}

export enum UserLevel {
  Free = 0,
  PremiumLite = 10,
  Premium = 15,
  PremiumPlus = 20,
  V1ProInstance = 100,
  ProPersonal = 110,
  Team = 120,
  Enterprise = 130,
}

export enum ValidateErrorType {
  BotValidateNodeErr = 1,
  BotValidatePathErr = 2,
  BotConcurrentPathErr = 3,
}

export enum VCSCanvasType {
  Draft = 1,
  Submit = 2,
  Publish = 3,
}

export enum VersionType {
  Unknown = 0,
  WorkflowVersion = 1,
  CommitIDVersion = 2,
}

export enum VolcanoDatasetStatus {
  DatasetValid = 0,
  DatasetInvalid = 1,
}

/** The status of the process submission, 1 Not Submittable 2 Submittable 3 Submitted 4 Obsolete */
export enum WorkFlowDevStatus {
  /** Not submittable (process not committed and the latest version did not test run successfully) */
  CanNotSubmit = 1,
  /** Not committed and submittable (process not committed but the latest version test ran successfully) */
  CanSubmit = 2,
  /** Submitted */
  HadSubmit = 3,
  /** delete */
  Deleted = 4,
}

export enum WorkflowExecuteMode {
  TestRun = 1,
  Run = 2,
  NodeDebug = 3,
}

export enum WorkflowExeHistoryStatus {
  NoHistory = 1,
  HasHistory = 2,
}

export enum WorkflowExeStatus {
  Running = 1,
  Success = 2,
  Fail = 3,
  Cancel = 4,
}

export enum WorkFlowListStatus {
  UnPublished = 1,
  HadPublished = 2,
}

/** WorkflowMode is used to distinguish between Workflow and chatflow. */
export enum WorkflowMode {
  Workflow = 0,
  Imageflow = 1,
  SceneFlow = 2,
  ChatFlow = 3,
  /** Use only when querying */
  All = 100,
}

export enum WorkflowRunMode {
  Sync = 0,
  Stream = 1,
  Async = 2,
}

export enum WorkflowSnapshotStatus {
  Canvas = 0,
  Published = 1,
}

/** The status of the process release, 1 cannot be released 2 can be released 3 released 4 deleted 5 removed from the shelves */
export enum WorkFlowStatus {
  /** Not publishable (the process is not published and the latest commit did not test run successfully) */
  CanNotPublish = 1,
  /** Unpublished and publishable (process not published but the latest committed version has been tested run successfully) */
  CanPublish = 2,
  /** Published */
  HadPublished = 3,
  /** delete */
  Deleted = 4,
  /** off the shelf */
  Unlisted = 5,
}

export enum WorkflowStorageType {
  /** In the resource library */
  Library = 1,
  /** Within a project */
  Project = 2,
}

export enum WorkFlowType {
  /** user defined */
  User = 0,
  /** official template */
  GuanFang = 1,
}

/** flow_mode */
export enum WorkflowUpdateEventType {
  UpdateUser = 1,
  UpdateSpace = 2,
}

export enum WorkflowVCSScriptType {
  Multiple = 1,
  Gray = 2,
  Space = 3,
}

export enum WorkflowVersionScriptType {
  Multiple = 1,
  All = 2,
}

export interface APIDetail {
  /** API ID */
  id?: string;
  name?: string;
  description?: string;
  parameters?: Array<APIParameter>;
  plugin_id?: string;
}

export interface ApiDetailData {
  /** The unique identifier of the plug-in. */
  pluginID?: string;
  /** The name of the API. */
  apiName?: string;
  /** The input parameter definition of the API, usually in JSON string format, describes the structure, type, and other meta-information of the input parameter. */
  inputs?: unknown;
  /** The output parameter definition of the API, usually in JSON string format, describes the structure and type of the output result. */
  outputs?: unknown;
  /** API's icon URL. */
  icon?: string;
  /** API Display Name and Label */
  name?: string;
  desc?: string;
  /** The status of the plugin, default: 0, listed/published: 1, removed: 2, under review: 3. */
  pluginProductStatus?: Int64;
  pluginProductUnlistType?: Int64;
  /** The space ID to which the API belongs. */
  spaceID?: string;
  debug_example?: DebugExample;
  updateTime?: Int64;
  projectID?: string;
  version?: string;
  pluginType?: PluginType;
  latest_version?: string;
  latest_version_name?: string;
  version_name?: string;
  /** You only need to care about the scenario with a value of 3. If auth = 3, it means Oauth plugin. */
  auth?: number;
  /** 0: All Channels; 1: Material; 2: Store */
  channel_id?: Int64;
}

export interface APIParam {
  plugin_id?: string;
  api_id?: string;
  plugin_version?: string;
  plugin_name?: string;
  api_name?: string;
  out_doc_link?: string;
  tips?: string;
}

export interface APIParameter {
  /** For the front end, no practical significance */
  id?: string;
  name?: string;
  desc?: string;
  type?: ParameterType;
  sub_type?: ParameterType;
  location?: ParameterLocation;
  is_required?: boolean;
  sub_parameters?: Array<APIParameter>;
  global_default?: string;
  global_disable?: boolean;
  local_default?: string;
  local_disable?: boolean;
  format?: string;
  title?: string;
  enum_list?: Array<string>;
  value?: string;
  enum_var_names?: Array<string>;
  minimum?: number;
  maximum?: number;
  exclusive_minimum?: boolean;
  exclusive_maximum?: boolean;
  biz_extend?: string;
  /** Default imported parameter settings source */
  default_param_source?: DefaultParamSource;
  /** Reference variable key */
  variable_ref?: string;
  assist_type?: AssistParameterType;
}

export interface APIStruct {
  Name?: string;
  Type?: FieldType;
  Children?: Array<APIStruct>;
}

export interface AsyncConf {
  switch_status?: boolean;
  message?: string;
}

export interface AsyncSubWorkflowResult {
  workflow_id?: string;
  nodeId?: string;
  executeId?: string;
  status?: AsyncSubWorkflowStatus;
  create_time?: Int64;
  update_time?: Int64;
  operator_id?: string;
  error_code?: string;
  error_msg?: string;
  extra?: string;
  parent_execute_id?: string;
}

export interface AudioConfig {
  /** Key for language "zh", "en" "ja" "es" "id" "pt" */
  voice_config_map?: Record<string, VoiceConfig>;
  /** Text to speech switch */
  is_text_to_voice_enable?: boolean;
  /** agent message form */
  agent_message_type?: InputMode;
}

export interface AvatarConfig {
  image_uri?: string;
  image_url?: string;
}

export interface BackgroundImageDetail {
  /** original image */
  origin_image_uri?: string;
  origin_image_url?: string;
  /** Actual use of pictures */
  image_uri?: string;
  image_url?: string;
  theme_color?: string;
  /** Gradual change of position */
  gradient_position?: GradientPosition;
  /** Crop canvas position */
  canvas_position?: CanvasPosition;
}

export interface BackgroundImageInfo {
  /** Web background cover */
  web_background_image?: BackgroundImageDetail;
  /** Mobile end background cover */
  mobile_background_image?: BackgroundImageDetail;
}

export interface Batch {
  /** Is the batch switch on? */
  is_batch?: boolean;
  /** Only process input in the range [0, take_count) */
  take_count?: Int64;
  /** Batch input required */
  input_param?: Parameter;
}

export interface BatchDeleteProjectConversationRequest {
  project_id: string;
  space_id: string;
  /** When deleting all, pass all uniqueID of the list */
  unique_id_list: Array<string>;
  /** Is the current debugging state? */
  draft_mode: boolean;
  /** Pass the current channel id in non-debugging state */
  connector_id: string;
  Base?: base.Base;
}

export interface BatchDeleteProjectConversationResponse {
  Success?: boolean;
  BaseResp: base.BaseResp;
}

export interface BatchDeleteWorkflowRequest {
  workflow_id_list: Array<string>;
  space_id: string;
  action?: DeleteAction;
  Base?: base.Base;
}

export interface BatchDeleteWorkflowResponse {
  data: DeleteWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface BatchGetWkProcessIORequest {
  /** All incoming workflow_id requirements belong to the same space_id */
  workflow_params?: Array<GetWkProcessIOParam>;
  Base?: base.Base;
}

export interface BatchGetWkProcessIOResponse {
  in_out_data?: Array<WkProcessIOData>;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface BotTemplateCopyWorkFlowData {
  WorkflowID?: Int64;
  SpaceID?: Int64;
  UserID?: Int64;
  PluginID?: Int64;
  WorkflowMode?: WorkflowMode;
}

export interface CallbackContent {
  /** If the ErrorCode is non-zero and non-empty, the Output is empty */
  Output?: string;
  /** business custom data */
  Extra?: string;
  /** Deprecated, only part of the stock access service needs to be used */
  ErrorCode?: string;
  /** Deprecated, only part of the stock access service needs to be used */
  ErrorMsg?: string;
}

export interface CancelWorkFlowRequest {
  execute_id: string;
  space_id: string;
  workflow_id?: string;
  async_subflow?: boolean;
  Base?: base.Base;
}

export interface CancelWorkFlowResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CanvasData {
  /** process core data */
  workflow?: Workflow;
  /** Version-related data (draft version, commit version, release version) */
  vcs_data?: VCSCanvasData;
  /** Release status related data */
  db_data?: DBCanvasData;
  /** Operator information */
  operation_info?: OperationInfo;
  /** It must currently return nil. */
  external_flow_info?: string;
  /** Is the Agent bound? */
  is_bind_agent?: boolean;
  bind_biz_id?: string;
  bind_biz_type?: number;
  /** Publish the version number of the workflow */
  workflow_version?: string;
}

export interface CanvasPosition {
  width?: number;
  height?: number;
  left?: number;
  top?: number;
}

export interface CategoriedImageflowBasicNodes {
  nodes: Array<ImageflowBasicNode>;
  /** packet information */
  category_i18n_key: string;
}

export interface ChatFlowRole {
  id?: string;
  workflow_id?: string;
  /** Channel ID */
  connector_id?: string;
  /** avatar */
  avatar?: AvatarConfig;
  /** Role Description */
  description?: string;
  /** opening statement */
  onboarding_info?: OnboardingInfo;
  /** role name */
  name?: string;
  /** User Question Suggestions */
  suggest_reply_info?: SuggestReplyInfo;
  /** background cover */
  background_image_info?: BackgroundImageInfo;
  /** Voice configuration: tone, phone, etc */
  audio_config?: AudioConfig;
  /** user input method */
  user_input_config?: UserInputConfig;
  /** project version */
  project_version?: string;
}

export interface ChatFlowRunRequest {
  /** The ID of the conversation flow to be executed, which should be published */
  workflow_id?: string;
  /** Required Set custom parameters in dialog flow input parameters (map [String] any) */
  parameters?: string;
  /** Used to specify additional fields such as latitude and longitude, user ID, etc */
  ext?: Record<string, string>;
  /** Agent ID that needs to be associated */
  bot_id?: string;
  /** Execution mode, the default is formal run, practice run needs to pass in "DEBUG" */
  execute_mode?: string;
  /** DEPRECATED version number, which may be the workflow version or project version */
  version?: string;
  /** Channel ID, such as ui builder, template, store, etc */
  connector_id?: string;
  /** The associated button application ID is required. */
  app_id?: string;
  /** The session ID corresponding to the conversation flow */
  conversation_id?: string;
  /** Required user questions and chat history */
  additional_messages?: Array<EnterMessage>;
  /** Project ID, for compatibility with UI builder */
  project_id?: string;
  /** Suggested reply message */
  suggest_reply_info?: SuggestReplyInfo;
  /** Project version, only when running the workflow as a workflow within the project can pass the value, and the latest version is used by default if not passed. */
  app_version?: string;
  /** The workflow version of the resource library, only when the workflow is run as a workflow in the resource library, the value can be passed. If it is not passed, the latest version is used by default. */
  workflow_version?: string;
}

export interface ChatFlowRunResponse {
  /** Required data packet event returned by the current stream */
  event?: string;
  /** Required message content (JSON serialized string for Chat Object or Message Object) */
  data?: string;
}

export interface CheckDevVCSCommitIdRequest {
  /** workflow id list */
  wf_id_list?: Array<Int64>;
  Base?: base.Base;
}

export interface CheckDevVCSCommitIdResponse {
  /** Restore SQL of data */
  update_sql_list?: Array<string>;
  /** Correct workflow list */
  right_wf_list?: Array<Int64>;
  /** Error workflow list */
  wrong_wf_list?: Array<Int64>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CheckLatestSubmitVersionRequest {
  space_id: string;
  workflow_id: string;
  Base?: base.Base;
}

export interface CheckLatestSubmitVersionResponse {
  data: LatestSubmitData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CheckResult {
  /** check type */
  type?: CheckType;
  /** Whether to pass */
  is_pass?: boolean;
  /** Reason for not passing */
  reason?: string;
}

export interface CloseCollaboratorRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface CloseCollaboratorResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CodeParam {
  code_snippet?: string;
}

export interface CollaboratorInfo {
  id?: string;
  name?: string;
  avatar_url?: string;
  user_name?: string;
}

export interface CompensationData {
  workflow?: Workflow;
  /** The commit_id of a commit. This is used to uniquely identify individual commit versions of a process (each commit_id corresponds only and only to one commit version of a process). */
  submit_commit_id?: string;
  draft_commit_id?: string;
}

export interface ConnectorInfo {
  id?: string;
  name?: string;
  icon?: string;
}

export interface ConversationData {
  id?: string;
  created_at?: Int64;
  meta_data?: Record<string, string>;
  creator_d?: string;
  connector_id?: string;
  last_section_id?: string;
}

export interface CopyWkTemplateApiRequest {
  /** Copy all parent and child workflows of the template or a single workflow collection */
  workflow_ids: Array<string>;
  /** Copy target space */
  target_space_id: string;
  Base?: base.Base;
}

export interface CopyWkTemplateApiResponse {
  /** Template ID: Copy copy of data */
  data: Record<Int64, WkPluginBasicData>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CopyWorkflowData {
  workflow_id: string;
  schema_type: SchemaType;
}

export interface CopyWorkflowRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface CopyWorkflowResponse {
  data: CopyWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CopyWorkflowV2Data {
  workflow_id: string;
  schema_type: SchemaType;
}

export interface CopyWorkflowV2Request {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface CopyWorkflowV2Response {
  code?: Int64;
  msg?: string;
  data?: CopyWorkflowV2Data;
  BaseResp: base.BaseResp;
}

export interface CozeProCopyWorkFlowData {
  WorkflowID?: Int64;
  SpaceID?: Int64;
  UserID?: Int64;
  PluginID?: Int64;
  WorkflowMode?: WorkflowMode;
}

export interface CreateChatFlowRoleRequest {
  chat_flow_role?: ChatFlowRole;
  Base?: base.Base;
}

export interface CreateChatFlowRoleResponse {
  /** ID in the database */
  ID?: string;
  BaseResp: base.BaseResp;
}

export interface CreateProjectConversationDefRequest {
  project_id: string;
  conversation_name: string;
  space_id: string;
  Base?: base.Base;
}

export interface CreateProjectConversationDefResponse {
  unique_id?: string;
  space_id: string;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CreateWorkflowData {
  /** The ID of the process, used to identify a unique process */
  workflow_id?: string;
  /** process name */
  name?: string;
  url?: string;
  status?: WorkFlowStatus;
  type?: SchemaType;
  node_list?: Array<Node>;
  /** It must currently return nil. */
  external_flow_info?: string;
}

export interface CreateWorkflowRequest {
  /** Process name, cannot be empty, can only start with English letters, the name can only contain English letters, numbers, underscores, and the length must be between 1-100 */
  name: string;
  /** The process description cannot be empty and must be between 1 and 600 in length. */
  desc: string;
  /** Process icon uri, not nullable */
  icon_uri: string;
  /** Space ID, non-nullable, identifies the space to which the workflow belongs. */
  space_id: string;
  /** Workflow or chatflow, the default is workflow */
  flow_mode?: WorkflowMode;
  /** If not provided, it defaults to FDL. Used to specify the mode type of the workflow. Currently only FDL is supported. */
  schema_type?: SchemaType;
  /** Bind the business ID, do not fill in if necessary. */
  bind_biz_id?: string;
  /** Bind the business type, do not fill in if necessary. Refer to the BindBizType structure, when the value is 3, it represents the Douyin doppelganger. */
  bind_biz_type?: number;
  /** Application id, when filled in, it means that the process is the process under the project, and it needs to be released with the project. */
  project_id?: string;
  /** Whether to create a session, only if flow_mode = chatflow */
  create_conversation?: boolean;
  Base?: base.Base;
}

export interface CreateWorkflowResponse {
  data: CreateWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface CreateWorkflowV2Data {
  workflow_id?: string;
  name?: string;
  url?: string;
  status?: WorkFlowStatus;
  type?: SchemaType;
  node_list?: Array<Node>;
}

export interface CreateWorkflowV2Request {
  name: string;
  desc: string;
  icon_uri: string;
  space_id: string;
  /** Workflow or imageflow, the default is workflow */
  flow_mode?: WorkflowMode;
  bind_biz_id?: string;
  bind_biz_type?: number;
  Base?: base.Base;
}

export interface CreateWorkflowV2Response {
  data: CreateWorkflowV2Data;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface Creator {
  id?: string;
  name?: string;
  avatar_url?: string;
  /** Did you create it yourself? */
  self?: boolean;
}

export interface DataCompensationRequest {
  space_id: string;
  workflow_id?: string;
  Base?: base.Base;
}

export interface DataCompensationResponse {
  data: CompensationData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface DatasetDetail {
  id?: string;
  icon_url?: string;
  name?: string;
  format_type?: Int64;
  /** 0 = coze knowledge base 1 = volcano knowledge base */
  dataset_type?: DatasetType;
  /** Volcano side knowledge service details page */
  volcano_service_link?: string;
  /** Volcano Side Knowledge Base details page, */
  volcano_detail_link?: string;
  /** Volcano Knowledge Base status, whether it has expired */
  status?: VolcanoDatasetStatus;
}

export interface DatasetFCItem {
  dataset_id?: string;
  is_draft?: boolean;
  volcano_dataset_service_id?: string;
}

export interface DatasetParam {
  dataset_list?: Array<string>;
}

export interface DBCanvasData {
  status?: WorkFlowStatus;
}

export interface DebugExample {
  req_example?: string;
  resp_example?: string;
}

export interface DeleteChatFlowRoleRequest {
  WorkflowID?: string;
  ConnectorID?: string;
  /** ID in the database */
  ID?: string;
  Base?: base.Base;
}

export interface DeleteChatFlowRoleResponse {
  BaseResp: base.BaseResp;
}

export interface DeleteEnvRequest {
  workflow_id: string;
  space_id: string;
  env: string;
  Base?: base.Base;
}

export interface DeleteEnvResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface DeleteProjectConversationDefRequest {
  project_id: string;
  unique_id: string;
  /** Replace the table, each wf draft is replaced with which, if not replaced, success = false, replace will return the list to be replaced, key pass workflow_id, value pass unique_id of the conversation to be replaced, replace pass empty needs to be transmitted check_only */
  replace?: Record<string, string>;
  /** Whether to check only, if true, do not actually perform the delete operation. Mainly used to query what are the processes of the current binding session. */
  check_only?: boolean;
  space_id: string;
  Base?: base.Base;
}

export interface DeleteProjectConversationDefResponse {
  success?: boolean;
  /** If no replacemap is passed, it will fail, returning the wf that needs to be replaced */
  need_replace?: Array<Workflow>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface DeleteWorkflowData {
  status?: DeleteStatus;
}

export interface DeleteWorkflowRequest {
  workflow_id: string;
  space_id: string;
  action?: DeleteAction;
  Base?: base.Base;
}

export interface DeleteWorkflowResponse {
  data: DeleteWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface DeleteWorkflowV2Data {
  status?: DeleteStatus;
}

export interface DeleteWorkflowV2Request {
  workflow_id: string;
  Base?: base.Base;
}

export interface DeleteWorkflowV2Response {
  data: DeleteWorkflowV2Data;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface Dependency {
  start_id?: string;
  sub_workflow_ids?: Array<string>;
  plugin_ids?: Array<string>;
  tools_id_map?: Record<string, Array<string>>;
  knowledge_list?: Array<KnowledgeInfo>;
  model_ids?: Array<string>;
  variable_names?: Array<string>;
  table_list?: Array<TableInfo>;
  voice_ids?: Array<string>;
  workflow_version?: Array<WorkflowVersionInfo>;
  plugin_version?: Array<PluginVersionInfo>;
}

export interface DependencyTree {
  /** ID of the current workflow */
  root_id?: string;
  /** Publish the version number of the workflow */
  version?: string;
  node_list?: Array<DependencyTreeNode>;
  edge_list?: Array<DependencyTreeEdge>;
}

export interface DependencyTreeEdge {
  from?: string;
  from_version?: string;
  from_commit_id?: string;
  to?: string;
  to_version?: string;
}

export interface DependencyTreeNode {
  name?: string;
  id?: string;
  icon?: string;
  is_product?: boolean;
  is_root?: boolean;
  is_library?: boolean;
  with_version?: boolean;
  workflow_version?: string;
  dependency?: Dependency;
  commit_id?: string;
  fdl_commit_id?: string;
  flowlang_release_id?: string;
  is_chatflow?: boolean;
}

export interface DependencyTreeRequest {
  /** Where the process is stored (in the repository, or within the project) */
  type: WorkflowStorageType;
  /** When type is Library, this parameter is required */
  library_info?: LibraryWorkflowInfo;
  /** When the type is Project, this parameter is required */
  project_info?: ProjectWorkflowInfo;
  Base?: base.Base;
}

export interface DependencyTreeResponse {
  data?: DependencyTree;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface DiffContent {
  name_dif?: DiffContentMeta;
  describe_dif?: DiffContentMeta;
  icon_url_dif?: DiffContentMeta;
  schema_dif?: DiffContentMeta;
}

export interface DiffContentMeta {
  /** Content before modification */
  before?: string;
  /** Previous commitid */
  before_commit_id?: string;
  /** modified content */
  after?: string;
  /** The last commitid */
  after_commit_id?: string;
  /** When before! = modify, it is ture, otherwise it is false, and when modify == false, the front end shows diff as "-" */
  modify?: boolean;
}

export interface DiffType {
  name_type?: DiffTypeMeta;
  describe_type?: DiffTypeMeta;
  icon_url_type?: DiffTypeMeta;
  schema_type?: DiffTypeMeta;
}

export interface EncapsulateWorkflowData {
  /** When not only validated, returns the id of the created process. */
  workflow_id?: string;
  name?: string;
  url?: string;
  status?: WorkFlowStatus;
  type?: SchemaType;
  publish_data?: PublishWorkflowData;
  validate_data?: Array<ValidateErrorData>;
}

export interface EncapsulateWorkflowRequest {
  /** Parameters required to create a workflow
process name */
  name: string;
  /** Process description */
  desc: string;
  /** process icon */
  icon_uri: string;
  space_id: string;
  /** Workflow or chatflow, the default is workflow */
  flow_mode?: WorkflowMode;
  schema_type?: SchemaType;
  bind_biz_id?: string;
  bind_biz_type?: number;
  /** When you need to verify or create a process in a project, you need to pass the ID of the project. */
  project_id?: string;
  /** Whether to create a session. Only in the chatflow scenario, the "whether to create a session" setting takes effect. When this is set to true, a session is created; when set to false or left blank, no session is created. In other process scenarios, this setting has no effect on session creation, regardless of the value. */
  create_conversation?: boolean;
  /** Required, schema filled in directly when creating */
  schema?: string;
  /** For schema validation */
  bind_bot_id?: string;
  /** Validation only. When the value is true, it is only validated, and no workflow is created. When this parameter is not passed or the value is false, if it is not in the project, the schema will be validated, the workflow saved and published. If it is in the project, the schema will be validated and the workflow saved will be created. */
  only_validate?: boolean;
  Base?: base.Base;
}

export interface EncapsulateWorkflowResponse {
  data: EncapsulateWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface EnterMessage {
  role: string;
  /** content */
  content?: string;
  meta_data?: Record<string, string>;
  /** text/card/object_string */
  content_type?: string;
  type?: string;
}

export interface EnvData {
  env?: string;
  desc?: string;
  commit_id?: string;
  source_commit_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  user?: UserInfo;
}

export interface Environment {
  lang?: string;
  latitude?: string;
  longitude?: string;
  bot_id?: string;
  conversation_id?: string;
  evaluate_request_tag?: string;
  mp_app_id?: string;
  execute_mod?: Int64;
  agent_id?: string;
  ref_bot_id?: string;
  auth_info?: string;
  user_extra?: string;
}

export interface EnvListData {
  env_list: Array<EnvData>;
  cursor?: string;
  has_more: boolean;
}

export interface ExternalDeleteEnvData {
  workflow_id: Int64;
  env: string;
}

export interface ExternalWorkflowPublishData {
  workflow_id: Int64;
  /** Which version to release with? */
  commit_id?: string;
  sub_workflow_list?: Array<Int64>;
  extra?: string;
  compile_commit_id?: string;
  /** Published commit_id */
  publish_commit_id?: string;
  run_model?: ExeternalRunMode;
}

export interface FCDatasetSetting {
  dataset_id?: string;
}

export interface FCPluginSetting {
  plugin_id?: string;
  api_id?: string;
  api_name?: string;
  request_params?: Array<APIParameter>;
  response_params?: Array<APIParameter>;
  response_style?: ResponseStyle;
  /** This issue is temporarily not supported. */
  async_conf?: AsyncConf;
  is_draft?: boolean;
  plugin_version?: string;
}

export interface FCWorkflowSetting {
  workflow_id?: string;
  plugin_id?: string;
  request_params?: Array<APIParameter>;
  response_params?: Array<APIParameter>;
  response_style?: ResponseStyle;
  /** This issue is temporarily not supported. */
  async_conf?: AsyncConf;
  is_draft?: boolean;
  workflow_version?: string;
}

export interface GetApiDetailRequest {
  /** Plugin's unique device identifier. This specifies which plugin to query for API details. */
  pluginID?: string;
  /** The name of the API. Used to find a specific API under the specified plug-in. */
  apiName?: string;
  /** Space ID. Used to scope API queries, which may belong to a specific space. */
  space_id?: string;
  /** API's unique device identifier. Used to locate APIs more precisely. */
  api_id?: string;
  project_id?: string;
  plugin_version?: string;
  Base?: base.Base;
}

export interface GetApiDetailResponse {
  code?: Int64;
  msg?: string;
  data?: ApiDetailData;
  BaseResp: base.BaseResp;
}

export interface GetBotsIDETokenRequest {
  space_id?: string;
  can_write?: boolean;
  Base?: base.Base;
}

export interface GetBotsIDETokenResponse {
  /** Authentication information provided to the BizIDE side */
  data: IDETokenData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetCanvasInfoRequest {
  /** Space ID, which cannot be empty or 0, identifies the space to which the workflow belongs. */
  space_id: string;
  /** Required, process id, non-null or 0, used to uniquely identify a workflow. */
  workflow_id?: string;
  Base?: base.Base;
}

export interface GetCanvasInfoResponse {
  /** process core data */
  data: CanvasData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetChatFlowRoleRequest {
  workflow_id?: string;
  /** Channel ID */
  connector_id?: string;
  /** Whether it is debugging mode, when the field is true, the value of connector_id will be ignored; when the field is false, the corresponding channel version will be queried according to connector_id */
  is_debug?: boolean;
  /** 4: optional string AppID (api.query = "app_id") */
  ext?: Record<string, string>;
  Base?: base.Base;
}

export interface GetChatFlowRoleResponse {
  role?: ChatFlowRole;
  BaseResp: base.BaseResp;
}

export interface GetConflictFromContentData {
  /** The front end needs to consume submit_diff after_commit_id as a merge source_submit_id */
  submit_diff?: DiffContent;
  draft_diff?: DiffContent;
  diff_type?: DiffType;
}

export interface GetConflictFromContentRequest {
  space_id: string;
  workflow_id: string;
  Base?: base.Base;
}

export interface GetConflictFromContentResponse {
  data: GetConflictFromContentData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetDeleteStrategyRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface GetDeleteStrategyResponse {
  data: DeleteType;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetEnvListRequest {
  workflow_id: string;
  space_id: string;
  /** default = 10 */
  limit?: number;
  /** You need to pass in when paging multiple times. */
  cursor?: string;
  Base?: base.Base;
}

export interface GetEnvListResponse {
  data: EnvListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetExampleWorkFlowListRequest {
  /** Paging function, specifying the page number of the list of results you want to retrieve. */
  page?: number;
  /** Paging function, specifies the number of entries returned per page, must be greater than 0, less than or equal to 100 */
  size?: number;
  /** Filter the list of sample workflows by the name of the workflow. */
  name?: string;
  /** Filter the sample workflow list based on the workflow pattern (e.g., standard workflow, conversation flow, etc.). */
  flow_mode?: WorkflowMode;
  /** Bot's Workflow as Agent mode will be used, only scenarios with BotAgent = 3 will be used */
  checker?: Array<CheckType>;
  Base?: base.Base;
}

export interface GetExampleWorkFlowListResponse {
  data: WorkFlowListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetExecuteHistoryListRequest {
  workflow_id?: string;
  execute_id?: string;
  execute_mode?: WorkflowExecuteMode;
  log_id?: string;
  start_time?: Int64;
  end_time?: Int64;
  page?: number;
  page_size?: number;
  Base?: base.Base;
}

export interface GetExecuteHistoryListResponse {
  data?: Array<OPExecuteHistory>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetFlowlangGrayRequest {
  space_id: string;
  Base?: base.Base;
}

export interface GetFlowlangGrayResponse {
  /** Whether grey release */
  gray: boolean;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetHistorySchemaData {
  name?: string;
  describe?: string;
  url?: string;
  schema?: string;
  flow_mode?: WorkflowMode;
  bind_biz_id?: string;
  bind_biz_type?: BindBizType;
  workflow_id?: string;
  commit_id?: string;
  workflow_version?: string;
  project_version?: string;
  project_id?: Int64;
  execute_id?: string;
  sub_execute_id?: string;
  log_id?: string;
}

export interface GetHistorySchemaRequest {
  space_id: string;
  workflow_id: string;
  /** You need to pass in when paging multiple times. */
  commit_id: string;
  type: OperateType;
  env?: string;
  workflow_version?: string;
  project_version?: string;
  project_id?: string;
  execute_id?: string;
  sub_execute_id?: string;
  log_id?: string;
  Base?: base.Base;
}

export interface GetHistorySchemaResponse {
  data: GetHistorySchemaData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetImageflowBasicNodeListRequest {
  /** The tab type of the sidebar, the default is the base node */
  tab_type?: ImageflowTabType;
  Base?: base.Base;
}

export interface GetImageflowBasicNodeListResponse {
  data: ImageflowBasicNodeListData;
  code: Int64;
  msg: string;
  baseResp: base.BaseResp;
}

export interface GetListableWorkflowsRequest {
  space_id_list: Array<string>;
  page: number;
  size: number;
  /** Add, workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  Base?: base.Base;
}

export interface GetListableWorkflowsResponse {
  data: ListableWorkflows;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetLLMNodeFCSettingDetailRequest {
  workflow_id: string;
  space_id: string;
  /** List of plugin type skills used by llm nodes */
  plugin_list?: Array<PluginFCItem>;
  /** List of workflow type skills used by LLM nodes */
  workflow_list?: Array<WorkflowFCItem>;
  /** List of knowledge base type skills used by llm nodes */
  dataset_list?: Array<DatasetFCItem>;
  Base?: base.Base;
}

export interface GetLLMNodeFCSettingDetailResponse {
  /** pluginid -> value */
  plugin_detail_map?: Record<string, PluginDetail>;
  /** apiid -> value */
  plugin_api_detail_map?: Record<string, APIDetail>;
  /** workflowid-> value */
  workflow_detail_map?: Record<string, WorkflowDetail>;
  /** datasetid -> value */
  dataset_detail_map?: Record<string, DatasetDetail>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetLLMNodeFCSettingsMergedRequest {
  workflow_id: string;
  space_id: string;
  plugin_fc_setting?: FCPluginSetting;
  workflow_fc_setting?: FCWorkflowSetting;
  dataset_fc_setting?: FCDatasetSetting;
  Base?: base.Base;
}

export interface GetLLMNodeFCSettingsMergedResponse {
  plugin_fc_setting?: FCPluginSetting;
  worflow_fc_setting?: FCWorkflowSetting;
  dataset_fc_setting?: FCDatasetSetting;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetNodeAsyncExecuteHistoryRequest {
  space_id: string;
  parent_workflow_id: string;
  /** Node ID */
  parent_node_id: string;
  workflow_id: string;
  status?: AsyncSubWorkflowStatus;
  Base?: base.Base;
}

export interface GetNodeAsyncExecuteHistoryResponse {
  code?: Int64;
  msg?: string;
  data?: Array<AsyncSubWorkflowResult>;
  BaseResp?: base.BaseResp;
}

export interface GetNodeExecuteHistoryRequest {
  workflow_id: string;
  space_id: string;
  execute_id: string;
  /** Node ID */
  node_id: string;
  /** Whether batch node */
  is_batch?: boolean;
  /** execution batch */
  batch_index?: number;
  node_type: string;
  node_history_scene?: NodeHistoryScene;
  Base?: base.Base;
}

export interface GetNodeExecuteHistoryResponse {
  code?: Int64;
  msg?: string;
  data?: NodeResult;
  BaseResp?: base.BaseResp;
}

export interface GetNodeFieldConfigRequest {
  nodeType?: string;
  fieldNames?: Array<string>;
  Base?: base.Base;
}

export interface GetNodeFieldConfigResponse {
  /** The configuration of the corresponding node, if it is empty and returns "", the front end can analyze the configuration according to the actual scene */
  config?: Record<string, string>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetPluginAuthStatusRequest {
  workflow_id?: string;
  plugin_id?: string;
  space_id?: string;
  Base?: base.Base;
}

export interface GetPluginAuthStatusResponse {
  /** separately authorized */
  auth_info?: PluginAuthStatus;
  /** shared authorization */
  shared_auth_info?: PluginAuthStatus;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetReleasedWorkflowsRequest {
  page?: number;
  size?: number;
  type?: WorkFlowType;
  name?: string;
  workflow_ids?: Array<string>;
  tags?: Tag;
  space_id?: string;
  order_by?: OrderBy;
  login_user_create?: boolean;
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  /** Filter conditions, support workflow_id and workflow_version */
  workflow_filter_list?: Array<WorkflowFilter>;
  Base?: base.Base;
}

export interface GetReleasedWorkflowsResponse {
  data: ReleasedWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetStoreTestRunHistoryRequest {
  source_workflow_id?: string;
  execute_id?: string;
  Base?: base.Base;
}

export interface GetStoreTestRunHistoryResponse {
  data?: GetWorkFlowProcessData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetUploadAuthTokenData {
  service_id?: string;
  upload_path_prefix?: string;
  auth?: UploadAuthTokenInfo;
  upload_host?: string;
}

export interface GetUploadAuthTokenRequest {
  /** Upload scene, optional value: "imageflow" */
  scene?: string;
  Base?: base.Base;
}

export interface GetUploadAuthTokenResponse {
  data?: GetUploadAuthTokenData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetWkProcessIOParam {
  workflow_id: string;
  execute_id?: string;
  /** Specifies the last execution history of the commit_id pulled */
  commit_id?: string;
}

export interface GetWorkflowDetailInfoRequest {
  /** Filter conditions, support workflow_id and workflow_version */
  workflow_filter_list?: Array<WorkflowFilter>;
  /** Space ID, used to filter workflows within that space. */
  space_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowDetailInfoResponse {
  data: Array<WorkflowDetailInfoData>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetWorkflowDetailRequest {
  workflow_ids?: Array<string>;
  space_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowDetailResponse {
  data: Array<WorkflowDetailData>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetWorkflowGrayFeatureRequest {
  /** Space ID */
  space_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowGrayFeatureResponse {
  /** Grey release feature */
  data?: Array<WorkflowGrayFeatureItem>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetWorkflowIDByExecuteInfoRequest {
  execute_id?: string;
  sub_execute_id?: string;
  log_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowIDByExecuteInfoResponse {
  workflow_id?: string;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetWorkFlowListRequest {
  /** Required, paging page number, usually 1, returns an error if nil or less than or equal to 0. Used to specify page number, starting from 1. */
  page?: number;
  /** Required, paging size, usually 10, returns an error if nil or not between 1-100. Used to specify the size per page. */
  size?: number;
  /** Query the corresponding process according to the process id list */
  workflow_ids?: Array<string>;
  /** negligible */
  type?: WorkFlowType;
  /** Workflow for filtering specific names */
  name?: string;
  /** negligible */
  tags?: Tag;
  /** Required, space id, used to identify the space to which the workflow belongs */
  space_id?: string;
  /** Filter process according to whether the process has been published */
  status?: WorkFlowListStatus;
  order_by?: OrderBy;
  /** Filter processes based on whether the interface requester is the process creator */
  login_user_create?: boolean;
  /** Workflow or chatflow, the default is workflow. Filter processes by process type */
  flow_mode?: WorkflowMode;
  /** New field for filtering schema_type */
  schema_type_list?: Array<SchemaType>;
  /** Workflows for filtering specific projects. */
  project_id?: string;
  /** The Workflow as Agent pattern for bots selects processes, or project publication filters, where each CheckType element in this list specifies a specific rule that determines whether the returned process passes the check. */
  checker?: Array<CheckType>;
  bind_biz_id?: string;
  bind_biz_type?: BindBizType;
  project_version?: string;
  Base?: base.Base;
}

export interface GetWorkFlowListResponse {
  data: WorkFlowListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetWorkflowMessageNodesData {
  id?: string;
  plugin_id?: string;
  name?: string;
  message_nodes?: Array<NodeInfo>;
}

export interface GetWorkflowMessageNodesRequest {
  /** Space ID */
  space_id?: string;
  plugin_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowMessageNodesResponse {
  /** return code */
  code?: Int64;
  /** Return information */
  msg?: string;
  /** result */
  data?: GetWorkflowMessageNodesData;
  BaseResp?: base.BaseResp;
}

export interface GetWorkFlowProcessData {
  workFlowId?: string;
  executeId?: string;
  /** The current execution status of the workflow instance */
  executeStatus?: WorkflowExeStatus;
  /** List of results/status of each node in execution. */
  nodeResults?: Array<NodeResult>;
  /** execution progress */
  rate?: string;
  /** Current node practice run state 1: no practice run 2: practice run */
  exeHistoryStatus?: WorkflowExeHistoryStatus;
  /** Workflow practice running time */
  workflowExeCost?: string;
  /** consume */
  tokenAndCost?: TokenAndCost;
  /** reason for failure */
  reason?: string;
  /** The ID of the last node */
  lastNodeID?: string;
  /** Log ID for this query */
  logID?: string;
  /** Returns only events in the interrupt */
  nodeEvents?: Array<NodeEvent>;
  /** The project id to which the workflow belongs, empty when the workflow belongs to the repository */
  projectId?: string;
}

export interface GetWorkflowProcessRequest {
  /** Process id, not an empty string, is used to uniquely identify a workflow. */
  workflow_id: string;
  /** Space id, not an empty string, identifies the space to which the workflow belongs. */
  space_id: string;
  /** Used to uniquely identify a workflow execution instance. */
  execute_id?: string;
  /** Used to uniquely identify a child workflow execution instance. */
  sub_execute_id?: string;
  /** It is used to specify whether the asynchronous acquisition execution process is required and whether to return all batch node contents; if the amount of data in a single node is too large, it also needs to be pulled asynchronously */
  need_async?: boolean;
  /** When execute_id is not transmitted, it can be obtained through log_id execute_id */
  log_id?: string;
  /** The id of a specific node in the workflow and retrieve the performance of that node */
  node_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowProcessResponse {
  code?: Int64;
  msg?: string;
  data?: GetWorkFlowProcessData;
  BaseResp: base.BaseResp;
}

export interface GetWorkflowReferencesRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface GetWorkflowReferencesResponse {
  data: WorkflowReferencesData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetWorkflowRunHistoryRequest {
  /** Workflow ID required to run asynchronously. */
  workflow_id: string;
  /** Required Workflow Execution ID. The calling interface executes the workflow. If you choose to execute the workflow asynchronously, execute_id will be returned in the response message. */
  execute_id?: string;
}

export interface GetWorkflowRunHistoryResponse {
  /** Call status code. 0 indicates successful call. Other values indicate failed call. */
  code?: Int64;
  /** Status information. Detailed error information can be viewed in this field when an API call fails. */
  msg?: string;
  /** The execution result of the asynchronous workflow. You can only query the execution result of one asynchronous event at a time, so this array has only one object. */
  data?: Array<WorkflowExecuteHistory>;
}

export interface GradientPosition {
  left?: number;
  right?: number;
}

export interface IDETokenData {
  /** Temporary token provided to the BizIDE side */
  token: string;
  /** Token expiration time */
  expired_at: Int64;
}

export interface IfBranch {
  /** Conditions for this branch */
  if_conditions?: Array<IfCondition>;
  /** The relationship between the conditions of this branch */
  if_condition_relation?: IfConditionRelation;
  /** The next node corresponding to this branch */
  next_node_id?: Array<string>;
}

export interface IfCondition {
  first_parameter: Parameter;
  condition: ConditionType;
  second_parameter: Parameter;
}

export interface IfParam {
  if_branch?: IfBranch;
  else_branch?: IfBranch;
}

export interface ImageflowBasicNode {
  /** 1: PluginAPI, 2: NodeTemplate */
  node_type: BasicNodeType;
  /** The actual plugin API information returned */
  plugin_api?: ImageflowPluginAPINode;
  /** Basic node templates, selectors, message nodes, etc */
  node_template?: NodeTemplate;
}

export interface ImageflowBasicNodeListData {
  /** base node list */
  categoried_nodes?: Array<CategoriedImageflowBasicNodes>;
}

export interface ImageflowPluginAPINode {
  plugin_id: string;
  plugin_name: string;
  api_id: string;
  api_name: string;
  api_title: string;
  api_desc: string;
  api_icon: string;
}

export interface Interrupt {
  event_id?: string;
  type?: InterruptType;
  data?: string;
}

export interface KnowledgeInfo {
  id?: string;
  name?: string;
  icon?: string;
  project_id?: string;
  is_product?: boolean;
  is_library?: boolean;
}

export interface LatestSubmitData {
  /** True if the current draft is behind the latest version, otherwise false */
  need_merge?: boolean;
  /** The latest submission commit_id current space is actually the latest submit_commit_id */
  latest_submit_version?: string;
  /** Submitter of the current latest version for front-end display */
  latest_submit_author?: string;
}

export interface LayOut {
  x?: number;
  y?: number;
}

export interface LibraryWorkflowInfo {
  workflow_id?: string;
  space_id?: string;
  /** Whether to query the resource dependency tree of the draft version, true means to query the draft version, false means to analyze the resource dependency tree of the released version */
  draft?: boolean;
  /** The version number of the published workflow. If draft is true, this field is invalid. If the field value is not passed or its value is 0, the latest released version is obtained; the current version can be obtained through the GetCanvasInfo interface. */
  workflow_version?: string;
}

export interface ListableWorkflows {
  workflows?: Array<WkPluginBasicData>;
  has_more?: boolean;
}

export interface ListCollaboratorsRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface ListCollaboratorsResponse {
  data: Array<ResourceCollaboratorData>;
  need_data_compensation: boolean;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface ListProjectConversationRequest {
  project_id: string;
  /** 0 = created in project (static session), 1 = created through wf node (dynamic session) */
  create_method?: CreateMethod;
  /** 0 = wf node practice run created 1 = wf node run after release */
  create_env?: CreateEnv;
  /** Paging offset, do not pass from the first item */
  cursor?: string;
  /** number of pulls at one time */
  limit?: Int64;
  space_id: string;
  /** conversationName fuzzy search */
  nameLike?: string;
  /** create_env = 1, pass the corresponding channel id, the current default 1024 (openapi) */
  connector_id?: string;
  /** Project version */
  project_version?: string;
  Base?: base.Base;
}

export interface ListProjectConversationResponse {
  data?: Array<ProjectConversation>;
  /** Cursor, empty means there is no next page, bring this field when turning the page */
  cursor?: string;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface ListPublishWorkflowRequest {
  space_id: string;
  /** filter */
  owner_id?: string;
  /** Search term: agent or author name */
  name?: string;
  order_last_publish_time?: OrderByType;
  order_total_token?: OrderByType;
  size: Int64;
  cursor_id?: string;
  workflow_ids?: Array<string>;
}

export interface ListPublishWorkflowResponse {
  data?: PublishWorkflowListData;
  code?: Int64;
  msg?: string;
}

export interface LLMParam {
  model_type?: number;
  temperature?: number;
  prompt?: string;
  model_name?: string;
}

export interface MergeWorkflowData {
  name?: string;
  url?: string;
  status?: WorkFlowDevStatus;
}

export interface MergeWorkflowRequest {
  workflow_id: string;
  schema?: string;
  space_id?: string;
  name?: string;
  desc?: string;
  icon_uri?: string;
  submit_commit_id: string;
  Base?: base.Base;
}

export interface MergeWorkflowResponse {
  data: MergeWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface MGetVersionHistoryRequest {
  space_id: string;
  /** Key: workflow id, value: version list, like ["v0.0.1", "v0.0.2"], maximum support 200 */
  workflow_id_version_map: Record<string, Array<string>>;
  Base?: base.Base;
}

export interface MGetVersionHistoryResponse {
  data: MGetWorkflowVersionData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface MGetWorkflowVersionData {
  version_list: Array<VersionMetaInfo>;
}

export interface MoveWorkflowInfo {
  WorkflowId?: Int64;
  SpaceId?: Int64;
  Name?: string;
  Desc?: string;
  Url?: string;
  CreatorId?: Int64;
  PluginIds?: Array<Int64>;
  DataSetIds?: Array<Int64>;
  SubWorkflowIds?: Array<Int64>;
  Root?: boolean;
  IconUri?: string;
  ToolIds?: Array<Int64>;
  ModelIds?: Array<Int64>;
  DatabaseIDs?: Array<Int64>;
}

export interface MultiCollaborationConfigItem {
  workflow_count?: number;
  collaborators_count?: number;
}

export interface Node {
  workflow_id?: string;
  /** Node ID */
  node_id?: string;
  /** Change node name */
  node_name?: string;
  /** Node type */
  node_type?: NodeType;
  /** Core parameters of the node */
  node_param?: NodeParam;
  /** Node location */
  lay_out?: LayOut;
  /** Description of Node, explaining the link */
  desc?: NodeDesc;
  /** dependent upstream node */
  depends_on?: Array<string>;
  /** All inputs and outputs */
  open_api?: OpenAPI;
}

export interface NodeCategory {
  /** Category name, empty string indicates that the following node does not belong to any category */
  name?: string;
  node_type_list?: Array<string>;
  /** List of api_id plugins */
  plugin_api_id_list?: Array<string>;
  /** Jump to the classification configuration of the official plug-in list */
  plugin_category_id_list?: Array<string>;
}

export interface NodeDesc {
  desc?: string;
  /** Subtitle name */
  name?: string;
  /** This type of icon */
  icon_url?: string;
  /** Whether to support batch, 1 does not support, 2 supports */
  support_batch?: number;
  /** Connection requirements 1 or so can be connected 2 only support the right side */
  link_limit?: number;
}

export interface NodeError {
  node_id?: string;
}

export interface NodeEvent {
  id?: string;
  type?: EventType;
  node_title?: string;
  data?: string;
  node_icon?: string;
  /** Actually node_execute_id */
  node_id?: string;
  /** Corresponds to node_id on canvas */
  schema_node_id?: string;
}

export interface NodeExecuteStatus {
  node_id?: string;
  is_finish?: boolean;
  update_time?: Int64;
  loop_index?: Int64;
  batch_index?: Int64;
  node_execute_uuid?: string;
  sub_execute_id?: string;
}

export interface NodeIdInfo {
  /** Node ID */
  NodeId?: string;
  /** Node type */
  NodeType?: NodeType;
  /** Node Param_id */
  NodeParamId?: Array<Int64>;
  /** Node icon url */
  IconUrl?: string;
  /** Workflow type: Determine whether the sub-node is a workflow or an image flow */
  FlowMode?: WorkflowMode;
  /** Node name */
  NodeName?: string;
  /** Node timbre id */
  VoiceIds?: Array<string>;
  /** LLM skill */
  LLMSkill?: NodeLLMSkill;
  /** Whether the plug-in authorization is shared, 1-shared authorization, 0-if it is an authorized plug-in, it is authorized separately, otherwise it is meaningless */
  PluginAuthMode?: number;
}

export interface NodeInfo {
  node_id?: string;
  node_type?: string;
  node_title?: string;
}

export interface NodeLLMSkill {
  PluginIds?: Array<Int64>;
  DataSetIds?: Array<Int64>;
  SubWorkflowIds?: Array<Int64>;
}

export interface NodePanelPlugin {
  plugin_id?: string;
  name?: string;
  desc?: string;
  icon?: string;
  tool_list?: Array<NodePanelPluginAPI>;
  version?: string;
}

export interface NodePanelPluginAPI {
  api_id?: string;
  api_name?: string;
  api_desc?: string;
}

export interface NodePanelPluginData {
  plugin_list?: Array<NodePanelPlugin>;
  /** If the data source is page + size, return page + 1 here; if the data source is cursor mode, return the cursor returned by the data source here */
  next_page_or_cursor?: string;
  has_more?: boolean;
}

export interface NodePanelSearchData {
  resource_workflow?: NodePanelWorkflowData;
  project_workflow?: NodePanelWorkflowData;
  favorite_plugin?: NodePanelPluginData;
  resource_plugin?: NodePanelPluginData;
  project_plugin?: NodePanelPluginData;
  store_plugin?: NodePanelPluginData;
}

export interface NodePanelSearchRequest {
  /** The data type of the search, pass empty, do not pass, or pass All means search for all types */
  search_type?: NodePanelSearchType;
  space_id?: string;
  project_id?: string;
  /** Search keywords */
  search_key?: string;
  /** The value is "" on the first request, and the underlying implementation converts it to a page or cursor according to the paging mode of the data source. When search_type ResourceWorkflow, ProjectWorkflow, ResourcePlugin, ProjectPlugin: This field represents the page number, which must be an int64 string that can be converted to > 0. When search_type FavoritePlugin, StorePlugin: This field represents the cursor. Can be an empty string on the first request; subsequent requests pass in the next_page_or_cursor returned on the previous page. When search_type is All: The check for this field is skipped. */
  page_or_cursor?: string;
  /** The number of results returned per page. Greater than or equal to 1, less than or equal to 50. */
  page_size?: number;
  /** Excluded workflow_id, used to exclude the id of the current workflow when searching for workflow */
  exclude_workflow_id?: string;
  Base?: base.Base;
}

export interface NodePanelSearchResponse {
  data?: NodePanelSearchData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface NodePanelWorkflowData {
  workflow_list?: Array<Workflow>;
  /** Since the query of workflow is all page + size, page + 1 is returned here. */
  next_page_or_cursor?: string;
  has_more?: boolean;
}

export interface NodeParam {
  /** Enter parameter list, support multi-level; support mapping */
  input_list?: Array<Param>;
  /** Output parameter list, support multi-level */
  output_list?: Array<Param>;
  /** If it is an API type Node, plug-in name, API name, plug-in version, API description */
  api_param?: APIParam;
  /** If it is a code snippet, include the code content */
  code_param?: CodeParam;
  /** If it is a model, include the basic information of the model */
  llm_param?: LLMParam;
  /** If it is a dataset, select a fragment of the dataset */
  dataset_param?: DatasetParam;
  /** End node, how to end */
  terminate_plan?: TerminatePlan;
  /** (New) input parameter list */
  input_parameters?: Array<Parameter>;
  /** (New) Output parameter list */
  output_parameters?: Array<Parameter>;
  /** batch setup */
  batch?: Batch;
  /** if node parameter */
  if_param?: IfParam;
}

export interface NodeParamData {
  workflow_id?: Int64;
  node_type?: string;
  param_name?: string;
  param_value?: string;
}

export interface NodeParamRequest {
  node_type?: string;
  param_names?: Array<string>;
}

export interface NodeProps {
  id?: string;
  type?: string;
  is_enable_chat_history?: boolean;
  is_enable_user_query?: boolean;
  is_ref_global_variable?: boolean;
}

export interface NodeResult {
  nodeId?: string;
  NodeType?: string;
  NodeName?: string;
  nodeStatus?: NodeExeStatus;
  errorInfo?: string;
  /** Imported parameters jsonString type */
  input?: string;
  /** Exported parameter jsonString */
  output?: string;
  /** Running time eg: 3s */
  nodeExeCost?: string;
  /** consume */
  tokenAndCost?: TokenAndCost;
  /** direct output */
  raw_output?: string;
  errorLevel?: string;
  index?: number;
  items?: string;
  maxBatchSize?: number;
  limitVariable?: string;
  loopVariableLen?: number;
  batch?: string;
  isBatch?: boolean;
  logVersion?: number;
  extra?: string;
  executeId?: string;
  subExecuteId?: string;
  needAsync?: boolean;
  async_status?: AsyncSubWorkflowStatus;
}

export interface NodeTemplate {
  id?: string;
  type?: NodeTemplateType;
  name?: string;
  desc?: string;
  icon_url?: string;
  support_batch?: SupportBatch;
  node_type?: string;
  color?: string;
}

export interface NodeTemplateListData {
  template_list?: Array<NodeTemplate>;
  /** Display classification configuration of nodes */
  cate_list?: Array<NodeCategory>;
  plugin_api_list?: Array<PluginAPINode>;
  plugin_category_list?: Array<PluginCategory>;
}

export interface NodeTemplateListRequest {
  /** Required node type, return all by default without passing */
  need_types?: Array<NodeTemplateType>;
  /** Required node type, string type */
  node_types?: Array<string>;
  Base?: base.Base;
}

export interface NodeTemplateListResponse {
  data?: NodeTemplateListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface OnboardingInfo {
  /** Markdown format */
  prologue?: string;
  /** List of questions */
  suggested_questions?: Array<string>;
  /** Whether to display all suggested questions */
  display_all_suggestions?: boolean;
}

export interface OpenAPI {
  input_list?: Array<Parameter>;
  output_list?: Array<Parameter>;
}

export interface OpenAPIGetNodeExecuteHistoryRequest {
  workflow_id?: string;
  execute_id?: string;
  node_execute_uuid?: string;
}

export interface OpenAPIGetNodeExecuteHistoryResponse {
  code?: Int64;
  msg?: string;
  data?: WorkflowNodeExecuteHistory;
}

export interface OpenAPIGetWorkflowInfoRequest {
  workflow_id?: string;
  connector_id?: string;
  is_debug?: boolean;
  /** 4: optional string AppID (api.query = "app_id") */
  caller?: string;
}

export interface OpenAPIGetWorkflowInfoResponse {
  /** API adaptation */
  code?: number;
  msg?: string;
  data?: WorkflowInfo;
}

export interface OpenAPIGetWorkflowListRequest {
  page_num?: number;
  page_size?: number;
  workspace_id?: string;
  workflow_mode?: string;
  app_id?: string;
  publish_status?: string;
}

export interface OpenAPIGetWorkflowListResponse {
  data: OpenAPIWorkflowList;
  code?: number;
  msg?: string;
}

export interface OpenAPIRunFlowRequest {
  /** Required, Workflow ID to be executed, this workflow should be published */
  workflow_id?: string;
  /** Input parameters and values of the workflow start node (JSON serialized string) */
  parameters?: string;
  /** Used to specify some additional fields, which may not be filled in unless necessary */
  ext?: Record<string, string>;
  /** Agent ID that needs to be associated */
  bot_id?: string;
  /** Whether to run asynchronously (default false) */
  is_async?: boolean;
  /** Execution mode, the default is formal run, practice run needs to pass in "DEBUG" */
  execute_mode?: string;
  /** DEPRECATED version number, project version */
  version?: string;
  /** Channel ID, such as ui builder, template, store, etc */
  connector_id?: string;
  /** The ID of the app associated with this workflow */
  app_id?: string;
  /** Project ID, for compatibility with UI builder */
  project_id?: string;
  /** Project version, only when running the workflow as a workflow within the project can pass the value, and the latest version is used by default if not passed. */
  app_version?: string;
  /** The workflow version of the resource library, only when the workflow is run as a workflow in the resource library, the value can be passed. If it is not passed, the latest version is used by default. */
  workflow_version?: string;
}

export interface OpenAPIRunFlowResponse {
  /** generic field
Required, call status code. 0 indicates successful call, other values indicate failed call. */
  code: Int64;
  /** Status information. Usually "Success" when successful, this field can be used to view detailed error information when the API call fails. */
  msg?: string;
  /** Synchronized return field
Workflow execution result (JSON serialized string or plain string) */
  data?: string;
  token?: Int64;
  cost?: string;
  /** Workflow practice run debug page URL */
  debug_url?: string;
  /** asynchronous return field
Event ID for asynchronous execution */
  execute_id?: string;
}

export interface OpenAPIStreamResumeFlowRequest {
  /** Workflow execution interrupt event ID */
  event_id?: string;
  /** interrupt type */
  interrupt_type?: InterruptType;
  /** When resuming execution, the user's response to the agent-specified question */
  resume_data?: string;
  /** Used to specify some additional fields, which may not be filled in unless necessary */
  ext?: Record<string, string>;
  /** The Workflow ID to be executed, which should have been published */
  workflow_id?: string;
  /** Channel ID, such as ui builder, template, store, etc */
  connector_id?: string;
}

export interface OpenAPIStreamRunFlowResponse {
  /** absolute serial number */
  id?: string;
  /** Event type: message, done, error */
  event?: string;
  /** Node information
The serial number in the node */
  node_seq_id?: string;
  /** Node name */
  node_title?: string;
  /** Return when ContentType is Text */
  content?: string;
  /** Has the node completed execution? */
  node_is_finish?: boolean;
  /** Transmission when content type is interrupt, interrupt protocol */
  interrupt_data?: Interrupt;
  /** Data type returned */
  content_type?: string;
  /** Card Content Returned when Content Type is Card */
  card_body?: string;
  /** Node type */
  node_type?: string;
  node_id?: string;
  /** Loop index, only value in loop */
  loop_index?: Int64;
  /** Batch index, the value is only available in batches. */
  batch_index?: Int64;
  /** Node execution uuid */
  node_execute_uuid?: string;
  /** Sub-execution id, assigned only if it is different from executeID (sub-workflow) */
  sub_execute_id?: string;
  /** Last message on success */
  ext?: Record<string, string>;
  token?: Int64;
  cost?: string;
  /** error message */
  error_code?: Int64;
  error_message?: string;
  debug_url?: string;
}

export interface OpenAPIWorkflowInfo {
  workflow_id?: string;
  workflow_name?: string;
  description?: string;
  icon_url?: string;
  app_id?: string;
}

export interface OpenAPIWorkflowList {
  items: Array<OpenAPIWorkflowInfo>;
  has_more: boolean;
}

export interface OpenCollaboratorRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface OpenCollaboratorResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface OperateInfo {
  commit_id?: string;
  time?: Int64;
  user?: UserInfo;
}

export interface OperateListData {
  operate_list?: Array<OperateInfo>;
  start_id?: string;
  end_id?: string;
  has_more?: boolean;
}

export interface OperateListRequest {
  space_id: string;
  workflow_id: string;
  /** default = 10 */
  limit: number;
  /** You need to pass in when paging multiple times. */
  last_commit_id: string;
  type: OperateType;
  Base?: base.Base;
}

export interface OperateListResponse {
  data: OperateListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface OperationInfo {
  operator?: Creator;
  operator_time?: Int64;
}

export interface OPExecuteHistory {
  execute_id?: string;
  workflow_id?: string;
  workflow_name?: string;
  execute_status?: WorkflowExeStatus;
  execute_mode?: WorkflowExecuteMode;
  run_mode?: WorkflowRunMode;
  bot_id?: string;
  log_id?: string;
  connector_id?: string;
  connector_uid?: string;
  commit_id?: string;
  project_id?: string;
  project_version?: string;
  workflow_version?: string;
  entry_method?: string;
  create_time?: Int64;
  update_time?: Int64;
  /** successful execution */
  input?: string;
  output?: string;
  /** execution failed
Call status code. 0 indicates that the call was successful. Other values indicate that the call failed. You can determine the detailed error cause by error_message fields. */
  error_code?: string;
  /** Status information. You can view detailed error information in this field when an API call fails. */
  error_msg?: string;
}

export interface Param {
  key?: Array<string>;
  desc?: string;
  type?: InputType;
  required?: boolean;
  value?: string;
  /** Requirements 1 Do not allow deletion 2 Do not allow name change 3 Anything can be modified 4 Only display, all are not allowed to be changed */
  requirement?: ParamRequirementType;
  from_node_id?: string;
  from_output?: Array<string>;
}

export interface Parameter {
  name?: string;
  desc?: string;
  required?: boolean;
  type?: InputType;
  sub_parameters?: Array<Parameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: InputType;
  /** fromNodeId if the value of the imported parameter is a reference */
  from_node_id?: string;
  /** Which node's key is specifically referenced? */
  from_output?: Array<string>;
  /** If the imported parameter is the user's hand input, put it here */
  value?: string;
  format?: PluginParamTypeFormat;
  /** Auxiliary type; type = string takes effect, 0 is unset */
  assist_type?: Int64;
  /** If Type is an array, it represents the auxiliary type of the child element; sub_type = string takes effect, 0 is unset */
  sub_assist_type?: Int64;
}

export interface PathError {
  start?: string;
  end?: string;
  /** Node ID on the path */
  path?: Array<string>;
}

/** plug-in configuration */
export interface PluginAPINode {
  /** Actual plug-in configuration */
  plugin_id?: string;
  api_id?: string;
  api_name?: string;
  /** For node display */
  name?: string;
  desc?: string;
  icon_url?: string;
  node_type?: string;
}

export interface PluginAuthStatus {
  /** Is it an authorized plugin? */
  is_oauth?: boolean;
  /** user authorization status */
  status?: OAuthStatus;
  /** Unauthorized, return the authorized url. */
  content?: string;
}

/** View more image plugins */
export interface PluginCategory {
  plugin_category_id?: string;
  only_official?: boolean;
  /** For node display */
  name?: string;
  icon_url?: string;
  node_type?: string;
}

export interface PluginDetail {
  id?: string;
  icon_url?: string;
  description?: string;
  is_official?: boolean;
  name?: string;
  plugin_status?: Int64;
  plugin_type?: Int64;
  latest_version_ts?: Int64;
  latest_version_name?: string;
  version_name?: string;
}

export interface PluginFCItem {
  plugin_id?: string;
  api_id?: string;
  api_name?: string;
  is_draft?: boolean;
  plugin_version?: string;
}

export interface PluginTag {
  type?: Int64;
  name?: string;
  icon?: string;
  active_icon?: string;
}

export interface PluginVersionInfo {
  id?: string;
  name?: string;
  icon?: string;
  version?: string;
  tools?: Array<Int64>;
  project_id?: string;
  is_product?: boolean;
  is_library?: boolean;
}

export interface PrincipalIdentifier {
  /** subject type */
  Type: PrincipalType;
  /** principal Id */
  Id: string;
}

export interface ProjectConversation {
  unique_id?: string;
  conversation_name?: string;
  /** For your own conversationid in the coze channel */
  conversation_id?: string;
  release_conversation_name?: string;
}

export interface ProjectWorkflowInfo {
  workflow_id?: string;
  space_id?: string;
  project_id?: string;
  /** Whether to query the resource dependency tree of the draft version, true means to query the draft version, false means to analyze the resource dependency tree of the released version */
  draft?: boolean;
  /** The version number of project. If draft is true, this field is invalid. If the field value is not passed or its value is 0, get the latest released version. */
  project_version?: string;
}

export interface PublishBasicWorkflowData {
  /** Information on recently released projects */
  basic_info?: WorkflowBasicInfo;
  user_info?: UserInfo;
  /** Published channel aggregation */
  connectors?: Array<ConnectorInfo>;
  /** Total token consumption as of yesterday */
  total_token?: string;
}

export interface PublishWorkflowData {
  workflow_id?: string;
  publish_commit_id?: string;
  success?: boolean;
}

export interface PublishWorkflowListData {
  workflows?: Array<PublishBasicWorkflowData>;
  total?: number;
  has_more?: boolean;
  next_cursor_id?: string;
}

export interface PublishWorkflowRequest {
  /** Not null or 0, used to uniquely identify a workflow. */
  workflow_id: string;
  /** Not null or 0, used to identify the space to which the workflow belongs. */
  space_id: string;
  /** Used to identify whether there is a collaborator, the default is false. */
  has_collaborator: boolean;
  /** Which environment to publish to, do not fill in the default line */
  env?: string;
  /** Which version to use to publish, do not fill in the default latest commit version, if provided, it needs to match WorkflowId. Used to specify which version of the workflow to use. */
  commit_id?: string;
  /** Force release. If the previous step of the process submission executed the TestRun step and the result is that the process ran successfully, the "force" parameter value should be false, or the parameter should not be passed; if the previous step of the process submission did not execute the TestRun step, or if the previous step was TestRun but the process execution result was unsuccessful/unknown, the "force" parameter value should be true. */
  force?: boolean;
  /** Required, the version number of the published workflow, in SemVer format "vx.y.z", must be larger than the current version, the current version can be obtained through GetCanvasInfo */
  workflow_version?: string;
  /** Workflow version description */
  version_description?: string;
  Base?: base.Base;
}

export interface PublishWorkflowResponse {
  data: PublishWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface PublishWorkflowV2Data {
  workflow_id?: string;
  commit_id?: string;
  success?: boolean;
}

export interface PublishWorkflowV2Request {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface PublishWorkflowV2Response {
  code?: Int64;
  msg?: string;
  data: PublishWorkflowV2Data;
  BaseResp: base.BaseResp;
}

export interface PutOnListExampleWorkflowRequest {
  workflow_id: string;
  Base?: base.Base;
}

export interface PutOnListExampleWorkflowResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface QueryWorkflowNodeTypeRequest {
  space_id?: string;
  workflow_id?: string;
  Base?: base.Base;
}

export interface QueryWorkflowNodeTypeResponse {
  data?: WorkflowNodeTypeData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface QueryWorkflowV2Request {
  workflow_id: string;
  space_id?: string;
  Base?: base.Base;
}

export interface QueryWorkflowV2Response {
  data: WorkflowV2Data;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface RegionGrayRequest {
  /** Requires grey release function key */
  feature_key: string;
  Base?: base.Base;
}

export interface RegionGrayResponse {
  allow: boolean;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface ReleasedWorkflow {
  plugin_id?: string;
  workflow_id?: string;
  space_id?: string;
  name?: string;
  desc?: string;
  icon?: string;
  inputs?: unknown;
  outputs?: unknown;
  end_type?: number;
  type?: number;
  sub_workflow_list?: Array<SubWorkflow>;
  version?: string;
  create_time?: Int64;
  update_time?: Int64;
  /** Workflow creator information */
  creator?: Creator;
  flow_mode?: WorkflowMode;
  flow_version?: string;
  flow_version_desc?: string;
  latest_flow_version?: string;
  latest_flow_version_desc?: string;
  commit_id?: string;
  output_nodes?: Array<NodeInfo>;
}

export interface ReleasedWorkflowData {
  workflow_list?: Array<ReleasedWorkflow>;
  total?: Int64;
}

export interface ReleasedWorkflowRPC {
  PluginID?: Int64;
  WorkflowID?: Int64;
  SpaceId?: Int64;
  Name?: string;
  Desc?: string;
  Icon?: string;
  Inputs?: string;
  Outputs?: string;
  EndType?: number;
  Type?: number;
  SubWorkflowIDList?: Array<SubWorkflow>;
  Version?: string;
  CreateTime?: Int64;
  UpdateTime?: Int64;
  CreatorId?: Int64;
  EndContent?: string;
  Schema?: string;
  FlowMode?: WorkflowMode;
}

export interface ReleasedWorkflowsData {
  Total?: Int64;
  Workflows?: Array<ReleasedWorkflowRPC>;
}

export interface RemoveExampleWorkflowRequest {
  workflow_id: string;
  Base?: base.Base;
}

export interface RemoveExampleWorkflowResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface ResourceActionAuth {
  can_edit?: boolean;
  can_delete?: boolean;
  can_copy?: boolean;
}

export interface ResourceAuthInfo {
  /** Resource ID */
  workflow_id?: string;
  /** user id */
  user_id?: string;
  /** user resource operation permission */
  auth?: ResourceActionAuth;
}

export interface ResourceCollaboratorData {
  user?: CollaboratorInfo;
  owner?: boolean;
}

export interface ResourceCreatorData {
  workflow_id: string;
  space_id?: string;
  creator?: Creator;
  collaborator_mode?: CollaboratorMode;
}

export interface ResponseStyle {
  mode?: number;
}

export interface ResumeFailedCallbackContent {
  CheckpointID?: Int64;
  /** business custom data */
  Extra?: string;
  ErrorCode?: string;
  ErrorMsg?: string;
}

export interface RevertDraftData {
  /** The commit_id of a commit. This is used to uniquely identify individual commit versions of a process (each commit_id corresponds only and only to one commit version of a process). */
  submit_commit_id?: string;
}

export interface RevertDraftRequest {
  space_id: string;
  workflow_id: string;
  commit_id: string;
  type: OperateType;
  env?: string;
  Base?: base.Base;
}

export interface RevertDraftResponse {
  data: RevertDraftData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface RunCtx {
  SpaceID?: Int64;
  UserID?: Int64;
  HasCard?: boolean;
  HasCardNodes?: Array<string>;
  LinkRootID?: string;
  UserInfo?: UserInfoEnv;
  Env?: Environment;
  Ext?: Record<string, string>;
  ProjectID?: Int64;
  ProjectVersion?: string;
}

export interface RunFlowHTTPRequest {
  workflow_id: string;
  input?: Record<string, string>;
  space_id?: string;
  bot_id?: string;
}

export interface SaveWorkflowData {
  name?: string;
  url?: string;
  status?: WorkFlowDevStatus;
  workflow_status?: WorkFlowStatus;
  is_version_gray?: boolean;
}

export interface SaveWorkflowRequest {
  /** The ID of the process, used to identify a unique process */
  workflow_id: string;
  /** Process schema */
  schema?: string;
  /** Required, space id, not empty string, used to identify the space to which the workflow belongs. */
  space_id?: string;
  /** Optional. Length must be between 1 and 100 if supplied. The name used to update the workflow. */
  name?: string;
  /** Not required. Length must be between 1-600 if supplied. Description information used to update the workflow. */
  desc?: string;
  /** Not required. Cannot be empty string if supplied. Icon URI used to update the workflow. */
  icon_uri?: string;
  /** Cannot be empty string. What this does is to uniquely identify a single commit version of a process (each submit_commit_id corresponds only and only to one commit version of a process). */
  submit_commit_id: string;
  /** Whether to ignore the commit state flow, the default is false. If true, the state flow is ignored. If false, query the process commit status, and the process commit status will change to CanNotSubmit. */
  ignore_status_transfer?: boolean;
  save_version?: string;
  Base?: base.Base;
}

export interface SaveWorkflowResponse {
  data: SaveWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface SaveWorkflowV2Data {
  name?: string;
  url?: string;
  status?: WorkFlowStatus;
}

export interface SaveWorkflowV2Request {
  workflow_id: string;
  schema?: string;
  space_id?: string;
  name?: string;
  desc?: string;
  icon_uri?: string;
  ignore_status_transfer?: boolean;
  Base?: base.Base;
}

export interface SaveWorkflowV2Response {
  data: SaveWorkflowV2Data;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface ShowDifferencesRequest {
  space_id: string;
  workflow_id: string;
  /** type */
  type: OperateType;
  Base?: base.Base;
}

export interface ShowDifferencesResponse {
  data: DiffContent;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface SignImageURLRequest {
  uri: string;
  Scene?: string;
  Base?: base.Base;
}

export interface SignImageURLResponse {
  url: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface Snapshot {
  WorkflowID?: string;
  SpaceID?: string;
  CommitID?: string;
  Branch?: VCSCanvasType;
  Schema?: string;
  Name?: string;
  Description?: string;
  IconURI?: string;
  UserInfo?: Creator;
  CreateTime?: Int64;
  UpdateTime?: Int64;
}

export interface StreamPushVoiceConfig {
  /** Whether to turn on voice output */
  IsCallTransferVoice?: boolean;
  /** timbre ID */
  VoiceId?: string;
  /** timbre name */
  VoiceName?: string;
  /** timbre emotion */
  voice_emotion?: string;
  /** timbre emotion */
  voice_emotion_scale?: number;
  /** timbre scene */
  voice_scene?: string;
}

export interface StreamRunFlowHTTPResponse {
  /** absolute serial number */
  id?: string;
  /** Event type: message, done, error */
  event?: string;
  /** Node information
The serial number in the node */
  node_seq_id?: string;
  node_id?: string;
  /** Node name */
  node_title?: string;
  /** Node type */
  node_type?: NodeType;
  /** Return when ContentType is Text */
  content?: string;
  /** Has the node completed execution? */
  node_is_finish?: boolean;
  /** Transmission when content type is interrupt, interrupt protocol */
  interrupt_data?: Interrupt;
  /** Data type returned */
  content_type?: string;
  /** Card Content Returned when Content Type is Card */
  card_body?: string;
  /** Whether the current node is streaming output */
  is_stream?: boolean;
  /** The workflow id to which the current node belongs */
  current_workflow_id?: string;
  /** Last message on success */
  ext?: Record<string, string>;
  token?: Int64;
  cost?: string;
  /** error message */
  error_code?: Int64;
  error_message?: string;
}

export interface SubmitWorkflowData {
  /** True if the current draft is behind the latest version, otherwise false */
  need_merge?: boolean;
  /** The commit_id of a commit. This is used to uniquely identify individual commit versions of a process (each commit_id corresponds only and only to one commit version of a process). */
  submit_commit_id?: string;
}

export interface SubmitWorkflowRequest {
  workflow_id: string;
  space_id: string;
  desc?: string;
  /** Forced submission. If the previous step of the process submission executed the TestRun step and the execution result is that the process runs successfully, the "force" parameter value should be false, or the parameter should not be passed; if the previous step of the process submission did not execute the TestRun step, or if the previous step was TestRun but the process execution result was unsuccessful/unknown, the "force" parameter value should be true. */
  force?: boolean;
  Base?: base.Base;
}

export interface SubmitWorkflowResponse {
  data: SubmitWorkflowData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface SubWorkflow {
  id?: string;
  name?: string;
}

/** suggest */
export interface SuggestReplyInfo {
  /** Coze Auto-Suggestion
suggestion problem model */
  suggest_reply_mode?: SuggestReplyInfoMode;
  /** user-defined suggestion questions */
  customized_suggest_prompt?: string;
}

export interface TableInfo {
  id?: string;
  name?: string;
  icon?: string;
  project_id?: string;
  is_product?: boolean;
  is_library?: boolean;
}

export interface TerminatePlan {
  /** End method */
  plan?: TerminatePlanType;
  content?: string;
}

export interface TokenAndCost {
  /** Input Consumption Tokens */
  inputTokens?: string;
  /** Input cost */
  inputCost?: string;
  /** Output Consumption Tokens */
  outputTokens?: string;
  /** Output cost */
  outputCost?: string;
  /** Total Consumed Tokens */
  totalTokens?: string;
  /** total cost */
  totalCost?: string;
}

export interface UpdateCollaboratorInfo {
  /** Updated target space */
  UpdateWfMap?: Record<string, Array<Int64>>;
  /** No space for workflow */
  ErrSpaceList?: Array<Int64>;
  /** Workflow that did not get collaborator information */
  ErrWorkflowMap?: Record<string, Array<Int64>>;
  BaseResp?: base.BaseResp;
}

export interface UpdateProjectConversationDefRequest {
  project_id: string;
  unique_id: string;
  conversation_name: string;
  space_id: string;
  Base?: base.Base;
}

export interface UpdateProjectConversationDefResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface UpdateWorkflowMetaRequest {
  workflow_id: string;
  space_id: string;
  name?: string;
  desc?: string;
  icon_uri?: string;
  flow_mode?: WorkflowMode;
  Base?: base.Base;
}

export interface UpdateWorkflowMetaResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface UploadAuthTokenInfo {
  access_key_id?: string;
  secret_access_key?: string;
  session_token?: string;
  expired_time?: string;
  current_time?: string;
}

export interface UserBehaviorAuthData {
  auth_type?: AuthType;
  config: MultiCollaborationConfigItem;
  can_upgrade: boolean;
  level?: UserLevel;
}

export interface UserBehaviorAuthRequest {
  workflow_id: string;
  space_id: string;
  /** Specifies the specific type of behavior the user is attempting to perform. The interface applies different permission validation rules and business processes based on this type. */
  action_type: UserBehaviorType;
  /** True: The interface only returns configuration information related to the user's current level (e.g. maximum number of workflows, maximum number of collaborators), without performing actual permission validation. false: The interface will perform a full permission check to determine whether the user is authorized to perform the actions specified by ActionType. */
  only_config_item: boolean;
  Base?: base.Base;
}

export interface UserBehaviorAuthResponse {
  data: UserBehaviorAuthData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface UserInfo {
  user_id?: Int64;
  user_name?: string;
  user_avatar?: string;
  /** user nickname */
  nickname?: string;
}

export interface UserInfoEnv {
  user_id?: Int64;
  device_id?: Int64;
  message_id?: Int64;
  connector_name?: string;
  connector_uid?: string;
  connector_id?: Int64;
  tako_bot_history?: string;
  section_id?: Int64;
}

export interface UserInputConfig {
  /** Default input method */
  default_input_mode?: InputMode;
  /** User voice message sending form */
  send_voice_mode?: SendVoiceMode;
}

export interface ValidateErrorData {
  node_error?: NodeError;
  path_error?: PathError;
  message?: string;
  type?: ValidateErrorType;
}

export interface ValidateSchemaRequest {
  schema: string;
  bind_project_id?: string;
  bind_bot_id?: string;
  Base?: base.Base;
}

export interface ValidateSchemaResponse {
  data?: Array<ValidateErrorData>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface ValidateTreeInfo {
  workflow_id?: string;
  name?: string;
  errors?: Array<ValidateErrorData>;
}

export interface ValidateTreeRequest {
  workflow_id: string;
  /** Choose between this and bind_bot_id */
  bind_project_id?: string;
  /** Choose between this and bind_project_id */
  bind_bot_id?: string;
  schema?: string;
  Base?: base.Base;
}

export interface ValidateTreeResponse {
  data?: Array<ValidateTreeInfo>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface VCSCanvasData {
  /** Submitted commit_id */
  submit_commit_id?: string;
  /** commit_id of the draft */
  draft_commit_id?: string;
  /** version type */
  type?: VCSCanvasType;
  /** Does the current user have permission to edit? */
  can_edit?: boolean;
  /** Published commit_id */
  publish_commit_id?: string;
}

export interface VersionHistoryListData {
  version_list: Array<VersionMetaInfo>;
  cursor?: string;
  has_more: boolean;
}

export interface VersionHistoryListRequest {
  space_id: string;
  workflow_id: string;
  /** 1=submit 2=online 3=ppe */
  type: OperateType;
  /** default = 10 */
  limit?: number;
  /** If it is passed, filter it. */
  commit_ids?: Array<string>;
  /** You need to pass in when paging multiple times. */
  cursor?: string;
  /** 1 = create_time 2 = update_time Currently only supports these two */
  order_by?: OrderBy;
  Base?: base.Base;
}

export interface VersionHistoryListResponse {
  data: VersionHistoryListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface VersionMetaInfo {
  workflow_id?: string;
  space_id?: string;
  commit_id?: string;
  submit_commit_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  env?: string;
  desc?: string;
  user?: UserInfo;
  type?: OperateType;
  offline?: boolean;
  is_delete?: boolean;
  version?: string;
  /** Differentiate between the commit ID of the old version (automatically generated) and the new version such as v0.0.1 */
  version_type?: VersionType;
}

export interface VoiceConfig {
  voice_name?: string;
  /** timbre ID */
  voice_id?: string;
  /** timbre emotion */
  voice_emotion?: string;
  /** timbre emotion */
  voice_emotion_scale?: number;
  /** Tonal scenes, such as multi-emotion */
  voice_scene?: string;
}

/** Workflow snapshot basic information */
export interface WkPluginBasicData {
  workflow_id?: string;
  space_id?: string;
  name?: string;
  desc?: string;
  url?: string;
  icon_uri?: string;
  status?: WorkFlowStatus;
  /** Plugin ID corresponding to workfklow */
  plugin_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  source_id?: string;
  creator?: Creator;
  schema?: string;
  start_node?: Node;
  flow_mode?: WorkflowMode;
  sub_workflows?: Array<Int64>;
  latest_publish_commit_id?: string;
  end_node?: Node;
}

export interface WkPluginData {
  Workflow?: WkPluginBasicData;
  Nodes?: Array<NodeIdInfo>;
}

export interface WkPluginInfo {
  PluginId: Int64;
  WorkflowId: Int64;
}

export interface WkProcessIOData {
  workflow_id?: string;
  start_node?: Node;
  end_node?: Node;
  execute_id?: string;
  flow_mode?: WorkflowMode;
  input_data?: string;
  raw_output_data?: string;
  output_data?: string;
}

export interface Workflow {
  /** Process ID, globally unique */
  workflow_id?: string;
  /** Process name */
  name?: string;
  desc?: string;
  /** Workflow icon url */
  url?: string;
  icon_uri?: string;
  /** commit status of the process */
  status?: WorkFlowDevStatus;
  /** Type 1: Official Template */
  type?: WorkFlowType;
  /** Plugin ID corresponding to workfklow */
  plugin_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  schema_type?: SchemaType;
  start_node?: Node;
  tag?: Tag;
  /** template creator id */
  template_author_id?: string;
  /** template creator nickname */
  template_author_name?: string;
  /** template creator avatar */
  template_author_picture_url?: string;
  /** Space ID */
  space_id?: string;
  /** process entry and exit */
  interface_str?: string;
  /** New workflow definition schema */
  schema_json?: string;
  /** Workflow creator information */
  creator?: Creator;
  /** Storage Model */
  persistence_model?: PersistenceModel;
  /** Workflow or imageflow, the default is workflow */
  flow_mode?: WorkflowMode;
  /** Workflow product review version status */
  product_draft_status?: ProductDraftStatus;
  /** Current must return nil, {"project_id": "xxx", "flow_id": xxxx} */
  external_flow_info?: string;
  /** Workflow Multiplayer Collaboration Button Status */
  collaborator_mode?: CollaboratorMode;
  check_result?: Array<CheckResult>;
  project_id?: string;
  /** Only the workflow under the project is available. */
  dev_plugin_id?: string;
  save_version?: string;
}

export interface WorkflowBasicInfo {
  id?: string;
  name?: string;
  description?: string;
  icon_uri?: string;
  icon_url?: string;
  space_id?: string;
  owner_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  publish_time?: Int64;
  permission_type?: PermissionType;
}

export interface WorkflowChildNodes {
  WorkflowId?: Int64;
  CreatorId?: Int64;
  SpaceId?: Int64;
  PluginIds?: Array<Int64>;
  DataSetIds?: Array<Int64>;
  SubWorkflowIds?: Array<Int64>;
}

export interface WorkflowData {
  WorkflowId?: Int64;
  CreatorId?: Int64;
  SpaceId?: Int64;
  PluginIds?: Array<Int64>;
  DataSetIds?: Array<Int64>;
}

export interface WorkflowDependency {
  WorkflowId?: Int64;
  SpaceId?: Int64;
  Name?: string;
  Desc?: string;
  Url?: string;
  CreatorId?: Int64;
  PluginIds?: Array<Int64>;
  DataSetIds?: Array<Int64>;
  SubWorkflowIds?: Array<Int64>;
  Root?: boolean;
  IconUri?: string;
  ToolIds?: Array<Int64>;
  ModelIds?: Array<Int64>;
  DatabaseIds?: Array<Int64>;
  VoiceIds?: Array<string>;
  WorkflowMode?: WorkflowMode;
  /** Plugins that use shared OAuth authorization */
  ShareAuthPluginIds?: Array<Int64>;
  /** Do not use a license, or use a separately licensed plug-in */
  SingleAuthPluginIds?: Array<Int64>;
}

export interface WorkflowDetail {
  id?: string;
  plugin_id?: string;
  description?: string;
  icon_url?: string;
  is_official?: boolean;
  name?: string;
  status?: Int64;
  type?: Int64;
  api_detail?: APIDetail;
  latest_version_name?: string;
  flow_mode?: Int64;
}

export interface WorkflowDetailData {
  workflow_id?: string;
  space_id?: string;
  name?: string;
  desc?: string;
  icon?: string;
  inputs?: unknown;
  outputs?: unknown;
  version?: string;
  create_time?: Int64;
  update_time?: Int64;
  project_id?: string;
  end_type?: number;
  icon_uri?: string;
  flow_mode?: WorkflowMode;
  output_nodes?: Array<NodeInfo>;
}

export interface WorkflowDetailInfoData {
  workflow_id?: string;
  space_id?: string;
  name?: string;
  desc?: string;
  icon?: string;
  inputs?: unknown;
  outputs?: unknown;
  version?: string;
  create_time?: Int64;
  update_time?: Int64;
  project_id?: string;
  end_type?: number;
  icon_uri?: string;
  flow_mode?: WorkflowMode;
  plugin_id?: string;
  /** Workflow creator information */
  creator?: Creator;
  flow_version?: string;
  flow_version_desc?: string;
  latest_flow_version?: string;
  latest_flow_version_desc?: string;
  commit_id?: string;
  is_project?: boolean;
  output_nodes?: Array<NodeInfo>;
}

/** Execution result of asynchronous workflow */
export interface WorkflowExecuteHistory {
  /** Execution ID. */
  execute_id?: Int64;
  /** Execution status. Success: The execution was successful. Running: In progress. Fail: The execution failed. */
  execute_status?: string;
  /** The Bot ID specified when executing the workflow. Returns 0 to indicate that no agent ID was specified. */
  bot_id?: Int64;
  /** By default, only the Agent as API channel is displayed, and the channel ID is 1024. */
  connector_id?: Int64;
  /** User ID, the user_id specified by the ext field when executing the workflow. If not specified, returns the token applicant's button ID. */
  connector_uid?: string;
  /** Workflow running mode: 0: synchronous running. 1: streaming. 2: asynchronous running. */
  run_mode?: WorkflowRunMode;
  /** Log ID of the workflow running asynchronously. If the workflow execution is abnormal, you can contact the service team to troubleshoot the problem with the Log ID. */
  log_id?: string;
  /** Workflow start time, in Unixtime timestamp format, in seconds. */
  create_time?: Int64;
  /** Workflow recovery run time in Unixtime timestamp format in seconds. */
  update_time?: Int64;
  /** Workflow practice run debugging page. Visit this page to view the running results, input and output information of each workflow node. */
  debug_url?: string;
  /** Whether the output of the workflow was cleaned because it was too large. True: cleaned. False: not cleaned. */
  is_output_trimmed?: boolean;
  /** successful execution */
  input?: string;
  /** The output of the workflow is usually a JSON serialized string, but it may also be a non-JSON string. */
  output?: string;
  token?: Int64;
  cost?: string;
  cost_unit?: string;
  ext?: Record<string, string>;
  node_execute_status?: Record<string, NodeExecuteStatus>;
  /** execution failed
Call status code. 0 indicates that the call was successful. Other values indicate that the call failed. You can determine the detailed error cause by error_message fields. */
  error_code?: string;
  /** Status information. You can view detailed error information in this field when an API call fails. */
  error_msg?: string;
}

export interface WorkflowFCItem {
  workflow_id?: string;
  plugin_id?: string;
  is_draft?: boolean;
  workflow_version?: string;
}

/** Workflow filter */
export interface WorkflowFilter {
  workflow_id?: string;
  workflow_version?: string;
}

export interface WorkflowGrayFeatureItem {
  /** Grey release feature */
  feature: string;
  /** Whether to hit grey release featire. True - hit grey release, false - miss grey release. */
  in_gray: boolean;
}

export interface WorkflowInfo {
  role?: ChatFlowRole;
}

export interface WorkflowListByBindBizRequest {
  space_id?: string;
  bind_biz_id?: string;
  bind_biz_type?: number;
  status?: WorkFlowListStatus;
  login_user_create?: boolean;
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  Base?: base.Base;
}

export interface WorkflowListByBindBizResponse {
  data: WorkFlowListData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface WorkflowListByBindBizV2Request {
  space_id?: string;
  bind_biz_id?: string;
  bind_biz_type?: number;
  status?: WorkFlowListStatus;
  login_user_create?: boolean;
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  Base?: base.Base;
}

export interface WorkflowListByBindBizV2Response {
  data: WorkflowListV2Data;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface WorkFlowListData {
  workflow_list?: Array<Workflow>;
  auth_list?: Array<ResourceAuthInfo>;
  total?: Int64;
}

export interface WorkflowListV2Data {
  workflow_list?: Array<WorkflowV2>;
  total?: Int64;
}

export interface WorkflowListV2Request {
  page?: number;
  size?: number;
  workflow_ids?: Array<string>;
  type?: WorkFlowType;
  name?: string;
  tags?: Tag;
  space_id?: string;
  status?: WorkFlowListStatus;
  order_by?: OrderBy;
  login_user_create?: boolean;
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  Base?: base.Base;
}

export interface WorkflowListV2Response {
  data: WorkflowListV2Data;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface WorkflowNodeDebugV2Data {
  workflow_id?: string;
  node_id?: string;
  execute_id?: string;
  session_id?: string;
}

export interface WorkflowNodeDebugV2Request {
  workflow_id?: string;
  node_id?: string;
  input?: Record<string, string>;
  batch?: Record<string, string>;
  space_id?: string;
  bot_id?: string;
  project_id?: string;
  setting?: Record<string, string>;
  Base?: base.Base;
}

export interface WorkflowNodeDebugV2Response {
  code?: Int64;
  msg?: string;
  data?: WorkflowNodeDebugV2Data;
  BaseResp?: base.BaseResp;
}

export interface WorkflowNodeExecuteHistory {
  is_finish?: boolean;
  /** successful execution */
  node_output?: string;
}

export interface WorkflowNodeTypeData {
  node_types?: Array<string>;
  sub_workflow_node_types?: Array<string>;
  nodes_properties?: Array<NodeProps>;
  sub_workflow_nodes_properties?: Array<NodeProps>;
}

export interface WorkflowNodeV2 {
  WorkflowID?: string;
  NodeID?: Int64;
  Name?: string;
  Desc?: string;
  CreateTime?: Int64;
  UpdateTime?: Int64;
  CreatorId?: string;
  AuthorId?: string;
  SpaceId?: string;
  Schema?: string;
}

export interface WorkflowNodeV2Data {
  WorkflowNode?: Record<Int64, WorkflowNodeV2>;
}

export interface WorkflowReferencesData {
  workflow_list?: Array<Workflow>;
}

export interface WorkflowRuntimeInfo {
  WorkflowID?: Int64;
  name?: string;
  desc?: string;
  /** Plugin api parameter structure, serialized as json string */
  input?: string;
  /** Plugin api parameter structure, serialized as json string */
  output?: string;
  runMode?: Int64;
}

export interface WorkFlowTemplateTagData {
  tags: Array<PluginTag>;
}

export interface WorkFlowTemplateTagRequest {
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  Base?: base.Base;
}

export interface WorkFlowTemplateTagResponse {
  data?: WorkFlowTemplateTagData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface WorkflowTestResumeRequest {
  /** Required The ID of the running process that will break. */
  workflow_id: string;
  execute_id: string;
  event_id: string;
  data: string;
  space_id?: string;
  Base?: base.Base;
}

export interface WorkflowTestResumeResponse {
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface WorkFlowTestRunData {
  workflow_id?: string;
  execute_id?: string;
  session_id?: string;
}

export interface WorkFlowTestRunDataV2 {
  workflow_id?: string;
  execute_id?: string;
  session_id?: string;
}

export interface WorkFlowTestRunRequest {
  /** Required, workflow id, non-nullable, used to uniquely identify a workflow. */
  workflow_id: string;
  /** Used to provide input parameters for workflow test execution. */
  input?: Record<string, string>;
  /** Required, space id, non-nullable, identifies the space to which the workflow belongs. */
  space_id?: string;
  /** The id of the agent, the process under non-project, the process involving variable nodes and databases */
  bot_id?: string;
  /** abandoned */
  submit_commit_id?: string;
  /** The CanvasInfo of the process canvas specifies the draft_commit_id of vcs, which defaults to null. When null, the latest draft version is selected by default, which is used to specify which draft version of the workflow to use. */
  commit_id?: string;
  /** Used to identify the project to which the workflow belongs. */
  project_id?: string;
  Base?: base.Base;
}

export interface WorkFlowTestRunResponse {
  data: WorkFlowTestRunData;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface WorkFlowTestRunV2Request {
  workflow_id?: string;
  input?: Record<string, string>;
  space_id?: string;
  bot_id?: string;
  Base?: base.Base;
}

export interface WorkFlowTestRunV2Response {
  code?: Int64;
  msg?: string;
  data?: WorkFlowTestRunDataV2;
  BaseResp: base.BaseResp;
}

export interface WorkflowV2 {
  workflow_id?: string;
  name?: string;
  desc?: string;
  url?: string;
  icon_uri?: string;
  status?: WorkFlowStatus;
  /** Type 1: Official Template */
  type?: WorkFlowType;
  /** Plugin ID corresponding to workfklow */
  plugin_id?: string;
  create_time?: Int64;
  update_time?: Int64;
  schema_type?: SchemaType;
  start_node?: Node;
  tag?: Tag;
  /** template creator id */
  template_author_id?: string;
  /** template creator nickname */
  template_author_name?: string;
  /** template creator avatar */
  template_author_picture_url?: string;
  /** Space ID */
  space_id?: string;
  /** process entry and exit */
  interface_str?: string;
  /** New workflow definition schema */
  schema_json?: string;
  /** Workflow creator information */
  creator?: Creator;
  /** Workflow or imageflow, default to workflow */
  flow_mode?: WorkflowMode;
  /** Workflow product review version status */
  product_draft_status?: ProductDraftStatus;
  project_id?: string;
  /** DEV plugin id */
  dev_plugin_id?: string;
}

export interface WorkflowV2Data {
  workflow?: WorkflowV2;
  /** Is the Agent bound? */
  is_bind_agent?: boolean;
  /** Generated compatibility commit_id if requested in publish state */
  publish_commit_id?: string;
  bind_biz_id?: string;
  bind_biz_type?: number;
}

export interface WorkflowVersionInfo {
  id?: string;
  name?: string;
  icon?: string;
  version?: string;
  project_id?: string;
  is_product?: boolean;
  is_library?: boolean;
}
/* eslint-enable */
