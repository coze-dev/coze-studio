/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';

export type Int64 = string | number;

export enum CozePunishTaskStatus {
  Success = 0,
  Fail = 1,
}

/** Create penalties */
export enum PunishMeasureStatus {
  Testing = 0,
  Online = 1,
  Disabled = 2,
}

export enum PunishRecordStatus {
  ongoing = 0,
  end = 1,
  init = 2,
  failed = 3,
}

export enum PunishSource {
  Op = 1,
  System = 2,
}

export enum PunishStatus {
  normal = 1,
  banned = 2,
}

export enum PunishTaskStatus {
  processing = 0,
  success = 1,
  fail = 2,
  partial_success = 3,
}

/** Create penalty task */
export enum PunishTaskType {
  Punish = 1,
  Unpunish = 2,
}

export enum UnPunishAllowConfig {
  Allow = 0,
  ForBid = 1,
}

export interface CozePunishRequest {
  /** Penalty measure id, use this id to choose which penalty to execute */
  PunishMeasureID: Int64;
  /** Penalty object id list */
  ObjectIDs: Array<string>;
  /** Punisher uid */
  OperatorUID?: Int64;
  /** Penalty mailbox */
  OperatorEmail?: string;
  /** source of punishment */
  Source?: string;
  /** Duration of penalty */
  Duration?: Int64;
  /** Reason for punishment */
  Remark?: string;
  /** Penalty Task ID */
  PunishTaskID?: Int64;
  Base?: base.Base;
}

export interface CozePunishResponse {
  /** The penalty system cannot perceive and verify the penalty object id, and the access party needs to return the penalty result.
Key: object id; value: penalty result */
  PunishResultMap: Record<string, CozePunishTaskResult>;
  BaseResp?: base.BaseResp;
}

export interface CozePunishTaskResult {
  status: CozePunishTaskStatus;
}

export interface CozeUnPunishRequest {
  PunishMeasureID: Int64;
  ObjectIDs: Array<string>;
  OperatorUID?: Int64;
  OperatorEmail?: string;
  Source?: string;
  Remark?: string;
  /** Remove Penalty Task ID */
  PunishTaskID?: Int64;
  Base?: base.Base;
}

export interface CozeUnPunishResponse {
  UnPunishResultMap: Record<string, CozePunishTaskResult>;
  BaseResp?: base.BaseResp;
}

export interface CreatePunishMeasureData {
  punish_measure_id: string;
}

export interface CreatePunishMeasureRequest {
  /** penalty subject */
  punish_entity: string;
  /** penalty effect */
  punish_effect: string;
  /** Whether to allow manual lifting of penalties */
  allow_unpunish: UnPunishAllowConfig;
  /** Duration of penalty */
  punish_duration: Int64;
  /** Access psm */
  psm: string;
  /** IDL branch */
  idl_branch?: string;
  /** Name of penalty */
  punish_name: string;
}

export interface CreatePunishMeasureResponse {
  data: CreatePunishMeasureData;
  code: Int64;
  msg: string;
}

export interface CreatePunishTaskRequest {
  /** penalty subject */
  punish_entity: string;
  /** penalty */
  punish_messure_id: string;
  /** Penalty task type */
  type: PunishTaskType;
  /** penalty time, if you don't pass it on, the default time of using the penalty measure; -1 represents permanent */
  punish_duration?: Int64;
  /** list of penalty targets */
  punish_object_ids: Array<string>;
  /** Reason for punishment */
  remark: string;
  /** Sources of punishment */
  punish_source: PunishSource;
}

export interface CreatePunishTaskResponse {
  code: Int64;
  msg: string;
}

export interface GetPunishMeasureData {
  /** total number of articles */
  total: Int64;
  /** List of penalties */
  punish_measures: Array<PunishMeasure>;
}

/** Obtain penalties */
export interface GetPunishMeasureRequest {
  /** Filter penalties by subject type (for the penalty enforcement page) */
  punish_entity?: string;
  /** paging */
  page?: number;
  /** paging size */
  size?: number;
}

export interface GetPunishMeasureResponse {
  data: GetPunishMeasureData;
  code: Int64;
  msg: string;
}

/** Get penalty meta information */
export interface GetPunishMetaInfoRequest {}

export interface GetPunishMetaInfoResponse {
  data: PunishMetaInfo;
  code: Int64;
  msg: string;
}

export interface GetPunishRecordData {
  /** total number of articles */
  total: Int64;
  /** Penalty Data List */
  punish_records: Array<PunishRecord>;
}

/** Query penalty data */
export interface GetPunishRecordRequest {
  punish_entity?: string;
  object_ids?: Array<string>;
  status?: PunishRecordStatus;
  /** paging */
  page?: number;
  /** paging size */
  size?: number;
}

export interface GetPunishRecordResponse {
  data?: GetPunishRecordData;
  code: Int64;
  msg: string;
}

export interface GetPunishTaskData {
  /** total number of articles */
  total: Int64;
  /** List of penalties */
  punish_tasks: Array<PunishTask>;
}

/** View penalty tasks */
export interface GetPunishTaskRequest {
  punish_entity?: string;
  punish_type?: PunishTaskType;
  /** prefix matching */
  operator_email?: string;
  /** paging */
  page?: number;
  /** paging size */
  size?: number;
}

export interface GetPunishTaskResponse {
  data?: GetPunishTaskData;
  code: Int64;
  msg: string;
}

export interface MGetEntityPunishStatusRequest {
  /** enumeration of penalized entities */
  EntityNum: Int64;
  /** Corresponding penalties */
  PunishMeasureID: Int64;
  /** list of penalty targets */
  ObjectIDs: Array<string>;
  Base?: base.Base;
}

export interface MGetEntityPunishStatusResponse {
  PunishStatusMap: Record<string, PunishStatusInfo>;
  BaseResp: base.BaseResp;
}

export interface PunishMeasure {
  /** Penalty measure id */
  punish_measure_id?: string;
  /** Name of penalty */
  punish_name?: string;
  /** penalty subject */
  punish_entity?: string;
  /** penalty effect */
  punish_effect?: string;
  /** Whether to allow manual lifting of penalties */
  allow_unpunish?: UnPunishAllowConfig;
  /** creator mailbox */
  creator?: string;
  /** Duration of penalty */
  punish_duration?: Int64;
  /** Access psm */
  psm?: string;
  /** IDL branch */
  idl_branch?: string;
  /** Penalty status */
  status?: PunishMeasureStatus;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
}

export interface PunishMetaInfo {
  /** penalty subject */
  punish_entity_list: Array<string>;
  /** Optional penalty duration */
  avaliable_punish_durations: Array<Int64>;
}

export interface PunishRecord {
  /** Task ID */
  task_id?: string;
  /** Penalty measure id */
  punish_measure_id?: string;
  /** Name of penalty */
  punish_messure_name?: string;
  /** penalty subject */
  punish_entity?: string;
  /** target of punishment */
  object_id?: string;
  /** creator mailbox */
  punisher?: string;
  /** Duration of penalty */
  punish_duration?: Int64;
  /** Email address of the person relieved of punishment */
  unpunisher?: string;
  /** Reason for punishment */
  remark?: string;
  /** Penalty status */
  status?: PunishRecordStatus;
  /** penalty execution time */
  create_time?: Int64;
  /** Penalty expiration time */
  expire_time?: Int64;
}

export interface PunishScanRequest {
  Base?: base.Base;
}

export interface PunishScanResponse {
  BaseResp: base.BaseResp;
}

export interface PunishStatusInfo {
  ObjectID: string;
  Status: PunishStatus;
  /** Penalty start time, second timestamp */
  BanStartTime?: Int64;
  /** Penalty expiration time, second timestamp */
  BanExpireTime?: Int64;
}

export interface PunishTask {
  /** Task ID */
  task_id?: string;
  /** Penalty measure id */
  punish_measure_id?: string;
  /** penalty subject */
  punish_entity?: string;
  /** creator mailbox */
  operator?: string;
  /** Duration of penalty */
  punish_duration?: Int64;
  /** task category */
  type?: PunishTaskType;
  /** Penalty task execution status */
  status?: PunishTaskStatus;
  /** Number of punishment targets */
  object_num?: Int64;
  /** Sources of punishment */
  punish_source?: PunishSource;
  /** Reason for punishment */
  remark?: string;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
}

/** Update penalties */
export interface UpdatePunishMeasureRequest {
  punish_measure_id: string;
  psm?: string;
  idl_branch?: string;
  /** Penalty status */
  status?: PunishMeasureStatus;
  /** Name of penalty */
  punish_name?: string;
  /** duration */
  punish_duration?: Int64;
}

export interface UpdatePunishMeasureResponse {
  code: Int64;
  msg: string;
}
/* eslint-enable */
