/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common_struct from './common_struct';
import * as intelligence_common_struct from './intelligence_common_struct';

export type Int64 = string | number;

/** bot */
export enum BotConnectorPublishStatus {
  /** In use */
  Using = 0,
  /** Delete due to publishing failure or user logout */
  Delete = 1,
  /** disable or remove */
  Disable = 3,
}

export enum ConnectorBindType {
  /** No binding required */
  NoBindRequired = 1,
  /** Auth binding */
  AuthBind = 2,
  /** Kv binding */
  KvBind = 3,
  /** Kv and Auth authorization */
  KvAuthBind = 4,
  /** API channel binding */
  ApiBind = 5,
  WebSDKBind = 6,
  StoreBind = 7,
  /** One button each for authorization and configuration */
  AuthAndConfig = 8,
  /** template channel binding */
  TemplateBind = 9,
}

export enum ConnectorClassification {
  /** API or SDK */
  APIOrSDK = 1,
  /** social platform */
  SocialPlatform = 2,
  /** Coze Shop/Template */
  Coze = 3,
  /** Mini Program */
  MiniProgram = 4,
  /** MCP Extension Library */
  CozeSpaceExtensionLibrary = 5,
}

export enum ConnectorConfigStatus {
  /** Configured */
  Configured = 1,
  /** Not configured */
  NotConfigured = 2,
  /** Token changes */
  Disconnected = 3,
  /** Configuring, authorizing */
  Configuring = 4,
  /** Need to reconfigure  */
  NeedReconfiguring = 5,
}

/** project */
export enum ConnectorPublishStatus {
  /** In release */
  Default = 0,
  /** Under review. */
  Auditing = 1,
  /** success */
  Success = 2,
  /** fail */
  Failed = 3,
  /** disable */
  Disable = 4,
}

export enum ConnectorStatus {
  /** Normal */
  Normal = 0,
  /** Under review. */
  InReview = 1,
  /** offline */
  Offline = 2,
}

export enum PublishRecordStatus {
  /** Packing */
  Packing = 0,
  /** Packaging failed */
  PackFailed = 1,
  /** Under review. */
  Auditing = 2,
  /** review disapproved */
  AuditNotPass = 3,
  /** Channel is being released. */
  ConnectorPublishing = 4,
  /** release complete */
  PublishDone = 5,
}

export enum UserAuthStatus {
  /** Authorized */
  Authorized = 1,
  /** unauthorized */
  UnAuthorized = 2,
  /** Authorizing */
  Authorizing = 3,
}

export interface AuthLoginInfo {
  app_id?: string;
  response_type?: string;
  authorize_url?: string;
  scope?: string;
  client_id?: string;
  duration?: string;
  aid?: string;
  client_key?: string;
}

export interface CheckProjectVersionNumberData {
  is_duplicate?: boolean;
}

export interface CheckProjectVersionNumberRequest {
  project_id: string;
  version_number: string;
}

export interface CheckProjectVersionNumberResponse {
  data?: CheckProjectVersionNumberData;
  code?: Int64;
  msg?: string;
}

export interface ConnectorPublishConfig {
  /** Workflow/ChatFlow selected by publishing channel */
  selected_workflows?: Array<SelectedWorkflow>;
}

export interface ConnectorPublishResult {
  connector_id?: string;
  connector_name?: string;
  connector_icon_url?: string;
  /** channel release status */
  connector_publish_status?: ConnectorPublishStatus;
  /** Channel Release Status Supplementary Information */
  connector_publish_status_msg?: string;
  /** OpenIn Link */
  share_link?: string;
  /** Mini Program Channel Download Link */
  download_link?: string;
  /** channel release configuration */
  connector_publish_config?: ConnectorPublishConfig;
  /** Channel binding information key field name value is value */
  connector_bind_info?: Record<string, string>;
}

export interface ConnectorUnionInfo {
  id: string;
  name: string;
  description: string;
  icon_url: string;
  connector_options: Array<ConnectorUnionInfoOption>;
}

export interface ConnectorUnionInfoOption {
  /** Channel ID */
  connector_id: string;
  /** Display name, such as: hosted release, download code */
  show_name: string;
}

export interface GetProjectPublishedConnectorRequest {
  project_id: string;
}

export interface GetProjectPublishedConnectorResponse {
  data?: Array<common_struct.ConnectorInfo>;
  code?: Int64;
  msg?: string;
}

export interface GetPublishRecordDetailRequest {
  project_id: string;
  /** If you don't upload it, get the last release record. */
  publish_record_id?: string;
}

export interface GetPublishRecordDetailResponse {
  data?: PublishRecordDetail;
  code?: Int64;
  msg?: string;
}

export interface GetPublishRecordListRequest {
  project_id: string;
}

export interface GetPublishRecordListResponse {
  data?: Array<PublishRecordDetail>;
  code?: Int64;
  msg?: string;
}

export interface LastPublishInfo {
  version_number?: string;
  connector_ids?: Array<string>;
  /** channel release configuration */
  connector_publish_config?: Record<Int64, ConnectorPublishConfig>;
}

export interface PackFailedDetail {
  entity_id?: string;
  entity_type?: common_struct.ResourceType;
  entity_name?: string;
}

export interface PublishConnectorInfo {
  id: string;
  name: string;
  icon_url: string;
  /** describe */
  description: string;
  /** description extension */
  description_extra?: string;
  /** channel type */
  connector_classification: ConnectorClassification;
  /** configuration status */
  config_status: ConnectorConfigStatus;
  /** channel status */
  connector_status?: ConnectorStatus;
  /** binding type */
  bind_type: ConnectorBindType;
  /** Binding information key field name value is value */
  bind_info: Record<string, string>;
  /** Bind id information for unbinding and use */
  bind_id?: string;
  /** user authorization login information */
  auth_login_info?: AuthLoginInfo;
  /** Privacy Policy */
  privacy_policy?: string;
  /** User Agreement */
  user_agreement?: string;
  /** Whether to allow publishing */
  allow_publish?: boolean;
  /** Reasons for not allowing publishing */
  not_allow_publish_reason?: string;
  /** Channel collection id, indicating the channel that needs to be aggregated and displayed. */
  connector_union_id?: string;
  /** UI Options */
  UIOptions?: Array<UIOption>;
  /** Support commercialization */
  support_monetization?: boolean;
  /** Installation Guidelines */
  installation_guide?: string;
  /** Currently this field is only available bind_type == 8  */
  auth_status?: UserAuthStatus;
  /** Configuration status toast */
  config_status_toast?: string;
  /** connector_status the URL of the Complete Info button while under review */
  to_complete_info_url?: string;
  /** Channel release tips */
  connector_tips?: string;
}

export interface PublishConnectorListData {
  connector_list?: Array<PublishConnectorInfo>;
  last_publish_info?: LastPublishInfo;
  /** Channel collection information, the key is connector_union_id */
  connector_union_info_map?: Record<Int64, ConnectorUnionInfo>;
}

export interface PublishConnectorListRequest {
  project_id: string;
}

export interface PublishConnectorListResponse {
  data?: PublishConnectorListData;
  code?: Int64;
  msg?: string;
}

export interface PublishIntelligenceUnListData {
  /** The key is connector_id, and the value is the removal result. */
  connector_unlist_result_map?: Record<Int64, PublishIntelligenceUnListResult>;
}

export interface PublishIntelligenceUnListRequest {
  /** Published items are removed from the channel */
  intelligence_id: string;
  connector_ids: Array<string>;
  intelligence_type: intelligence_common_struct.IntelligenceType;
}

export interface PublishIntelligenceUnListResponse {
  data?: PublishIntelligenceUnListData;
  code?: Int64;
  msg?: string;
}

export interface PublishIntelligenceUnListResult {
  is_success?: boolean;
  fail_reason?: string;
}

export interface PublishProjectData {
  /** Publish record ID for front-end polling */
  publish_record_id?: string;
  /** The charging configuration is released, and the overseas environment is only available. */
  publish_monetization_result?: boolean;
}

export interface PublishProjectRequest {
  project_id: string;
  /** version number */
  version_number: string;
  /** describe */
  description?: string;
  /** The key represents connector_id, and the value is the parameter published by the channel */
  connectors?: Record<Int64, Record<string, string>>;
  /** Channel release configuration, key represents connector_id */
  connector_publish_config?: Record<Int64, ConnectorPublishConfig>;
}

export interface PublishProjectResponse {
  data?: PublishProjectData;
  code?: Int64;
  msg?: string;
}

export interface PublishRecordDetail {
  publish_record_id?: string;
  version_number?: string;
  /** release status */
  publish_status?: PublishRecordStatus;
  /** This field is deprecated, please use publish_status_detail */
  publish_status_msg?: string;
  /** Channel release results */
  connector_publish_result?: Array<ConnectorPublishResult>;
  /** Release status Supplementary information */
  publish_status_detail?: PublishRecordStatusDetail;
}

export interface PublishRecordStatusDetail {
  /** Packaging failure details */
  pack_failed_detail?: Array<PackFailedDetail>;
}

export interface SelectedWorkflow {
  workflow_id?: string;
  workflow_name?: string;
}

export interface UIOption {
  /** UIChannel Options */
  ui_channel?: string;
  /** Is it optional */
  available?: boolean;
  /** unselectable reason */
  unavailable_reason?: string;
}
/* eslint-enable */
