/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as agw_common from './agw_common';
import * as common from './common';
import * as queries from './queries';

export type Int64 = string | number;

export enum AuthStatus {
  AuthStatusNormal = 0,
  AuthStatusGeoLocationUnableParse = 1,
  AuthStatusGeoLocationIllegal = 2,
}

export enum BotAuthType {
  AuthTypeGeoLocation = 1,
}

export enum Operation {
  And = 0,
  Or = 1,
  Not = 2,
}

export interface AddBotAuthReq {
  /** Bot ID */
  bot_id: string;
  /** authorization type */
  auth_type: BotAuthType;
  /** AGW loader common parameters ( */
  agw_common_param?: agw_common.AgwCommonParam;
}

export interface AddBotAuthResp {
  code: number;
  msg: string;
}

export interface APIQueryRequest {
  /** Space ID for permission verification */
  space_id: string;
  /** Bot ID */
  bot_id: string;
  /** Indicator name. Enumeration value: dau/dnu/wau/wnu/message_count/retention_rate/token */
  metrics_type: string;
  /** Time type. Enumeration value: hour/day/week/month/quarter/year */
  time_type: string;
  /** Time frame. */
  time_range: TimeRange;
  /** Other filter dimensions */
  filter?: Filter;
  /** filter abstraction */
  criterias?: Array<Criteria>;
}

export interface APIQueryResponse {
  data: ObQueryData;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  code: Int64;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  msg: string;
}

export interface BatchAPIQueryRequest {
  /** Space ID for permission verification */
  space_id: string;
  /** Bot ID */
  bot_id: string;
  /** Multi-indicator name */
  metrics_types: Array<string>;
  /** time frame */
  time_range: TimeRange;
  /** Need to return the data type, enumerate value/group_list/point_list/ranking, because the same indicator may require different data types */
  data_type: string;
  /** global filter dimension */
  filter?: BatchFilter;
  /** Aggregate dimension, dimension Aggregate metrics are required, currently only single dimension */
  group_type?: Array<string>;
  /** Time aggregation type, multi-axis chart/ranking required, enumeration: hour/day/week/month/quarter/year */
  period_type?: string;
  /** Fixed time range type, non-accumulative indicator required */
  time_range_type?: string;
  /** Is it requesting real-time data, which is used to display real-time icons? */
  is_realtime?: boolean;
}

export interface BatchAPIQueryResponse {
  data: Array<BatchObData>;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  code: Int64;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  msg: string;
}

export interface BatchAPIQueryV2Request {
  /** Scene parameters, common parameters used in different scenarios */
  scene_param: common.SceneCommonParam;
  /** Multi-indicator name */
  metrics_types: Array<string>;
  /** Need to return the data type, enumerate value/group_list/point_list/ranking, because the same indicator may require different data types */
  data_type: string;
  /** Data sources. Enumerations: user_overview, connector_group, user_engagement, error_code_group_value. A data source may be resolved in different data_type */
  data_source_type: string;
  /** global filter dimension */
  filter?: BatchFilter;
  /** Aggregate dimension, dimension Aggregate metrics are required, currently only single dimension */
  group_type?: Array<string>;
  /** Time aggregation type, multi-axis chart/ranking required, enumeration: day, week, month, quarter */
  period_type?: string;
  /** Fixed time range types. Enumerations: last_7_days, last_30_days, last_90_days, last_180_days, acc */
  time_range_type?: string;
}

export interface BatchAPIQueryV2Response {
  data: Array<BatchObData>;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  code: Int64;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  msg: string;
}

export interface BatchFilter {
  /** channel name */
  connector_id?: Array<string>;
}

export interface BatchObData {
  /** indicator type */
  metrics_type: string;
  /** Data type returned */
  data_type: string;
  /** index total value */
  value?: Value;
  /** Aggregate the result list, split by dimension */
  group_list?: Array<Record<string, string>>;
  /** Line chart point list */
  point_list?: Array<Point>;
  /** ranking */
  ranking?: RankValue;
}

export interface BotAuthData {
  /** permission type */
  auth_type: BotAuthType;
  /** Is there any abnormality in the authorization, such as the location being forcibly rewritten when authorizing the location (because it cannot be resolved/the location is not compliant) */
  auth_status?: AuthStatus;
  /** Geolocation authorization information, including location */
  geo_location?: GeoLocation;
}

export interface BotSatisfaction {
  score: number;
  increment: number;
  hasScore: boolean;
}

export interface BotSatisfactionRequest {
  space_id: string;
  bot_id: string;
  /** Time frame. */
  time_range: TimeRange;
  /** List of designated channels */
  connector_ids?: Array<string>;
}

export interface BotSatisfactionResponse {
  data: BotSatisfaction;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  code: Int64;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  msg: string;
}

export interface Criteria {
  criteria?: Criteria;
  op?: Operation;
  key: string;
  value: string;
}

export interface DeleteBotAuthReq {
  /** Bot ID */
  bot_id: string;
  /** permission type */
  auth_type: BotAuthType;
}

export interface DeleteBotAuthResp {
  code: number;
  msg: string;
}

export interface Dim {
  user_type: string;
  connector_name: string;
  retention_period: string;
  model_name: string;
  message_type: string;
}

export interface EvalSupportChannel {
  status: string;
  channels: Array<string>;
}

export interface EvalSupportChannelRequest {
  bot_id: string;
  space_id: string;
}

export interface EvalSupportChannelResponse {
  data: EvalSupportChannel;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  code: Int64;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  msg: string;
}

export interface Filter {
  /** User type. Enumeration value: new_user/old_user. If each field is not passed, it means no filtering. */
  user_type?: Array<string>;
  /** channel name */
  connector_name?: Array<string>;
  /** Retention period. Enumeration value: 1d/7d/30d */
  retention_period?: Array<string>;
  /** Large model names, such as GPT-3.5 */
  model_name?: Array<string>;
}

export interface GeoLocation {
  /** Large regions, note: Chinese mainland, Hong Kong, Macau, Taiwan all have their own codes */
  country_identifier?: string;
  country_name?: string;
  /** Local, domestic is a province */
  subdivision_identifier?: string;
  subdivision_name?: string;
  /** city */
  city_identifier?: string;
  city_name?: string;
  /** Large regions, note: Chinese mainland, Hong Kong, Macau, Taiwan all have their own codes */
  origin_country_identifier?: string;
  origin_country_name?: string;
  /** Local, domestic is a province */
  origin_subdivision_identifier?: string;
  origin_subdivision_name?: string;
  /** city */
  origin_city_identifier?: string;
  origin_city_name?: string;
  /** Original client side ip */
  client_ip?: string;
  /** Authorization timestamp */
  auth_timestamp?: string;
}

export interface GetBotFgRequest {
  space_id: string;
  bot_id: string;
}

export interface GetBotFgResponse {
  /** Fg switch for queries page */
  enable_queries?: boolean;
  code: Int64;
  msg: string;
}

export interface GetQueriesDataRequest {
  space_id: string;
  bot_id: string;
  /** time frame */
  time_range: TimeRange;
  /** Key: field name, corresponding to GetQueriesFieldMetasResponse field_metas key */
  filters?: Record<string, queries.QueriesFilter>;
  /** Sort fields, fill in the filters key */
  order_by?: string;
  /** asc/desc */
  sort_order?: string;
  /** offset */
  page_token?: Int64;
  /** Default and maximum are 20. */
  size?: Int64;
}

export interface GetQueriesDataResponse {
  data?: Array<queries.QueriesData>;
  page_token?: Int64;
  has_more?: boolean;
  code: Int64;
  msg: string;
}

export interface GetQueriesFieldMetasRequest {
  space_id: string;
  bot_id: string;
}

export interface GetQueriesFieldMetasResponse {
  /** Key: field name, such as "channel", "intention", etc., corresponding to the key of GetQueriesDataRequest. Filters */
  field_metas?: Record<string, queries.FieldMeta>;
  code: Int64;
  msg: string;
}

export interface ObData {
  /** The time point of the indicator. Timestamp format, accurate to milliseconds */
  metrics_time: Int64;
  /** The value of the indicator */
  value: string;
  /** Dimensions of metrics */
  dim: Dim;
  /** data label name */
  name?: Array<string>;
  /** Data Label Name Additional Information */
  tag?: string;
  /** Data label display name (can be displayed directly by the front end) */
  label_name?: string;
  /** The ID of the data label, which uniquely identifies the label and is used as a filter when jumping to the page */
  label_id?: string;
}

export interface ObQueryData {
  list: Array<ObData>;
}

export interface Point {
  /** The time point of the indicator. Timestamp format, accurate to milliseconds */
  metrics_time: Int64;
  /** The value of the indicator */
  value: string;
}

export interface PreCheckAddBotAuthReq {
  /** Bot ID */
  bot_id: string;
  /** authorization type */
  auth_type: BotAuthType;
  /** AGW loader common parameters ( */
  agw_common_param?: agw_common.AgwCommonParam;
}

export interface PreCheckAddBotAuthResp {
  data?: BotAuthData;
  code: number;
  msg: string;
}

export interface RankValue {
  /** this cycle ranking */
  value?: string;
  /** last cycle ranking */
  last_period_value?: string;
  /** Category name */
  category_name?: string;
}

export interface TimeRange {
  /** Start time. timestamp, accurate to milliseconds */
  start: Int64;
  /** End time. timestamp, accurate to milliseconds */
  end: Int64;
}

export interface UserIntentSatisfactionRanking {
  starling_key: string;
  frequency: Int64;
  score: number;
  contribution: number;
  label_id: string;
  parent_starling_key: string;
}

export interface UserIntentSatisfactionRankingRequest {
  space_id: string;
  bot_id: string;
  /** Time frame. */
  time_range: TimeRange;
  label_depth: string;
  /** List of designated channels */
  connector_ids?: Array<string>;
}

export interface UserIntentSatisfactionRankingResponse {
  data: UserIntentSatisfactionRankings;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  code: Int64;
  /** Use for API interfaces. Do not use this field for RPC interfaces */
  msg: string;
}

export interface UserIntentSatisfactionRankings {
  data: Array<UserIntentSatisfactionRanking>;
}

export interface Value {
  /** Current period value */
  value?: string;
  /** upper period value */
  last_period_value?: string;
}

export interface ViewBotAuthReq {
  /** Bot ID */
  bot_id: string;
}

export interface ViewBotAuthResp {
  data_list?: Array<BotAuthData>;
  code: number;
  msg: string;
}
/* eslint-enable */
