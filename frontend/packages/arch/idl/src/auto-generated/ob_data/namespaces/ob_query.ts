/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum CalFieldStatus {
  /** Field is being calculated */
  CalFieldStatusNotReady = 0,
  /** The field production is completed and can be displayed. */
  CalFieldStatusOK = 1,
}

export enum Status {
  StatusSuccess = 0,
  StatusFail = 1,
}

export interface ExportQueryToCsvRequest {
  /** space id */
  space_id: string;
  /** bot id */
  bot_id: string;
  /** filter parameters */
  query_filter?: QueryFilter;
}

export interface ExportQueryToCsvResponse {
  body?: Blob;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface GetQueryEnumsRequest {
  /** space id */
  space_id: Int64;
  bot_id: Int64;
}

export interface GetQueryEnumsResponse {
  intent?: Array<Intent>;
  /** key: connector_id, value: connector_name */
  connectors?: Array<KV>;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface GetQueryStatData {
  /** Total Number of Traces */
  total_count?: number;
  /** Error rate, e.g. 0.3 represents 30%. */
  error_rate?: number;
  /** Total tokens consumption */
  tokens?: Percentile;
  /** total time delay */
  latency?: Percentile;
  /** first character reply delay */
  latency_first_resp?: Percentile;
}

export interface GetQueryStatRequest {
  /** space id */
  space_id: string;
  /** bot id */
  bot_id: string;
  query_filter?: QueryFilter;
}

export interface GetQueryStatResponse {
  data: GetQueryStatData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface I64Range {
  /** Greater Than or Equal (>=) */
  gte?: Int64;
  /** Less Than or Equal (<=) */
  lte?: Int64;
}

export interface Intent {
  key?: string;
  value?: string;
  children?: Array<Intent>;
}

export interface KV {
  Key?: string;
  Value?: string;
}

export interface ListQueryRequest {
  /** space id */
  space_id: string;
  /** bot id */
  bot_id: string;
  /** filter parameters */
  query_filter?: QueryFilter;
  /** default 20 max 200 */
  limit?: number;
  /** Paging parameters from the last request */
  page_token?: string;
}

export interface ListQueryResponse {
  data: Array<QueryData>;
  /** The paging token of the next page, which is returned when the front end pulls the data on the next page */
  next_page_token: string;
  /** Is there any more data? */
  has_more: boolean;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface Percentile {
  p50?: number;
  p99?: number;
}

export interface QueryData {
  query_id?: string;
  /** trace_id to query trace details */
  trace_id?: string;
  /** state */
  status?: Status;
  /** user ID */
  user_id?: string;
  /** Conversation ID */
  message_id?: string;
  /** Session ID */
  session_id?: string;
  /** user input */
  input?: string;
  /** bot output */
  output?: string;
  /** model input length */
  input_tokens?: number;
  /** model output length */
  output_tokens?: number;
  /** initiation request time */
  start_time?: string;
  /** overall time consuming */
  latency?: Int64;
  /** first token delay */
  latency_first_resp?: Int64;
  /** channel name */
  connector?: string;
  /** intent tag */
  intent?: string;
  /** Intent field production status */
  intent_status?: CalFieldStatus;
  /** Session field Production status */
  session_id_status?: CalFieldStatus;
  /** Session ID (the original value reported by the connector platform) */
  conversation_id?: string;
}

export interface QueryFilter {
  start_time?: TimeRange;
  status?: Array<Status>;
  user_ids?: Array<string>;
  message_ids?: Array<string>;
  session_ids?: Array<string>;
  input?: string;
  output?: string;
  input_tokens?: I64Range;
  output_tokens?: I64Range;
  latency?: I64Range;
  latency_first_resp?: I64Range;
  connector_ids?: Array<string>;
  second_class_intents?: Array<string>;
}

export interface TimeRange {
  /** Greater Than or Equal (>=) ms */
  gte?: string;
  /** Less Than or Equal (<=) ms */
  lte?: string;
}
/* eslint-enable */
