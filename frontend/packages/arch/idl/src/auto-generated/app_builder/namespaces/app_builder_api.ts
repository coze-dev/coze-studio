/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as user from './user';
import * as filebox from './filebox';
import * as starry from './starry';

export type Int64 = string | number;

/** scene */
export enum AIGenScene {
  /** Corresponding prompt platform task: AgentAppBuilderWorflowGen */
  Workflow = 0,
  /** Corresponding prompt platform task: AgentAppBuilderPageGen */
  Page = 1,
  /** Corresponding prompt platform task: AgentAppBuilderSystemGen */
  SystemPrompt = 2,
  Requirement = 3,
  Database = 4,
}

export enum FieldItemType {
  /** Text (corresponding to varchar in MySQL) */
  Text = 1,
  /** number */
  Number = 2,
  /** time */
  Date = 3,
  /** float */
  Float = 4,
  /** bool */
  Boolean = 5,
  /** Text (corresponding to MySQL text) */
  FullText = 6,
}

export enum MessageType {
  System = 1,
  User = 2,
  Assistant = 3,
  Placeholder = 4,
}

export interface AddDatabaseData {
  table_ids?: Array<string>;
}

export interface AddDatabaseRequest {
  /** bot_id bound bot */
  bot_id?: string;
  /** creator id */
  user_id?: string;
  /** Bot space id */
  'space-id'?: string;
  /** table information */
  table_list?: Array<TableInfo>;
  Base?: base.Base;
}

export interface AddDatabaseResponse {
  data?: AddDatabaseData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface AgentAppBuilderProxyRequest {
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface AgentAppBuilderProxyResponse {
  data?: string;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface AgentAppInfoData {
  /** agent app id */
  agent_app_id?: string;
  agent_app_name?: string;
  icon?: string;
  type_source_app_id?: string;
  /** space id */
  space_id?: string;
  /** bot id */
  bot_id?: string;
  /** Starry Night app id */
  app_id?: string;
  /** Starry night sandbox id */
  sandbox_id?: string;
  /** Starry night snapshot id */
  snapshot_id?: string;
  /** creator ID */
  creator_id?: string;
  /** Create timestamp seconds */
  created_at?: string;
  /** Modify timestamp seconds */
  updated_at?: string;
  /** version_name xxx.xxx.xxx */
  version_name?: string;
  /** Maximum version number published xxx.xxx.xxx */
  max_publish_version_name?: string;
  /** local plugin id */
  plugin_id?: string;
}

export interface AgentAppPublishInfo {
  /** id primary key */
  publish_id?: string;
  /** agent_app_id */
  agent_app_id?: string;
  /** space id */
  space_id?: string;
  /** bot id */
  bot_id?: string;
  /** Starry Night app id */
  app_id?: string;
  /** Snapshot ID */
  snapshot_id?: string;
  /** version name xxx.xxx.xxx */
  version_name?: string;
  /** version code */
  version_code?: Int64;
  /** describe */
  description?: string;
  /** content url */
  content_url?: string;
  /** Publisher Information */
  creator?: user.UserBasicInfo;
  /** creation time */
  created_at?: Int64;
  /** Modification time */
  updated_at?: Int64;
  /** Maximum version number published xxx.xxx.xxx */
  max_publish_version_name?: string;
  /** release status */
  status?: number;
  /** Pipeline ID */
  bytecycle_id?: string;
  /** Pipeline build_no */
  build_no?: number;
}

export interface AIGenerateContentData {
  /** The generated content varies from scene to scene, but it's all a string in the end. */
  content?: string;
}

export interface AIGenerateContentRequest {
  /** Scene parameters, corresponding to prompt platform tasks */
  scene?: AIGenScene;
  /** Space ID */
  'space-id'?: string;
  /** user_id cooperate with space ID authentication */
  user_id?: string;
  /** The prompt platform has 3 variables: [text message] [message list] [struct]
Text message, key = variable name value = variable value
For example: language = english */
  string_variables?: Record<string, string>;
  /** Message list, key = variable name value = message list */
  message_variables?: Record<string, Array<Message>>;
  Base?: base.Base;
}

export interface AIGenerateContentResponse {
  data?: AIGenerateContentData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface BatchGetPackageListRequest {
  /** query structure */
  query?: Array<GetPackageQuery>;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface BatchGetPackageListResponse {
  /** package_list */
  data?: GetPackageListData;
  code: Int64;
  msg: string;
  /** Basic Response Results */
  BaseResp?: base.BaseResp;
}

export interface CreateAgentAppData {
  /** agent app id */
  agent_app_id?: string;
}

export interface CreateAgentAppRequest {
  agent_app_name?: string;
  icon?: string;
  type_source_app_id?: string;
  /** space id */
  space_id?: string;
  /** bot id */
  bot_id?: string;
  /** Starry Night App ID, does not accept parameters */
  AppID?: string;
  /** Starry Night SandBox ID, does not accept parameters */
  SandboxID?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface CreateAgentAppResponse {
  data?: CreateAgentAppData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CreateLocalPluginData {
  /** plugin id */
  plugin_id?: string;
}

export interface CreateLocalPluginRequest {
  agent_app_id?: string;
  /** ai_plugin (fill in json) */
  ai_plugin?: string;
  /** OpenAPI (fill in yaml) */
  openapi?: string;
  'X-Space-Id': string;
  Cookie?: string;
  Base?: base.Base;
}

export interface CreateLocalPluginResponse {
  data?: CreateLocalPluginData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface CreatePackageData {
  package_id?: string;
}

export interface CreatePackageRequest {
  /** 1:            i64       PackageID   (agw.key = 'package_id',agw.js_conv = 'str'), */
  package_name: string;
  space_id?: string;
  bot_id?: string;
  version_name: string;
  meta_title?: string;
  meta_desc?: string;
  meta_contains?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface CreatePackageResponse {
  /** agent app info */
  data?: CreatePackageData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface DeletePackageRequest {
  /** package name */
  package_name?: string;
  /** version number */
  version_name?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface DeletePackageResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface DoActionRequest {
  /** Pass through to plugin */
  plugin_id: string;
  /** Pass through to plugin */
  api_name: string;
  /** The space id of the bot, if you don't know it, don't fill it in. */
  user_id?: string;
  /** Pass through to plugin */
  parameters?: string;
  /** Current message ID */
  message_id?: string;
  plugin_name?: string;
  device_id?: string;
  /** Additional information */
  ext?: Record<string, string>;
  /** Output token limit */
  output_token_limit?: string;
  section_id?: string;
  Base?: base.Base;
}

export interface DoActionResponse {
  data?: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface FieldDefault {
  default_text?: string;
  default_number?: NumberDefault;
  /** Time, timestamp */
  default_date?: string;
  default_float?: number;
  default_bool?: boolean;
}

export interface FieldItem {
  name?: string;
  desc?: string;
  type?: FieldItemType;
  must_required?: boolean;
  primary_key?: boolean;
  is_visible?: boolean;
  default_value?: FieldDefault;
  alter_id?: string;
}

export interface GenAgentAppData {
  /** Created agent_id */
  agent_id?: string;
}

export interface GenAgentAppRequest {
  /** bot_id bound bot */
  bot_id?: string;
  /** Starry night sandbox data */
  sandbox?: string;
  /** agent_name current bot name is the same */
  name?: string;
  /** creator id */
  user_id?: string;
  /** Bot space id */
  'space-id'?: string;
  /** App type */
  agent_type?: number;
  Base?: base.Base;
}

export interface GenAgentAppResponse {
  data?: GenAgentAppData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetAgentAppPublishListData {
  /** publish info list */
  publish_list?: Array<AgentAppPublishInfo>;
  /** total */
  total?: Int64;
}

export interface GetAgentAppPublishListRequest {
  /** publish id */
  publish_id?: Int64;
  /** agent app id */
  agent_app_id?: Int64;
  /** agent app name */
  agent_app_name?: string;
  /** bot id */
  bot_id?: Int64;
  /** space id */
  space_id?: Int64;
  /** The current page number, the default is 1. */
  page?: number;
  /** The number of displays per page is 20 by default. */
  size?: number;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface GetAgentAppPublishListResponse {
  data?: GetAgentAppPublishListData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetAgentAppPublishRequest {
  /** publish id */
  publish_id?: Int64;
  /** app id */
  app_id?: string;
  /** bot id */
  bot_id?: Int64;
  /** with_max_version */
  with_max_version?: boolean;
  /** agent app id */
  agent_app_id?: Int64;
  /** space id */
  space_id?: Int64;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface GetAgentAppPublishResponse {
  data?: AgentAppPublishInfo;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetAgentAppRequest {
  /** agent app id */
  agent_app_id?: Int64;
  /** space id */
  space_id?: Int64;
  /** bot id */
  bot_id?: Int64;
  /** version name ：eg ：xxx.xxx.xxx */
  version_name?: string;
  /** Starry Night app id */
  app_id?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface GetAgentAppResponse {
  /** agent app info */
  data?: AgentAppInfoData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetFileListRequest {
  /** Resource belongs to botId - required */
  bot_id: string;
  /** 2: required string ConnectorID (agw.source = "query", agw.key = "connector_id", agw.js_conv = 'str '), // resource belongs to connectorId - requiredonnectorId - required
3: required i64 UserID (agw.source = "query", agw.key = "user_id", agw.js_conv = 'str '), // user id - required Required
File name, fuzzy search */
  file_name?: string;
  /** Large file categories, exact matching */
  md_type?: number;
  /** File format, fuzzy search */
  file_format?: string;
  /** Query start timestamp, in seconds, 0 at the same time as EndTime indicates that the query condition is not enabled */
  begin_time?: string;
  /** Query end timestamp, in seconds, 0 at the same time as BeginTime indicates that the query condition is not enabled */
  end_time?: string;
  /** Number of pages, starting from 0 */
  page?: number;
  /** Page size, default 10 */
  size?: number;
  Base?: base.Base;
}

export interface GetFileListResponse {
  /** Total number of eligible queries */
  total?: number;
  /** query result */
  data?: Array<filebox.FileListRPCMeta>;
  code: Int64;
  msg: string;
  /** error message */
  BaseResp?: base.BaseResp;
}

export interface GetFileMetaInfoRequest {
  /** 1: required i64 UserID (agw.source = 'query', agw.key = 'user_id', agw.js_conv = 'str '), // userId */ bot_id: string;
  /** 3:  optional string ConnectorID (agw.source = "query", agw.key = "connector_id",agw.js_conv = 'str'), */
  file_id?: string;
  file_uri?: string;
  file_name?: string;
  biz_type?: string;
  Base?: base.Base;
}

export interface GetFileMetaInfoResponse {
  data?: filebox.FileMetaInfo;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetFileURLRequest {
  /** Resource URI required */
  uri: string;
  Base?: base.Base;
}

export interface GetFileURLResponse {
  /** query result */
  data: filebox.FileURLData;
  code: Int64;
  msg: string;
  /** error message */
  BaseResp?: base.BaseResp;
}

export interface GetListFileChunkRequest {
  /** 1: required i64 UserID (agw.source = "query", agw.key = "user_id", agw.js_conv = 'str '), // userId */ bot_id: string;
  /** 3:  optional string     ConnectorID     (agw.source = "query", agw.key = "connector_id",agw.js_conv = 'str'), */
  biz_type?: string;
  file_id?: string;
  file_uri?: string;
  /** Include the seq_id, starting at 0 */
  start_chunk_seq_id?: number;
  /** Including the seq_id, take up to 50 chunks at a time. end_chunk_seq_id - start_chunk_seq_id + 1 < = 50 */
  end_chunk_seq_id?: number;
  Base?: base.Base;
}

export interface GetListFileChunkResponse {
  data?: Array<filebox.FileChunk>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetPackageData {
  /** id primary key */
  id?: string;
  space_id?: Int64;
  package_name?: string;
  version_name?: string;
  version_code?: string;
  is_latest_version?: number;
  meta_title?: string;
  meta_desc?: string;
  meta_contains?: string;
  /** Publisher Information */
  creator?: user.UserBasicInfo;
  /** creation time */
  created_at?: Int64;
  /** Modification time */
  updated_at?: Int64;
}

export interface GetPackageListData {
  /** package_list */
  package_list?: Array<GetPackageData>;
  /** total */
  total?: Int64;
}

export interface GetPackageListRequest {
  /** 1:   string         PackageID   (agw.source = 'query',  agw.key = 'package_id')                     ,   // package_id
package name */
  package_name?: string;
  /** version number */
  version_name?: string;
  /** The current page number, the default is 1. */
  page?: number;
  /** The number of displays per page is 10 by default. */
  size?: number;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface GetPackageListResponse {
  /** package_list */
  data?: GetPackageListData;
  code: Int64;
  msg: string;
  /** Basic Response Results */
  BaseResp?: base.BaseResp;
}

export interface GetPackageQuery {
  /** package name */
  package_name?: string;
  /** version number */
  version_name?: string;
}

export interface GetPackageRequest {
  /** package name */
  package_name?: string;
  /** version number */
  version_name?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface GetPackageResponse {
  /** agent app info */
  data?: GetPackageData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetPackageVersionListData {
  /** version list */
  version_list?: Array<string>;
  /** total */
  total?: Int64;
}

export interface GetPackageVersionListRequest {
  /** 1:   string         PackageID   (agw.source = 'query',  agw.key = 'package_id')                     ,   // package_id
package name */
  package_name?: string;
  /** The current page number, the default is 1. */
  page?: number;
  /** The number of displays per page is 20 by default. */
  size?: number;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface GetPackageVersionListResponse {
  /** version list */
  data?: GetPackageVersionListData;
  code: Int64;
  msg: string;
  /** Basic Response Results */
  BaseResp?: base.BaseResp;
}

export interface Message {
  type?: MessageType;
  content?: string;
}

export interface NumberDefault {
  auto_increment?: boolean;
  value?: string;
}

export interface PreviewAgentAppData {
  Content: string;
}

export interface PreviewAgentAppRequest {
  agent_app_id?: string;
  'use-builder-psm'?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface PreviewAgentAppResponse {
  data?: PreviewAgentAppData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface PublishAgentAppData {
  /** publish id */
  publish_id?: string;
  /** release status */
  status?: number;
}

export interface PublishAgentAppRequest {
  /** agent app id */
  agent_app_id?: string;
  /** agent app name */
  agent_app_name?: string;
  /** release description */
  remark?: string;
  /** version_name xxx.xxx.xxx */
  version_name?: string;
  /** Array of page IDs */
  page_ids?: Array<string>;
  /** Whether to post to bean buns */
  to_doubao?: boolean;
  'X-Space-Id'?: string;
  Cookie?: string;
  Base?: base.Base;
}

export interface PublishAgentAppResponse {
  data?: PublishAgentAppData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface SearchFileRequest {
  /** 1: required i64 UserID (agw.source = "query", agw.key = "user_id", agw.js_conv = 'str ') , // userId */ bot_id: string;
  /** 3:  optional string         ConnectorID (agw.source = "query",  agw.key = "connector_id",agw.js_conv = 'str')   , */
  query?: string;
  file_uri_list?: Array<string>;
  file_name_list?: Array<string>;
  Base?: base.Base;
}

export interface SearchFileResponse {
  data?: Array<filebox.FileSearchItem>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface StarryClonePageRequest {
  sandbox_id: string;
  app_id?: string;
  page_id: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryClonePageResponse {
  Data?: Array<starry.IPage>;
  BaseResp?: base.BaseResp;
}

export interface StarryCreatePageRequest {
  sandbox_id?: string;
  app_id?: string;
  page_id?: string;
  data?: string;
  exts?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryCreatePageResponse {
  Data?: starry.IPage;
  BaseResp?: base.BaseResp;
}

export interface StarryCreateSnapshotRequest {
  sandbox_id?: string;
  desc?: string;
  page_ids?: Array<string>;
  previous_snapshot_id?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryCreateSnapshotResponse {
  snapshotId?: string;
  version?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryDeletePageRequest {
  sandbox_id?: string;
  page_id?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryDeletePageResponse {
  deletedCount?: number;
  BaseResp?: base.BaseResp;
}

export interface StarryGetCompSetsRequest {
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetCompSetsResponse {
  data?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryGetPageRequest {
  sandbox_id?: string;
  page_id?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetPageResponse {
  Data?: starry.IPage;
  BaseResp?: base.BaseResp;
}

export interface StarryGetPreviewDataRequest {
  sandbox_id?: string;
  page_id?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetPreviewDataResponse {
  Sandbox?: starry.ISandbox;
  Page?: starry.IPage;
  BaseResp?: base.BaseResp;
}

export interface StarryGetSandboxRequest {
  sandbox_id?: string;
  with_app?: boolean;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetSandboxResponse {
  Sandbox?: starry.ISandbox;
  App?: starry.IApp;
  BaseResp?: base.BaseResp;
}

export interface StarryGetSandboxSnapshotRequest {
  sandbox_id?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetSandboxSnapshotResponse {
  Data?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryGetSnapshotRequest {
  snapshot_id?: string;
  sandbox_id?: string;
  version?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetSnapshotResponse {
  Data?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryRestoreSnapshotRequest {
  snapshot_id: string;
  sandbox_id: string;
  action?: string;
  version?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryRestoreSnapshotResponse {
  sandbox?: starry.ISandbox;
  pages?: Array<string>;
  BaseResp?: base.BaseResp;
}

export interface StarryUpdatePageRequest {
  sandbox_id?: string;
  page_id?: string;
  crdt_history?: string;
  action?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryUpdatePageResponse {
  actionId?: string;
  page?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryUpdateSandboxRequest {
  sandbox_id?: string;
  crdt_history?: string;
  action?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface StarryUpdateSandboxResponse {
  actionId?: string;
  sandbox?: string;
  BaseResp?: base.BaseResp;
}

export interface SummaryFileRequest {
  bot_id?: string;
  /** File Key */
  file_key?: string;
  base?: base.Base;
}

export interface SummaryFileResponse {
  SummaryInfo?: SummaryInfo;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface SummaryInfo {
  file_name: string;
  /** summary content */
  content: string;
}

export interface TableInfo {
  /** Database name */
  name?: string;
  /** Database description */
  desc?: string;
  /** field configuration */
  field_list?: Array<FieldItem>;
  /** pattern */
  rw_mode?: number;
}

export interface UpdateAgentAppData {
  /** agent app id */
  agent_app_id?: string;
}

export interface UpdateAgentAppRequest {
  /** agent app id */
  agent_app_id?: string;
  agent_app_name?: string;
  icon?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface UpdateAgentAppResponse {
  data?: UpdateAgentAppData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UpdateAgentBotData {
  workflow_list?: Array<WorkflowData>;
}

export interface UpdateAgentBotRequest {
  /** bot_id update bot parameters */
  bot_id?: string;
  /** Bot workflow schema, associated bot workflow list */
  bot_workflow_list?: Array<WorkflowData>;
  /** Bot prompt */
  system_prompt?: string;
  /** user_id update bot parameters */
  user_id?: string;
  /** space_id update bot parameters */
  'space-id'?: string;
  /** Agent workflow shcema, only the agent's workflow list is associated */
  agent_workflow_list?: Array<WorkflowData>;
  /** Table ids table id list */
  table_ids?: Array<string>;
  Base?: base.Base;
}

export interface UpdateAgentBotResponse {
  data?: UpdateAgentBotData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UpdateLocalPluginData {}

export interface UpdateLocalPluginRequest {
  agent_app_id?: string;
  /** ai_plugin (fill in json) */
  ai_plugin?: string;
  /** OpenAPI (fill in yaml) */
  openapi?: string;
  client_id?: string;
  client_secret?: string;
  service_token?: string;
  'X-Space-Id': string;
  Cookie?: string;
  Base?: base.Base;
}

export interface UpdateLocalPluginResponse {
  data?: UpdateLocalPluginData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UpdatePackageRequest {
  package_id?: string;
  package_name: string;
  /** 3:            i64       SpaceID     (agw.source = 'body',   agw.key = 'space_id',  agw.js_conv = 'str') ,
4:            i64       BotID       (agw.source = 'body',   agw.key = 'bot_id',    agw.js_conv = 'str') , */
  version_name: string;
  meta_title?: string;
  meta_desc?: string;
  meta_contains?: string;
  'X-Space-Id'?: string;
  Base?: base.Base;
}

export interface UpdatePackageResponse {
  /** agent app info */
  data?: CreatePackageData;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface UploadFileRequest {
  /** file name */
  file_name?: string;
  /** resource URI */
  source_uri?: string;
  /** botid */
  bot_id?: string;
  base?: base.Base;
}

export interface UploadFileResponse {
  data?: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface WorkflowData {
  /** workflow_id */
  id?: string;
  /** Workflow name */
  name?: string;
  /** Workflow description */
  desc?: string;
  /** workflow schema */
  schema?: string;
  /** Workflw icon uri */
  icon_uri?: string;
  /** Workflow associated plugin_id */
  plugin_id?: string;
  /** Workflow imported parameter list, one parameter contains: name, desc, required, type, sub_parameters, sub_type */
  param?: string;
  /** WorkFlowC exported parameter list */
  outputs?: string;
}
/* eslint-enable */
