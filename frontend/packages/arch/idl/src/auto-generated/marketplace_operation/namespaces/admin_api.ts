/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as product_common from './product_common';
import * as marketplace_common from './marketplace_common';

export type Int64 = string | number;

export enum GetBotScoreSortType {
  TotalSocre = 1,
  StaticScore = 2,
  DynamicScore = 3,
  ConversationScore = 4,
  LastLitingTime = 5,
  EvaluationScore = 6,
}

export enum LandingConfigType {
  /** special topic */
  Topic = 1,
  /** top template */
  TopTemplate = 2,
  /** template list */
  TemplateList = 3,
  /** Customer logo */
  CustomerLogo = 4,
  /** Developer Voice */
  DeveloperVoice = 5,
  /** Customer case */
  CustomerCase = 6,
}

export enum MarkType {
  Check = 1,
  Uncheck = 2,
}

export enum SetFeaturedProductConfigOpType {
  Add = 1,
  Update = 2,
}

export enum SetLandingConfigOpType {
  /** Developer voice and customer case support additions, deletions and changes. For updates to the same record, it is an overlay update. */
  Add = 1,
  Update = 2,
  Delete = 3,
  /** Topics, templates, customer logos support coverage updates
overwrite update */
  Overwrite = 4,
}

export enum SetProductRecommendConfigOpType {
  Add = 1,
  Update = 2,
}

export enum SetTopicOpType {
  Add = 1,
  Update = 2,
}

export enum SyncProductForSearchMethod {
  /** Name and value, aligned to the Status field in the search platform */
  Delete = 3,
  /** Partial updates, new if the document does not exist (both creation and update are sampled in this way) */
  Upsert = 5,
}

export interface AdminActivateGlobalProductData {
  is_hit_ppe?: boolean;
}

export interface AdminActivateGlobalProductRequest {
  entity_type: product_common.ProductEntityType;
  product_id: string;
}

export interface AdminActivateGlobalProductResponse {
  code: number;
  message: string;
  data?: AdminActivateGlobalProductData;
}

export interface AdminGetGlobalProductHistoryRequest {
  entity_type: product_common.ProductEntityType;
  page_num: number;
  page_size: number;
}

export interface AdminGetGlobalProductHistoryResponse {
  code: number;
  message: string;
  data?: GlobalProductHistoryData;
}

export interface AdminUpdateGlobalProductData {
  product_id?: string;
  is_hit_ppe?: boolean;
}

export interface AdminUpdateGlobalProductRequest {
  entity_type: product_common.ProductEntityType;
  product_name: string;
  product_desc: string;
  skus: Array<product_common.SKUEntity>;
}

export interface AdminUpdateGlobalProductResponse {
  code: number;
  message: string;
  data?: AdminUpdateGlobalProductData;
}

/** Review related information to jump to moderation queue */
export interface AuditInfo {
  task_id?: string;
  project_id?: string;
}

export interface BatchListingProductData {
  batch_lising_res?: Record<Int64, boolean>;
}

export interface BatchListingProductRequest {
  products?: Array<ListingProductItem>;
}

export interface BatchListingProductResponse {
  code: number;
  message: string;
  data?: BatchListingProductData;
}

export interface BatchUnListingProductData {
  batch_unlising_res?: Record<Int64, boolean>;
}

export interface BatchUnListingProductRequest {
  product_ids?: Array<string>;
}

export interface BatchUnListingProductResponse {
  code: number;
  message: string;
  data?: BatchUnListingProductData;
}

export interface BotExtraInfo {
  /** public method */
  publish_mode?: product_common.ProductPublishMode;
}

export interface BotScoreInfo {
  product_id?: string;
  bot_id?: string;
  bot_type?: product_common.ProductListingPeriodType;
  total_scores?: ScoreDetail;
  static_scores?: ScoreDetail;
  dynamic_scores?: ScoreDetail;
  conversation_scores?: ScoreDetail;
  last_listing_at?: string;
  is_recommended?: boolean;
  has_private_resource?: boolean;
  title?: string;
  product_info?: ProductInfo;
  has_been_checked?: boolean;
  chat_info?: ChatDetail;
  /** The reason why the background is automatically not recommended */
  unrecommend_reason?: string;
  /** Overall score */
  evaluation_score?: string;
}

export interface ChatDetail {
  /** identity recognition */
  identity_awareness?: Array<ChatMessage>;
  /** functional cognition */
  function_awareness?: Array<ChatMessage>;
  /** Irrelevant small talk */
  irrelevant_chat?: Array<ChatMessage>;
  /** forward function */
  positive_function?: Array<ChatMessage>;
  /** Negative function */
  negative_function?: Array<ChatMessage>;
  /** abnormal function */
  exception?: Array<ChatMessage>;
}

export interface ChatMessage {
  user_input?: string;
  bot_answer?: string;
  score?: string;
}

export interface CustomerCase {
  /** Settings when updating existing cases */
  id?: string;
  cover?: product_common.ImageInfo;
  title?: string;
  description?: string;
  /** Industry label */
  industry_tag?: string;
  /** Platform Tag: Attributed to Coze/Compass/... */
  platform_tag?: string;
  /** Document path (for jumping to on-site documents) */
  doc_path?: string;
  /** Customer logo */
  logo?: product_common.ImageInfo;
  /** relative order */
  sort?: number;
}

export interface DeleteFeaturedProductRequest {
  /** Recommended ID today */
  id?: string;
  entity_type?: product_common.ProductEntityType;
}

export interface DeleteFeaturedProductResponse {
  code: number;
  message: string;
}

export interface DeleteProductRecommendConfigRequest {
  /** Length does not exceed 100. */
  product_ids?: Array<string>;
  /** Entity type */
  entity_type?: product_common.ProductEntityType;
}

export interface DeleteProductRecommendConfigResponse {
  code: number;
  message: string;
}

export interface DeleteTopicRequest {
  id?: string;
}

export interface DeleteTopicResponse {
  code: number;
  message: string;
}

export interface DeveloperVoice {
  /** Settings when updating existing developer voices */
  id?: string;
  content?: string;
  /** relative order */
  sort?: number;
  user?: product_common.UserInfo;
}

export interface FeaturedProductConfig {
  /** Recommended ID today */
  id?: string;
  product_id?: string;
  /** Recommended start time */
  begin_time_second?: string;
  /** end time of referral */
  end_time_second?: string;
  /** Reason for recommendation */
  reason?: string;
  /** Recommended Description */
  description?: string;
  /** banner uri */
  banner_uri?: string;
  /** banner url */
  banner_url?: string;
  /** button copy */
  button_text?: string;
  /** Whether to show the opening statement */
  is_show_prologue?: boolean;
  /** Is it valid? */
  is_valid?: boolean;
}

export interface FeaturedProductInfo {
  featured_product_config?: FeaturedProductConfig;
  meta_info?: ProductMetaInfo;
}

export interface GetBotScoreListData {
  bot_score_list?: Array<BotScoreInfo>;
  total?: number;
}

export interface GetBotScoreListRequest {
  page_size: number;
  page_num: number;
  period_type?: Array<product_common.ProductListingPeriodType>;
  product_ids?: Array<string>;
  bot_ids?: Array<string>;
  total_score_min?: number;
  total_score_max?: number;
  static_score_min?: number;
  static_score_max?: number;
  conversation_score_min?: number;
  conversation_score_max?: number;
  last_listing_at_begin?: Int64;
  last_listing_at_end?: Int64;
  sort_type?: GetBotScoreSortType;
  dynamic_score_min?: number;
  dynamic_score_max?: number;
  /** To screen for recommendations */
  is_recommended?: boolean;
  /** To filter whether it has been processed, and return all without passing it. */
  has_been_checked?: boolean;
  evaluation_score_min?: number;
  evaluation_score_max?: number;
}

export interface GetBotScoreListResponse {
  code: number;
  message: string;
  data?: GetBotScoreListData;
}

export interface GetCustomerCaseTagData {
  /** Industry label */
  industry_tags?: Array<string>;
  /** Platform Tag: Attributed to Coze/Compass/... */
  platform_tags?: Array<string>;
}

export interface GetCustomerCaseTagRequest {}

export interface GetCustomerCaseTagResponse {
  code: number;
  message: string;
  data?: GetCustomerCaseTagData;
}

export interface GetFeaturedProductListData {
  featured_product_info_list?: Array<FeaturedProductInfo>;
}

export interface GetFeaturedProductListRequst {
  begin_time_second?: string;
  end_time_second?: string;
  /** Single scene pass this */
  entity_type?: product_common.ProductEntityType;
  /** The batch scene has passed this, and it has all been passed. The batch will be given priority. */
  entity_types?: Array<product_common.ProductEntityType>;
}

export interface GetFeaturedProductListResponse {
  code: number;
  message: string;
  data?: GetFeaturedProductListData;
}

export interface GetFeaturedProductPreviewIDData {
  preview_id?: string;
}

export interface GetFeaturedProductPreviewIDRequest {
  id?: string;
}

export interface GetFeaturedProductPreviewIDResponse {
  code: number;
  message: string;
  data?: GetFeaturedProductPreviewIDData;
}

export interface GetLandingConfigData {
  /** Developer voice, customer case is paginated, return total */
  total?: number;
  /** LandingConfigType - TopTemplate: Top Template
list of top templates */
  top_templates?: Array<LandingProduct>;
  /** LandingConfigType - TemplateList: Template List
template list */
  templates?: Array<LandingProduct>;
  /** LandingConfigType - CustomerLogo: customer logo
Customer Logo List */
  customer_logos?: Array<LandingLogo>;
  /** LandingConfigType - Topic: Topics
template topic */
  topics?: Array<LandingProductTopic>;
  /** LandingConfigType - DeveloperVoice */
  developer_voices?: Array<DeveloperVoice>;
  /** LandingConfigType - CustomerCase */
  customer_cases?: Array<CustomerCase>;
}

export interface GetLandingConfigRequest {
  /** Specify the configuration type to obtain */
  config_type?: LandingConfigType;
  /** Get developer voices, customer cases, need pagination */
  page_num?: number;
  page_size?: number;
}

export interface GetLandingConfigResponse {
  code: number;
  message: string;
  data?: GetLandingConfigData;
}

export interface GetLatestFeaturedProductData {
  featured_product_config?: FeaturedProductConfig;
}

export interface GetLatestFeaturedProductRequest {
  product_id?: string;
  entity_type?: product_common.ProductEntityType;
}

export interface GetLatestFeaturedProductResponse {
  code: number;
  message: string;
  data?: GetLatestFeaturedProductData;
}

export interface GetPluginInfoRequest {
  plugin_id: string;
}

export interface GetPluginInfoResponse {
  code: number;
  message: string;
  plugin_tool_infos?: Array<PluginToolInfo>;
  readme?: string;
  connector_ids?: Array<string>;
}

export interface GetProductCategoryListData {
  entity_type: product_common.ProductEntityType;
  categories?: Array<ProductCategory>;
}

export interface GetProductCategoryListRequest {
  entity_type?: product_common.ProductEntityType;
}

export interface GetProductCategoryListResponse {
  code: number;
  message: string;
  data?: GetProductCategoryListData;
}

export interface GetProductListData {
  products?: Array<ProductInfo>;
  has_more?: boolean;
  total?: number;
}

export interface GetProductListRequest {
  entity_type?: product_common.ProductEntityType;
  sort_type: product_common.SortType;
  page_num: number;
  page_size: number;
  category_id?: string;
  /** non-empty search */
  keyword?: string;
  /** List page tab */
  source?: product_common.ProductListSource;
  product_status?: product_common.ProductStatus;
  entity_ids?: Array<string>;
  category_ids?: Array<string>;
  is_official_product?: boolean;
  author_id?: Int64;
  product_ids?: Array<string>;
  team_id?: string;
  /** Whether to find products that are on the shelves for the first time */
  first_listing?: boolean;
  /** Whether to find candidate templates (i.e. original workflow/image flow/public configuration bot) */
  candidate_template?: boolean;
  /** Product type list */
  entity_types?: Array<product_common.ProductEntityType>;
}

export interface GetProductListResponse {
  code: number;
  message: string;
  data?: GetProductListData;
}

export interface GetTopicListData {
  topics?: Array<Topic>;
}

export interface GetTopicListRequst {
  begin_time_second?: string;
  end_time_second?: string;
  entity_type?: product_common.ProductEntityType;
}

export interface GetTopicListResponse {
  code: number;
  message: string;
  data?: GetTopicListData;
}

export interface GetTopicPreviewIDRequest {
  id?: string;
}

export interface GetTopicPreviewIDResponse {
  code: number;
  message: string;
  data?: GetFeaturedProductPreviewIDData;
}

export interface GlobalProductHistoryData {
  records: Array<GlobalProductHistoryRecord>;
  has_more: boolean;
  is_hit_ppe: boolean;
  total: number;
}

export interface GlobalProductHistoryRecord {
  meta_info: ProductMetaInfo;
  /** Whether to enable */
  is_activate: boolean;
  activated_at?: string;
  deprecated_at?: string;
  version: number;
}

export interface LandingLogo {
  company_name?: string;
  /** Customer Logo */
  logo?: product_common.ImageInfo;
}

export interface LandingProduct {
  product_id?: string;
}

export interface LandingProductTopic {
  /** button copy */
  button_text?: string;
  /** redirect link */
  jump_link?: string;
  /** Topic title */
  title?: string;
  /** feature description */
  description?: string;
  /** cover */
  cover?: product_common.ImageInfo;
}

export interface ListingProductData {
  audit_status?: product_common.ProductDraftStatus;
}

export interface ListingProductItem {
  entity_type: product_common.ProductEntityType;
  entity_id?: string;
  entity_version?: string;
  /** Category ID */
  category_id?: string;
  /** Shelf description json */
  readme?: string;
  /** Other classification descriptions */
  other_category_notes?: string;
  publish_mode?: product_common.ProductPublishMode;
  product_name?: string;
}

export interface ListingProductRequest {
  entity_type: product_common.ProductEntityType;
  entity_id?: string;
  entity_version?: string;
  /** Category ID */
  category_id?: string;
  /** Shelf description json */
  readme?: string;
  /** Other classification descriptions */
  other_category_notes?: string;
  publish_mode?: product_common.ProductPublishMode;
  /** Product name */
  product_name?: string;
  /** Cover, you need to first adjust the upload picture interface to upload and get the URI. */
  covers?: Array<product_common.ImageInfo>;
  /** Is the professional version specially available? */
  is_profession?: boolean;
  price_config?: PriceConfig;
  workflow_gui_config?: WorkflowGUIConfig;
  description?: string;
  preview_types?: Array<product_common.UIPreviewType>;
  /** end plug-in configuration */
  local_plugin_config?: LocalPluginConfig;
}

export interface ListingProductResponse {
  code: number;
  message: string;
  data?: ListingProductData;
}

/** end plug-in configuration */
export interface LocalPluginConfig {
  connector_ids?: Array<string>;
  /** end plug-in tool */
  tools?: Array<LocalPluginTool>;
}

export interface LocalPluginTool {
  name?: string;
  req_example?: string;
  resp_example?: string;
}

export interface MarkProductRequest {
  product_ids: Array<string>;
  mark_type: MarkType;
}

export interface MarkProductResponse {
  code: number;
  message: string;
}

export interface PluginExtraInfo {
  tools?: Array<PluginToolInfo>;
  total_api_count?: number;
  bots_use_count?: number;
  team_id?: string;
}

export interface PluginToolExample {
  req_example?: string;
  resp_example?: string;
}

export interface PluginToolInfo {
  id?: string;
  name?: string;
  description?: string;
  parameters?: Array<ToolParameter>;
  example?: PluginToolExample;
}

export interface PriceConfig {
  price_type?: product_common.PriceType;
  prices?: Array<marketplace_common.Price>;
}

/** Classification used for display in the admin background */
export interface ProductCategory {
  id?: string;
  name?: string;
  icon_url?: string;
  active_icon_url?: string;
  index?: number;
  entity_type?: product_common.ProductEntityType;
  name_starling_key?: string;
  /** The number of products in this category is used for display in the operation background. */
  product_count?: number;
  icon_uri?: string;
  active_icon_uri?: string;
}

export interface ProductInfo {
  meta_info: ProductMetaInfo;
  recommend_config?: ProductRecommendConfig;
  bot_extra?: BotExtraInfo;
  plugin_extra?: PluginExtraInfo;
  audit_info?: AuditInfo;
  workflow_extra?: WorkflowExtraInfo;
  social_scene_extra?: SocialSceneExtraInfo;
  price_config?: PriceConfig;
  project_extra?: ProjectExtraInfo;
}

export interface ProductMetaInfo {
  id?: string;
  name?: string;
  entity_id?: string;
  entity_type?: product_common.ProductEntityType;
  entity_version?: string;
  icon_url?: string;
  heat?: number;
  description?: string;
  listed_at?: string;
  status?: product_common.ProductStatus;
  category?: ProductCategory;
  readme?: string;
  seller?: SellerInfo;
  category_note?: string;
  audit_status?: product_common.ProductDraftStatus;
  draft_id?: string;
  /** Is it a template? */
  is_template?: boolean;
  /** cover image */
  covers?: Array<product_common.ImageInfo>;
  /** Is the professional version specially available? */
  is_professional?: boolean;
}

/** operation recommended configuration */
export interface ProductRecommendConfig {
  product_id?: string;
  index?: number;
  index_expire_time_second?: string;
  user_count_base?: string;
  index_begin_time_second?: string;
  entity_type?: product_common.ProductEntityType;
}

export interface ProjectExtraInfo {
  preview_types?: Array<product_common.UIPreviewType>;
}

export interface SaveProductCategoryRequest {
  categories?: Array<ProductCategory>;
  entity_type?: product_common.ProductEntityType;
}

export interface SaveProductCategoryResponse {
  code: number;
  message: string;
}

export interface ScoreDetail {
  total_score?: string;
  sub_score_items?: Array<SubEvaluationItems>;
}

export interface SellerInfo {
  id?: string;
  name?: string;
  avatar_url?: string;
  user_id?: string;
}

export interface SetFeaturedProductConfigRequest {
  op_type?: SetFeaturedProductConfigOpType;
  /** Passed when op_type = update, update the recommended product configuration */
  config?: FeaturedProductConfig;
  entity_type?: product_common.ProductEntityType;
}

export interface SetFeaturedProductConfigResponse {
  code: number;
  message: string;
}

export interface SetLandingConfigRequest {
  /** configuration type */
  config_type?: LandingConfigType;
  /** operation type */
  op_type?: SetLandingConfigOpType;
  /** LandingConfigType - TopTemplate: Template Configuration
list of top templates */
  top_templates?: Array<LandingProduct>;
  /** LandingConfigType - TemplateList: Template List
template list */
  templates?: Array<LandingProduct>;
  /** LandingConfigType - CustomerLogo: customer logo
Customer Logo List */
  customer_logos?: Array<LandingLogo>;
  /** LandingConfigType - Topic: Topics
template topic */
  topics?: Array<LandingProductTopic>;
  /** LandingConfigType - DeveloperVoice */
  developer_voices?: Array<DeveloperVoice>;
  /** LandingConfigType - CustomerCase */
  customer_cases?: Array<CustomerCase>;
}

export interface SetLandingConfigResponse {
  code: number;
  message: string;
}

export interface SetProductRecommendConfigRequest {
  op_type?: SetProductRecommendConfigOpType;
  /** op_type = add, add recommended products whitelist */
  product_ids?: Array<string>;
  /** Passed when op_type = update, update the recommended product configuration */
  config?: ProductRecommendConfig;
  /** Deprecated, the backend queries the corresponding EntityType according to ProductIDs */
  entity_type?: product_common.ProductEntityType;
}

export interface SetProductRecommendConfigResponse {
  code: number;
  message: string;
}

export interface SetTopicRequest {
  op_type?: SetTopicOpType;
  topic?: Topic;
}

export interface SetTopicResponse {
  code: number;
  message: string;
}

export interface SocialSceneExtraInfo {
  /** public method */
  publish_mode?: product_common.ProductPublishMode;
  /** Number of people used */
  used_count?: string;
}

export interface SubEvaluationItems {
  quota_name?: string;
  score?: string;
  comment?: string;
}

export interface ToolParameter {
  name?: string;
  required?: boolean;
  description?: string;
  type?: string;
  sub_params?: Array<ToolParameter>;
}

export interface Topic {
  id?: string;
  name?: string;
  description?: string;
  banner_uri?: string;
  status?: product_common.TopicStatus;
  begin_time_second?: string;
  end_time_second?: string;
  /** Identify the type of entity under the topic */
  entity_type?: product_common.ProductEntityType;
  banner_url?: string;
  product_ids?: Array<string>;
  reason?: string;
  introduction_url?: string;
}

export interface UnListingProductRequest {
  product_id?: string;
  entity_type?: product_common.ProductEntityType;
  entity_id?: string;
}

export interface UnListingProductResponse {
  code: number;
  message: string;
}

export interface UpdateTopicStatusRequest {
  id?: string;
  status?: product_common.TopicStatus;
}

export interface UpdateTopicStatusResponse {
  code: number;
  message: string;
}

export interface UploadImageData {
  uri?: string;
  url?: string;
}

export interface UploadImageRequest {
  data?: string;
}

export interface UploadImageResponse {
  code: number;
  message: string;
  data?: UploadImageData;
}

export interface WorkflowExtraInfo {
  duplicate_count?: number;
  start_node?: WorkflowNode;
  end_node?: WorkflowNode;
  gui_config?: WorkflowGUIConfig;
}

export interface WorkflowGUIConfig {
  /** Used to convert the input/output/intermediate message node of a workflow into a user visual configuration */
  start_node?: WorkflowNode;
  end_node?: WorkflowNode;
  /** The message node will output the intermediate process, which also needs to be displayed. */
  message_nodes?: Array<WorkflowNode>;
}

export interface WorkflowNode {
  node_type?: product_common.WorkflowNodeType;
  /** Node id */
  node_id?: string;
  node_name?: string;
  node_param?: WorkflowNodeParam;
  /** Display name, configuration when on the shelves, Store-specific (this issue is used for the display of message nodes) */
  show_name?: string;
}

export interface WorkflowNodeParam {
  input_parameters?: Array<WorkflowParameter>;
  terminate_plan?: WorkflowTerminatePlan;
  output_parameters?: Array<WorkflowParameter>;
}

export interface WorkflowParameter {
  name?: string;
  desc?: string;
  is_required?: boolean;
  input_type?: product_common.InputType;
  sub_parameters?: Array<WorkflowParameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: product_common.InputType;
  /** If the imported parameter is the user's hand input, put it here */
  value?: string;
  format?: product_common.PluginParamTypeFormat;
  from_node_id?: string;
  from_output?: Array<string>;
  /** Display name, configuration when on the shelf, Store-specific */
  show_name?: string;
  /** InputType (+ AssistType) defines the final type of a variable, which only needs to be passed through */
  assist_type?: Int64;
  /** If the InputType is an array, there is a subassistant type */
  sub_assist_type?: Int64;
  /** Component configuration, the structure is defined by the front end, and it is converted to json string for server level storage when it is put on the shelves. */
  component_config?: string;
  /** Component configuration type, required for front-end display */
  component_type?: string;
}

export interface WorkflowTerminatePlan {
  /** The answer mode corresponding to the end node of the workflow: 1 - Return the variable, and the Bot generates the answer; 2 - Use the set content to answer directly */
  terminate_plan_type?: number;
  /** Return content of scene configuration corresponding to terminate_plan_type = 2 */
  content?: string;
}
/* eslint-enable */
