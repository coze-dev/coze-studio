/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as product_common from './product_common';
import * as marketplace_common from './marketplace_common';

export type Int64 = string | number;

export enum FileboxInfoMode {
  Off = 0,
  On = 1,
}

export enum FilterType {
  PublicPlatform = 1,
  GPTModel = 2,
}

export enum GenerateProductListingInfoType {
  Readme = 1,
  Category = 2,
}

export enum PluginRunMode {
  DefaultToSync = 0,
  Sync = 1,
  Async = 2,
  Streaming = 3,
}

export enum TaskType {
  GenConversationTitle = 1,
}

export enum TimeCapsuleMode {
  Off = 0,
  On = 1,
}

export enum TriggerEnable {
  Init = 0,
  Open = 1,
  Close = 2,
}

export interface BotAttr {
  /** conversation list */
  conversation_snippets?: Array<Array<string>>;
  /** dialogue */
  conversations?: Array<Conversation>;
}

export interface BotConfig {
  /** model */
  models?: Array<ProductMaterial>;
  /** plugin */
  plugins?: Array<ProductMaterial>;
  /** Knowledge Base */
  knowledges?: Array<ProductMaterial>;
  /** Workflow */
  workflows?: Array<ProductMaterial>;
  /** number of private plugins */
  private_plugins_count?: number;
  /** Number of private repositories */
  private_knowledges_count?: number;
  /** number of private workflows */
  private_workflows_count?: number;
  /** Determine if the multiagent has a bot node */
  has_bot_agent?: boolean;
  /** List of sounds configured by bot */
  bot_voices?: Array<BotVoiceInfo>;
  /** Number of all plugins */
  total_plugins_count?: number;
  /** Number of all knowledge bases */
  total_knowledges_count?: number;
  /** Number of all workflows */
  total_workflows_count?: number;
  /** Time Capsule Mode */
  time_capsule_mode?: TimeCapsuleMode;
  /** File box mode */
  filebox_mode?: FileboxInfoMode;
  /** Number of private image workflows */
  private_image_workflow_count?: number;
  /** User qeury collection configuration */
  user_query_collect_conf?: UserQueryCollectConf;
  /** Whether to turn off voice calls (the default is on) */
  is_close_voice_call?: boolean;
  /** Does it support video calls? */
  support_video_call?: boolean;
}

export interface BotExtraInfo {
  /** distribution channel */
  publish_platforms?: Array<BotPublishPlatform>;
  /** user */
  user_count?: number;
  /** public method */
  publish_mode?: product_common.ProductPublishMode;
  /** Details page unique
Dialogue example, abandoned */
  conversation_snippets?: Array<Array<string>>;
  /** configuration */
  config?: BotConfig;
  /** whitelist */
  is_inhouse_user?: boolean;
  /** Number of copy-created bots */
  duplicate_bot_count?: number;
  /** Share the conversation */
  conversations?: Array<Conversation>;
  /** Number of conversations with Bot */
  chat_conversation_count?: string;
  /** number of related products */
  related_product_count?: string;
}

export interface BotPublishPlatform {
  id?: string;
  icon_url?: string;
  url?: string;
  name?: string;
}

export interface BotVoiceInfo {
  id?: string;
  language_code?: string;
  language_name?: string;
  name?: string;
  style_id?: string;
  is_support_voice_call?: boolean;
}

export interface CardConfig {
  wide_screen_mode?: boolean;
  enable_forward?: boolean;
  update_multi?: boolean;
}

export interface CardInfo {
  card_url?: string;
  /** Only the details page returns */
  card_id?: string;
  mapping_rule?: string;
  max_display_rows?: string;
  card_version?: string;
}

export interface CheckUserInTemplateWhiteListData {
  is_in_white_list?: boolean;
}

export interface CheckUserInTemplateWhiteListRequest {}

export interface CheckUserInTemplateWhiteListResponse {
  code: number;
  message: string;
  data?: CheckUserInTemplateWhiteListData;
}

export interface Conversation {
  /** conversation example */
  snippets?: Array<string>;
  /** conversation title */
  title?: string;
  /** Conversation ID, generated by idGen */
  id?: string;
  /** Do you need to generate a conversation? */
  gen_title?: boolean;
  /** conversation moderation status */
  audit_status?: product_common.ProductDraftStatus;
  /** opening statement */
  opening_dialog?: product_common.OpeningDialog;
  /** The bot information involved in the message, key bot_id */
  relate_bots?: Record<string, ConversationRelateBot>;
  /** The user information involved in the message, key user_id */
  relate_users?: Record<string, ConversationRelateUser>;
}

/** The bot information involved in the message, sharing the scene in the home, the message belongs to multiple bots */
export interface ConversationRelateBot {
  id?: string;
  name?: string;
  description?: string;
  icon_url?: string;
}

/** The user information involved in the message, sharing the scene in the home, the message belongs to multiple users */
export interface ConversationRelateUser {
  user_info?: product_common.UserInfo;
}

export interface CreateProductShareRequest {
  product_id?: string;
  product_share_type?: product_common.ProductShareType;
  product_share_scene?: product_common.ProductShareScene;
  share_bot_conversation?: ShareBotConversation;
}

export interface CreateProductShareResponse {
  code: number;
  message: string;
  share_id?: string;
}

export interface CustomerCase {
  cover_url?: string;
  title?: string;
  description?: string;
  /** Industry label */
  industry_tag?: string;
  /** Platform Tag: Attributed to Coze/Compass/... */
  platform_tag?: string;
  /** Document path (for jumping to on-site documents) */
  doc_path?: string;
  /** Customer logo */
  logo_url?: string;
}

export interface DeveloperVoice {
  content?: string;
  user?: product_common.UserInfo;
}

export interface DouyinServerRegisterCallbackReq {}

export interface DouyinServerRegisterCallbackResp {
  Body?: Blob;
}

export interface DuplicateProductData {
  /** New ID after replication */
  new_entity_id?: string;
  /** Plugin ID for workflow */
  new_plugin_id?: string;
}

export interface DuplicateProductRequest {
  product_id: string;
  entity_type: product_common.ProductEntityType;
  space_id?: string;
  name?: string;
  Cookie?: string;
}

export interface DuplicateProductResponse {
  code: number;
  message: string;
  data?: DuplicateProductData;
}

export interface EntityInfoData {
  meta_info?: ProductMetaInfo;
  plugin_extra?: PluginExtraInfo;
  bot_extra?: BotExtraInfo;
  workflow_extra?: WorkflowExtraInfo;
  project_extra?: ProjectExtraInfo;
}

export interface FavoriteProductInfo {
  product: ProductInfo;
  created_at?: string;
}

export interface FavoriteProductRequest {
  product_id?: string;
  entity_type: product_common.ProductEntityType;
  is_cancel?: boolean;
  entity_id?: string;
  topic_id?: string;
  Cookie?: string;
}

export interface FavoriteProductResponse {
  code: number;
  message: string;
  is_first_favorite?: boolean;
}

export interface FeaturedInfo {
  featured_product?: FeaturedProduct;
  product_info?: ProductInfo;
}

export interface FeaturedProduct {
  id?: string;
  /** Reason for recommendation */
  reason?: string;
  /** Recommended Description */
  description?: string;
  /** banner url */
  banner_url?: string;
  /** button copy */
  button_text?: string;
  /** Whether to show the opening statement */
  is_show_prologue?: boolean;
  /** Introductory remarks, IsShowPrologue returns for ture */
  prologue?: string;
  /** Small background cover */
  banner_url_small?: string;
}

export interface FilterInfo {
  id?: string;
  name?: string;
  icon_url?: string;
}

export interface GenerateProductListingInfoData {
  category_id?: string;
  readme?: string;
}

export interface GenerateProductListingInfoRequest {
  generate_type: GenerateProductListingInfoType;
  entity: product_common.ProductEntity;
}

export interface GenerateProductListingInfoResponse {
  code: number;
  message: string;
  data?: GenerateProductListingInfoData;
}

export interface GetCurrentFeaturedProductData {
  featured_info_list?: Array<FeaturedInfo>;
}

export interface GetCurrentFeaturedProductRequest {
  entity_type?: product_common.ProductEntityType;
  PreviewID?: string;
  entity_types?: Array<product_common.ProductEntityType>;
}

export interface GetCurrentFeaturedProductResponse {
  code: number;
  message: string;
  data?: GetCurrentFeaturedProductData;
}

export interface GetCurrentTopicListData {
  topics?: Array<Topic>;
}

export interface GetCurrentTopicListRequst {
  entity_type?: product_common.ProductEntityType;
  /** If the previewID is passed, only the specified Topic will be returned. */
  preview_id?: string;
}

export interface GetCurrentTopicListtResponse {
  code: number;
  message: string;
  data?: GetCurrentTopicListData;
}

export interface GetCustomerCaseListData {
  /** Customer case */
  cases?: Array<CustomerCase>;
  /** Is there more? */
  has_more?: boolean;
}

export interface GetCustomerCaseListRequest {
  /** Pagination page numbers - starting from 1 */
  page_num?: number;
  /** Page size - maximum 20 per page */
  page_size?: number;
}

export interface GetCustomerCaseListResponse {
  code: number;
  message: string;
  data?: GetCustomerCaseListData;
}

export interface GetDeveloperInfoData {
  verify_status: product_common.VerifyStatus;
}

export interface GetDeveloperInfoRequest {}

export interface GetDeveloperInfoResponse {
  code: number;
  message: string;
  data: GetDeveloperInfoData;
}

export interface GetDeveloperVoiceData {
  /** Developer Voice */
  voices?: Array<DeveloperVoice>;
  /** Is there more? */
  has_more?: boolean;
}

export interface GetDeveloperVoiceRequest {
  /** Pagination page numbers - starting from 1 */
  page_num?: number;
  /** Page size - maximum 20 per page */
  page_size?: number;
}

export interface GetDeveloperVoiceResponse {
  code: number;
  message: string;
  data?: GetDeveloperVoiceData;
}

export interface GetFeedListData {
  /** Required fields, feed list */
  feed_list?: Array<product_common.FeedCard>;
  /** Required field, the cursor to use for the next request */
  next_cursor?: string;
  /** Required fields, are there any more? */
  has_more?: boolean;
}

export interface GetFeedListRequest {
  /** Timestamp, refresh can not be sent, loadMore will be returned. */
  cursor?: string;
  /** paging size */
  size?: number;
  feed_type_list?: Array<product_common.FeedType>;
}

export interface GetFeedListResponse {
  code: number;
  message: string;
  data?: GetFeedListData;
}

export interface GetGlobalProductRequest {
  entity_type: product_common.ProductEntityType;
}

export interface GetImageUploadTokenRequest {}

export interface GetImageUploadTokenResponse {
  code: number;
  message: string;
  data?: product_common.ImageUploadToken;
}

export interface GetImageURLData {
  url?: string;
}

export interface GetImageURLRequest {
  uri?: string;
}

export interface GetImageURLResponse {
  code: number;
  message: string;
  data?: GetImageURLData;
}

export interface GetLandingInfoData {
  /** List of top templates: to be discarded */
  top_product?: Array<LandingProduct>;
  /** Template List: To be Obsolete */
  products?: Array<LandingProduct>;
  /** Customer Logo List */
  customer_logos?: Array<LandingLogo>;
  /** template topic */
  topics?: Array<LandingProductTopic>;
  /** Top Template List: Adopt */
  top_templates?: Array<LandingProduct>;
  /** Template List: Adopt */
  templates?: Array<LandingProduct>;
}

export interface GetLandingInfoRequest {}

export interface GetLandingInfoResponse {
  code: number;
  message: string;
  data?: GetLandingInfoData;
}

export interface GetProductCategoryListData {
  entity_type: product_common.ProductEntityType;
  categories?: Array<ProductCategory>;
}

export interface GetProductCategoryListRequest {
  entity_type?: product_common.ProductEntityType;
  /** When it is put on the shelves, you need to get a full list of categories to distinguish the put-on scene from the homepage scene. */
  need_empty_category?: boolean;
  lang?: string;
}

export interface GetProductCategoryListResponse {
  code: number;
  message: string;
  data?: GetProductCategoryListData;
}

export interface GetProductDetailData {
  /** Products removed from the shelves only return non-optional fields */
  meta_info: ProductMetaInfo;
  /** To distinguish between host and guest states */
  is_owner: boolean;
  /** Audit status, return in the main state, you need to pay attention. If the main state is under review, you need to show the status under review. */
  audit_status?: product_common.ProductDraftStatus;
  sell_info?: SellInfo;
  space_id?: string;
  /** Details page Back */
  topic?: Topic;
  /** Details page Back */
  can_duplicate?: boolean;
  commercial_setting?: product_common.CommercialSetting;
  /** Whether the plug-in supports expansion (plug-in details page, control whether to display the expansion button) */
  can_create_user_extra_benefit?: boolean;
  /** Whether the user has expansion permission (plug-in details page, control whether the expansion button is grey out): free version and personal advanced version - true (jump to paywall); team version and enterprise version - access permission verification */
  has_create_user_extra_benefit_permission?: boolean;
  plugin_extra?: PluginExtraInfo;
  bot_extra?: BotExtraInfo;
  workflow_extra?: WorkflowExtraInfo;
  social_scene_extra?: SocialSceneExtraInfo;
  project_extra?: ProjectExtraInfo;
  data_indicator?: ProductDataIndicator;
}

export interface GetProductDetailRequest {
  product_id?: string;
  entity_type?: product_common.ProductEntityType;
  entity_id?: string;
  /** Whether to check the latest audit failure draft */
  need_audit_failed?: boolean;
  enterprise_id?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface GetProductDetailResponse {
  code: number;
  message: string;
  data?: GetProductDetailData;
}

export interface GetProductEntityInfoRequest {
  entity_id: string;
  entity_type: product_common.ProductEntityType;
  /** optional parameter */
  entity_version?: string;
}

export interface GetProductEntityInfoResponse {
  code: number;
  message: string;
  data: EntityInfoData;
}

export interface GetProductFilterData {
  filters?: Partial<Record<FilterType, Array<FilterInfo>>>;
}

export interface GetProductFilterRequest {
  entity_type: product_common.ProductEntityType;
}

export interface GetProductFilterResponse {
  code: number;
  message: string;
  data?: GetProductFilterData;
}

export interface GetProductListData {
  products?: Array<ProductInfo>;
  has_more?: boolean;
  total?: number;
}

export interface GetProductListRequest {
  entity_type?: product_common.ProductEntityType;
  category_id?: string;
  sort_type: product_common.SortType;
  page_num: number;
  page_size: number;
  /** non-empty search */
  keyword?: string;
  /** Open mode: 1-open source; 2-closed source,//open mode */tion method */
  publish_mode?: product_common.ProductPublishMode;
  /** distribution channel */
  publish_platform_ids?: Array<string>;
  /** List tab; 1 - Operational recommendations */
  source?: product_common.ProductListSource;
  /** Personalized recommendation scenarios, enter current entity information, and obtain recommended products
Current entity type */
  current_entity_type?: product_common.ProductEntityType;
  /** Current entity ID */
  current_entity_id?: string;
  /** Current entity version */
  current_entity_version?: string;
  /** thematic scenario */
  topic_id?: string;
  preview_topic_id?: string;
  /** Do you need to filter out official products? */
  is_official?: boolean;
  /** Do you need to return additional information? */
  need_extra?: boolean;
  /** List of product types, use this parameter first, followed by EntityType */
  entity_types?: Array<product_common.ProductEntityType>;
  /** True = filter for free; false = filter for paid; if you don't pass it, you won't distinguish between free and paid. */
  is_free?: boolean;
  /** plugin type */
  plugin_type?: product_common.PluginType;
  'Tt-Agw-Client-Ip'?: string;
}

export interface GetProductListResponse {
  code: number;
  message: string;
  data?: GetProductListData;
}

export interface GetProductShareDetailData {
  product_id?: string;
  product_share_type?: product_common.ProductShareType;
  product_share_scene?: product_common.ProductShareScene;
  share_entity_id?: string;
  share_bot_conversation?: ShareBotConversation;
}

export interface GetProductShareDetailRequest {
  share_id: string;
}

export interface GetProductShareDetailResponse {
  code: number;
  message: string;
  get_product_share_detail_data?: GetProductShareDetailData;
}

export interface GetPublishPlatformsData {
  platforms?: Array<PlatformInfo>;
}

export interface GetPublishPlatformsRequest {}

export interface GetPublishPlatformsResponse {
  code: number;
  message: string;
  data?: GetPublishPlatformsData;
}

export interface GetTaskInfoRequest {
  task_id: string;
  task_type: TaskType;
}

export interface GetTaskInfoResponse {
  code: number;
  message: string;
  /** JSON pass, front-end analysis */
  data?: string;
}

export interface GetTemplateWhiteListConfigRequest {}

export interface GetTemplateWhiteListConfigResponse {
  code: number;
  message: string;
  data?: TemplateWhiteListConfig;
}

export interface GetUserFavoriteListData {
  favorite_products?: Array<FavoriteProductInfo>;
  has_more?: boolean;
}

export interface GetUserFavoriteListDataV2 {
  favorite_entities?: Array<product_common.FavoriteEntity>;
  cursor_id?: string;
  has_more?: boolean;
  /** User timed task configuration, corresponding to flow.bot TriggerEnabled of the task service
key: entity_id; value: UserTriggerConfig */
  entity_user_trigger_config?: Record<Int64, UserTriggerConfig>;
}

export interface GetUserFavoriteListRequest {
  page_num: number;
  page_size: number;
  entity_type: product_common.ProductEntityType;
  sort_type: product_common.SortType;
  /** non-empty search */
  key_wrod?: string;
}

export interface GetUserFavoriteListResponse {
  code: number;
  message: string;
  data?: GetUserFavoriteListData;
}

export interface GetUserFavoriteListV2Request {
  /** The first page is not passed, and the last returned cursor_id is passed when subsequent calls are made */
  cursor_id?: string;
  page_size: number;
  entity_type?: product_common.ProductEntityType;
  sort_type: product_common.SortType;
  /** non-empty search */
  keyword?: string;
  /** List page tab */
  source?: product_common.FavoriteListSource;
  /** Whether you need to query the user's trigger configuration for the Bot, when true, it will return EntityUserTriggerConfig */
  need_user_trigger_config?: boolean;
  /** Filter collection time */
  begin_at?: Int64;
  /** Filter collection time */
  end_at?: Int64;
  entity_types?: Array<product_common.ProductEntityType>;
  /** Organization ID, Enterprise Edition needs to be passed when you want to get all the content in the user's collection */
  organization_id?: string;
}

export interface GetUserFavoriteListV2Response {
  code: number;
  message: string;
  data?: GetUserFavoriteListDataV2;
}

export interface GetUserProductCountData {
  counter?: Partial<Record<product_common.ProductEntityType, number>>;
  total_count?: number;
}

export interface GetUserProductCountRequest {
  /** Currently only supports viewing published products. */
  source?: product_common.UserProductSource;
  entity_types?: Array<product_common.ProductEntityType>;
  /** UserID is valid when only viewing other people's published products */
  user_id?: string;
}

export interface GetUserProductCountResponse {
  code: number;
  message: string;
  data?: GetUserProductCountData;
}

export interface GetUserProductListData {
  products?: Array<ProductInfo>;
  has_more?: boolean;
  next_cursor?: string;
}

export interface GetUserProductListRequest {
  entity_type?: product_common.ProductEntityType;
  cursor: string;
  limit: number;
  source: product_common.UserProductSource;
  /** Different Source enumerations, the underlying meaning of BeginAt/EndAt is different: shelf time/access time/usage time */
  begin_at?: string;
  end_at?: string;
  /** UserID is valid when only viewing other people's published products */
  user_id?: string;
  /** List of product types, use this parameter first, followed by EntityType */
  entity_types?: Array<product_common.ProductEntityType>;
}

export interface GetUserProductListResponse {
  code: number;
  message: string;
  data?: GetUserProductListData;
}

export interface InlineURL {
  copy_url?: string;
}

export interface LandingLogo {
  logo_url?: string;
}

export interface LandingProduct {
  product_id?: string;
  /** template type */
  entity_type?: product_common.ProductEntityType;
  title?: string;
  description?: string;
  /** Template cover, the original product design supports multiple configurations, currently there is only one. */
  covers?: Array<product_common.ImageInfo>;
}

export interface LandingProductTopic {
  banner_url?: string;
  /** button copy */
  button_text?: string;
  /** redirect link */
  jump_link?: string;
  title?: string;
  description?: string;
}

export interface Lang {
  lang_code?: string;
  name?: string;
}

export interface ListingEntity {
  entity_type: product_common.ProductEntityType;
  entity_id?: string;
  entity_version?: string;
  /** Category ID */
  category_id?: string;
  /** Shelf description json */
  readme?: string;
  /** Other classification descriptions */
  other_category_notes?: string;
  /** public method */
  publish_mode?: product_common.ProductPublishMode;
  /** Product name */
  product_name?: string;
  /** case configuration */
  workflow_case_config?: WorkflowCaseConfig;
}

export interface ListingProductData {
  audit_status?: product_common.ProductDraftStatus;
}

export interface ListingProductRequest {
  entity_type: product_common.ProductEntityType;
  entity_id?: string;
  entity_version?: string;
  /** Category ID */
  category_id?: string;
  /** Shelf description json */
  readme?: string;
  /** Other classification descriptions */
  other_category_notes?: string;
  /** public method */
  publish_mode?: product_common.ProductPublishMode;
  /** Product name */
  product_name?: string;
  related_entity?: Array<ListingEntity>;
  /** case configuration */
  workflow_case_config?: WorkflowCaseConfig;
  /** Project UI preview method */
  ui_preview_types?: Array<product_common.UIPreviewType>;
}

export interface ListingProductResponse {
  code: number;
  message: string;
  data?: ListingProductData;
}

export interface PlatformInfo {
  id?: string;
  name?: string;
}

export interface PluginConnectorInfo {
  id?: string;
  name?: string;
  icon?: string;
}

export interface PluginExtraInfo {
  tools?: Array<PluginToolInfo>;
  total_api_count?: number;
  bots_use_count?: number;
  /** Is there a privacy statement, currently only PublicGetProductDetail will take the data */
  has_private_statement?: boolean;
  /** Privacy statement, currently only PublicGetProductDetail will access data */
  private_statement?: string;
  associated_bots_use_count?: number;
  is_premium?: boolean;
  is_official?: boolean;
  /** call amount */
  call_amount?: number;
  /** success rate */
  success_rate?: number;
  /** average execution time */
  avg_exec_time?: number;
  is_default_icon?: boolean;
  space_id?: string;
  material_id?: string;
  connectors?: Array<PluginConnectorInfo>;
  plugin_type?: product_common.PluginType;
}

export interface PluginToolExample {
  req_example?: string;
  resp_example?: string;
}

export interface PluginToolInfo {
  id?: string;
  name?: string;
  description?: string;
  parameters?: Array<ToolParameter>;
  card_info?: CardInfo;
  example?: PluginToolExample;
  /** call amount */
  call_amount?: number;
  /** success rate */
  success_rate?: number;
  /** average execution time */
  avg_exec_time?: number;
  /** Number of tool bot references */
  bots_use_count?: number;
  /** operating mode */
  run_mode?: PluginRunMode;
}

export interface PreviewURLCard {
  type?: string;
  data?: PreviewURLCardData;
}

export interface PreviewURLCardData {
  template_id?: string;
  template_variable?: Record<string, string>;
  template_version_name?: string;
  config?: CardConfig;
  elements?: string;
  header?: string;
}

export interface PreviewURLEvent {
  operator?: PreviewURLEventOperator;
  host?: string;
  context?: PreviewURLEventContext;
}

export interface PreviewURLEventContext {
  url?: string;
  preview_token?: string;
  open_message_id?: string;
  open_chat_id?: string;
}

export interface PreviewURLEventOperator {
  tenant_key?: string;
  user_id?: string;
  open_id?: string;
}

export interface PreviewURLHeader {
  event_id?: string;
  token?: string;
  create_time?: string;
  event_type?: string;
  tenant_key?: string;
  app_id?: string;
}

export interface PreviewURLInline {
  title?: string;
  i18n_title?: Record<string, string>;
  image_key?: string;
  url?: InlineURL;
}

export interface PreviewURLRequest {
  type: string;
  challenge: string;
  schema: string;
  header: PreviewURLHeader;
  event: PreviewURLEvent;
}

export interface PreviewURLResponse {
  code: number;
  message: string;
  challenge?: string;
  inline?: PreviewURLInline;
  card?: PreviewURLCard;
}

export interface Price {
  value?: number;
  currency?: string;
  display_price?: string;
}

export interface ProductCategory {
  id?: string;
  name?: string;
  icon_url?: string;
  active_icon_url?: string;
  index?: number;
  count?: number;
}

export interface ProductDataIndicator {
  /** Data analytics metrics, source number, such as template purchases, replicas, etc
purchase volume */
  purchase_count?: number;
}

export interface ProductInfo {
  meta_info: ProductMetaInfo;
  user_behavior?: UserBehaviorInfo;
  commercial_setting?: product_common.CommercialSetting;
  plugin_extra?: PluginExtraInfo;
  bot_extra?: BotExtraInfo;
  workflow_extra?: WorkflowExtraInfo;
  social_scene_extra?: SocialSceneExtraInfo;
  project_extra?: ProjectExtraInfo;
}

export interface ProductLabel {
  name?: string;
}

export interface ProductMaterial {
  name?: string;
  icon_url?: string;
}

export interface ProductMetaInfo {
  id?: string;
  /** Product/Template Name */
  name?: string;
  /** Creature ID, determined by entity_type is the ID of the bot/plugin */
  entity_id?: string;
  /** Product material type */
  entity_type?: product_common.ProductEntityType;
  /** Product/template avatar */
  icon_url?: string;
  /** Heat: Template heat = copy volume (used for card display/sorting); product heat = different products have independent calculation logic (only used for sorting) - the calculation of heat has a certain delay */
  heat?: number;
  favorite_count?: number;
  /** Obsolete, use UserInfo instead */
  seller?: SellerInfo;
  /** Product description */
  description?: string;
  listed_at?: string;
  status?: product_common.ProductStatus;
  /** Product/template classification information */
  category?: ProductCategory;
  /** Whether to collect */
  is_favorited?: boolean;
  is_free?: boolean;
  /** Template introduction/plugin introduction (currently in rich text format) */
  readme?: string;
  entity_version?: string;
  labels?: Array<ProductLabel>;
  user_info?: product_common.UserInfo;
  medium_icon_url?: string;
  origin_icon_url?: string;
  /** Template cover */
  covers?: Array<product_common.ImageInfo>;
  /** Is the professional version specially available? */
  is_professional?: boolean;
  /** Is it a template? */
  is_template?: boolean;
  /** Is it an official product? */
  is_official?: boolean;
  /** Price, currently only available in the template. */
  price?: marketplace_common.Price;
}

export interface ProjectConfig {
  /** number of plugins */
  plugin_count?: number;
  /** number of workflows */
  workflow_count?: number;
  /** Number of knowledge bases */
  knowledge_count?: number;
  /** Number of databases */
  database_count?: number;
}

export interface ProjectExtraInfo {
  /** Generate a copy of the template before Project is put on the shelves. To use or copy the template, you need to use TemplateProjectID and TemplateProjectVersion */
  template_project_id?: string;
  template_project_version?: string;
  /** Project-bound UI supported preview types */
  preview_types?: Array<product_common.UIPreviewType>;
  /** user */
  user_count?: number;
  /** number of runs */
  execute_count?: number;
  /** distribution channel */
  publish_platforms?: Array<BotPublishPlatform>;
  /** Near real-time copy volume, obtained from the data warehouse interface (copy-report event tracking-data warehouse calculation drop library) */
  duplicate_count?: number;
  /** configuration */
  config?: ProjectConfig;
}

export interface ReportUserActionRequest {
  product_id: string;
  entity_type: product_common.ProductEntityType;
  operation_type: product_common.UserActionType;
}

export interface ReportUserActionResponse {
  code: number;
  message: string;
}

export interface SearchNLSuggestRequest {
  keyword: string;
  entity_type?: product_common.ProductEntityType;
}

export interface SearchNLSuggestResponse {
  code: number;
  message: string;
  data?: SearchNLSuggestResponseData;
}

export interface SearchNLSuggestResponseData {
  suggestions?: Array<ProductInfo>;
}

export interface SearchProductRequest {
  keyword: string;
  page_num: number;
  page_size: number;
  entity_type?: product_common.ProductEntityType;
  sort_type?: product_common.SortType;
  /** open and closed source */
  publish_mode?: product_common.ProductPublishMode;
  /** Model used */
  model_ids?: Array<string>;
  /** multimodal */
  bot_mod_type?: product_common.BotModType;
  /** sub-attribute */
  components?: Array<product_common.Component>;
  /** Publish channel id */
  publish_platform_ids?: Array<string>;
  /** Product classification id */
  category_ids?: Array<string>;
  /** Is it official? */
  is_official?: boolean;
  /** Is it recommended? */
  is_recommend?: boolean;
  /** List of product types, use this parameter first, followed by EntityType */
  entity_types?: Array<product_common.ProductEntityType>;
  /** plugin type */
  plugin_type?: product_common.PluginType;
}

export interface SearchProductResponse {
  code: number;
  message: string;
  data?: SearchProductResponseData;
}

export interface SearchProductResponseData {
  products?: Array<ProductInfo>;
  total?: number;
  has_more?: boolean;
  /** number of entities */
  entity_total?: Partial<Record<product_common.ProductEntityType, number>>;
}

export interface SearchSuggestRequest {
  keyword?: string;
  /** You can not pass it on, and the default recommendation bot is not passed on. */
  entity_type?: product_common.ProductEntityType;
  page_num?: number;
  page_size?: number;
  /** List of product types, use this parameter first, followed by EntityType */
  entity_types?: Array<product_common.ProductEntityType>;
}

export interface SearchSuggestResponse {
  code: number;
  message: string;
  data?: SearchSuggestResponseData;
}

export interface SearchSuggestResponseData {
  /** to be abandoned */
  suggestions?: Array<ProductMetaInfo>;
  has_more?: boolean;
  suggestion_v2?: Array<ProductInfo>;
}

export interface SellAttr {
  display_name?: string;
  key?: string;
  values?: Array<SellAttrValue>;
}

export interface SellAttrValue {
  id?: string;
  value?: string;
}

export interface SellerInfo {
  id?: string;
  name?: string;
  avatar_url?: string;
}

export interface SellInfo {
  skus?: Record<Int64, SKUInfo>;
  attr?: Array<SellAttr>;
  /** Key is attrkey: attrvalue path, value is skuID */
  sku_attr_ref?: Record<string, Int64>;
}

export interface ShareBotConversation {
  /** dialogue */
  conversation?: Conversation;
}

export interface SKUInfo {
  id?: string;
  /** to be abandoned */
  price?: Array<Price>;
  description?: string;
  price_v2?: Array<marketplace_common.Price>;
  charge_sku_info?: product_common.ChargeSKUExtra;
}

export interface SocialSceneExtraInfo {
  /** role */
  players?: Array<SocialScenePlayerInfo>;
  /** Number of people used */
  used_count?: string;
  /** number of times started */
  started_count?: string;
  /** open and closed source */
  publish_mode?: product_common.ProductPublishMode;
}

export interface SocialScenePlayerInfo {
  id?: string;
  name?: string;
  role_type?: product_common.SocialSceneRoleType;
}

export interface SupportLanguageData {
  langs?: Array<Lang>;
}

export interface SupportLanguageReq {}

export interface SupportLanguageResp {
  code: number;
  message: string;
  data?: SupportLanguageData;
}

export interface TemplateWhiteListConfig {
  space_ids?: Array<string>;
}

export interface ToolParameter {
  name?: string;
  required?: boolean;
  description?: string;
  type?: string;
  sub_params?: Array<ToolParameter>;
}

export interface Topic {
  id?: string;
  name?: string;
  description?: string;
  banner_url?: string;
  /** Small background image, front-end priority loading */
  banner_url_small?: string;
  reason?: string;
  /** The presentation document provided by the operation is visible to users */
  introduction_url?: string;
  /** Does the user collect the topic? */
  is_favorite?: boolean;
}

export interface TransMDData {
  output: string;
}

export interface TransMDReq {
  input: string;
  target_language: string;
}

export interface TransMDResp {
  code: number;
  message: string;
  data?: TransMDData;
}

export interface TransTextData {
  outputs: Array<string>;
}

export interface TransTextReq {
  inputs: Array<string>;
  /** target language */
  target_language: string;
}

export interface TransTextResp {
  code: number;
  message: string;
  data?: TransTextData;
}

export interface UnListingProductRequest {
  product_id: string;
}

export interface UnListingProductResponse {
  code: number;
  message: string;
}

export interface UpdateProductAttrData {
  task_id?: string;
  conversations?: Array<Conversation>;
}

export interface UpdateProductAttrRequest {
  product_id: string;
  entity_type: product_common.ProductEntityType;
  bot_attr?: BotAttr;
}

export interface UpdateProductAttrResponse {
  code: number;
  message: string;
  data?: UpdateProductAttrData;
}

export interface UploadImageData {
  uri?: string;
  url?: string;
}

export interface UploadImageRequest {
  data?: string;
}

export interface UploadImageResponse {
  code: number;
  message: string;
  data?: UploadImageData;
}

export interface UserBehaviorInfo {
  /** The user homepage needs to return the most recently viewed/used product time.
Latest Viewtimestamp */
  viewed_at?: string;
  /** Recently used timestamp */
  used_at?: string;
}

export interface UserQueryCollectConf {
  /** Bot user query collection configuration
Whether to turn on the collection switch */
  is_collected?: boolean;
  /** Privacy Policy Link */
  private_policy?: string;
}

export interface UserTriggerConfig {
  trigger_enabled?: TriggerEnable;
}

export interface VerifyDeveloperRequest {
  email_address?: string;
  phone?: string;
  ticket: string;
}

export interface VerifyDeveloperResponse {
  Code: number;
  Message: string;
}

export interface WorkflowCaseConfig {
  /** case execution id */
  case_execute_id?: string;
  /** The text content displayed on the image stream hover */
  hover_text?: string;
  /** The imported parameter diagram displayed on the image stream list page */
  input_image_url?: string;
  /** Graph of exported parameters displayed on the image stream list page */
  output_image_url?: string;
}

export interface WorkflowEntity {
  /** Product ID */
  product_id?: string;
  name?: string;
  entity_id?: string;
  entity_type?: product_common.ProductEntityType;
  entity_version?: string;
  icon_url?: string;
  entity_name?: string;
  readme?: string;
  category?: ProductCategory;
  /** Recommended categories, */
  recommended_category?: ProductCategory;
  nodes?: Array<WorkflowNodeInfo>;
  desc?: string;
  /** Imported parameters Picture icon */
  case_input_icon_url?: string;
  /** Exported parameters Image icon */
  case_output_icon_url?: string;
  latest_publish_commit_id?: string;
}

export interface WorkflowExtraInfo {
  related_workflows?: Array<WorkflowEntity>;
  duplicate_count?: number;
  /** Workflow canvas information */
  workflow_schema?: string;
  /** /api/workflowV2/query  schema_json
recommended classification */
  recommended_category?: ProductCategory;
  nodes?: Array<WorkflowNodeInfo>;
  start_node?: WorkflowNodeInfo;
  /** Entity name (for presentation) */
  entity_name?: string;
  /** Use case diagrams imported parameters */
  case_input_icon_url?: string;
  /** Use case diagram exported parameters */
  case_output_icon_url?: string;
  /** case execution ID */
  case_execute_id?: string;
  hover_text?: string;
  latest_publish_commit_id?: string;
  /** Practice running times, take from the number of warehouses */
  used_count?: number;
  /** Used to convert the input/output/intermediate message node of a workflow into a user visual configuration */
  gui_config?: WorkflowGUIConfig;
}

export interface WorkflowGUIConfig {
  /** Used to convert the input/output/intermediate message node of a workflow into a user visual configuration */
  start_node?: WorkflowNodeInfo;
  end_node?: WorkflowNodeInfo;
  /** The message node will output the intermediate process, which also needs to be displayed. */
  message_nodes?: Array<WorkflowNodeInfo>;
}

export interface WorkflowNodeInfo {
  node_id?: string;
  node_type?: product_common.WorkflowNodeType;
  node_param?: WorkflowNodeParam;
  /** Node icon */
  node_icon_url?: string;
  /** Presentation name (unique to the store, the name used for the details page GUI display message node) */
  show_name?: string;
}

export interface WorkflowNodeParam {
  input_parameters?: Array<WorkflowParameter>;
  terminate_plan?: WorkflowTerminatePlan;
  output_parameters?: Array<WorkflowParameter>;
}

export interface WorkflowParameter {
  name?: string;
  desc?: string;
  is_required?: boolean;
  input_type?: product_common.InputType;
  sub_parameters?: Array<WorkflowParameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: product_common.InputType;
  /** If the imported parameter is the user's hand input, put it here */
  value?: string;
  format?: product_common.PluginParamTypeFormat;
  from_node_id?: string;
  from_output?: Array<string>;
  /** InputType (+ AssistType) defines the final type of a variable, which only needs to be passed through */
  assist_type?: Int64;
  /** Display name (unique to the store, used for details page GUI display parameters) */
  show_name?: string;
  /** If the InputType is an array, there is a subassistant type */
  sub_assist_type?: Int64;
  /** Component configuration, parsed and rendered by the front end */
  component_config?: string;
  /** Component configuration type, required for front-end display */
  component_type?: string;
}

export interface WorkflowTerminatePlan {
  /** The answer mode corresponding to the end node of the workflow: 1 - Return the variable, and the Bot generates the answer; 2 - Use the set content to answer directly */
  terminate_plan_type?: number;
  /** Return content of scene configuration corresponding to terminate_plan_type = 2 */
  content?: string;
}
/* eslint-enable */
