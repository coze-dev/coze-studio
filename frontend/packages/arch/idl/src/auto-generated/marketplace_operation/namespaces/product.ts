/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as product_common from './product_common';
import * as marketplace_common from './marketplace_common';

export type Int64 = string | number;

export interface BotInfo {
  PublishMode?: product_common.ProductPublishMode;
}

export interface ListingConfig {
  /** Open and closed sources selected in the last submission */
  LastPublishMode?: product_common.ProductPublishMode;
  /** Last submitted category */
  CategoryID?: Int64;
  /** Is the data corresponding to the version open-source? */
  PublishMode?: product_common.ProductPublishMode;
}

export interface ListingConfigOption {
  NeedPublishMode?: boolean;
  NeedCategory?: boolean;
}

export interface ListingProductData {
  AuditStatus?: product_common.ProductDraftStatus;
}

export interface PluginInfo {
  Official?: boolean;
  Tools?: Array<PluginTool>;
}

export interface PluginTool {
  ID?: Int64;
  Name?: string;
  Description?: string;
}

export interface Price {
  Value?: number;
  Currency?: string;
  DisplayPrice?: string;
}

export interface ProductCategory {
  ID?: Int64;
  Name?: string;
  Index?: number;
}

export interface ProductDataIndicator {
  /** Data analytics metrics, source data warehouse, such as replication volume, run count, etc
Copy volume: Only the template has it. */
  DuplicatedCount?: number;
}

export interface ProductDraftInfo {
  ProductID?: Int64;
  ProductDraftID?: Int64;
  ProductEntity?: product_common.ProductEntity;
  AuditStatus?: product_common.ProductDraftStatus;
}

export interface ProductEntity {
  ProductID?: Int64;
  ProductEntity?: product_common.ProductEntity;
}

export interface ProductInfo {
  ProductID?: Int64;
  PluginInfo?: PluginInfo;
  Status?: product_common.ProductStatus;
  BotInfo?: BotInfo;
  CategoryID?: Int64;
  ProductEntity?: product_common.ProductEntity;
  /** Product name */
  Name?: string;
  Description?: string;
  /** Product avatar */
  IconURL?: string;
  /** Product OwnerUserID */
  OwnerID?: Int64;
  /** draft review status */
  DraftStatus?: product_common.ProductDraftStatus;
  /** SKU list */
  SKUs?: Array<SKUEntity>;
  /** Is it open source? */
  PublishMode?: product_common.ProductPublishMode;
  /** Workflow information */
  WorkflowInfo?: WorkflowInfo;
  /** Is the professional version specially available? */
  IsProfessional?: boolean;
  /** Is it a template? */
  IsTemplate?: boolean;
  IconURI?: string;
  /** Is it free? */
  IsFree?: boolean;
  /** Data analytics metrics */
  DataIndicator?: ProductDataIndicator;
  /** Template cover, there will only be one cover at most at present. */
  Covers?: Array<product_common.ImageInfo>;
}

export interface ProductInfoOption {
  NeedIcon?: boolean;
  /** When true, if the entity is not on the shelves, the latest draft status of the entity is returned */
  NeedNeverListed?: boolean;
}

export interface ProductStatusSet {
  ProductStatus?: product_common.ProductStatus;
  AuditStatus?: product_common.ProductDraftStatus;
  ProductID?: Int64;
  EntityType?: product_common.ProductEntityType;
}

export interface SKUAttrInfo {
  AttrKey?: string;
  AttrValue?: string;
}

export interface SKUEntity {
  SKUID?: Int64;
  Prices?: Array<Price>;
  Attrs?: Array<SKUAttrInfo>;
  PricesV2?: Array<marketplace_common.Price>;
  /** Subscription products will only be available. */
  SubscriptionInfo?: SubscriptionExtra;
  /** SKU name, for display */
  SKUTitle?: string;
  /** The product id to which SKUS belongs. */
  ProductID?: Int64;
  /** commodity entity information */
  EntityInfo?: product_common.ProductEntity;
  /** Recharge SKU-specific information */
  ChargeInfo?: product_common.ChargeSKUExtra;
}

/** The sku information of subscription products needs to be separated from the sku of ordinary products. */
export interface SubscriptionExtra {
  SubsSKUType?: product_common.SubscribeSKUType;
  AutoRenewSKU?: product_common.SubscriptionAutoRenewSKU;
  OneOffSKU?: product_common.SubscriptionOneOffSKU;
  BenefitIDs?: Array<Int64>;
  /** subscription level */
  SubscirptionLevel?: number;
}

export interface UIPreviewTypeConfig {
  /** Preview method/display method */
  UIPreviewType?: product_common.UIPreviewType;
  /** Whether it is valid, if false, the preview method is not supported */
  IsValid?: boolean;
  /** If IsValid is false, return the reason */
  Reason?: string;
}

export interface WorkflowInfo {
  CaseExecuteID?: Int64;
  CaseInputIconURL?: string;
  CaseOutputIconURL?: string;
  LastPublishCommitID?: string;
}
/* eslint-enable */
