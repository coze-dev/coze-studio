/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum SpanCategory {
  Unknown = 1,
  Start = 2,
  Agent = 3,
  LLMCall = 4,
  Workflow = 5,
  WorkflowStart = 6,
  WorkflowEnd = 7,
  Plugin = 8,
  Knowledge = 9,
  Code = 10,
  Condition = 11,
  Card = 12,
  Message = 13,
  Variable = 14,
  Database = 15,
  LongTermMemory = 16,
  Hook = 17,
  Batch = 18,
  Loop = 19,
  Parallel = 20,
  Script = 21,
  CallFlow = 22,
  Connector = 23,
}

export enum SpanStatus {
  Unknown = 1,
  Success = 2,
  Error = 3,
  Broken = 4,
}

export enum SpanType {
  Unknown = 1,
  UserInput = 2,
  ThirdParty = 3,
  ScheduledTasks = 4,
  OpenDialog = 5,
  InvokeAgent = 6,
  RestartAgent = 7,
  SwitchAgent = 8,
  LLMCall = 9,
  LLMBatchCall = 10,
  Workflow = 11,
  WorkflowStart = 12,
  WorkflowEnd = 13,
  PluginTool = 14,
  PluginToolBatch = 15,
  Knowledge = 16,
  Code = 17,
  CodeBatch = 18,
  Condition = 19,
  Chain = 20,
  Card = 21,
  WorkflowMessage = 22,
  WorkflowLLMCall = 23,
  WorkflowLLMBatchCall = 24,
  WorkflowCode = 25,
  WorkflowCodeBatch = 26,
  WorkflowCondition = 27,
  WorkflowPluginTool = 28,
  WorkflowPluginToolBatch = 29,
  WorkflowKnowledge = 30,
  WorkflowVariable = 31,
  WorkflowDatabase = 32,
  Variable = 33,
  Database = 34,
  LongTermMemory = 35,
  Hook = 36,
  BWStart = 37,
  BWEnd = 38,
  BWBatch = 39,
  BWLoop = 40,
  BWCondition = 41,
  BWLLM = 42,
  BWParallel = 43,
  BWScript = 44,
  BWVariable = 45,
  BWCallFlow = 46,
  BWConnector = 47,
  UserInputV2 = 48,
}

export interface AttrBWBatch {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrBWCallFlow {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** If the called process is a process in pkg, this field will be filled */
  call_flow_pkg_name: string;
  /** Process name called */
  call_flow_name: string;
}

export interface AttrBWCondition {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** The final selected branch name */
  branch_name: string;
}

export interface AttrBWConnector {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** The specific type of connector node */
  node_type: string;
}

export interface AttrBWEnd {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrBWLLM {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Large model type, only OpenAIChatModel selected will have valid values */
  model: string;
  /** temperature */
  temperature: number;
}

export interface AttrBWLoop {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrBWParallel {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrBWScript {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrBWStart {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrBWVariable {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrCard {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Card ID */
  card_id: string;
  /** Card type, enumeration: workflow, plugin, workflow_message */
  card_sub_type: string;
  /** The name of the node corresponding to the card */
  card_node_name?: string;
}

/** Deprecated */
export interface AttrChain {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrCode {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
}

export interface AttrCodeBatch {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Current task serial number */
  task_index: number;
  /** Total number of batch tasks */
  task_total: number;
}

export interface AttrCondition {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
}

export interface AttrDatabase {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
}

export interface AttrHook {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Hook service type, enumeration values are rpc, http, workflow, plugin, retriever */
  hook_type: string;
  /** Corresponding hook service URI */
  hook_uri: string;
  /** Call the agent id of the Hook (empty if single agent mode) */
  agent_id: string;
  /** Hook response code */
  hook_resp_code: string;
  /** Is it streaming I/O? */
  is_stream: boolean;
}

export interface AttrInvokeAgent {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** LLM models such as GPT-4 (8K) */
  model: string;
  /** Temperature parameter */
  temperature: number;
  /** Maximum reply character length */
  max_length_resp: number;
  /** context mode */
  context_mode: string;
  /** Number of session rounds memorized */
  dialog_round: number;
  /** Agent pattern type */
  agent_type: string;
  /** AgentFlow finite-state machine, the ID of the current Agent */
  agent_id: string;
  /** Initial reply timestamp, in milliseconds */
  start_time_first_resp: string;
  /** Initial reply time, in milliseconds */
  latency_first_resp: string;
}

export interface AttrKnowledge {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Knowledge unique identifier */
  knowledge_id: string;
}

export interface AttrLLMBatchCall {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Initial reply timestamp, in milliseconds */
  start_time_first_resp: string;
  /** call type */
  call_type: string;
  /** LLM models such as GPT-4 (8K) */
  model: string;
  /** Temperature parameter */
  temperature: number;
  /** Maximum reply character length */
  max_length_resp: number;
  /** Current task serial number */
  task_index: number;
  /** Total number of batch tasks */
  task_total: number;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Initial reply time, in milliseconds */
  latency_first_resp: string;
}

export interface AttrLLMCall {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Initial reply timestamp, in milliseconds */
  start_time_first_resp: string;
  /** call type */
  call_type: string;
  /** LLM models such as GPT-4 (8K) */
  model: string;
  /** Temperature parameter */
  temperature: number;
  /** Maximum reply character length */
  max_length_resp: number;
  /** Cue word for this node */
  prompt: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Initial reply time, in milliseconds */
  latency_first_resp: string;
}

export interface AttrLongTermMemory {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
}

export interface AttrPluginTool {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** plug-in unique identifier */
  plugin_id: string;
  /** Unique Identification of Tools in Plugins */
  tool_id: string;
  /** Tool name */
  tool_name: string;
  /** Node ID in workflow */
  workflow_node_id: string;
}

export interface AttrPluginToolBatch {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** plug-in unique identifier */
  plugin_id: string;
  /** Unique Identification of Tools in Plugins */
  tool_id: string;
  /** Tool name */
  tool_name: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Current task serial number */
  task_index: number;
  /** Total number of batch tasks */
  task_total: number;
}

export interface AttrRestartAgent {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrSwitchAgent {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
}

export interface AttrUserInput {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Query type: text/file/voice... */
  query_type: string;
  /** Query input method: manual input... */
  query_input_method: string;
  /** Is it regenerated? */
  is_regenerate: boolean;
  /** Initial reply timestamp, in milliseconds */
  start_time_first_resp: string;
  /** Client side type */
  client_type: string;
  /** User's operating system, such as iOS devices, Android devices */
  os: string;
  /** User operating system version, such as iOS version */
  os_version: string;
  /** browser type */
  browser_type: string;
  /** Browser version */
  browser_version: string;
  /** pushUuid in debug information */
  push_uuid: string;
  /** suggestion message */
  suggestions: string;
  /** Dialogue scene, only reported by Coze platform, value homebot, draftbot, bot_detailpage */
  dialog_scene: string;
  /** message unique identifier */
  message_id: string;
  /** Initial reply time, in milliseconds */
  latency_first_resp: string;
  /** Concise input for this node */
  simple_input?: string;
}

export interface AttrVariable {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** call method */
  action: string;
}

export interface AttrWorkflow {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** process unique identifier */
  workflow_id: string;
  /** process execution ID */
  execute_id: string;
  /** process version number */
  workflow_version?: string;
  /** Node ID in workflow */
  workflow_node_id?: string;
  /** Workflow type: 1 - basic workflow, 2 - BlockWise workflow */
  workflow_schema_type?: number;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowCode {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowCodeBatch {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Current task serial number */
  task_index: number;
  /** Total number of batch tasks */
  task_total: number;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowCondition {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowDatabase {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowEnd {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** output mode */
  output_mode: string;
  /** response content */
  answer_content: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowKnowledge {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Knowledge unique identifier */
  knowledge_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowLLMBatchCall {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Initial reply timestamp, in milliseconds */
  start_time_first_resp: string;
  /** call type */
  call_type: string;
  /** LLM models such as GPT-4 (8K) */
  model: string;
  /** Temperature parameter */
  temperature: number;
  /** Maximum reply character length */
  max_length_resp: number;
  /** Current task serial number */
  task_index: number;
  /** Total number of batch tasks */
  task_total: number;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Initial reply time, in milliseconds */
  latency_first_resp: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowLLMCall {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Initial reply timestamp, in milliseconds */
  start_time_first_resp: string;
  /** call type */
  call_type: string;
  /** LLM models such as GPT-4 (8K) */
  model: string;
  /** Temperature parameter */
  temperature: number;
  /** Maximum reply character length */
  max_length_resp: number;
  /** Cue word for this node */
  prompt: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Initial reply time, in milliseconds */
  latency_first_resp: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowMessage {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Streaming output, enumeration: open, close */
  streaming_output: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowPluginTool {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** plug-in unique identifier */
  plugin_id: string;
  /** Unique Identification of Tools in Plugins */
  tool_id: string;
  /** Tool name */
  tool_name: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowPluginToolBatch {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** plug-in unique identifier */
  plugin_id: string;
  /** Unique Identification of Tools in Plugins */
  tool_id: string;
  /** Tool name */
  tool_name: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** Current task serial number */
  task_index: number;
  /** Total number of batch tasks */
  task_total: number;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

export interface AttrWorkflowVariable {
  /** Argos log ID */
  log_id: string;
  /** The user ID that triggered the event */
  user_id: string;
  /** Bot ID where the event occurred */
  bot_id: string;
  /** Bot name snapshot */
  bot_name: string;
  /** Bot development/formal environment */
  bot_env: string;
  /** bot version */
  bot_version: string;
  /** Bot owner space ID */
  bot_space_id: string;
  /** Bot delivery channels, such as bean buns, Feishu, etc */
  channel: string;
  /** Input to this node */
  input: string;
  /** Output of this node */
  output: string;
  /** Current span Actual input token consumption */
  input_tokens: number;
  /** Current span actual output consumed tokens */
  output_tokens: number;
  /** The status code of the current span, 0 indicates success, non-0 indicates failure */
  status_code: string;
  /** call type */
  call_type: string;
  /** Node ID in workflow */
  workflow_node_id: string;
  /** process unique identifier */
  workflow_id?: string;
  /** process execution ID */
  execute_id?: string;
  /** process version number */
  workflow_version?: string;
  /** Process Execution Sub-ID */
  sub_execute_id?: string;
}

/** A Span represents a single operation performed by a single component of the system. */
export interface Span {
  /** A unique identifier for a trace. All spans from the same trace share the same `trace_id`.
This field is required. */
  trace_id: string;
  /** A unique identifier for a span within a trace, assigned when the span
is created.
This field is required. */
  id: string;
  /** The `span id` of this span's parent span. If this is a root span, then the value of this
field must be empty.
❌ "parent_id": null
✅ "parent_id": "" */
  parent_id: string;
  /** A description of the span's operation.

For example, the name can be a qualified method name or a file name
and a line number where the operation is called. A best practice is to use
the same display name at the same call point in an application.
This makes it easier to correlate spans in different traces.

This field is semantically required to be set to non-empty string.
Empty value is equivalent to an unknown span name.

This field is required. */
  name: string;
  /** Type is the type of span. */
  type: SpanType;
  /** StartTime(ms) is the start time of the span. On the client side, this is the time
kept by the local machine where the span execution starts. On the server side,
this is the time when the server's application handler starts running.
Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
  start_time: string;
  /** Latency(ms) */
  latency: string;
  /** An final status for this span. */
  status: SpanStatus;
  /** Attributes is a collection of key/value pairs. examples of attributes:

"log_id": "20240101123456"
"input_tokens": 8888

Attribute keys MUST be unique (it is not allowed to have more than one
attribute with the same key). */
  attr_user_input?: AttrUserInput;
  attr_invoke_agent?: AttrInvokeAgent;
  attr_restart_agent?: AttrRestartAgent;
  attr_switch_agent?: AttrSwitchAgent;
  attr_llm_call?: AttrLLMCall;
  attr_llm_batch_call?: AttrLLMBatchCall;
  attr_workflow?: AttrWorkflow;
  attr_workflow_end?: AttrWorkflowEnd;
  attr_code?: AttrCode;
  attr_code_batch?: AttrCodeBatch;
  attr_condition?: AttrCondition;
  attr_plugin_tool?: AttrPluginTool;
  attr_plugin_tool_batch?: AttrPluginToolBatch;
  attr_knowledge?: AttrKnowledge;
  /** Deprecated */
  attr_chain?: AttrChain;
  attr_card?: AttrCard;
  attr_workflow_message?: AttrWorkflowMessage;
  attr_workflow_llm_call?: AttrWorkflowLLMCall;
  attr_workflow_llm_batch_call?: AttrWorkflowLLMBatchCall;
  attr_workflow_code?: AttrWorkflowCode;
  attr_workflow_code_batch?: AttrWorkflowCodeBatch;
  attr_workflow_condition?: AttrWorkflowCondition;
  attr_workflow_plugin_tool?: AttrWorkflowPluginTool;
  attr_workflow_plugin_tool_batch?: AttrWorkflowPluginToolBatch;
  attr_workflow_knowledge?: AttrWorkflowKnowledge;
  attr_workflow_variable?: AttrWorkflowVariable;
  attr_workflow_database?: AttrWorkflowDatabase;
  attr_variable?: AttrVariable;
  attr_database?: AttrDatabase;
  attr_long_term_memory?: AttrLongTermMemory;
  attr_hook?: AttrHook;
  attr_bw_start?: AttrBWStart;
  attr_bw_end?: AttrBWEnd;
  attr_bw_batch?: AttrBWBatch;
  attr_bw_loop?: AttrBWLoop;
  attr_bw_condition?: AttrBWCondition;
  attr_bw_llm?: AttrBWLLM;
  attr_bw_parallel?: AttrBWParallel;
  attr_bw_variable?: AttrBWVariable;
  attr_bw_call_flow?: AttrBWCallFlow;
  attr_bw_connector?: AttrBWConnector;
  attr_bw_script?: AttrBWScript;
}
/* eslint-enable */
