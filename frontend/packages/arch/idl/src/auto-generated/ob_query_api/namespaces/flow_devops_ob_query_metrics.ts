/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

/** aggregation method */
export enum AggregateType {
  Unknown = 1,
  Avg = 2,
  P50 = 3,
  P99 = 4,
  P999 = 5,
  P90 = 6,
  Sum = 7,
}

/** downsampling interval */
export enum DownsampleInterval {
  Unknown = 1,
  /** 30 second */
  DI30S = 2,
  /** 1 minute */
  DI1M = 3,
  /** 2 minute */
  DI2M = 4,
  /** 5 minute */
  DI5M = 5,
  /** 10 minute */
  DI10M = 6,
  /** 20 minute */
  DI20M = 7,
  /** 30 minute */
  DI30M = 8,
}

/** Types of operations views */
export enum MetricsType {
  Unknown = 1,
  /** The number of queries received per second reflects the query load of the bot */
  BotQueryQPS = 2,
  /** The query success rate reflects the stability of the bot under current load */
  BotQuerySuccessRate = 3,
  /** The delay from the query received by the Bot to the return of the first Tokens reflects the Bot response speed perceived by the query party */
  BotQueryLatencyFirstResp = 4,
  /** The delay from receiving the query from the bot to returning all tokens reflects the overall performance of the bot */
  BotQueryLatency = 5,
  /** Number of workflow calls per second, reflecting the workload of the workflow */
  WorkflowRunQPS = 6,
  /** The invocation success rate of the workflow reflects the stability of the workflow under the current load */
  WorkflowRunSuccessRate = 7,
  /** Reflects the execution time of the workflow */
  WorkflowRunLatency = 8,
  /** Number of plug-in calls per second. Reflects plug-in load */
  PluginRunQPS = 9,
  /** The call success rate of the plug-in reflects the stability of the plug-in under the current load */
  PluginRunSuccessRate = 10,
  /** The response duration of the plug-in reflects the overall performance of the plug-in */
  PluginRunLatency = 11,
  /** The code corresponds to the number of times the function fragment is called per second. Reflects the execution load */
  CodeRunQPS = 12,
  /** The call success rate of the corresponding function of the code reflects the stability under the corresponding load */
  CodeRunSuccessRate = 13,
  /** The execution time of the corresponding function of the code reflects the overall performance */
  CodeRunLatency = 14,
  /** The number of recalls per second of the knowledge base, reflecting the recall load of the knowledge base */
  KnowledgeRecallQPS = 15,
  /** Number of segments per recall in the knowledge base */
  KnowledgeRecallSegments = 16,
  /** The recall success rate of the knowledge base reflects the stability of the knowledge base under the current load */
  KnowledgeRecallSuccessRate = 17,
  /** The recall time of the knowledge base reflects the recall performance of the knowledge base */
  KnowledgeRecallLatency = 18,
  /** The number of calls to the large model per second, reflecting the call load of the large model */
  LLMQueryQPS = 19,
  /** The call success rate of the large model reflects the stability of the large model under the current load */
  LLMQuerySuccessRate = 20,
  /** The response duration of the large model reflects the overall performance of the large model */
  LLMQueryLatency = 21,
  /** The number of tokens returned per second by the large model */
  LLMOutputTokensQPS = 22,
  /** Hook calls per second. Reflects hook load */
  HookRunQPS = 23,
  /** The success rate of the hook reflects the stability of the hook under the current load */
  HookRunSuccessRate = 24,
  /** The average time of the hook reflects the overall performance of the hook */
  HookRunLatency = 25,
}

export interface Curve {
  tag_kvs: Record<string, string>;
  points: Array<Point>;
}

export interface GetMetricsData {
  curves: Array<Curve>;
  /** downsampling interval */
  interval: DownsampleInterval;
}

export interface GetMetricsRequest {
  /** space id */
  space_id: string;
  /** bot id */
  bot_id: string;
  /** s */
  start_time: string;
  /** s, end_at >= start_at */
  end_time: string;
  metrics_type: MetricsType;
  aggregate_type?: AggregateType;
  tag_kvs?: Record<string, Array<string>>;
  top_k?: number;
}

export interface GetMetricsResponse {
  data: GetMetricsData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface GetTagVHistoricalOptionsData {
  options: Array<TagVOption>;
}

export interface GetTagVHistoricalOptionsRequest {
  /** space id */
  space_id: string;
  /** bot id */
  bot_id: string;
  tag_k: string;
  choices?: Record<string, Array<string>>;
  /** s */
  start_time: string;
  /** s, end_at >= start_at */
  end_time: string;
  metrics_type: MetricsType;
  top_k?: number;
}

export interface GetTagVHistoricalOptionsResponse {
  data: GetTagVHistoricalOptionsData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface GetTagVLatestOptionsData {
  options: Array<TagVOption>;
}

export interface GetTagVLatestOptionsRequest {
  /** space id */
  space_id: string;
  /** bot id */
  bot_id: string;
  tag_k: string;
  choices?: Record<string, Array<string>>;
}

export interface GetTagVLatestOptionsResponse {
  data: GetTagVLatestOptionsData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg: string;
}

export interface Point {
  x: Int64;
  x_alias: string;
  y: number;
}

export interface TagVOption {
  key: string;
  label: string;
}
/* eslint-enable */
