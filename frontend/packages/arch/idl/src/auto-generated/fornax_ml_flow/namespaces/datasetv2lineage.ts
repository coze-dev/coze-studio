/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as datasetv2 from './datasetv2';

export type Int64 = string | number;

export enum LineageSourceType {
  Manual = 1,
  /** You need to distinguish between review sets/datasets/... based on the ItemSource.dataset.category field. */
  Dataset = 2,
  /** Need to distinguish HDFS/local upload/... */
  FileStorage = 3,
  /** none */
  DataReflow = 4,
  /** none */
  DataAnnotation = 5,
  /** none */
  DataProcessing = 6,
  /** none */
  DataGenerate = 7,
  OpenAPI = 8,
  /** crowdsourced annotation task */
  CrowdsourcingAnnotation = 9,
}

export enum TrackedJobType {
  /** data import task */
  DatasetIOJob = 1,
  /** data return task */
  DataReflow = 2,
  /** labeling task */
  DataAnnotation = 3,
  /** data processing task */
  DataProcessing = 4,
  /** data generation task */
  DataGenerate = 5,
  /** crowdsourced annotation task */
  CrowdsourcingAnnotation = 6,
}

export interface ItemSource {
  type: LineageSourceType;
  /** Source item information, can be empty */
  trackedItem?: TrackedItem;
  /** Task type, according to this field to distinguish data import tasks/data return tasks/... */
  jobType?: TrackedJobType;
  /** The task id associated with the item, with 0 indicating no corresponding task (e.g. data was generated by cloning another data row) */
  jobID?: string;
  /** When type = Dataset, get dataset specific information from this field */
  dataset?: TrackedDataset;
  /** When type = FileStorage, get file information from this field */
  file?: TrackedFile;
  createdAt?: string;
}

/** Source dataset information (the dataset id is obtained from TrackedItem and is not returned here) */
export interface TrackedDataset {
  /** Dataset category, according to which the evaluation set/dataset/... */
  category?: datasetv2.DatasetCategory;
  datasetName?: string;
}

export interface TrackedFile {
  /** Storage media, distinguish between HDFS/local files (i.e. ImageX)/... */
  storage?: datasetv2.StorageProvider;
  /** The original file name of the user-uploaded file */
  originalFileName?: string;
}

export interface TrackedItem {
  spaceID?: string;
  datasetID?: string;
  itemID?: string;
  /** Version number The version id after submission, with 0 indicating the draft version */
  versionID?: string;
  /** Version number (three-stage) */
  version?: string;
}
/* eslint-enable */
