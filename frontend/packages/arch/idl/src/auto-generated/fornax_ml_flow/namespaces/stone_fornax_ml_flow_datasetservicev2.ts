/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as datasetv2 from './datasetv2';
import * as base from './base';
import * as datasetv2job from './datasetv2job';
import * as datasetv2similarity from './datasetv2similarity';
import * as datasetv2lineage from './datasetv2lineage';
import * as filter from './filter';

export type Int64 = string | number;

export interface BatchCreateDatasetItemsReq {
  spaceID?: string;
  datasetID: string;
  items?: Array<datasetv2.DatasetItem>;
  /** When there is invalid data in items, no data will be written by default; setting skipInvalidItems=true will skip invalid data and write valid data */
  skipInvalidItems?: boolean;
  /** Bulk write items If the dataset capacity limit is exceeded, no data will be written by default; setting partialAdd = true will write the first N items that do not exceed the capacity limit */
  allowPartialAdd?: boolean;
  base?: base.Base;
}

export interface BatchCreateDatasetItemsResp {
  /** Key: item index in items */
  addedItems?: Record<number, Int64>;
  errors?: Array<datasetv2.ItemErrorGroup>;
  /** base */
  baseResp?: base.BaseResp;
}

export interface BatchDeleteDatasetItemsReq {
  spaceID?: string;
  datasetID: string;
  itemIDs?: Array<string>;
  base?: base.Base;
}

export interface BatchDeleteDatasetItemsResp {
  baseResp?: base.BaseResp;
}

export interface BatchGetDatasetItemsByVersionReq {
  spaceID?: string;
  datasetID: string;
  versionID: string;
  itemIDs: Array<string>;
  base?: base.Base;
}

export interface BatchGetDatasetItemsByVersionResp {
  items?: Array<datasetv2.DatasetItem>;
  baseResp?: base.BaseResp;
}

export interface BatchGetDatasetItemsReq {
  spaceID?: string;
  datasetID: string;
  itemIDs: Array<string>;
  base?: base.Base;
}

export interface BatchGetDatasetItemsResp {
  items?: Array<datasetv2.DatasetItem>;
  baseResp?: base.BaseResp;
}

export interface BatchGetDatasetsReq {
  spaceID: string;
  datasetIDs: Array<string>;
  withDeleted?: boolean;
  base?: base.Base;
}

export interface BatchGetDatasetsResp {
  datasets?: Array<datasetv2.Dataset>;
  baseResp?: base.BaseResp;
}

export interface BatchGetVersionedDatasetsReq {
  spaceID?: string;
  versionIDs: Array<string>;
  /** Whether to return deleted data, not by default */
  withDeleted?: boolean;
  base?: base.Base;
}

export interface BatchGetVersionedDatasetsResp {
  versionedDataset?: Array<VersionedDataset>;
  baseResp?: base.BaseResp;
}

export interface CancelDatasetIOJobReq {
  spaceID: string;
  jobID: string;
  base?: base.Base;
}

export interface CancelDatasetIOJobResp {
  baseResp?: base.BaseResp;
}

export interface ClearDatasetItemRequest {
  spaceID?: string;
  dataset_id: string;
  Base?: base.Base;
}

export interface ClearDatasetItemResponse {
  BaseResp?: base.BaseResp;
}

export interface ConfirmItemDeduplicateReq {
  spaceID?: string;
  jobID: string;
  /** batch confirmation */
  pairs: Array<ConfirmItemPair>;
  /** base */
  base?: base.Base;
}

export interface ConfirmItemDeduplicateResp {
  baseResp?: base.BaseResp;
}

export interface ConfirmItemPair {
  /** Newly imported entry primary key */
  newItemsUniqKey: string;
  importConfirmType: datasetv2job.ImportConfirmType;
}

export interface ConflictField {
  /** Conflicting listings */
  fieldName?: string;
  /** Conflict details. key: filename, val: the type contained in this file */
  detailM?: Record<string, datasetv2.FieldSchema>;
}

export interface CreateDatasetItemReq {
  spaceID: string;
  datasetID: string;
  /** The idempotent key for data insertion, which can not be passed when the front end is created. */
  itemKey?: string;
  /** data content */
  data?: Array<datasetv2.FieldData>;
  /** Multiple rounds of data content, mutual exclusion with data */
  repeatedData?: Array<datasetv2.ItemData>;
  /** If there is a source item, this field allows you to specify whether to retain the kinship to the cloned source item */
  keepLineage?: boolean;
  /** Source item id, required if keepLineage is true */
  sourceItemID?: string;
  base?: base.Base;
}

export interface CreateDatasetItemResp {
  itemID?: string;
  error?: datasetv2.ItemErrorGroup;
  baseResp?: base.BaseResp;
}

export interface CreateDatasetReq {
  spaceID: string;
  appID?: number;
  name: string;
  description?: string;
  category?: datasetv2.DatasetCategory;
  bizCategory?: string;
  fields?: Array<datasetv2.FieldSchema>;
  securityLevel?: datasetv2.SecurityLevel;
  visibility?: datasetv2.DatasetVisibility;
  spec?: datasetv2.DatasetSpec;
  features?: datasetv2.DatasetFeatures;
  userID?: string;
  base?: base.Base;
}

export interface CreateDatasetResp {
  datasetID?: string;
  baseResp?: base.BaseResp;
}

export interface CreateDatasetVersionReq {
  spaceID?: string;
  datasetID: string;
  /** The displayed version number, SemVer2 three-stage, needs to be larger than the previous version */
  version: string;
  desc?: string;
  base?: base.Base;
}

export interface CreateDatasetVersionResp {
  id?: string;
  baseResp?: base.BaseResp;
}

export interface CreateDatasetWithImportReq {
  spaceID?: string;
  appID?: number;
  sourceType?: datasetv2job.SourceType;
  source: datasetv2job.DatasetIOEndpoint;
  fieldMappings?: Array<datasetv2job.FieldMapping>;
  option?: datasetv2job.DatasetIOJobOption;
  /** New dataset name */
  targetDatasetName: string;
  /** New dataset description */
  targetDatasetDesc?: string;
  category?: datasetv2.DatasetCategory;
  fields?: Array<datasetv2.FieldSchema>;
  /** base */
  base?: base.Base;
}

export interface CreateDatasetWithImportResp {
  datasetID?: string;
  jobID?: string;
  baseResp?: base.BaseResp;
}

export interface CreateItemDeduplicateJobReq {
  spaceID?: string;
  datasetID: Int64;
  file?: datasetv2job.DatasetIOFile;
  fieldMappings?: Array<datasetv2job.FieldMapping>;
  option?: datasetv2job.DatasetIOJobOption;
  /** Task id, used when reentering */
  jobID?: string;
  /** According to which column deduplicate */
  fieldKey?: string;
  /** deduplicate algorithm */
  similarityAlgorithm?: datasetv2similarity.SimilarityAlgorithm;
  /** threshold */
  threshold?: Int64;
  /** base */
  base?: base.Base;
}

export interface CreateItemDeduplicateJobResp {
  /** Task id, the front end will use this id to get it later, the list to be confirmed */
  jobID: string;
  baseResp?: base.BaseResp;
}

export interface DeleteDatasetItemReq {
  spaceID?: string;
  datasetID: string;
  itemID: string;
  base?: base.Base;
}

export interface DeleteDatasetItemResp {
  baseResp?: base.BaseResp;
}

export interface DeleteDatasetReq {
  spaceID?: string;
  datasetID: string;
  base?: base.Base;
}

export interface DeleteDatasetResp {
  baseResp?: base.BaseResp;
}

export interface ExportDatasetReq {
  spaceID: string;
  datasetID: string;
  /** The version id of the dataset to be exported, 0 indicates the exported draft version */
  versionID?: string;
  targetType: datasetv2job.SourceType;
  /** Fill in a folder here, and the corresponding file will be generated under this folder. */
  target: datasetv2job.DatasetIOEndpoint;
  /** base */
  base?: base.Base;
}

export interface ExportDatasetResp {
  jobID?: string;
  /** base */
  baseResp?: base.BaseResp;
}

export interface FieldMeta {
  /** field type */
  field_type: string;
  /** The type of operation supported by the current field */
  query_types: Array<string>;
  display_name: string;
  /** Supported options */
  field_options?: FieldOptions;
  /** Does the current field exist in the schema? */
  exist?: boolean;
}

export interface FieldMetaInfoData {
  /** field meta information */
  field_metas: Record<string, FieldMeta>;
}

export interface FieldOptions {
  i32?: Array<number>;
  i64?: Array<string>;
  f64?: Array<number>;
  string?: Array<string>;
  obj?: Array<ObjectFieldOption>;
}

export interface GetDatasetIOJobReq {
  spaceID?: string;
  jobID: string;
  base?: base.Base;
}

export interface GetDatasetIOJobResp {
  job?: datasetv2job.DatasetIOJob;
  baseResp?: base.BaseResp;
}

export interface GetDatasetItemDeepSourcesReq {
  spaceID: string;
  datasetID: string;
  /** Primary key id of item */
  id: string;
  base?: base.Base;
}

export interface GetDatasetItemDeepSourcesResp {
  /** Returns in order from root to current item */
  deepSources?: Array<datasetv2lineage.ItemSource>;
  baseResp?: base.BaseResp;
}

export interface GetDatasetItemReq {
  spaceID?: string;
  datasetID: string;
  itemID: string;
  base?: base.Base;
}

export interface GetDatasetItemResp {
  item?: datasetv2.DatasetItem;
  baseResp?: base.BaseResp;
}

export interface GetDatasetItemSourceReq {
  spaceID: string;
  datasetID: string;
  /** Primary key id of item */
  id: string;
  base?: base.Base;
}

export interface GetDatasetItemSourceResp {
  source?: datasetv2lineage.ItemSource;
  baseResp?: base.BaseResp;
}

export interface GetDatasetReq {
  spaceID?: string;
  datasetID: string;
  /** Whether to return when the dataset has been deleted */
  withDeleted?: boolean;
  base?: base.Base;
}

export interface GetDatasetResp {
  dataset?: datasetv2.Dataset;
  baseResp?: base.BaseResp;
}

export interface GetDatasetSchemaReq {
  spaceID?: string;
  datasetID: string;
  /** Whether to get the deleted column, it is not returned by default */
  withDeleted?: boolean;
  base?: base.Base;
}

export interface GetDatasetSchemaResp {
  fields?: Array<datasetv2.FieldSchema>;
  baseResp?: base.BaseResp;
}

export interface GetDatasetVersionReq {
  spaceID?: string;
  versionID: string;
  /** Whether to return deleted data, not by default */
  withDeleted?: boolean;
  base?: base.Base;
}

export interface GetDatasetVersionResp {
  version?: datasetv2.DatasetVersion;
  dataset?: datasetv2.Dataset;
  baseResp?: base.BaseResp;
}

export interface GetFieldsMetaInfoRequest {
  spaceID: Int64;
  datasetID: Int64;
}

export interface GetFieldsMetaInfoResponse {
  data: FieldMetaInfoData;
}

export interface GetItemDeduplicateJobReq {
  spaceID?: string;
  jobID: string;
  confirmType?: datasetv2job.ImportConfirmType;
  page?: number;
  pageSize?: number;
  base?: base.Base;
}

export interface GetItemDeduplicateJobResp {
  job?: datasetv2job.ItemDeduplicateJob;
  baseResp?: base.BaseResp;
}

export interface ImportDatasetReq {
  spaceID?: string;
  datasetID: string;
  file?: datasetv2job.DatasetIOFile;
  /** Add vt.elem.skip = "false" after the outfield front end is fixed. */
  fieldMappings?: Array<datasetv2job.FieldMapping>;
  option?: datasetv2job.DatasetIOJobOption;
  /** base */
  base?: base.Base;
}

export interface ImportDatasetResp {
  jobID?: string;
  baseResp?: base.BaseResp;
}

export interface ListDatasetIOJobsOfDatasetReq {
  spaceID?: string;
  datasetID: string;
  types?: Array<datasetv2job.JobType>;
  statuses?: Array<datasetv2job.JobStatus>;
  base?: base.Base;
}

export interface ListDatasetIOJobsOfDatasetResp {
  jobs?: Array<datasetv2job.DatasetIOJob>;
  baseResp?: base.BaseResp;
}

export interface ListDatasetItemsByVersionReq {
  spaceID?: string;
  datasetID: string;
  versionID: string;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  filter?: filter.Filter;
  base?: base.Base;
}

export interface ListDatasetItemsByVersionResp {
  items?: Array<datasetv2.DatasetItem>;
  /** pagination */
  nextCursor?: string;
  total?: Int64;
  filterTotal?: Int64;
  baseResp?: base.BaseResp;
}

export interface ListDatasetItemsReq {
  spaceID?: string;
  datasetID: string;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  filter?: filter.Filter;
  base?: base.Base;
}

export interface ListDatasetItemsResp {
  items?: Array<datasetv2.DatasetItem>;
  /** pagination */
  nextCursor?: string;
  total?: string;
  filterTotal?: string;
  baseResp?: base.BaseResp;
}

export interface ListDatasetVersionsReq {
  spaceID?: string;
  datasetID: string;
  /** Based on version number fuzzy match */
  versionLike?: string;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  base?: base.Base;
}

export interface ListDatasetVersionsResp {
  versions?: Array<datasetv2.DatasetVersion>;
  /** pagination */
  nextCursor?: string;
  total?: string;
  baseResp?: base.BaseResp;
}

export interface ObjectFieldOption {
  id: Int64;
  displayName: string;
}

export interface ParseImportSourceFileReq {
  spaceID: string;
  /** If path is a folder, only all files of the specified type under the current path level will be parsed by default, not nested. */
  file?: datasetv2job.DatasetIOFile;
  /** base */
  base?: base.Base;
}

export interface ParseImportSourceFileResp {
  /** File size in bytes */
  bytes?: string;
  /** Column name and type. If there are multiple files, it will be merged and returned. If there is a conflict between the column definitions in the file, the resolution result will not be returned here. The specific conflict details will be returned through conflicts. */
  fields?: Array<datasetv2.FieldSchema>;
  /** Conflict details. key: column name, val: conflict details */
  conflicts?: Array<ConflictField>;
  /** There are files with poorly defined columns (i.e. a column is defined with multiple types), which currently occurs only in jsonl files */
  filesWithAmbiguousColumn?: Array<string>;
  /** base */
  baseResp?: base.BaseResp;
}

export interface SearchDatasetIOJobsOfDatasetReq {
  spaceID?: string;
  datasetID: string;
  types?: Array<datasetv2job.JobType>;
  statuses?: Array<datasetv2job.JobStatus>;
  base?: base.Base;
}

export interface SearchDatasetIOJobsOfDatasetResp {
  jobs?: Array<datasetv2job.DatasetIOJob>;
  baseResp?: base.BaseResp;
}

export interface SearchDatasetItemsByVersionReq {
  spaceID?: string;
  datasetID: string;
  versionID: string;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  filter?: filter.Filter;
  base?: base.Base;
}

export interface SearchDatasetItemsByVersionResp {
  items?: Array<datasetv2.DatasetItem>;
  /** pagination */
  nextCursor?: string;
  total?: Int64;
  filterTotal?: Int64;
  baseResp?: base.BaseResp;
}

export interface SearchDatasetItemsReq {
  spaceID?: string;
  datasetID: string;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  filter?: filter.Filter;
  base?: base.Base;
}

export interface SearchDatasetItemsResp {
  items?: Array<datasetv2.DatasetItem>;
  /** pagination */
  nextCursor?: string;
  total?: string;
  filterTotal?: string;
  baseResp?: base.BaseResp;
}

export interface SearchDatasetsReq {
  spaceID: string;
  datasetIDs?: Array<string>;
  category?: datasetv2.DatasetCategory;
  /** Support fuzzy search */
  name?: string;
  createdBys?: Array<string>;
  bizCategories?: Array<string>;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  base?: base.Base;
}

export interface SearchDatasetsResp {
  datasets?: Array<datasetv2.Dataset>;
  /** pagination */
  nextCursor?: string;
  total?: string;
  baseResp?: base.BaseResp;
}

export interface SearchDatasetVersionsReq {
  spaceID?: string;
  datasetID: string;
  /** Based on version number fuzzy match */
  versionLike?: string;
  /** pagination */
  page?: number;
  /** Page size (0,200], default is 20 */
  pageSize?: number;
  /** Preferred cursor when served with page */
  cursor?: string;
  orderBy?: datasetv2.OrderBy;
  base?: base.Base;
}

export interface SearchDatasetVersionsResp {
  versions?: Array<datasetv2.DatasetVersion>;
  /** pagination */
  nextCursor?: string;
  total?: string;
  baseResp?: base.BaseResp;
}

export interface SignUploadFileTokenReq {
  spaceID?: string;
  /** Support ImageX, TOS */
  storage?: datasetv2.StorageProvider;
  fileName?: string;
  /** base */
  base?: base.Base;
}

export interface SignUploadFileTokenResp {
  url?: string;
  token?: datasetv2.FileUploadToken;
  imageXServiceID?: string;
  /** base */
  baseResp?: base.BaseResp;
}

export interface UpdateDatasetItemReq {
  spaceID?: string;
  datasetID: string;
  itemID: string;
  /** Single round data content, when the dataset is single round, write the value here */
  data?: Array<datasetv2.FieldData>;
  /** Multi-round conversation data content, when the dataset is multi-round conversations, write the value here */
  repeatedData?: Array<datasetv2.ItemData>;
  base?: base.Base;
}

export interface UpdateDatasetItemResp {
  baseResp?: base.BaseResp;
}

export interface UpdateDatasetReq {
  spaceID?: string;
  datasetID: string;
  name?: string;
  description?: string;
  base?: base.Base;
}

export interface UpdateDatasetResp {
  baseResp?: base.BaseResp;
}

export interface UpdateDatasetSchemaReq {
  spaceID?: string;
  datasetID: string;
  /** When fieldSchema.key is empty: insert a new column
When fieldSchema.key is not empty: update the corresponding column
Use example reference: */
  fields?: Array<datasetv2.FieldSchema>;
  base?: base.Base;
}

export interface UpdateDatasetSchemaResp {
  baseResp?: base.BaseResp;
}

export interface UpdateDatasetVersionReq {
  spaceID: string;
  versionID: string;
  desc?: string;
  base?: base.Base;
}

export interface UpdateDatasetVersionResp {
  baseResp?: base.BaseResp;
}

export interface ValidateDatasetItemsReq {
  spaceID?: string;
  items?: Array<datasetv2.DatasetItem>;
  /** Provided when adding to an existing dataset */
  datasetID?: string;
  /** Provided when creating a new dataset and adding data */
  datasetCategory?: datasetv2.DatasetCategory;
  /** When creating a new dataset and adding data, it must be provided; when adding to an existing dataset, if not empty, overwrite the existing schema for validation */
  datasetFields?: Array<datasetv2.FieldSchema>;
  /** When adding to an existing dataset, the number of existing data bars is not considered when doing capacity verification, only whether the number of items provided exceeds the limit */
  ignoreCurrentItemCount?: boolean;
}

export interface ValidateDatasetItemsResp {
  /** A valid item index, corresponding to the index in ValidateCreateDatasetItemsReq */
  validItemIndices?: Array<number>;
  errors?: Array<datasetv2.ItemErrorGroup>;
  /** base */
  baseResp?: base.BaseResp;
}

export interface VersionedDataset {
  version?: datasetv2.DatasetVersion;
  dataset?: datasetv2.Dataset;
}
/* eslint-enable */
