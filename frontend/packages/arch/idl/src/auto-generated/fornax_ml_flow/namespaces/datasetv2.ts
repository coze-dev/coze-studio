/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as datasetv2similarity from './datasetv2similarity';
import * as tag from './tag';

export type Int64 = string | number;

export enum ContentType {
  /** base type */
  Text = 1,
  Image = 2,
  Audio = 3,
  Video = 4,
  /** Mixed text and graphics */
  MultiPart = 100,
}

export enum DatasetCategory {
  /** dataset */
  General = 1,
  /** Training dataset (not yet available) */
  Training = 2,
  /** Validation set (not yet available) */
  Validation = 3,
  /** Review set (not yet available) */
  Evaluation = 4,
}

export enum DatasetLockReason {
  Undefined = 0,
  /** The crowdsourced annotation task is running */
  CrowdsourcingAnnotateJobRunning = 1,
}

export enum DatasetStatus {
  Available = 1,
  Deleted = 2,
  Expired = 3,
  Importing = 4,
  Exporting = 5,
  Indexing = 6,
}

export enum DatasetVisibility {
  /** All spaces are visible */
  Public = 1,
  /** The current space is visible */
  Space = 2,
  /** user invisible */
  System = 3,
}

export enum FieldDisplayFormat {
  PlainText = 1,
  Markdown = 2,
  JSON = 3,
  YAML = 4,
  Code = 5,
  SingleOption = 6,
}

export enum FieldStatus {
  Available = 1,
  Deleted = 2,
}

export enum FieldTransformationType {
  /** Remove fields not defined in the current jsonSchema (including properties and patternProperties), only valid if the column type is struct */
  RemoveExtraFields = 1,
}

export enum ItemErrorType {
  /** Schema mismatch */
  MismatchSchema = 1,
  /** empty data */
  EmptyData = 2,
  /** Single data size exceeds limit */
  ExceedMaxItemSize = 3,
  /** Dataset capacity exceeded */
  ExceedDatasetCapacity = 4,
  /** File format error */
  MalformedFile = 5,
  /** Contains illegal content */
  IllegalContent = 6,
  /** Required fields are missing */
  MissingRequiredField = 7,
  /** Data nesting level limit exceeded */
  ExceedMaxNestedDepth = 8,
  /** Data conversion failed */
  TransformItemFailed = 9,
  /** system error */
  InternalError = 100,
  /** Failed to clear dataset */
  ClearDatasetFailed = 101,
  /** Failed to read or write file */
  RWFileFailed = 102,
}

export enum SchemaKey {
  String = 1,
  Integer = 2,
  Float = 3,
  Bool = 4,
  Message = 5,
  /** radio */
  SingleChoice = 6,
}

export enum SecurityLevel {
  L1 = 1,
  L2 = 2,
  L3 = 3,
  L4 = 4,
}

export enum SnapshotStatus {
  Unstarted = 1,
  InProgress = 2,
  Completed = 3,
  Failed = 4,
}

export enum StorageProvider {
  TOS = 1,
  VETOS = 2,
  HDFS = 3,
  ImageX = 4,
  /** Backend internal use */
  Abase = 100,
  RDS = 101,
  LocalFS = 102,
}

/** Dataset Entity */
export interface Dataset {
  id: string;
  appID?: number;
  spaceID: string;
  schemaID: string;
  name?: string;
  description?: string;
  status?: DatasetStatus;
  /** business scenario classification */
  category?: DatasetCategory;
  /** Provide upper-level business definition dataset categories */
  bizCategory?: string;
  /** The current dataset structure */
  schema?: DatasetSchema;
  /** Classification */
  securityLevel?: SecurityLevel;
  /** visibility */
  visibility?: DatasetVisibility;
  /** Specification restrictions */
  spec?: DatasetSpec;
  /** Dataset function switch */
  features?: DatasetFeatures;
  /** The latest version number */
  latestVersion?: string;
  /** The next version number */
  nextVersionNum?: Int64;
  /** number of data bars */
  itemCount?: string;
  /** general information */
  createdBy?: string;
  createdAt?: string;
  updatedBy?: string;
  updatedAt?: string;
  expiredAt?: string;
  /** DTO dedicated field
Are there any uncommitted changes? */
  changeUncommitted?: boolean;
  /** Dataset lock information */
  lockInfo?: Array<DatasetLockInfo>;
}

export interface DatasetFeatures {
  /** Change schema */
  editSchema?: boolean;
  /** multiple rounds of data */
  repeatedData?: boolean;
  /** multimodal */
  multiModal?: boolean;
}

/** DatasetItem */
export interface DatasetItem {
  /** Primary key ID, can be created without passing */
  id?: string;
  /** Redundant app IDs can be created without passing them on. */
  appID?: number;
  /** Redundant space ID, can be created without passing */
  spaceID?: string;
  /** The data ID to which it belongs, you can leave it alone when creating. */
  datasetID?: string;
  /** The schema ID corresponding to the insertion, which is automatically filled by the backend according to the datasetID in the req parameter */
  schemaID?: string;
  /** The unique ID of the data within the current dataset, which does not change with version */
  itemID?: string;
  /** Idempotent key for data insertion */
  itemKey?: string;
  /** data content */
  data?: Array<FieldData>;
  /** Multiple rounds of data content, mutual exclusion with data */
  repeatedData?: Array<ItemData>;
  /** general information */
  createdBy?: string;
  createdAt?: string;
  updatedBy?: string;
  updatedAt?: string;
  /** DTO dedicated field
Whether the data (data or repeatedData) is omitted. When querying the item in the list, the data content of the specialty will not be returned, and the content can be obtained through a separate Item interface */
  dataOmitted?: boolean;
}

export interface DatasetLockInfo {
  reason?: DatasetLockReason;
  /** crowdsourced annotation task ID */
  crowdsourcingAnnotateJobID?: string;
}

/** DatasetSchema Dataset Schema, which contains information such as type restrictions for dataset columns */
export interface DatasetSchema {
  /** Primary key ID, can be created without passing */
  id?: string;
  /** The space ID where the schema is located, which can be created without passing */
  appID?: number;
  /** The space ID where the schema is located, which can be created without passing */
  spaceID?: string;
  /** Dataset ID, you can leave it alone when creating. */
  datasetID?: string;
  /** Dataset column constraints */
  fields?: Array<FieldSchema>;
  /** Is editing not allowed? */
  immutable?: boolean;
  /** general information */
  createdBy?: string;
  createdAt?: string;
  updatedBy?: string;
  updatedAt?: string;
  updateVersion?: string;
}

export interface DatasetSpec {
  /** maximum number of items */
  maxItemCount?: string;
  /** maximum number of fields */
  maxFieldCount?: number;
  /** maximum number of words per piece of data */
  maxItemSize?: string;
  /** Single array/struct data nesting upper limit */
  maxItemDataNestedDepth?: number;
}

/** DatasetVersion Dataset version metadata, excluding the data itself */
export interface DatasetVersion {
  id: string;
  appID?: number;
  spaceID: string;
  datasetID: string;
  schemaID: string;
  /** The displayed version number, SemVer2 three-stage */
  version?: string;
  /** The digital version number recorded on the backend, incremented from 1 */
  versionNum?: string;
  /** version description */
  description?: string;
  /** Dataset metadata when the marshaled version is saved, excluding schema */
  datasetBrief?: string;
  /** number of data bars */
  itemCount?: string;
  /** Snapshot status of the current version */
  snapshotStatus?: SnapshotStatus;
  /** general information */
  createdBy?: string;
  createdAt?: string;
  /** The time when the version is disabled */
  disabledAt?: string;
  updatedBy?: string;
  updatedAt?: string;
}

export interface FieldData {
  key?: string;
  /** Field name, when writing Item, you can provide one of the key and name, and the key shall prevail when provided at the same time. */
  name?: string;
  contentType?: ContentType;
  content?: string;
  /** externally stored information */
  attachments?: Array<ObjectStorage>;
  /** Rendering format of data */
  format?: FieldDisplayFormat;
  /** When the graphic is mixed, the graphic content */
  parts?: Array<FieldData>;
  /** This data generates a traceID. */
  traceID?: string;
  /** Whether the generation failed */
  genFail?: boolean;
  /** The display name after the label reflow fails */
  fallbackDisplayName?: string;
}

export interface FieldSchema {
  /** The key is unique in the schema version change of the dataset, and it is automatically generated when new, no need to pass in */
  key?: string;
  /** display name */
  name?: string;
  /** describe */
  description?: string;
  /** Type, such as, text, pictures, etc. */
  contentType?: ContentType;
  /** Default rendering formats such as code, json, etc. */
  defaultFormat?: FieldDisplayFormat;
  /** Corresponding built-in schema */
  schemaKey?: SchemaKey;
  /** [20, 50) Content format restrictions related
Text content formatting restrictions, formatted as JSON schema, protocol reference https://json-schema.org/specification */
  textSchema?: string;
  /** Multimodal specification limitations */
  multiModelSpec?: MultiModalSpec;
  /** Whether the data in the current column is required, if not, an error will be reported. */
  isRequired?: boolean;
  /** Is the user invisible? */
  hidden?: boolean;
  /** The status of the current column can be left unposted when creating/updating */
  status?: FieldStatus;
  /** Whether to enable similarity index */
  similaritySearchConfig?: SimilaritySearchConfig;
  /** mass distribution */
  qualityScoreConfig?: QualityScoreConfig;
  /** Label field configuration */
  tagFieldConfig?: TagFieldConfig;
  /** Default preset conversion configuration, currently executed after data validation */
  defaultTransformations?: Array<FieldTransformationConfig>;
}

export interface FieldTransformationConfig {
  /** Preset conversion type */
  transType?: FieldTransformationType;
  /** The current transformation configuration takes effect on both the data on this column and its nested substructures */
  global?: boolean;
}

export interface FileUploadToken {
  accessKeyID?: string;
  secretAccessKey?: string;
  sessionToken?: string;
  expiredTime?: string;
  currentTime?: string;
}

export interface ItemData {
  id?: string;
  data?: Array<FieldData>;
}

export interface ItemErrorDetail {
  message?: string;
  /** The index of a single error data in the input data. Start from 0, the same below */
  index?: number;
  /** [StartIndex, endIndex] Indicates the range of interval errors, such as when ExceedDatasetCapacity errors */
  startIndex?: number;
  endIndex?: number;
  /** ItemErrorType=MismatchSchema, key is FieldSchema.name, value is error message */
  messagesByField?: Record<string, string>;
}

export interface ItemErrorGroup {
  type?: ItemErrorType;
  summary?: string;
  /** number of errors */
  errorCount?: number;
  /** When writing in batches, provide up to 5 error details per type of error; import tasks provide up to 10 error details */
  details?: Array<ItemErrorDetail>;
}

export interface MultiModalSpec {
  /** maximum number of files */
  maxFileCount?: Int64;
  /** maximum file size */
  maxFileSize?: Int64;
  /** file format */
  supportedFormats?: Array<string>;
}

export interface ObjectStorage {
  provider?: StorageProvider;
  name?: string;
  uri?: string;
  url?: string;
  thumbURL?: string;
}

export interface OrderBy {
  /** sort field */
  field?: string;
  /** Ascending, Default Reverse */
  isAsc?: boolean;
}

/** mass distribution */
export interface QualityScoreConfig {
  /** Is the column a mass score? */
  enabled?: boolean;
}

/** Configuration of similarity algorithm */
export interface SimilaritySearchConfig {
  /** Whether to enable similarity index */
  enabled?: boolean;
  /** Which similarity algorithm is configured? */
  similarityAlgorithm?: datasetv2similarity.SimilarityAlgorithm;
  /** The similarity model used */
  embeddingType?: datasetv2similarity.EmbeddingModel;
}

export interface TagFieldConfig {
  /** Tag Configuration */
  tagInfo?: tag.TagInfo;
}
/* eslint-enable */
