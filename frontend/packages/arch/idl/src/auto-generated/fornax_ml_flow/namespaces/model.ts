/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum ByteTreeNodeResourceProvider {
  TCE = 1,
  TCC = 2,
  Bernard = 3,
}

export enum CommercialModelStatus {
  Online = 1,
  Offline = 2,
  Deleted = 3,
  FineTuneInQueue = 4,
  FineTuneRunning = 5,
  FineTuneFailed = 6,
  FineTuneTerminated = 7,
}

export enum DataImportMode {
  Undefined = 0,
  /** add */
  Append = 1,
  /** cover */
  Overwrite = 2,
}

export enum DataSourceType {
  Undefined = 0,
  TOS = 1,
}

export enum Family {
  Undefined = 0,
  GPT = 1,
  Seed = 2,
  Gemini = 3,
  Claude = 4,
  Ernie = 5,
  Baichuan = 6,
  Qwen = 7,
  GLM = 8,
  SkyLark = 9,
  Moonshot = 10,
  Minimax = 11,
  Doubao = 12,
  Baichuan2 = 13,
  DeepSeekV2 = 14,
  DeepSeekCoderV2 = 15,
  DeepseekCoder = 16,
  InternLM2_5 = 17,
  Qwen2 = 18,
  Qwen2_5 = 19,
  Qwen2_5_Coder = 20,
  MiniCPM = 21,
  MiniCPM3 = 22,
  ChatGLM3 = 23,
  Mistral = 24,
  Gemma = 25,
  Gemma2 = 26,
  InternVL2 = 27,
  InternVL2_5 = 28,
  DeepSeekV3 = 29,
}

export enum IDC {
  HL = 1,
  LF = 2,
  LQ = 3,
  YG = 4,
  GL = 5,
  MALIVA = 101,
  SG1 = 201,
  MY = 202,
  MY2 = 203,
  MYCISB = 204,
}

export enum MerlinFramework {
  LLMServerPublic = 1,
  Laplace = 2,
}

export enum MerlinLLMInterface {
  MatxInference = 1,
}

export enum MerlinQuotaPoolType {
  /** stable resources */
  Default = 0,
  /** tidal resources */
  Hybrid = 1,
  /** often mixed resources */
  HybridShare = 2,
  /** Third-party resource ali */
  ALI = 3,
  /** Third-party resources hw */
  HW = 4,
}

export enum ModelFilterKey {
  ModelType = 1,
  ModelUserRight = 2,
  ModelFeature = 3,
  ModelFunction = 4,
  ModelScenario = 5,
  Custom = 20,
}

export enum ModelFilterScene {
  Default = 0,
  EvalFunctionCall = 1,
}

export enum ModelParamType {
  Unknown = 0,
  Float = 1,
  Int = 2,
  Boolean = 3,
  String = 4,
}

export enum ModelStatus {
  Undefined = 0,
  /** Health is available */
  Available = 1,
  /** Deploying */
  Deploying = 2,
  /** Unavailable (offline) */
  Unavailable = 3,
  /** offline. */
  Offlining = 4,
}

export enum Provider {
  /** GPT OpenAPI Platform */
  GPTOpenAPI = 1,
  /** Volcano Ark */
  Maas = 2,
  /** Temporarily specific seed from bot_engine access */
  BotEngine = 3,
  /** Merlin Platform */
  Merlin = 4,
  /** Merlin-seed platform */
  MerlinSeed = 5,
}

export enum ProviderAccountType {
  AKSK = 1,
  APIKey = 2,
}

export enum Region {
  CN = 1,
  SG = 2,
  US = 3,
}

export enum RuntimeCustomParamType {
  Unknown = 0,
  StringList = 1,
  IntList = 2,
  FloatList = 3,
  String = 4,
  Int = 5,
  Float = 6,
  Bool = 7,
}

export enum RuntimeHookType {
  Unknown = 0,
  MsgPreHook = 1,
}

export enum SftTaskBaseModelType {
  Foundation = 0,
  Custom = 1,
}

export enum SftTaskErrCode {
  Default = 0,
  /** The first 2 digits represent a misclassification, and the last 4 digits represent a specific error
10 Common Errors */
  InternalErr = 100000,
  /** Error uploading training dataset to platform */
  TrainingSetUploadedErr = 100001,
  /** Error creating fine tuning task on the platform side */
  CreateProviderSftTaskErr = 100002,
  /** 20 Merlin task instance overall error */
  MerlinTaskInternalError = 200000,
  /** Gpu cpu mem package matching error */
  MerlinGpuCpuMemRatioBad = 200001,
  /** 21 Merlin training scripts actively reported bugs */
  MerlinReportedInternalErr = 210000,
  MerlinOOM = 210001,
  /** No model training product found */
  MerlinNoModelGenerated = 210002,
  /** 30 Volcano Ark mission failed
ARK universal error */
  MaaSInternalErr = 300000,
  /** Validation set scaling exception */
  MaaSValidationSetSplitErr = 300001,
  /** The training data format does not meet expectations */
  MaaSTrainingSetNoValid = 300002,
  /** The Huoshan Account of the business party has not opened the model service. */
  MaaSAccountModelServiceIsNotActivated = 300003,
  /** Required request parameters are missing. Please confirm the request parameters and try again. */
  MaaSRequiredParamMissing = 300004,
  /** The requested parameter value is invalid. Please check the correctness of the parameter value and try again. */
  MaaSRequestParamInvalid = 300005,
  /** Object's Label Has Duplicate Keys */
  MaaSDuplicateTags = 300006,
  /** Cannot upload validation set and set training dataset sampling as validation set percentage at the same time, this operation is not supported */
  MaaSNotSupportedToConfigureValidationSetAndPercentage = 300007,
  /** You do not have permission to access the configuration of the underlying model, and this operation is not supported */
  MaaSNotPermittedToAccessModel = 300008,
  /** The model does not support this training method and does not support this operation */
  MaaSModelNotSupportTheTrainingMethod = 300009,
  /** The version of the base model does not support this training method and does not support this operation */
  MaaSFoundationModelNotSupportTheTrainingMethod = 300010,
  /** Your bill is overdue and this operation is not supported. Please go to the volcano expense center to recharge. */
  MaaSAccountBalanceOverdue = 300011,
  /** Unknown error, please try again later. If multiple attempts still fail, please submit a work order. */
  MaaSUnknownErr = 300012,
}

export enum SftTaskHyperParamType {
  Int = 1,
  Float = 2,
  String = 3,
  Bool = 4,
  Percentage = 5,
}

export enum SftTaskOutputExportType {
  /** Export to new model */
  NewModel = 1,
  /** Export to an existing model */
  ExistModel = 2,
}

export enum SftTaskOutputStatus {
  /** not exported */
  Available = 1,
  /** Exported */
  Exported = 2,
  /** Expired */
  Expired = 3,
  /** Exporting */
  Exporting = 4,
  /** Export failed */
  ExportFailed = 5,
}

export enum SftTaskRunEventType {
  Undefined = 0,
  ErrorOccured = 1,
  UploadCkpt = 2,
  ReportMetricsURL = 3,
  ReportProgress = 5,
  ReportTrainingStart = 6,
  ReportTrainingFinished = 7,
}

export enum SftTaskStatusPhase {
  Preprocessing = 0,
  Queued = 1,
  Deploying = 2,
  Running = 3,
  Completing = 4,
  Completed = 5,
  Terminating = 6,
  Terminated = 7,
  Failed = 8,
}

export enum SftTaskTrainingMethod {
  LoRA = 1,
  Full = 2,
}

export enum SftTaskTrainingType {
  SftFineTuning = 1,
}

export enum SftTaskValidationSetType {
  SplitFromTrainingSet = 1,
}

export enum TaskStatus {
  Undefined = 0,
  /** Initializing now. */
  Initializing = 1,
  /** Running now. */
  Running = 2,
  /** successfully completed */
  Done = 3,
  /** fail */
  Failed = 4,
  /** manual termination */
  Terminated = 5,
  /** Completed successfully, but with errors */
  DoneWithError = 6,
}

export enum TrainingDataFileType {
  Undefined = 0,
  JSONL = 1,
}

export enum TrainingDatasetType {
  Undefined = 0,
  SFTChat = 1,
  SFTFunctionCall = 2,
  SFTMultiModalUnderstanding = 3,
}

export enum TrainingFileOpType {
  Undefined = 0,
  Get = 1,
  Put = 2,
}

export enum UsageScenario {
  /** Default scene */
  Default = 1,
  /** evaluation scenario */
  Evaluation = 2,
  /** Prompt as a Service */
  PromptAsAService = 3,
  /** AI marking */
  AIAnnotate = 4,
}

export enum ValidateStatus {
  Pass = 1,
  Failed = 2,
  Skip = 3,
}

export enum VisibleMode {
  /** Default (visible only in the model's space) */
  Default = 1,
  /** Designated space visible */
  Specified = 2,
  /** All spaces are visible */
  All = 3,
}

export interface Ability {
  /** maximum context length */
  maxContextTokens?: Int64;
  /** Maximum input length */
  maxInputTokens?: Int64;
  /** Maximum output length */
  maxOutputTokens?: Int64;
  /** Whether to support function calls */
  functionCallEnabled?: boolean;
  /** Whether to support JSON mode */
  jsonModeEnabled?: boolean;
  /** Does it support multimodality? */
  multiModalEnabled?: boolean;
  /** multimodal capability configuration */
  multiModalAbility?: MultiModalAbility;
  /** Message preprocessing hook */
  messagePreHandleHook?: RuntimeHook;
  /** The available parameter configuration of the model has a higher priority than the original maxContextTokens/maxInputTokens/maxOutputTokens. */
  modelParams?: Array<ModelParam>;
}

export interface CommercialModelSeries {
  iconUrl?: string;
  modelVendor?: string;
  seriesName?: string;
}

export interface CommercialModelStatusDetail {
  isNewModel?: boolean;
  isAdvancedModel?: boolean;
}

export interface GPTOpenAPIInfo {
  apiBaseURL?: string;
  apiVersion?: string;
}

export interface IDCDeployDetail {
  deployID?: string;
  /** Resource corresponds to ByteTree node id */
  byteNodeID?: string;
  region?: string;
  deviceType?: string;
  deviceDisplayName?: string;
  instance?: string;
}

export interface InstanceResourceOption {
  cpus?: string;
  /** Unit GB */
  mem?: string;
  gpus?: string;
}

export interface MaasInfo {
  host?: string;
  region?: string;
  /** v3 sdk */
  baseURL?: string;
  /** The ID of the fine-tuning model task */
  customizationJobsID?: string;
}

export interface MerlinInfo {
  psm?: string;
  cluster?: string;
  idcs?: Array<IDC>;
  framework?: MerlinFramework;
  instanceResourceOption?: InstanceResourceOption;
  /** resource allocation */
  deployDetailM?: Record<IDC, IDCDeployDetail>;
  /** Service Node ID */
  byteTreeNodeID?: Int64;
  /** ByteTree path */
  byteTreeNodePath?: string;
  /** Service details link */
  serviceDetailURL?: string;
  /** LLM interface information */
  llmInterface?: MerlinLLMInterface;
  /** Whether to turn on vllm */
  useVLLMServe?: boolean;
  /** The API path of calling vllm is only used when vllm is enabled */
  vllmAPIPath?: string;
}

export interface Model {
  /** Model id, which can be empty in commercial scenarios. If it is empty, use identification+provider to call the model directly */
  id?: Int64;
  /** Model identification (name, endpoint, alignment with each provider) */
  identification?: string;
  /** display name */
  displayName?: string;
  /** model description */
  description?: string;
  /** Model family */
  family?: Family;
  /** provider */
  provider?: Provider;
  /** provider information */
  providerInfo?: ProviderInfo;
  /** Is it a public model? */
  isPublic?: boolean;
  /** visibility */
  visibility?: Visibility;
  /** Own space id */
  spaceID?: Int64;
  /** model capability */
  ability?: Ability;
  /** Default runtime parameters */
  defaultRuntimeParam?: RuntimeParam;
  /** founder */
  createdBy?: string;
  /** Update Person */
  updatedBy?: string;
  /** creation time */
  createdAt?: Int64;
  /** update time */
  updatedAt?: Int64;
  /** Edit version (used to solve the problem of multiple people updating at the same time) */
  editVersion?: Int64;
  modelStatus?: ModelStatus;
  /** Model ID on the model provider side */
  externalModelID?: string;
  /** Models generated by new inference points from the output of the fine-tuning model task */
  sftTaskID?: Int64;
  /** model version */
  modelVersion?: string;
  /** model avatar */
  modelIcon?: string;
  /** Model Company */
  modelVendor?: string;
  /** The real name of the model (displayed on the right side of the vendor, it may be the model name of the bean bag endpoint or other vendors) */
  actualName?: string;
  /** model label */
  modelTags?: Array<string>;
  /** commercialization model status */
  commercialModelStatus?: CommercialModelStatus;
  /** Commercialization model status details */
  commercialModelStatusDetail?: CommercialModelStatusDetail;
  /** Commercial model series */
  commercialModelSeries?: CommercialModelSeries;
}

export interface ModelParam {
  name?: string;
  label?: string;
  desc?: string;
  /** Type: bool/int/float, etc */
  modelParamType?: ModelParamType;
  min?: string;
  max?: string;
  defaultVal?: string;
  /** enumeration */
  modelParamOptions?: Array<ModelParamOption>;
}

export interface ModelParamOption {
  /** impression value */
  label?: string;
  /** actual value */
  value?: string;
}

export interface MultiModalAbility {
  /** [1,99] Image configuration
Does it support pictures? */
  imageEnabled?: boolean;
  /** Does it support binary images? */
  binaryImageEnabled?: boolean;
  /** Single image size limit, range [0, 20] MB */
  maxImageSizeInMB?: number;
  /** Maximum number of images, range [-1, 100], -1 means unlimited */
  maxImageCount?: number;
}

export interface ProviderInfo {
  gptOpenAPI?: GPTOpenAPIInfo;
  maas?: MaasInfo;
  merlin?: MerlinInfo;
}

export interface RuntimeCustomParam {
  name?: string;
  type?: RuntimeCustomParamType;
  value?: string;
}

export interface RuntimeHook {
  type?: RuntimeHookType;
  url?: string;
}

export interface RuntimeParam {
  /** Maximum output length */
  maxTokens?: Int64;
  temperature?: number;
  topP?: number;
  topK?: Int64;
  jsonMode?: boolean;
  /** Stop word, the value must be a json serialized string array */
  stopWords?: string;
  /** Runtime custom parameters */
  runtimeCustomParams?: Array<RuntimeCustomParam>;
}

export interface Visibility {
  mode?: VisibleMode;
  /** Mode is valid for Specified and is configured as a space other than the space to which the model belongs */
  spaceIDs?: Array<Int64>;
}
/* eslint-enable */
