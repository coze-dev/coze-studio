/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum AuditStatus {
  /** Under review. */
  Processing = 0,
  /** approved */
  Enable = 1,
  /** The review failed. */
  Disable = 2,
  /** historical stock data */
  Default = 100,
}

export enum CaptionType {
  /** intelligent annotation */
  Auto = 0,
  /** manual annotation */
  Manual = 1,
}

export enum ChunkType {
  DefaultChunk = 0,
  CustomChunk = 1,
  LevelChunk = 2,
}

export enum ContentSchema {
  DefaultSchema = 0,
  LinkReaderSchema = 1,
}

export enum DataSetStatus {
  DataSetprocessing = 0,
  DataSetReady = 1,
  DataSetFailed = 9,
}

export enum DocumentSource {
  /** local file upload */
  Document = 0,
  /** url */
  Web = 1,
  /** custom type */
  Custom = 2,
  /** three parties */
  ThirdParty = 3,
  /** front-end crawl */
  FrontCrawl = 4,
  /** openapi */
  OpenApi = 5,
  Notion = 101,
  GoogleDrive = 102,
  FeishuWeb = 103,
  LarkWeb = 104,
  WeChat = 109,
}

export enum DocumentStatus {
  /** Uploading */
  Processing = 0,
  /** take effect */
  Enable = 1,
  /** failure */
  Disable = 2,
  /** delete */
  Deleted = 3,
  /** In rescaling, the front end and upstream do not perceive this state */
  Resegment = 4,
  /** Refreshing (will be deleted after successful refresh) */
  Refreshing = 5,
  /** fail */
  Failed = 9,
  /** moderation failed */
  AuditFailed = 1000,
}

/** Compatible with retention, use DocumentStatus instead */
export enum DocumentType {
  /** Uploading */
  Processing = 0,
  /** take effect */
  Enable = 1,
  /** failure */
  Disable = 2,
  /** delete */
  Deleted = 3,
  /** fail */
  Failed = 9,
}

/** type */
export enum FormatType {
  /** Text */
  Text = 0,
  /** form */
  Table = 1,
  /** picture */
  Image = 2,
  /** database */
  Database = 3,
  /** Volcanic structure, unique to the volcanic knowledge base */
  VolcanoStructured = 4,
  /** Volcanoes are unstructured and unique to the Volcano Knowledge Base */
  VolcanoUnstructured = 5,
  /** Volcano Database */
  VolcanoDatabase = 6,
}

export enum FrequencyType {
  /** Do not update */
  None = 0,
  /** Update every day */
  EveryDay = 1,
  /** Update every three days */
  EveryThreeDay = 2,
  /** Updated every seven days */
  EverySevenDay = 3,
}

export enum Operation {
  /** "=" */
  EQUAL = 1,
  /** "< >" or "! =" */
  NOT_EQUAL = 2,
  /** ">" */
  GREATER_THAN = 3,
  /** "<" */
  LESS_THAN = 4,
  /** ">=" */
  GREATER_EQUAL = 5,
  /** "<=" */
  LESS_EQUAL = 6,
  /** "IN" */
  IN = 7,
  /** "NOT IN" */
  NOT_IN = 8,
}

/** sort field */
export enum OrderField {
  CreateTime = 1,
  UpdateTime = 2,
}

/** collation */
export enum OrderType {
  Desc = 1,
  Asc = 2,
}

export enum ParamSource {
  /** default user input */
  Input = 0,
  /** reference variable */
  Variable = 1,
}

export enum ParsingType {
  /** fast parse */
  FastParsing = 0,
  /** accurate analysis */
  AccurateParsing = 1,
}

export enum ReviewStatus {
  /** Processing */
  Processing = 0,
  /** Completed. */
  Enable = 1,
  /** fail */
  Failed = 2,
  /** fail */
  ForceStop = 3,
}

export enum StorageLocation {
  Default = 0,
  OpenSearch = 1,
  Douyin = 2,
}

export enum TabType {
  /** list<string> */
  ListString = 1,
  /** string */
  String = 2,
  /** int64 */
  Integer = 3,
  /** float32 */
  Float = 4,
  /** bool */
  Boolean = 5,
}

/** update type */
export enum UpdateType {
  NoUpdate = 0,
  Cover = 1,
  Append = 2,
}

export enum VolcanoDatasetServiceStatus {
  DatasetServiceValid = 0,
  DatasetServiceInvalid = 1,
}

export enum VolcanoDatasetStatus {
  DatasetValid = 0,
  DatasetInvalid = 1,
}

export enum VolcanoDatasetType {
  /** Standard Edition */
  Standard = 1,
  /** flagship version */
  Ultimate = 2,
}

export enum WebStatus {
  /** Processing */
  Handling = 0,
  /** Completed. */
  Finish = 1,
  /** fail */
  Failed = 2,
}

export interface ChunkStrategy {
  separator?: string;
  max_tokens?: Int64;
  remove_extra_spaces?: boolean;
  remove_urls_emails?: boolean;
  /** If 0, the configuration of the above fields is not used */
  chunk_type?: ChunkType;
  /** 1 link reader (cici long text) */
  content_schema?: ContentSchema;
  /** Image type, image description text annotation method */
  caption_type?: CaptionType;
  /** segmented overlap */
  overlap?: Int64;
  /** Maximum number of levels (effective when segmented by level) */
  max_level?: Int64;
  /** Slice preserves level headers (effective when segmented by level) */
  save_title?: boolean;
}

export interface FilterStrategy {
  /** filter pages */
  filter_page?: Array<number>;
  /** Filter box position */
  filter_box_position?: Array<number>;
}

export interface IndexStrategy {
  /** Whether to enable vector indexing (default is true) */
  vector_indexing?: boolean;
  /** Whether to enable keyword indexing (default is true) */
  keyword_indexing?: boolean;
  /** Whether to enable hierarchical indexing */
  hierarchical_indexing?: boolean;
  /** vector model */
  model?: string;
}

export interface OpenSearchConfig {
  region?: string;
  instance_id?: string;
  public_endpoint?: string;
  username?: string;
  password?: string;
  instance_name?: string;
}

export interface ParsingStrategy {
  /** parse type */
  parsing_type?: ParsingType;
  /** Whether to enable image element extraction (effective when accurately parsing) */
  image_extraction?: boolean;
  /** Whether to enable table element extraction (effective when accurately parsing) */
  table_extraction?: boolean;
  /** Whether to turn on picture OCR (effective when accurate analysis) */
  image_ocr?: boolean;
}

export interface SinkStrategy {
  /** Check whether the index was successful */
  check_index?: boolean;
}

export interface StorageStrategy {
  storage_location: StorageLocation;
  open_search_config?: OpenSearchConfig;
}

export interface TabValue {
  type?: TabType;
  /** local default */
  local_input?: string;
  /** Sources of imported parameters */
  param_source?: ParamSource;
  /** Reference variable key */
  variable_ref?: string;
}

export interface VolcanoDataset {
  /** Volcano side knowledge base id string */
  id?: string;
  /** name */
  name?: string;
  /** Type, structured or unstructured knowledge base */
  format_type?: FormatType;
  /** Volcano Knowledge Base Details Link */
  link?: string;
  /** Volcano Knowledge Base status, whether it has expired */
  status?: VolcanoDatasetStatus;
  desc?: string;
  /** Volcano Knowledge Base Version */
  version?: VolcanoDatasetType;
  /** Label information (label signature and label information) */
  tab_info?: Record<string, VolcanoDatasetTabInfo>;
}

export interface VolcanoDatasetProject {
  /** Currently only the project name is required. */
  name?: string;
  /** Volcano Knowledge Base Space Jump Link */
  link?: string;
}

export interface VolcanoDatasetService {
  /** Volcano side knowledge service id string */
  id?: string;
  /** name */
  name?: string;
  /** Volcano Knowledge Service Link */
  link?: string;
  /** Volcano Knowledge Base status, whether it has expired */
  status?: VolcanoDatasetServiceStatus;
  desc?: string;
}

export interface VolcanoDatasetTabInfo {
  name?: string;
  type?: TabType;
  /** list of enumerated values */
  enumerated_val_list?: Array<string>;
}
/* eslint-enable */
