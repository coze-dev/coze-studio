/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';
import * as base from './base';

export type Int64 = string | number;

export enum AttributeValueType {
  Unknown = 0,
  String = 1,
  Boolean = 2,
  StringList = 11,
  BooleanList = 12,
}

/** Coze Pro Copy knowledge */
export enum CopyTaskStatus {
  /** create */
  Create = 1,
  /** in progress */
  InProgress = 2,
  /** success */
  Success = 3,
  /** fail */
  Fail = 4,
}

export enum DatasetScopeType {
  ScopeAll = 1,
  ScopeSelf = 2,
}

export enum DatasetSource {
  SourceSelf = 1,
  SourceExplore = 2,
}

export enum DatasetStatus {
  DatasetProcessing = 0,
  DatasetReady = 1,
  /** soft delete */
  DatasetDeleted = 2,
  /** Do not enable */
  DatasetForbid = 3,
  DatasetFailed = 9,
}

export enum DatasetType {
  Coze = 0,
  Volcano = 1,
}

export enum EntityType {
  Project = 1,
  Bot = 2,
}

export enum EventType {
  Create = 1,
  Update = 2,
  Delete = 3,
}

export enum InstanceStatus {
  /** Created, it will not return to this state in theory */
  InstanceStatusCreating = 0,
  /** Running */
  Running = 1,
  /** The creation failed, and the state will not be returned in theory */
  InstanceStatusFailed = 2,
  /** unsubscribe recycling */
  UnsubsRecycled = 3,
  /** expiration shutdown */
  ExpiredClosed = 4,
  /** Recycling at maturity */
  ExpiredRecycled = 5,
  /** shutdown due */
  InstanceStatusOverdueShutdown = 6,
  /** Arrears recovery */
  InstanceStatusOverdueRecycled = 7,
  /** unsubscribe shutdown */
  InstanceStatusTerminatedShutdown = 8,
}

export enum ResourceType {
  Account = 1,
  Workspace = 2,
  App = 3,
  Bot = 4,
  Plugin = 5,
  Workflow = 6,
  Knowledge = 7,
  PersonalAccessToken = 8,
  Connector = 9,
  Card = 10,
  CardTemplate = 11,
  Conversation = 12,
  File = 13,
  ServicePrincipal = 14,
  Enterprise = 15,
  MigrateTask = 16,
  Prompt = 17,
  UI = 18,
  Project = 19,
}

export enum UserLevel {
  /** The free version. */
  Free = 0,
  /** overseas
PremiumLite */
  PremiumLite = 10,
  /** Premium */
  Premium = 15,
  PremiumPlus = 20,
  /** domestic
V1 Volcano Pro */
  V1ProInstance = 100,
  /** Personal flagship version */
  ProPersonal = 110,
  /** Team Edition */
  Team = 120,
  /** Enterprise Edition */
  Enterprise = 130,
}

export interface AttributeValue {
  Type: AttributeValueType;
  Value: string;
}

export interface CopyDatasetList {
  origin_dataset_id: Int64;
  target_dataset_id: Int64;
}

export interface CreateDatasetRequest {
  /** Knowledge base name, no more than 100 characters in length */
  name?: string;
  description?: string;
  space_id?: string;
  icon_uri?: string;
  format_type?: common.FormatType;
  /** Open to third-party business identity, coze pass 0 or no pass */
  biz_id?: string;
  /** Add project ID */
  project_id?: string;
  /** Storage location, 0: byterag, 1: opensearch, 2: douyin */
  storage_location?: common.StorageLocation;
  Base?: base.Base;
}

export interface CreateDatasetResponse {
  dataset_id?: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface Dataset {
  dataset_id?: string;
  /** Dataset name */
  name?: string;
  /** file list */
  file_list?: Array<string>;
  /** All file sizes */
  all_file_size?: Int64;
  /** Bot count */
  bot_used_count?: number;
  status?: DatasetStatus;
  /** List of file names in process, compatible with old logic */
  processing_file_list?: Array<string>;
  /** Update time, second timestamp */
  update_time?: number;
  icon_url?: string;
  description?: string;
  icon_uri?: string;
  /** Can it be edited? */
  can_edit?: boolean;
  /** Creation time, second timestamp */
  create_time?: number;
  /** creator ID */
  creator_id?: string;
  /** Space ID */
  space_id?: string;
  creator_name?: string;
  avatar_url?: string;
  /** Processing failed files */
  failed_file_list?: Array<string>;
  format_type?: common.FormatType;
  /** number of segments */
  slice_count?: number;
  /** hit count */
  hit_count?: number;
  /** number of documents */
  doc_count?: number;
  /** slicing rule */
  chunk_strategy?: common.ChunkStrategy;
  /** List of file IDs in process */
  processing_file_id_list?: Array<string>;
  /** Add project ID */
  project_id?: string;
  /** Storage location, 0: byterag, 1: opensearch, 2: douyin, currently only the dataset detail interface will return */
  storage_location?: common.StorageLocation;
  /** Douyin Knowledge Base ID */
  dy_knowledge_id?: string;
  /** Storage Configuration ID */
  storage_config_id?: string;
  dy_bot_id?: string;
  /** 0 = coze knowledge base 1 = volcano knowledge base */
  dataset_type?: DatasetType;
  /** storage_config details */
  storage_config?: StorageConfig;
}

export interface DatasetDetailRequest {
  dataset_ids?: Array<string>;
  space_id?: string;
  /** Add project ID */
  project_id?: string;
  Base?: base.Base;
}

export interface DatasetDetailResponse {
  dataset_details?: Record<Int64, Dataset>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface DatasetFilter {
  /** And if it's all set
Keyword search, fuzzy match by name */
  name?: string;
  /** deprecated */
  dataset_ids?: Array<string>;
  /** source */
  source_type?: DatasetSource;
  /** search type */
  scope_type?: DatasetScopeType;
  /** type */
  format_type?: common.FormatType;
  /** Filter by coze/volcano */
  dataset_type_list?: Array<DatasetType>;
}

export interface DeleteDatasetRequest {
  dataset_id?: string;
  Base?: base.Base;
}

export interface DeleteDatasetResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetDatasetRefBotsRequest {
  dataset_id?: string;
  Base?: base.Base;
}

export interface GetDatasetRefBotsResponse {
  dataset_id?: string;
  ref_bots?: Array<RefBots>;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetIconRequest {
  format_type?: common.FormatType;
}

export interface GetIconResponse {
  icon?: Icon;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface GetTreeChunkRecRequest {
  dataset_id?: string;
  tos_uris?: Array<string>;
  Base?: base.Base;
}

export interface GetTreeChunkRecResponse {
  tree_chunk_rec_infos?: Array<TreeChunkRecInfo>;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface Icon {
  url?: string;
  uri?: string;
}

export interface KnowledgeBenefitCheckRequest {
  UserID?: string;
  SpaceID?: string;
  CozeAccountType?: string;
  Base?: base.Base;
}

export interface KnowledgeBenefitCheckResponse {
  /** user's subscription level */
  UserLevel: UserLevel;
  /** user's subscription status */
  InstanceStatus: InstanceStatus;
  /** Usage limit for current users */
  UpperBound: number;
  /** Current user usage */
  Used: number;
  BaseResp: base.BaseResp;
}

export interface ListDatasetRequest {
  filter?: DatasetFilter;
  page?: number;
  size?: number;
  space_id?: string;
  /** sort field */
  order_field?: common.OrderField;
  /** collation */
  order_type?: common.OrderType;
  /** If the specified value is passed, the verification is released */
  space_auth?: string;
  /** Business identity open to third parties */
  biz_id?: string;
  /** Whether the number of reference bots needs to be pulled will increase the response delay */
  need_ref_bots?: boolean;
  /** Add project ID */
  project_id?: string;
  /** Storage location, 0: byterag, 1: opensearch, 2: douyin */
  storage_location?: common.StorageLocation;
  Base?: base.Base;
}

export interface ListDatasetResponse {
  dataset_list?: Array<Dataset>;
  total?: number;
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface RefBots {
  name?: string;
}

export interface ResourceIdentifier {
  /** resource type */
  Type: ResourceType;
  /** Resource Id */
  Id: string;
}

export interface ScriptData {
  DatasetList?: Array<Int64>;
}

export interface SpaceItem {
  UserId?: Int64;
  SpaceId?: Int64;
}

export interface StorageConfig {
  volcano_dataset_config?: common.VolcanoDataset;
}

export interface TreeChunkRecInfo {
  is_rec_tree_chunk?: boolean;
  tos_uri?: string;
}

export interface UpdateDatasetRequest {
  dataset_id?: string;
  name?: string;
  icon_uri?: string;
  description?: string;
  status?: DatasetStatus;
  Base?: base.Base;
}

export interface UpdateDatasetResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
