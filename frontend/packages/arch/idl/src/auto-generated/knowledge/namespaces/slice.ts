/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as common from './common';

export type Int64 = string | number;

export enum PhotoSliceType {
  /** Description Text */
  Caption = 1,
  /** label information */
  Tags = 2,
}

export enum SliceStatus {
  /** unvectorized */
  PendingVectoring = 0,
  /** vectorized */
  FinishVectoring = 1,
  /** disable */
  Deactive = 9,
  /** The review failed. */
  AuditFailed = 1000,
}

export enum SourceType {
  /** Using TOS storage, data is retrieved by the Flink operator, sliced, and vectorized */
  TOS = 1,
  /** Direct transmission of raw text data, vectorizing original data source */
  Raw = 2,
}

export enum VectorRuleType {
  /** Select parts for vectorization */
  SelectedFields = 1,
}

export interface CreateSliceRequest {
  /** 1: optional i64  operator_id // deprecated */
  document_id: string;
  /** 3: optional Source source//deprecated, data sourcea source
4: optional VectorRule vector_rule//deprecated, vectorRule, not enabled rule, not enabled */
  raw_text?: string;
  sequence?: string;
  extra?: string;
  tree_node_id?: Int64;
  front_tree_node_id?: Int64;
  parent_tree_node_id?: Int64;
  /** It is used to distinguish whether it is a volcano knowledge base. If it is not transmitted, it defaults to coze knowledge base. */
  dataset_id?: string;
  /** Since the volcanic side document is a non-numeric string, add this field to pass in document_id */
  document_id_new?: string;
  Base?: base.Base;
}

export interface CreateSliceResponse {
  slice_id?: string;
  /** Since the volcanic side slice id is a non-numeric string, add this field to return the volcanic side slice_id */
  slice_id_new?: string;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteSliceRequest {
  slice_ids?: Array<string>;
  Base?: base.Base;
}

export interface DeleteSliceResponse {
  code: Int64;
  msg: string;
}

export interface HitInfo {
  /** 1: i64 operator_id */
  document_id: Int64;
  slice_id: Int64;
  /** User input on hit */
  keyword: string;
  /** fraction */
  score: number;
}

export interface ListSliceRequest {
  /** 1:  optional i64    operator_id                     // deprecated */
  document_id?: string;
  /** serial number */
  sequence?: string;
  /** query keyword */
  keyword?: string;
  /** If only dataset_id, return sharding under that knowledge base */
  dataset_id?: string;
  /** Start from 1 */
  page_no?: string;
  page_size?: string;
  sort_field?: string;
  is_asc?: boolean;
  Base?: base.Base;
}

export interface ListSliceResponse {
  slices?: Array<SliceInfo>;
  total?: string;
  hasmore?: boolean;
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}

export interface SaveSliceOfflineElement {
  content?: string;
  extra?: string;
}

export interface SliceInfo {
  slice_id?: string;
  content?: string;
  status?: SliceStatus;
  /** hit count */
  hit_count?: string;
  /** character count */
  char_count?: string;
  /** number of tokens */
  token_count?: string;
  /** serial number */
  sequence?: string;
  document_id?: string;
  /** Meta information related to sharding, extra- > chunk_info field in the transparent slice table (json) */
  chunk_info?: string;
}

export interface TaskProgress {
  document_id?: Int64;
  progress?: number;
  status?: common.DocumentType;
  /** A detailed description of the status; if the slice fails, a failure message is returned */
  status_descript?: string;
  document_name?: string;
}

export interface UpdateSliceRequest {
  /** 1: optional i64  operator_id // deprecated */
  slice_id: string;
  /** 3: optional Source source//deprecated, data sourcea source
4: optional VectorRule vector_rule//vectorRule, not enabledion rule, not enabled
deprecated */
  document_id?: Int64;
  /** updated status */
  status?: SliceStatus;
  /** Content to be updated */
  raw_text?: string;
  /** Table The cell content to be updated */
  table_unit_text?: string;
  Base?: base.Base;
}

export interface UpdateSliceResponse {
  code: Int64;
  msg: string;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
