/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as plugin_common from './plugin_common';

export type Int64 = string;

export enum PluginPricingCalculationType {
  /** by number of times */
  ByTimes = 1,
  /** By base unit (e.g. token) */
  ByUnit = 2,
  /** Unlimited */
  Unlimited = 3,
}

export enum PluginPricingStrategy {
  /** free */
  Free = 0,
  /** dosage system */
  Quantity = 1,
  /** subscription system */
  Subscribe = 2,
}

export enum PricingCurrencyType {
  /** Type of currency quoted */
  USD = 0,
  CNY = 1,
}

/** Begin plugin billing */
export enum PricingInterval {
  /** Time period of pricing */
  Second = 1,
  Minute = 2,
  Hour = 3,
  Day = 4,
  Month = 5,
  Year = 6,
}

export enum TimeUnit {
  Minute = 1,
  Hour = 2,
  Day = 3,
}

export interface Creator {
  id?: string;
  name?: string;
  avatar_url?: string;
  /** Did you create it yourself? */
  self?: boolean;
}

export interface DeletePluginPricingRuleRequest {
  plugin_id: string;
  rule_id: string;
  Base?: base.Base;
}

export interface DeletePluginPricingRuleResponse {
  BaseResp?: base.BaseResp;
}

export interface DraftBot {
  /** bot id */
  id?: string;
  name?: string;
  description?: string;
  icon_uri?: string;
  icon_url?: string;
  visibility?: plugin_common.VisibilityType;
  has_published?: plugin_common.Publish;
  create_time?: string;
  update_time?: string;
  creator_id?: string;
  space_id?: string;
  model_info?: ModelInfo;
  creator?: Creator;
  space_name?: string;
}

export interface EditDomainWhitelistRequest {
  domain_port_list: Array<string>;
  /** operation type */
  operate_type: plugin_common.OperateType;
  Base?: base.Base;
}

export interface EditDomainWhitelistResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetPluginListData {
  plugin_list?: Array<PluginData>;
  total?: Int64;
}

export interface GetPluginListRequest {
  page?: number;
  size?: number;
  status?: plugin_common.PluginStatus;
  plugin_ids?: Array<string>;
  space_id?: string;
  plugin_name?: string;
  order_by?: plugin_common.OrderBy;
  Base?: base.Base;
}

export interface GetPluginListResponse {
  code?: Int64;
  msg?: string;
  data?: GetPluginListData;
  BaseResp?: base.BaseResp;
}

export interface GetPluginPricingRuleRequest {
  plugin_id: string;
  Base?: base.Base;
}

export interface GetPluginPricingRuleResponse {
  plugin_pricing_rules?: Array<PluginPricingRule>;
  BaseResp?: base.BaseResp;
}

export interface GetPluginQuotaRuleRequest {
  /** plugin ID */
  plugin_id: string;
  Base?: base.Base;
}

export interface GetPluginQuotaRuleResponse {
  /** All the rules */
  quota_rule_and_apis?: Array<QuotaRuleAndAPI>;
  BaseResp?: base.BaseResp;
}

export interface GetPluginQuoteBotData {
  /** bot list */
  bot_list?: Array<DraftBot>;
  total?: Int64;
}

export interface GetPluginQuoteBotRequest {
  page: number;
  size: number;
  /** plugin id */
  plugin_id: string;
  /** team id */
  space_id?: string;
  /** bot id */
  bot_id?: string;
  /** Bot name supports exact queries */
  bot_name?: string;
  /** ConnectorID */
  connector_id?: plugin_common.ConnectorID;
  Base?: base.Base;
}

export interface GetPluginQuoteBotResponse {
  code?: Int64;
  msg?: string;
  data?: GetPluginQuoteBotData;
  BaseResp?: base.BaseResp;
}

export interface ModelInfo {
  model_name?: string;
}

export interface PluginAPI {
  /** operationId */
  name?: string;
  /** summary */
  desc?: string;
  parameters?: Array<PluginParameter>;
  plugin_id?: string;
  plugin_name?: string;
  /** The serial number is the same as the playground */
  api_id?: string;
  record_id?: string;
  /** path */
  path?: string;
  response?: Array<PluginParameter>;
}

export interface PluginData {
  id?: string;
  name?: string;
  /** description_for_human */
  desc_for_human?: string;
  plugin_icon?: string;
  plugin_type?: plugin_common.PluginType;
  status?: plugin_common.PluginStatus;
  /** json */
  plugin_desc?: string;
  update_time?: Int64;
  creator?: string;
  space_id?: string;
  space_name?: string;
  /** number of citations */
  bot_quote?: number;
  /** release status */
  publish_status?: plugin_common.PluginPublishStatus;
  /** plugin channel */
  channel_id?: plugin_common.PluginChannel;
  /** plugin creator id */
  material_id?: string;
  /** tools */
  plugin_apis?: Array<PluginAPI>;
  /** server url */
  server_url?: string;
  /** The plugin's product listing status */
  plugin_product_list_status?: plugin_common.ProductStatus;
  /** Product review status of the plugin */
  plugin_product_draft_status?: plugin_common.ProductDraftStatus;
  /** plugin product id */
  channel_plugin_id?: string;
  /** Number of billing rules for plugins */
  pricing_rule_count?: number;
}

export interface PluginParameter {
  name?: string;
  desc?: string;
  required?: boolean;
  type?: string;
  sub_parameters?: Array<PluginParameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: string;
  /** fromNodeId if the value of the imported parameter is a reference */
  from_node_id?: string;
  /** Which node's key is specifically referenced? */
  from_output?: Array<string>;
  /** If the imported parameter is the user's hand input, put it here */
  value?: string;
}

export interface PluginPriceInfo {
  /** Manually filled price
price */
  price?: string;
  /** The currency type corresponding to the price */
  currency_type?: PricingCurrencyType;
  /** The time period corresponding to the price */
  interval?: PricingInterval;
  /** The number of base units consumed per call */
  units_for_once?: string;
  /** The name of the base unit (e.g. token) */
  unit_name?: string;
}

export interface PluginPriceLimit {
  /** price limit
number of times limit */
  times_limit?: string;
  /** The time period corresponding to the number of times limit */
  times_interval?: PricingInterval;
  /** Limitations on basic units */
  units_limit?: string;
  /** The time period corresponding to the limit of the basic unit */
  units_interval?: PricingInterval;
}

export interface PluginPriceResult {
  /** Automatically calculated price per call
price */
  price?: string;
  /** The currency type corresponding to the price */
  currency_type?: PricingCurrencyType;
  /** Number of tokens consumed per call */
  tokens_for_once?: string;
}

export interface PluginPricingRule {
  /** Null: takes effect for the entire plugin; non-empty: takes effect for a single API */
  api_name?: string;
  /** Notes on information, such as procurement plans */
  comment?: string;
  /** call restriction */
  price_limit?: PluginPriceLimit;
  /** Cost of manual filling */
  price_info?: PluginPriceInfo;
  /** Calculated cost per call */
  price_result?: PluginPriceResult;
  /** Level 1 rule, free by default */
  pricing_strategy?: PluginPricingStrategy;
  /** secondary rule */
  pricing_calculation_type?: PluginPricingCalculationType;
  /** Rule ID, 0 when creating */
  rule_id?: string;
}

export interface QuotaAlert {
  /** The API name that triggered the alarm */
  api_name?: string;
  /** When the alarm is triggered, the capacity that has been used */
  used_quota?: string;
  /** alarm message */
  message?: string;
  /** alarm trigger time */
  create_time?: string;
}

export interface QuotaRule {
  /** Capacity rule ID */
  rule_id?: string;
  /** Capacity: Maximum number of calls within 1 counting cycle */
  quota?: string;
  /** Percentage of alarm threshold, 0 to 100 */
  threshold?: string;
  /** Start time when the rules come into effect */
  start_time?: string;
  /** A unit of time for counting cycles, minutes/hours/days */
  period_time_unit?: TimeUnit;
  /** counting period */
  period?: string;
  /** The last 5 alerts */
  quota_alerts?: Array<QuotaAlert>;
}

export interface QuotaRuleAndAPI {
  /** capacity rule */
  quota_rules?: Array<QuotaRule>;
  /** Nil means valid for the entire plugin, otherwise only valid for a single API */
  api_name?: string;
  /** Is it unlimited? */
  unlimited?: boolean;
}

export interface TransPluginOwnerRequest {
  /** plugin creator id */
  material_id: string;
  /** target developer id */
  target_dev_id: string;
  Base?: base.Base;
}

export interface TransPluginOwnerResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface UpdatePluginPricingRuleRequest {
  plugin_id: string;
  pricing_rule?: PluginPricingRule;
  Base?: base.Base;
}

export interface UpdatePluginPricingRuleResponse {
  BaseResp?: base.BaseResp;
}

export interface UpdatePluginQuotaRuleRequest {
  /** plugin ID */
  plugin_id: string;
  /** All the rules */
  quota_rule_and_apis?: Array<QuotaRuleAndAPI>;
  Base?: base.Base;
}

export interface UpdatePluginQuotaRuleResponse {
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
