/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';
import * as flow_devops_evaluation_dataset from './flow_devops_evaluation_dataset';
import * as flow_devops_evaluation_callback_common from './flow_devops_evaluation_callback_common';
import * as flow_devops_evaluation_object_callback from './flow_devops_evaluation_object_callback';
import * as flow_devops_evaluation_evaluator_callback from './flow_devops_evaluation_evaluator_callback';

export type Int64 = string | number;

export enum AnnotationItemDataType {
  Unknown = 0,
  /** numerical scoring */
  Score = 1,
  /** numerical value */
  Value = 2,
  /** option */
  Select = 3,
  /** plain text description */
  PlainText = 4,
}

export enum ManualAnnotationLabelTaskStatus {
  Created = 10,
  Finished = 50,
}

export enum ManualAnnotationTaskCreateStatus {
  Unknown = 0,
  Creating = 1,
  Failed = 2,
  Success = 3,
}

/** label task write-back status */
export enum ManualAnnotationTaskWriteBackStatus {
  Unknown = 0,
  /** Mission in Progress */
  Running = 1,
  /** Mission successful */
  Success = 2,
  /** Mission failed */
  Failed = 3,
}

export enum ManualStatus {
  /** No manual labeling is required. */
  NoNeed = 0,
  /** Manual labeling is required. */
  Need = 1,
}

export enum ObjectType {
  /** Evaluation task row with objectID task_id + row_id */
  EvaluationTaskRow = 1,
}

export enum RowGroupRunState {
  Unknown = -1,
  /** in line */
  Queueing = 0,
  /** in progress */
  Processing = 1,
  /** success */
  Success = 2,
  /** fail */
  Fail = 3,
  /** Results to be evaluated */
  Evaluating = 4,
  /** terminate execution */
  Terminal = 5,
}

export enum RowRunState {
  /** Not started */
  Queueing = 0,
  /** successful execution */
  Success = 1,
  /** execution failed */
  Fail = 2,
}

export enum SourceType {
  /** Evaluation comparison report, sourceID is the evaluation comparison report ID */
  EvaluationContrastReport = 1,
  /** Evaluation task, sourceID is the evaluation task ID */
  EvaluationTask = 2,
  /** No source */
  NoSource = 100,
}

export enum VisibleArea {
  Unknown = 0,
  /** Visible in the evaluation module */
  Evaluation = 1,
  /** Visible in the annotation module */
  ManuaAnnotation = 2,
}

export interface BizError {
  err_msg: string;
  err_code: Int64;
}

export interface ColumnRuleInfo {
  rule_id: Int64;
  evaluator_type: Int64;
  /** Custom Evaluator Name */
  evaluator_type_name: string;
  /** rule name */
  name?: string;
  /** Merge cells for dialog group granularity rules */
  granularity?: flow_devops_evaluation_entity.EvaluatorGranularity;
}

export interface DashboardRowGroupPayload {
  row_group_id?: Int64;
  rows?: Array<DashboardRowPayload>;
  row_group_system_info?: RowGroupSystemInfo;
  /** rowGroup granularity evaluation ruleID - > Results */
  row_group_rule_eval_reports?: Array<RowEvalReport>;
}

export interface DashboardRowPayload {
  row_id?: Int64;
  /** Evaluation data preparation phase generation */
  dataset?: RowDataset;
  /** Evaluation object result report generation */
  object_output?: RowObjectOutput;
  /** Evaluation rule execution report generation */
  rule_output?: RowRuleOutput;
  /** Manual rule execution report generation */
  manual_rule_output?: RowManualRuleOutput;
  /** Evaluation indicators are reported and generated */
  metrics_output?: RowMetricsOutput;
  /** Evaluation system managed task running generation */
  system_info?: RowSystemInfo;
  /** Label result information */
  annotation_payload?: RowAnnotationPayload;
}

export interface EvaluateResult {
  /** score */
  score?: number;
  /** Information on the scoring process and results */
  reasoning?: string;
  /** Whether manual scoring is required, when the current rules do not automatically evaluate the results, ManualStatus = ManualStatus */
  manual_status?: ManualStatus;
  /** Evaluator error */
  error?: RowRunError;
  data?: EvaluateResultData;
}

export interface EvaluateResultData {
  score?: number;
  value?: string;
  option?: flow_devops_evaluation_entity.EvaluateResultOption;
  plain_text?: string;
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  value_type?: flow_devops_evaluation_entity.EvaluateResultValueType;
}

export interface ManualAnnotationLabelResult {
  /** human callout ID */
  manual_annotation_item_id?: Int64;
  score?: number;
  value?: string;
  option?: string;
  plain_text?: string;
  reasoning?: string;
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** Has it been selected? */
  selected?: boolean;
}

export interface ManualAnnotationLabelTask {
  /** human annotation subtask ID */
  id?: Int64;
  /** human annotation task ID */
  manual_annotation_task_id?: Int64;
  space_id?: Int64;
  /** label object row unique identifier */
  object_id?: string;
  /** annotation object row type */
  object_type?: ObjectType;
  /** manually label the results */
  manual_annotation_label_results?: Array<ManualAnnotationLabelResult>;
  status?: ManualAnnotationLabelTaskStatus;
  assign_annotator_id?: Int64;
  actual_annotator_id?: Int64;
  blind_num?: Int64;
  source_num?: Int64;
  serial_num?: Int64;
  payload?: DashboardRowGroupPayload;
  /** The marking task corresponds to the rows in the rowGroup */
  round_in_row_group?: Int64;
  creator_id?: Int64;
  delete_time?: Int64;
  create_time?: Int64;
  update_time?: Int64;
}

export interface RowAnnotationPayload {
  manual_annotation_label_tasks?: Array<ManualAnnotationLabelTask>;
}

export interface RowDataset {
  columns?: Array<flow_devops_evaluation_dataset.ColumnInfo>;
  data?: Array<flow_devops_evaluation_callback_common.Content>;
}

/** The score corresponding to each evaluator */
export interface RowEvalReport {
  evaluator_type?: Int64;
  row_eval_result?: EvaluateResult;
  /** The name of the evaluator */
  evaluator_type_name?: string;
  weight?: Int64;
  /** If it is a row-level rule, it needs to be displayed in a separate column */
  is_row_evaluator?: boolean;
  name?: string;
}

export interface RowGroupSystemInfo {
  /** The number of the rowGroup on the marked details page, starting with 1 */
  row_group_serial_num?: Int64;
  /** The number of rowGroup in the dataset, starting from 1 */
  source_num?: Int64;
  tags?: Array<string>;
}

export interface RowManualRuleOutput {
  columns?: Array<ColumnRuleInfo>;
  rule_eval_reports?: Array<RowEvalReport>;
}

export interface RowMetricsOutput {
  columns?: Array<ColumnRuleInfo>;
  row_metrics?: Array<RowEvalReport>;
}

/** Evaluation Object Output Data for Dialogue Granularity */
export interface RowObjectOutput {
  /** evaluation object output
actual output */
  multi_output?: flow_devops_evaluation_object_callback.Output;
  /** Evaluate intermediate process information
track information */
  trajectory?: flow_devops_evaluation_evaluator_callback.Trajectory;
}

export interface RowRuleOutput {
  columns?: Array<ColumnRuleInfo>;
  rule_eval_reports?: Array<RowEvalReport>;
  /** The total score of all automatic evaluation rules in this row aggregated by weight */
  score?: number;
}

export interface RowRunError {
  code: Int64;
  message: string;
  /** for prompt platform */
  detail: string;
  BizError?: BizError;
}

export interface RowSystemInfo {
  run_state?: RowRunState;
  /** Row the associated logID at execution time */
  log_id?: string;
  error?: RowRunError;
  /** Whether to jump evaluation object call trace */
  direct_object_trace?: boolean;
}
/* eslint-enable */
