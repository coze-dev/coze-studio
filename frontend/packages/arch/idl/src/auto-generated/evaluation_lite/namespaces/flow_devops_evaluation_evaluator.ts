/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';

export type Int64 = string | number;

export enum ContentType {
  Txt = 1,
  Image = 2,
  Audio = 3,
  Video = 4,
  Link = 6,
  Music = 7,
  Tako = 8,
  File = 9,
  Card = 50,
  BotCard = 51,
  APP = 100,
  OutputSearchResult = 200,
}

/** The type of processing flow when the Evaluator executes, expressing the attribute information of the Evaluator implementation
 EvaluatorID is not enumerable, but EvaluatorProcessType is enumerable
 EvaluatorProcessType is the information that must be determined when creating the Evaluator. */
export enum EvaluatorProcessType {
  Prompt = 1,
  PythonCode = 2,
  JSCode = 3,
  BuildinFunc = 4,
  BuildinPrompt = 5,
  /** Currently includes RPCCallback and HTTPCallback. */
  CustomCallback = 6,
  /** manual evaluation */
  Manual = 7,
  /** custom metric reporting */
  CustomMetric = 8,
  /** Dedicated test rules */
  BuiltinSpecTest = 9,
  /** Fornax platform Prompt development prompts */
  FornaxPrompt = 10,
  /** Coze2.0 referee model evaluator */
  CozePrompt = 11,
}

export enum LLMResponseFormat {
  TEXT = 0,
  MARKDOWN = 1,
  JSON = 2,
}

export enum ReplyType {
  Answer = 1,
  Suggest = 2,
  LLMOutput = 3,
  ToolOutput = 4,
  DataSet = 5,
  QueryKeyword = 6,
  IntermediateOutput = 7,
}

export enum RuleRunState {
  /** Running state, state flow under asynchronous, only Success/Fail under synchronization */
  NotInit = 0,
  Init = 1,
  Processing = 2,
  Success = 3,
  Fail = 4,
}

export enum SupportUpdateRuleGroupField {
  Name = 4,
  Desc = 5,
}

export interface BuildinFuncRule {
  contents?: Array<string>;
}

export interface BuildinPromptRule {
  contents?: Array<string>;
  model_name?: string;
  /** 20240815 server level internal use */
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

export interface CozePromptRule {
  model_info: ModelInfo;
  prompt: string;
}

export interface CustomCallback {
  content?: string;
  /** Callback the env of the business party */
  env?: string;
}

/** custom indicator rules */
export interface CustomMetricsRule {
  data_type: flow_devops_evaluation_entity.EvaluateResultDataType;
  value_type?: flow_devops_evaluation_entity.EvaluateResultValueType;
}

export interface FornaxPromptRule {
  /** The unique identifier of prompt in prompt development */
  prompt_id: Int64;
  /** Prompt version */
  version?: string;
  /** Server level internal use */
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

export interface JSRule {
  code: string;
}

export interface LLMSetting {
  model_version: string;
  temperature: number;
  respose_max_length: Int64;
}

/** Multi-dimensional manual evaluation scoring rules */
export interface ManualRule {
  /** Data types: numeric ratings, options, plain text */
  data_type: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** rating range */
  scope?: flow_devops_evaluation_entity.ScoringScope;
  options?: Array<flow_devops_evaluation_entity.EvaluateResultOption>;
}

export interface ModelInfo {
  model_id: Int64;
  temperature: number;
  max_tokens: Int64;
  top_p?: number;
  response_format?: LLMResponseFormat;
  presence_penalty?: number;
  frequency_penalty?: number;
  model_style?: Int64;
  model_name?: string;
}

export interface PromptRule {
  setting: LLMSetting;
  content: string;
  /** 20240815 server level internal use */
  ModelInfo?: flow_devops_evaluation_entity.ModelInfo;
}

export interface PythonRule {
  code: string;
}

export interface Rule {
  /** rule id */
  rule_id?: Int64;
  /** evaluator identifier */
  evaluator_type: Int64;
  process_type: EvaluatorProcessType;
  /** Custom evaluator name */
  evaluator_type_name?: string;
  /** weight */
  weight?: Int64;
  creator_id?: Int64;
  /** display name */
  name?: string;
  /** evaluation granularity */
  granularity?: flow_devops_evaluation_entity.EvaluatorGranularity;
  receive_chat_history?: boolean;
  /** data type */
  data_type?: flow_devops_evaluation_entity.EvaluateResultDataType;
  /** Different EvaluatorProcessType correspond to different structure definitions */
  prompt_rule?: PromptRule;
  python_rule?: PythonRule;
  js_rule?: JSRule;
  buildin_func_rule?: BuildinFuncRule;
  buildin_prompt_rule?: BuildinPromptRule;
  custom_callback?: CustomCallback;
  manual_rule?: ManualRule;
  custom_metrics?: CustomMetricsRule;
  spec_test_rule?: SpecTestRule;
  fornax_prompt_rule?: FornaxPromptRule;
  coze_prompt_rule?: CozePromptRule;
}

export interface SpecTestRule {
  content?: string;
}
/* eslint-enable */
