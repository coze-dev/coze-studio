/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_entity from './flow_devops_evaluation_entity';
import * as flow_devops_evaluation_callback_common from './flow_devops_evaluation_callback_common';

export type Int64 = string | number;

export enum AsyncStatus {
  Running = 1,
  Success = 2,
  Failure = 3,
}

export enum CozeBotInfoType {
  /** Draft bot */
  DraftBot = 1,
  /** Shop bot */
  ProductBot = 2,
}

/** Callback shell:
 Both as server level return parameters
 When the object is associated, it is also used as the shell for front-end parameter transmission */
export interface Object {
  object_type: Int64;
  /** The name of the pull list page displayed on the UI for the evaluation object, objectMetaName */
  name?: string;
  /** The unique identity and configuration of the neutron evaluation object of one agent. It is recommended to use Json serialized passthrough
The production, delivery and consumption path of ObjectMeta: SearchObject (producer) - > evaluation platform UI- > evaluation platform user circle - > evaluation platform server level - > evaluation object Playground (consumer)
ObjectMeta is generated and parsed by the evaluation object server, and the evaluation platform is transparent only
Like the built-in interface does not have this field */
  object_meta?: string;
  /** Used to filter which objects are visible */
  space_id: Int64;
  /** Display-only object information, such as bot avatars */
  avatar_url?: string;
  /** Callback the env of the business party, pass the value through the front end, and perform the callback of the corresponding lane after evaluation analysis */
  env?: string;
  /** The UI displays the id of the unique child object in the use case list, which needs to be filled in by the callback business party */
  object_meta_id?: string;
  /** The UI is displayed in the use case list. After the user selects the evaluation object on the front end, the snapshot store is used to display it in the use case list. */
  object_type_name?: string;
  callback_type?: flow_devops_evaluation_entity.CallbackType;
}

export interface Output {
  /** The output information of the evaluation object. The evaluator will use the output in the dataset as a benchmark to evaluate the Prediction of the output of the evaluation object
Prediction can be a string or a JSON structure, which needs to be aligned with the evaluator */
  prediction?: string;
  prediction_v2?: flow_devops_evaluation_callback_common.Content;
  ext?: Record<string, string>;
}
/* eslint-enable */
