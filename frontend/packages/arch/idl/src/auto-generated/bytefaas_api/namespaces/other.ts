/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export enum ChargeItemType {
  ChargeItemTypeNew = 1,
  ChargeItemTypeExpand = 2,
  ChargeItemTypeShrink = 3,
  ChargeItemTypeUpgrade = 4,
  ChargeItemTypeDowngrade = 5,
  ChargeItemTypeRemove = 6,
}

export interface ByteTree {
  /** Required
Rds pass _read/_write two psm, other products pass one */
  PSMs?: Array<string>;
  /** TreeOperationCreate/TreeOperationDelete Required
ByteTree provider */
  Provider?: string;
  /** The location of the ByteTree to be mounted */
  ParentNodeID?: Int64;
  /** Tenant ID, used to select account logic */
  TenantID?: string;
  /** Environment: boe/prod/ppe */
  Env?: string;
  /** Corresponding region, such as cn */
  Region?: string;
  /** Corresponding partition, such as cn */
  Partition?: string;
  /** Required when TreeOperationCreate
Links to resources corresponding to the control plane */
  ResourceLink?: ResourceLink;
  /** Hanging tree operator */
  OpUser?: string;
  /** Optional when TreeOperationCreate
ByteTree description */
  Description?: string;
  /** The personal account of the owner of IAM when the resource is initialized */
  OwnerList?: Array<string>;
  /** The service account of the owner of IAM when the resource was initialized */
  ServiceAccountList?: Array<string>;
  /** ByteTree label */
  Tags?: Record<string, string>;
  /** Only required when MQ mounts a group */
  GroupName?: string;
  /** Only required when MQ mounts a topic */
  TopicName?: string;
}

/** configuration sheet */
export interface ChargeItem {
  Flavor: string;
  BeforeValue: number;
  AfterValue: number;
  ChargeItemType: ChargeItemType;
  /** Depending on whether the business is allocated according to the VDC quota */
  VDC?: string;
  /** Babi sales area, some billing items are strange, and direct value transfer is supported here. */
  SalesArea?: string;
  IsForPrice?: boolean;
}

export interface DataMessage18 {}

export interface DataMessage20 {
  format_regions_backend?: Array<DataMessage20FormatRegionsBackendMessage>;
}

export interface DataMessage20FormatRegionsBackendMessage {
  backend?: boolean;
  frontend?: boolean;
  region?: string;
}

export interface Error {
  CodeN: Int64;
  Code: string;
  Message: string;
}

export interface GetOrderConfigRequest {
  env: string;
  function_id: string;
  parent_node_id: Int64;
  psm: string;
  service_id: string;
  region: string;
  cluster?: OrderConfigCluster;
  mq_event?: OrderConfigMqEvent;
}

export interface GetOrderConfigResp {
  ResponseMetaData: ResponseMetaData;
  /** For hanging tree pre-check and selecting Huoshan Account */
  ByteTree: ByteTree;
  /** 10: optional ark.ArkData ArkData
99: optional list < OrderConfig > OrderConfigs//compatible with tce and other components can be ordered across regionsts such as tce can be ordered across regions */
  OrderConfig?: OrderConfig;
}

export interface getRegionsEnabledRequest {}

export interface GetRegionsEnabledResponse {
  code?: number;
  data?: DataMessage20;
  error?: string;
}

export interface getRegionZonesRequest {}

export interface GetRegionZonesResponse {
  code?: number;
  data?: Record<string, Array<string>>;
  error?: string;
}

export interface getRuntimeRequest {}

export interface GetRuntimeResponse {
  code?: number;
  /** region will be key name */
  data?: Record<string, Array<Runtime>>;
  error?: string;
}

export interface OrderConfig {
  PID: string;
  ProductID: string;
  Region: string;
  NeedConvertToInnerChargeItem?: boolean;
  ChargeItems: Array<ChargeItem>;
}

export interface OrderConfigCluster {
  http_trigger_disable?: boolean;
  pod_type: string;
  replica_limit: Record<string, common.PodReplicaLimit>;
  resource_limit: common.Resource;
}

export interface OrderConfigMqEvent {
  resource: common.Resource;
  type: string;
}

export interface PrescanRequest {
  hours: string;
  /** region name */
  region: string;
  /** zone */
  zone: string;
}

export interface PrescanResponse {
  code?: number;
  data?: DataMessage18;
  error?: string;
}

export interface ResourceLink {
  Schema?: string;
  Action?: string;
  /** There is no exact direct counterpart to any native type in Thrift */
  Params?: Record<string, string>;
}

export interface ResponseMetaData {
  RequestId: string;
  Service: string;
  Error: Error;
}

export interface Runtime {
  category?: string;
  default_template?: string;
  function_type?: string;
  key?: string;
  name?: string;
  show?: boolean;
  supported_protocols?: Array<string>;
  supported_domains?: Array<string>;
}
/* eslint-enable */
