/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './namespaces/base';
import * as file from './namespaces/file';
import * as http_model from './namespaces/http_model';
import * as rpc_model from './namespaces/rpc_model';

export { base, file, http_model, rpc_model };
export * from './namespaces/base';
export * from './namespaces/file';
export * from './namespaces/http_model';
export * from './namespaces/rpc_model';

export type Int64 = string | number;

export default class FileboxService<T> {
  private request: any = () => {
    throw new Error('FileboxService.request is undefined');
  };
  private baseURL: string | ((path: string) => string) = '';

  constructor(options?: {
    baseURL?: string | ((path: string) => string);
    request?<R>(
      params: {
        url: string;
        method: 'GET' | 'DELETE' | 'POST' | 'PUT' | 'PATCH';
        data?: any;
        params?: any;
        headers?: any;
      },
      options?: T,
    ): Promise<R>;
  }) {
    this.request = options?.request || this.request;
    this.baseURL = options?.baseURL || '';
  }

  private genBaseURL(path: string) {
    return typeof this.baseURL === 'string'
      ? this.baseURL + path
      : this.baseURL(path);
  }

  /**
   * POST /api/filebox/update_filebox_usage_status
   *
   * The user turns on/off the FileBox switch (also provided to function call + plugin mode)
   */
  UpdateFileBoxUsageStatus(
    req: file.UpdateFileBoxUsageStatusRequest,
    options?: T,
  ): Promise<file.UpdateFileBoxUsageStatusResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/update_filebox_usage_status');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      switch_on: _req['switch_on'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/batch_delete_file
   *
   * Bulk delete files (also provided to function call + plugin mode)
   */
  BatchDeleteFile(
    req: file.BatchDeleteFileRequest,
    options?: T,
  ): Promise<file.BatchDeleteFileResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/batch_delete_file');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      ids: _req['ids'],
      uris: _req['uris'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/create_album
   *
   * Create an album (also provided to function call + plugin mode)
   */
  CreateAlbum(
    req: file.CreateAlbumRequest,
    options?: T,
  ): Promise<file.CreateAlbumResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/create_album');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      album_name: _req['album_name'],
      album_desc: _req['album_desc'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/add_photos_to_album
   *
   * Upload pictures and videos to the album (at the same time provide it to the function call + plugin mode)
   */
  AddPhotosToAlbum(
    req: file.AddPhotosToAlbumRequest,
    options?: T,
  ): Promise<file.AddPhotosToAlbumResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/add_photos_to_album');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      md_items: _req['md_items'],
      album_name: _req['album_name'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/update_album
   *
   * Update the album name and description (also provided to function call + plugin mode)
   */
  UpdateAlbum(
    req: file.UpdateAlbumRequest,
    options?: T,
  ): Promise<file.UpdateAlbumResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/update_album');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      album_id: _req['album_id'],
      album_name: _req['album_name'],
      new_album_name: _req['new_album_name'],
      new_album_desc: _req['new_album_desc'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/recall_files
   *
   * Access RAG, semantic recall file information list (also provided to function call + plugin mode)
   */
  RecallFileMetaInfos(
    req: file.RecallFileMetaInfosRequest,
    options?: T,
  ): Promise<file.RecallFileMetaInfosResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/recall_files');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      need_rag: _req['need_rag'],
      md_type: _req['md_type'],
      begin_time: _req['begin_time'],
      end_time: _req['end_time'],
      file_uris: _req['file_uris'],
      format: _req['format'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/batch_update_file_meta
   *
   * Bulk update of file meta information
   *
   * Plugin call
   */
  BatchUpdateFileMeta(
    req: file.BatchUpdateFileMetaRequest,
    options?: T,
  ): Promise<file.BatchUpdateFileMetaResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/batch_update_file_meta');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      update_items: _req['update_items'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/show_album
   *
   * Browse the album, note: Only semantic recall albums are supported, not pictures and videos in semantic recall albums.
   */
  ShowAlbum(
    req: file.ShowAlbumRequest,
    options?: T,
  ): Promise<file.ShowAlbumResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/show_album');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      album_id: _req['album_id'],
      album_name: _req['album_name'],
      start: _req['start'],
      limit: _req['limit'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/get_file_meta_info
   *
   * Get file information (also provided to function call + plugin mode)
   */
  GetFileMetaInfo(
    req: file.GetFileMetaInfoRequest,
    options?: T,
  ): Promise<file.GetFileMetaInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/get_file_meta_info');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      file_id: _req['file_id'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/del_album
   *
   * Delete the album (also provided to the function call + plugin mode)
   */
  DelAlbum(
    req: file.DelAlbumRequest,
    options?: T,
  ): Promise<file.DelAlbumResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/del_album');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      album_id: _req['album_id'],
      album_name: _req['album_name'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/summary_file
   *
   * Get document summary content
   */
  SummaryFile(
    req: file.SummaryFileRequest,
    options?: T,
  ): Promise<file.SummaryFileResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/summary_file');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      file_uri: _req['file_uri'],
      file_name: _req['file_name'],
      format: _req['format'],
      upload_date: _req['upload_date'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * GET /api/filebox/display_apis
   *
   * Coze edit page to get the Filebox API information to display
   */
  GetDisplayAPIs(
    req?: file.GetDisplayAPIsRequest,
    options?: T,
  ): Promise<file.GetDisplayAPIsResponse> {
    const _req = req || {};
    const url = this.genBaseURL('/api/filebox/display_apis');
    const method = 'GET';
    const params = { Base: _req['Base'] };
    return this.request({ url, method, params }, options);
  }

  /**
   * POST /api/filebox/show_album_list
   *
   * show album list
   */
  ShowAlbumList(
    req: file.ShowAlbumListRequest,
    options?: T,
  ): Promise<file.ShowAlbumListResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/show_album_list');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * GET /api/filebox/card_detail_info
   *
   * Click Card for details page
   */
  GetMDCardDetailPageInfo(
    req: file.GetMDCardDetailPageInfoRequest,
    options?: T,
  ): Promise<file.GetMDCardDetailPageInfoResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/card_detail_info');
    const method = 'GET';
    const params = {
      obj_type: _req['obj_type'],
      dpid: _req['dpid'],
      bid: _req['bid'],
      cid: _req['cid'],
      expires: _req['expires'],
      signature: _req['signature'],
      page_num: _req['page_num'],
      page_size: _req['page_size'],
      Base: _req['Base'],
    };
    return this.request({ url, method, params }, options);
  }

  /**
   * POST /api/filebox/files/batch_create
   *
   * Create files in batches
   */
  BatchCreateFiles(
    req: file.BatchCreateFilesRequest,
    options?: T,
  ): Promise<file.BatchCreateFilesResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/files/batch_create');
    const method = 'POST';
    const data = {
      req_common_base_info: _req['req_common_base_info'],
      source_urls: _req['source_urls'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/public/filebox/file/update
   *
   * External HTTP interface: details page update picture meta information
   */
  PublicUpdateFile(
    req: file.PublicUpdateFileRequest,
    options?: T,
  ): Promise<file.PublicUpdateFileResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/file/update');
    const method = 'POST';
    const data = {
      UserID: _req['UserID'],
      bot_id: _req['bot_id'],
      connector_id: _req['connector_id'],
      detail_page_id: _req['detail_page_id'],
      update_items: _req['update_items'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/public/filebox/file/batch_delete
   *
   * External HTTP interface: details page batch delete pictures
   */
  PublicBatchDeleteFiles(
    req: file.PublicBatchDeleteFilesRequest,
    options?: T,
  ): Promise<file.PublicBatchDeleteFilesResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/file/batch_delete');
    const method = 'POST';
    const data = {
      UserID: _req['UserID'],
      bot_id: _req['bot_id'],
      connector_id: _req['connector_id'],
      detail_page_id: _req['detail_page_id'],
      uris: _req['uris'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/public/filebox/album/delete
   *
   * External HTTP interface: details page delete album
   */
  PublicDeleteAlbum(
    req: file.PublicDeleteAlbumRequest,
    options?: T,
  ): Promise<file.PublicDeleteAlbumResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/album/delete');
    const method = 'POST';
    const data = {
      UserID: _req['UserID'],
      bot_id: _req['bot_id'],
      connector_id: _req['connector_id'],
      detail_page_id: _req['detail_page_id'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/public/filebox/album/batch_remove_photo
   *
   * External HTTP interface: details page Remove images from albums
   */
  PublicBatchRemovePhotos(
    req: file.PublicBatchRemovePhotosRequest,
    options?: T,
  ): Promise<file.PublicBatchRemovePhotosResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/album/batch_remove_photo');
    const method = 'POST';
    const data = {
      UserID: _req['UserID'],
      bot_id: _req['bot_id'],
      connector_id: _req['connector_id'],
      detail_page_id: _req['detail_page_id'],
      ids: _req['ids'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * GET /api/public/filebox/page/is_writable
   *
   * External HTTP interface: Determine whether the write entry can be rendered on the details page at present
   */
  PageIsWritable(
    req: file.PageIsWritableRequest,
    options?: T,
  ): Promise<file.PageIsWritableResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/page/is_writable');
    const method = 'GET';
    const params = {
      dpid: _req['dpid'],
      UserID: _req['UserID'],
      cid: _req['cid'],
      bid: _req['bid'],
      Base: _req['Base'],
    };
    return this.request({ url, method, params }, options);
  }

  /**
   * POST /api/filebox/search_file
   *
   * search relevant document and content chunks
   */
  SearchFile(
    req: file.SearchFileRequest,
    options?: T,
  ): Promise<file.SearchFileResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/search_file');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      file_uri_list: _req['file_uri_list'],
      file_name_list: _req['file_name_list'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/public/filebox/v1/file_list
   *
   * External HTTP interface: Query file list
   */
  FileList(
    req: http_model.FileListRequest,
    options?: T,
  ): Promise<http_model.FileListResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/v1/file_list');
    const method = 'POST';
    const data = {
      file_type: _req['file_type'],
      bid: _req['bid'],
      file_name: _req['file_name'],
      begin_time: _req['begin_time'],
      end_time: _req['end_time'],
      page_num: _req['page_num'],
      page_size: _req['page_size'],
      connector_id: _req['connector_id'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/public/filebox/v1/upload_files
   *
   * External HTTP interface: file upload
   */
  UploadFiles(
    req: http_model.UploadFilesRequest,
    options?: T,
  ): Promise<http_model.UploadFilesResponse> {
    const _req = req;
    const url = this.genBaseURL('/api/public/filebox/v1/upload_files');
    const method = 'POST';
    const data = {
      bid: _req['bid'],
      cid: _req['cid'],
      biz_type: _req['biz_type'],
      source_files: _req['source_files'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }

  /**
   * POST /api/filebox/stream_summary_file
   *
   * Plugin HTTP Interface: Streaming Summary
   */
  StreamSummaryForPlugin(
    req: rpc_model.StreamSummaryRequestForPlugin,
    options?: T,
  ): Promise<rpc_model.PluginSSEParams> {
    const _req = req;
    const url = this.genBaseURL('/api/filebox/stream_summary_file');
    const method = 'POST';
    const data = {
      req_common_params: _req['req_common_params'],
      biz_id: _req['biz_id'],
      scene_id: _req['scene_id'],
      url: _req['url'],
      Base: _req['Base'],
    };
    return this.request({ url, method, data }, options);
  }
}
/* eslint-enable */
