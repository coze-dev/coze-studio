/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';

export type Int64 = string | number;

export enum ChangeType {
  /** Upload complete */
  Created = 1,
  /** deleted */
  Deleted = 2,
}

export enum MDType {
  Default = 0,
  Image = 1,
  Audio = 2,
  Video = 3,
  Document = 4,
  Font = 5,
  Archive = 6,
  Other = 255,
}

/** Differentiate the MDType enumeration value because Album is not a multimodal file */
export enum ObjType {
  Image = 1,
  Audio = 2,
  Video = 3,
  Document = 4,
  Album = 5,
  Other = 255,
}

export enum PermObjType {
  User = 0,
  Plugin = 1,
  Workflow = 2,
}

export enum PermScope {
  /** Allow once */
  Once = 0,
  /** Permanently allowed */
  Always = 1,
}

export interface AddPhotosToAlbumRequest {
  req_common_params: ReqCommonBaseInfo;
  /** The item type to be verified is picture and video. */
  md_items: Array<FileMetaCreateAlbumInfo>;
  album_name: string;
  Base?: base.Base;
}

export interface AddPhotosToAlbumResponse {
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface AlbumInfo {
  album_id?: string;
  /** Album name */
  name?: string;
  /** Album description */
  desc?: string;
  user_id: Int64;
  bot_id: Int64;
  conversation_id: Int64;
  /** Album creation business party type, manually assigned to the identity of the upload business party such as coze, bean bag, cici, Plugin, etc */
  biz_type: string;
  /** Album creation business party ID, for example PluginID for Plugins */
  biz_id: string;
  /** Creation time, ms */
  created_at: Int64;
  /** Update time ms */
  updated_at: Int64;
}

export interface APIItem {
  id: string;
  name: string;
  desc: string;
  group_id?: string;
}

export interface BatchCreateFilesRequest {
  /** common parameter */
  req_common_base_info: ReqCommonBaseInfo;
  /** List of source file URLs */
  source_urls: Array<string>;
  Base?: base.Base;
}

export interface BatchCreateFilesResponse {
  /** Create result */
  create_results?: Array<FileCreateResult>;
  /** Data returned to the model */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface BatchDeleteFileRequest {
  req_common_params: ReqCommonBaseInfo;
  ids?: Array<string>;
  uris?: Array<string>;
  Base?: base.Base;
}

export interface BatchDeleteFileResponse {
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface BatchUpdateFileMetaRequest {
  /** This can also be given through context */
  req_common_params: ReqCommonBaseInfo;
  update_items: Array<FileMetaUpdateInfo>;
  Base?: base.Base;
}

export interface BatchUpdateFileMetaResponse {
  /** number of successes */
  SuccessNum?: number;
  /** number of failures */
  FailNum?: number;
  /** Processing result details, k: id, v: true means success */
  ResultDetail?: Record<string, boolean>;
  /** LLM only senses the content of the changed field */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface BizInfo {
  BizType: string;
  BizID?: string;
}

export interface CommonParam {
  BotID: Int64;
  UserID: Int64;
  ConversationID: Int64;
  MessageID: Int64;
  ConnectorID: string;
}

export interface CreateAlbumRequest {
  req_common_params: ReqCommonBaseInfo;
  album_name?: string;
  album_desc?: string;
  Base?: base.Base;
}

export interface CreateAlbumResponse {
  album_info?: AlbumInfo;
  photos?: Array<FileMetaInfo>;
  /** Details page link */
  detail_page_url?: string;
  /** Total number of images in the album */
  album_length?: number;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface DelAlbumRequest {
  req_common_params: ReqCommonBaseInfo;
  /** Deprecated, deleted by AlbumName */
  album_id: string;
  /** When there is AlbumNmae, delete according to AlbumName */
  album_name?: string;
  Base?: base.Base;
}

export interface DelAlbumResponse {
  /** List of albums created by users themselves */
  album_name_list?: Array<string>;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface DestFileInfo {
  /** target file URI */
  file_uri?: string;
  /** Target file URL */
  file_url?: string;
  /** file name */
  file_name?: string;
  /** file upload status */
  status?: number;
}

export interface FileCreateResult {
  /** URL of source file */
  source_url: string;
  /** File ID */
  file_id: string;
  /** File URI */
  uri: string;
}

export interface FileMeta {
  FileID: string;
  MDType: MDType;
  Format: string;
  FileSize: Int64;
  FileName: string;
  URI: string;
  Position: string;
  Device: string;
  CreatedAt: Int64;
  UpdatedAt: Int64;
  Tags: string;
}

/** FileBaseMetaInfo contains basic file information needed to create an album */
export interface FileMetaCreateAlbumInfo {
  file_id?: string;
  uri?: string;
}

export interface FileMetaInfo {
  id: string;
  file_id: string;
  file_name: string;
  md_type: MDType;
  format: string;
  uri: string;
  position: string;
  device: string;
  size: number;
  tags: string;
  created_at_ms: Int64;
  updated_at_ms: Int64;
  user_id: Int64;
  conversation_id: Int64;
  biz_type: string;
  biz_id: string;
  /** Note: The field returned to the frontend may be inconsistent due to loss of precision */
  bot_id: Int64;
  message_id: Int64;
  /** original image address */
  normal_file_url?: FileURL;
  /** Thumbnail address */
  thumbnail_file_url?: FileURL;
  /** Image meta information, valid when the file type is image */
  image_meta?: ImageMeta;
  /** 255: file not indexed; 254: byterag not enabled; 0: rag index built successfully; 1: rag index building in progress; 2: rag index build failed; 3: rag index deleted */
  rag_document_status?: Int64;
  /** Number of slices of rag content */
  rag_content_chunk_num?: number;
}

export interface FileMetaUpdateInfo {
  /** File ID */
  file_id?: string;
  /** file name */
  file_name?: string;
  /** Upload address */
  position?: string;
  /** Upload device */
  device?: string;
  /** image URI */
  uri?: string;
  /** Feature tags, multiple separated by English commas */
  tags?: string;
  /** picture description */
  caption?: string;
}

export interface FileSearchItem {
  file_name?: string;
  file_url?: string;
  content?: string;
}

export interface FileURL {
  main_url: string;
  backup_url: string;
}

export interface GetDisplayAPIsRequest {
  Base?: base.Base;
}

export interface GetDisplayAPIsResponse {
  apis: Array<APIItem>;
  groups?: Array<GroupItem>;
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface GetFileMetaInfoRequest {
  req_common_params: ReqCommonBaseInfo;
  file_id: string;
  Base?: base.Base;
}

export interface GetFileMetaInfoResponse {
  data?: FileMetaInfo;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface GetMDCardDetailPageInfoRequest {
  /** Card resource types: such as albums, pictures, videos, files, need to perceive multi-modal file types */
  obj_type: ObjType;
  /** Card details page ID */
  dpid: string;
  /** resource belongs to botId */
  bid: Int64;
  /** resource connectorId */
  cid: Int64;
  /** expiration time */
  expires: Int64;
  /** parameter signature */
  signature: string;
  page_num?: number;
  page_size?: number;
  Base?: base.Base;
}

export interface GetMDCardDetailPageInfoResponse {
  file_list: Array<FileMetaInfo>;
  /** When the front-end display scene is an album, you need to display the album name on the details page. */
  show_title?: string;
  /** Total number of files */
  total?: Int64;
  next_page_num?: number;
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code?: Int64;
  msg?: string;
  base_resp: base.BaseResp;
}

export interface GroupItem {
  id: string;
  name: string;
}

export interface ImageMeta {
  /** Image width, unit: px */
  width: number;
  /** Image height, unit: px */
  height: number;
}

export interface PageIsWritableRequest {
  /** Details page id */
  dpid: string;
  /** Does not rely on front-end delivery, reads the abase cache according to detail_page_id and gets it */
  UserID?: string;
  /** Channel id: coze, bean buns, cici */
  cid?: string;
  bid?: string;
  Base?: base.Base;
}

export interface PageIsWritableResponse {
  is_writable: boolean;
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code: Int64;
  msg: string;
  base_resp: base.BaseResp;
}

export interface PublicBatchDeleteFilesRequest {
  /** Does not rely on front-end delivery, reads the abase cache according to detail_page_id and gets it */
  UserID?: string;
  bot_id?: string;
  /** Channel id: coze, bean buns, cici */
  connector_id?: string;
  /** Details page id */
  detail_page_id: string;
  uris?: Array<string>;
  Base?: base.Base;
}

export interface PublicBatchDeleteFilesResponse {
  success_ids?: Array<string>;
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface PublicBatchRemovePhotosRequest {
  /** Does not rely on front-end delivery, reads the abase cache according to detail_page_id and gets it */
  UserID?: string;
  bot_id?: string;
  /** Channel id: coze, bean buns, cici */
  connector_id?: string;
  /** Details page id */
  detail_page_id: string;
  /** File id list */
  ids?: Array<string>;
  Base?: base.Base;
}

export interface PublicBatchRemovePhotosResponse {
  success_ids?: Array<string>;
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface PublicDeleteAlbumRequest {
  /** Does not rely on front-end delivery, reads the abase cache according to detail_page_id and gets it */
  UserID?: string;
  bot_id?: string;
  /** Channel id: coze, bean buns, cici */
  connector_id?: string;
  /** Details page id */
  detail_page_id: string;
  Base?: base.Base;
}

export interface PublicDeleteAlbumResponse {
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface PublicUpdateFileRequest {
  /** Does not rely on front-end delivery, reads the abase cache according to detail_page_id and gets it */
  UserID?: string;
  bot_id?: string;
  /** Channel id: coze, bean buns, cici */
  connector_id?: string;
  /** Details page id */
  detail_page_id: string;
  update_items?: FileMetaUpdateInfo;
  Base?: base.Base;
}

export interface PublicUpdateFileResponse {
  /** After connecting to agw, the status_code and status_message in BaseResp will be injected */
  code: Int64;
  msg: string;
  BaseResp: base.BaseResp;
}

export interface RecallFileMetaInfosRequest {
  req_common_params: ReqCommonBaseInfo;
  need_rag?: boolean;
  /** file type */
  md_type?: MDType;
  /** ISO year - month - day */
  begin_time?: string;
  end_time?: string;
  file_uris?: Array<string>;
  /** File segmentation types, such as pdf, png, etc */
  format?: string;
  Base?: base.Base;
}

export interface RecallFileMetaInfosResponse {
  file_list?: Array<FileMetaInfo>;
  /** Details page link */
  detail_page_url?: string;
  /** The number of pictures returned by this query */
  file_num?: Int64;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

/** Information about the current request session
 All plugin calls need to include this structure */
export interface ReqCommonBaseInfo {
  /** user ID */
  user_id: Int64;
  /** Session ID */
  'X-AIPlugin-Conversation-ID': Int64;
  /** Business party type, manually assigned to coze, bean bag, cici, Plugin, etc. to upload the identity of the business party */
  biz_type: string;
  /** Business party ID, for example PluginID for Plugins */
  biz_id: string;
  /** bot ID */
  'X-AIPlugin-Bot-ID': Int64;
  /** When the plugin calls the FileBox API, it cannot pass the UserID due to the requirements of the coze platform, but passes the SessionID and provides an interface to resolve the UserID through the SessionID */
  'X-Temp-OpenID'?: string;
  /** user original conversation content */
  query: string;
  'X-AIPlugin-Connector-ID'?: Int64;
  /** Plugin authorization token */
  'Filebox-Auth-Token'?: string;
}

export interface SearchFileRequest {
  req_common_params: ReqCommonBaseInfo;
  /** File URI, if passed, summarize the specified file, if not passed, summarize the first file that meets the following conditions */
  file_uri_list?: Array<string>;
  /** file name */
  file_name_list?: Array<string>;
  Base?: base.Base;
}

export interface SearchFileResponse {
  /** document content search result */
  file_search_item_list?: Array<FileSearchItem>;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

/** Video Cloud Temporary Upload Key */
export interface SecurityToken {
  AccessKeyID: string;
  SecretAccessKey: string;
  SessionToken: string;
  ExpiredTime: string;
  CurrentTime: string;
}

export interface ShowAlbumListRequest {
  /** Permission verification, such as only querying your own album */
  req_common_params: ReqCommonBaseInfo;
  Base?: base.Base;
}

export interface ShowAlbumListResponse {
  album_name_list?: Array<string>;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface ShowAlbumRequest {
  /** Permission verification, such as only querying your own album */
  req_common_params: ReqCommonBaseInfo;
  /** First find it accurately according to AlbumID */
  album_id?: string;
  /** If AlbumID is empty, the name and desc fuzzy match */
  album_name?: string;
  /** paging query parameters */
  start?: number;
  /** paging query parameters */
  limit?: number;
  Base?: base.Base;
}

export interface ShowAlbumResponse {
  album_info?: AlbumInfo;
  photos?: Array<FileMetaInfo>;
  /** Total number of images in the album */
  album_length?: number;
  /** Details page link */
  detail_page_url?: string;
  /** List of albums created by users themselves */
  album_name_list?: Array<string>;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface SourceFileInfo {
  /** source file URI */
  file_uri?: string;
  /** URL of source file */
  file_url?: string;
  /** Source file, name */
  file_name?: string;
}

export interface SummaryFileRequest {
  req_common_params: ReqCommonBaseInfo;
  /** File URI, if passed, summarize the specified file, if not passed, summarize the first file that meets the following conditions */
  file_uri?: string;
  /** file name */
  file_name?: string;
  /** File formats: jpeg, pdf, txt, etc */
  format?: string;
  /** Upload time, ISO year-month-day */
  upload_date?: string;
  Base?: base.Base;
}

export interface SummaryFileResponse {
  /** summary content */
  summary_info?: SummaryInfo;
  /** If the specified file URI is not summarized, the return will include a list of suggested files */
  suggested_file_list?: Array<FileMetaInfo>;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface SummaryInfo {
  file_name: string;
  /** summary content */
  content: string;
}

export interface SyncResultItem {
  /** processing result status */
  Status: string;
  /** Processing Result Additional Message */
  Message: string;
  FileID: string;
  Uri: string;
}

export interface UpdateAlbumRequest {
  /** Permission verification, such as only querying your own album */
  req_common_params: ReqCommonBaseInfo;
  /** Deprecated, updated by AlbumName */
  album_id: string;
  /** When there is AlbumNmae, delete according to AlbumName */
  album_name?: string;
  /** updated content */
  new_album_name?: string;
  /** updated content */
  new_album_desc?: string;
  Base?: base.Base;
}

export interface UpdateAlbumResponse {
  /** List of albums created by users themselves */
  album_name_list?: Array<string>;
  /** LLM only perceives the field content */
  response_for_model?: string;
  /** When using it for the first time, you need to return the compliance copy. */
  compliance_statement?: string;
  base_resp: base.BaseResp;
}

export interface UpdateFileBoxUsageStatusRequest {
  req_common_params: ReqCommonBaseInfo;
  /** True means open, false means closed */
  switch_on: boolean;
  Base?: base.Base;
}

export interface UpdateFileBoxUsageStatusResponse {
  base_resp: base.BaseResp;
}

export interface UploadAuth {
  ServiceID: string;
  UploadPathPrefix: string;
  UploadHost: string;
  SecToken: SecurityToken;
}
/* eslint-enable */
