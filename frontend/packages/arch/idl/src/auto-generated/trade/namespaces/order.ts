/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';
import * as product_common from './product_common';
import * as marketplace_common from './marketplace_common';

export type Int64 = string | number;

/** Order status */
export enum OrderOp {
  Unknown = 0,
  /** Overtime closed the ticket */
  Close = 1,
}

export interface CreateChargeOrder {
  /** Coze transaction number */
  order_id?: string;
  /** checkout_url */
  pay_params?: string;
}

export interface CreateChargeOrderRequest {
  UserID?: string;
  /** Currency of payment */
  currency_code?: string;
  /** Usually sku_id. Filled when fixed denomination */
  goods_id?: string;
  /** purchase quantity */
  quantity?: number;
  /** Extra information */
  extra?: string;
  /** Coze user, pass the ConnectorIDBotStudio in the common file */
  UserType?: Int64;
  Cookie?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface CreateChargeOrderResponse {
  data?: CreateChargeOrder;
  code: number;
  message: string;
}

export interface GetTradeOrder {
  order_id?: string;
  scene?: common.Scene;
  status?: common.OrderStatus;
  order_type?: common.OrderType;
  pay_status?: common.PayStatus;
}

export interface GetTradeOrderRequest {
  order_id: string;
  /** Whether to check the payment status of the payment side in real time (applicable to when the payment callback has not been received) */
  real_time_pay_status?: boolean;
}

export interface GetTradeOrderResponse {
  data?: GetTradeOrder;
  code: number;
  message: string;
}

export interface Order {
  OrderID?: string;
  UserType?: Int64;
  UserID?: string;
  Scene?: common.Scene;
  OrderStatus?: common.OrderStatus;
  OrderType?: common.OrderType;
  TotalAmount?: Int64;
  RealAmount?: Int64;
  Currency?: string;
  BizContent?: string;
  OrderReverseStatus?: common.OrderReverseStatus;
  PayStatus?: common.PayStatus;
  CreatedAt?: Int64;
}

export interface PublicCreateChargeOrderRequest {
  /** Currency of payment */
  currency_code?: string;
  /** Usually sku_id. Filled when fixed denomination */
  goods_id?: string;
  /** purchase quantity */
  quantity?: number;
  /** Extra information */
  extra?: string;
  /** Recharge scene */
  charge_scene?: common.ChargeScene;
  Cookie?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface PublicCreateChargeOrderResponse {
  data?: CreateChargeOrder;
  code: number;
  message: string;
}

export interface PublicGetTemplatePurchaseOrderListRequest {
  /** No need to pass it on for the first time. */
  index?: string;
  /** number of pages per page */
  count?: Int64;
}

export interface PublicGetTemplatePurchaseOrderListResponse {
  code?: number;
  message?: string;
  data?: TemplatePurchaseOrderData;
}

export interface PublicPlaceOrderRequest {
  /** Usually sku_id. */
  goods_id?: string;
  /** purchase quantity */
  quantity?: number;
  /** Template PurchaseTemplate */
  scene?: common.Scene;
  /** Jump link after template purchase */
  return_url?: string;
  /** Transfer product id */
  product_id?: string;
  Cookie?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface PublicPlaceOrderResponse {
  data?: CreateChargeOrder;
  code: number;
  message: string;
}

export interface RefundOrder {
  RefundOrderID?: string;
  UserType?: Int64;
  UserID?: string;
  OrderType?: common.OrderType;
  RefundStatus?: common.RefundStatus;
  RefundAmount?: Int64;
  RefundCurrency?: string;
  BizContent?: RefundOrderBizContent;
}

export interface RefundOrderBizContent {
  /** Reason for refund */
  Reason?: string;
}

export interface TemplatePurchaseOrder {
  id?: string;
  order_id?: string;
  product_icon?: string;
  product_name?: string;
  product_desc?: string;
  order_type?: common.OrderType;
  amount?: string;
  currency?: string;
  product_type?: product_common.ProductEntityType;
  place_order_user_role?: marketplace_common.UserRole;
  /** Unit: seconds */
  purchase_timestamp?: string;
  /** Product ID */
  product_id?: string;
}

export interface TemplatePurchaseOrderData {
  order_list?: Array<TemplatePurchaseOrder>;
  /** Is there a next page? */
  has_more?: boolean;
  /** Paging ID for the next request */
  next_index?: string;
}
/* eslint-enable */
