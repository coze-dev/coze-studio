/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as product_common from './product_common';
import * as common from './common';
import * as product from './product';

export type Int64 = string | number;

export interface AdminGetSubscriptionProductDetailData {
  product_info?: SubscriptionProductDetail;
  is_hit_ppe?: boolean;
  is_activated?: boolean;
  version_code?: number;
}

export interface AdminGetSubscriptionProductDetailRequest {
  product_type: product_common.ProductEntityType;
  product_id?: string;
}

export interface AdminGetSubscriptionProductDetailResponse {
  data?: AdminGetSubscriptionProductDetailData;
  code: number;
  message: string;
}

export interface BenefitItem {
  name?: string;
  use_mode?: common.BenefitUseMode;
  /** available quota */
  quota?: number;
  /** used quota */
  used?: number;
  /** Single consumption quota */
  quota_once_cost?: number;
  icon_url?: string;
}

export interface BounsCredit {
  name?: string;
  quota?: number;
  expired_at?: string;
}

export interface CancelSubscription {
  subscribe_id?: string;
}

export interface CollaborateQuota {
  /** Number of collaborators. -1 logo Unlimited */
  collaborators_quota?: number;
  /** Number of collaborative robots. -1 logo Unlimited */
  collaborative_bots_quota?: number;
  /** Number of collaborative workflows. -1 ID Unlimited */
  collaborative_workflows_quota?: number;
}

export interface CostRule {
  type?: common.ChargeableEntityType;
  name?: string;
  items?: Array<CostRuleItem>;
  tips_link?: string;
}

export interface CostRuleItem {
  name?: string;
  icon_url?: string;
  price_list?: Array<CostRulePrice>;
}

export interface CostRulePrice {
  usage_quantity?: number;
  usage_unit?: string;
  cost_quantity?: number;
  cost_unit?: string;
}

export interface CreateSubscription {
  /** subscription number */
  subscribe_id?: string;
  /** redirect link */
  subscribe_params?: string;
}

export interface CreditDetail {
  credit_type?: common.CreditType;
  expired_at?: string;
  /** total quota */
  total_quota?: number;
  /** balance */
  remain_quota?: number;
  /** Is it in use? */
  is_in_use?: boolean;
  /** Unique to bouns */
  bouns_details?: Array<BounsCredit>;
}

export interface GetSubscriptionRecordRequest {
  subscribe_id?: string;
  /** Whether to check the payment status of the payment side in real time (applicable to when the payment callback has not been received) */
  real_time_subs_status?: boolean;
}

export interface GetSubscriptionRecordResponse {
  data?: SubscriptionRecordInfo;
  code: number;
  message: string;
}

export interface MemberVersionRights {
  /** Configure the corresponding package version */
  member_version?: common.UserLevel;
  /** configuration name */
  configuration_name?: string;
  /** configuration remarks */
  configuration_remark?: string;
  /** purchase link */
  purchase_link?: PurchaseLink;
  /** Price information */
  price_info?: PriceInfo;
  /** Equity Overview */
  right_overview?: Array<string>;
  /** list of interests */
  right_list?: Array<RightDetail>;
}

export interface PackageContent {
  content?: string;
}

export interface PackageItemDetail {
  name?: string;
  items?: Array<PackageContent>;
}

/** Price information */
export interface PriceInfo {
  /** monthly price */
  monthly_price?: number;
  /** Monthly original price */
  monthly_orgin_price?: number;
  /** annual price */
  annual_price?: number;
  /** Annual original price */
  annual_orgin_price?: number;
  /** Annual payment discount */
  annual_discount?: number;
  /** Annual monthly price */
  annual_per_month_price?: number;
  /** annual discount price difference */
  annual_discount_price?: number;
}

export interface PublicCancelSubscriptionRequest {
  subscribe_id?: string;
  /** For risk control */
  Cookie?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface PublicCancelSubscriptionResponse {
  data?: CancelSubscription;
  code: number;
  message: string;
}

export interface PublicCreateSubscriptionRequest {
  /** Usually sku_id. */
  goods_id?: string;
  /** When upgrading and downgrading, pass in the original subscription number */
  pre_subscription_id?: string;
  /** Source channel, used to jump to the corresponding channel binding page */
  channel?: string;
  /** subscription diversion entity type */
  source_type?: common.TradeSourceType;
  /** subscription diversion entity ID */
  source_id?: string;
  /** For risk control */
  Cookie?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface PublicCreateSubscriptionResponse {
  data?: CreateSubscription;
  code: number;
  message: string;
}

export interface PublicGetSpaceBenefitRequest {
  SpaceID: Int64;
  /** Return Space Owner Information Only */
  benefit_types?: Array<common.BenefitType>;
}

export interface PublicGetSpaceBenefitResponse {
  data?: SpaceBenefit;
  code: number;
  message: string;
}

export interface PublicGetSubscriptionDetailRequest {
  subscribe_type?: common.SubscriptionType;
}

export interface PublicGetSubscriptionDetailResponse {
  data?: SubscriptionDetail;
  code: number;
  message: string;
}

export interface PublicGetSubscriptionDetailV2Request {
  /** Do not pass, only return user information */
  benefit_types?: Array<common.BenefitType>;
  /** Required. This refers to Coze's AccountID. */
  coze_account_id?: string;
  /** This refers to Coze's AccountType. */
  coze_account_type?: common.CozeAccountType;
  /** Do you need to return the effect package information? */
  with_resource_package?: boolean;
}

export interface PublicGetSubscriptionDetailV2Response {
  data?: SubscriptionDetailV2;
  code: number;
  message: string;
}

export interface PublicGetSubscriptionProductDetailRequest {
  product_type?: product_common.ProductEntityType;
}

export interface PublicGetSubscriptionProductDetailResponse {
  data?: SubscriptionProductDetail;
  code: number;
  message: string;
}

export interface PublicGetSubscriptionProductDetailV2Request {
  /** This refers to Coze's AccountID. If you don't pass it on, you will return to the default package price. */
  coze_account_id?: string;
  /** This refers to Coze's AccountType. */
  coze_account_type?: common.CozeAccountType;
}

export interface PublicGetSubscriptionProductDetailV2Response {
  data?: SubscriptionProductDetailV2;
  code: number;
  message: string;
}

export interface PublicReSubscriptionRequest {
  subscribe_id?: string;
  /** For risk control */
  Cookie?: string;
  'Tt-Agw-Client-Ip'?: string;
}

export interface PublicReSubscriptionResponse {
  data?: SubscriptionDetail;
  code: number;
  message: string;
}

/** purchase link */
export interface PurchaseLink {
  /** PC-side new purchase link */
  pc_new_link?: string;
  /** App-side new purchase link */
  app_new_link?: string;
  /** The PC side is more equipped with the link. */
  pc_modify_link?: string;
  /** More matching links on the app side */
  app_modify_link?: string;
  /** PC-side annual payment new purchase link */
  pc_annual_new_link?: string;
  /** App-side annual payment new purchase link */
  app_annual_new_link?: string;
}

export interface ResourcePackage {
  /** Effect package details */
  detail?: ResourcePackageDetail;
  /** Type of effect package */
  package_type?: common.ResourcePackageType;
  /** detail */
  item?: Array<ResourcePackageDetail>;
}

export interface ResourcePackageDetail {
  package_name: string;
  package_type: common.ResourcePackageType;
  /** Start time in seconds */
  start_at?: Int64;
  /** End time in seconds */
  end_at?: Int64;
  /** total quota */
  total_quota?: number;
  /** balance */
  remain_quota?: number;
  input_quota?: Int64;
  output_quota?: Int64;
}

export interface ResourcePointRatio {
  /** Number of resource points */
  point?: Int64;
  /** The price corresponding to the number of resource points, such as 1 yuan = 1000 Points, then Point = 1000, Price = 1 */
  price?: Int64;
  /** Currencies such as USD and CNY */
  currency?: string;
  /** decimal places */
  decimal_num?: number;
}

/** Equity details */
export interface RightDetail {
  /** Equity class code */
  right_type_code?: string;
  /** Equity class name */
  right_type_name?: string;
  /** Equity class Remarks */
  right_type_remark?: string;
  /** list of interests */
  right?: Array<RightDetailItem>;
}

/** equity */
export interface RightDetailItem {
  /** Equity coding */
  right_code?: string;
  /** Equity name */
  right_name?: string;
  /** Equity Remarks */
  right_remark?: string;
  /** Exhibit Value */
  right_show_value?: Array<RightShowValue>;
  /** list of equity values */
  right_value_list?: Array<RightValue>;
}

export interface RightShowValue {
  /** Stake value type: string: character, bool: boolean */
  type?: string;
  /** name */
  value?: string;
}

/** equity value */
export interface RightValue {
  /** Encoding */
  code?: string;
  /** name */
  name?: string;
  /** value */
  value?: string;
  /** unit */
  unit?: string;
}

export interface SpaceBenefit {
  /** basic user information */
  user_basic_info?: UserBasicInfo;
  benefit_type_infos?: Partial<
    Record<common.BenefitType, common.CommonCounter>
  >;
}

export interface SubscriptionBenefitDetail {
  name?: string;
  benefit_type?: common.BenefitType;
  /** Total Message Credit */
  total_quota?: number;
  /** Total amount used */
  used_quota?: number;
  /** model */
  benefit_items?: Array<BenefitItem>;
  /** plugin */
  plugin_benefit_items?: Array<BenefitItem>;
}

export interface SubscriptionDetail {
  subscribe_id?: string;
  subscribe_type?: common.SubscriptionType;
  status?: common.SubscriptionStatus;
  sku_detail?: product.SKUInfo;
  benefit_detail?: Array<SubscriptionBenefitDetail>;
  plan?: SubscriptionPlan;
  credit_details?: Array<CreditDetail>;
  /** The following fields are only available in CN */
  cost_rules?: Array<CostRule>;
  resource_point_ratio?: ResourcePointRatio;
}

export interface SubscriptionDetailV2 {
  /** basic user information */
  user_basic_info?: UserBasicInfo;
  benefit_type_infos?: Partial<
    Record<common.BenefitType, common.CommonCounter>
  >;
  resource_packages?: Array<ResourcePackage>;
  /** Renewal Information */
  renewal_info?: SubscriptionRenewalInfo;
}

export interface SubscriptionPlan {
  active_time?: string;
  expire_time?: string;
}

export interface SubscriptionProductDetail {
  /** Subscription Product and Package (SKU) Information */
  product_info: product.ProductInfo;
  /** user subscription information */
  subs_user?: Record<Int64, SubscriptionUserInfo>;
  /** Subscription Message Credit Benefits */
  benefit_info?: Record<Int64, SubscriptionBenefitDetail>;
  /** Is there a trial? */
  has_trial?: boolean;
  /** subscription member related benefits */
  relate_benefit?: Record<Int64, SubscriptionRelateBenefit>;
  /** Package Details */
  package_item_details?: Record<Int64, Array<PackageItemDetail>>;
}

export interface SubscriptionProductDetailV2 {
  /** Membership benefits collection */
  member_version_rights?: Array<MemberVersionRights>;
}

export interface SubscriptionRecordInfo {
  subscribe_id?: string;
  subscribe_type?: common.SubscriptionType;
  /** Closed identity subscription payment failure */
  status?: common.SubscriptionStatus;
}

export interface SubscriptionRelateBenefit {
  /** cooperation quota */
  collaborate_quota?: CollaborateQuota;
}

export interface SubscriptionRenewalInfo {
  /** Renewal Type */
  renewal_type?: common.SubscriptionRenewalType;
  /** The number of cycles for a single automatic renewal, such as a monthly subscription, is a few months for each automatic renewal */
  renewal_period_times?: Int64;
}

export interface SubscriptionUserInfo {
  subs_status?: common.SubscriptionStatus;
  /** No field for Free plan */
  subscribe_id?: string;
}

export interface UserBasicInfo {
  user_level?: common.UserLevel;
  /** Volcano account info. CN Back */
  volc_account_info?: VolcAccountInfo;
  /** Volcano user information. CN Back */
  volc_user_info?: VolcUserInfo;
}

export interface VolcAccountInfo {
  /** Volcano Account ID */
  account_id?: Int64;
  /** Whether it is a Volcano Pro account, that is, whether it has been opened, true when UserLevel in (100, 110, 120, 130) (true even if the account shutdown is recycled) */
  is_volcano_pro_account?: boolean;
  /** Instance ID */
  instance_id?: string;
  /** Is the button professional version available (including package and stock professional version). Stock professional version only returns this field */
  coze_instance_status?: common.AccountStatus;
  /** Package (instance) status. Subscription-only packages return this field */
  instance_status?: common.InstanceStatus;
  /** Whether the package (instance) is limited (in arrears). Subscription-only packages return this field */
  limit_status?: common.InstanceLimitStatus;
  /** Volcano user type */
  volcano_user_type?: common.VolcanoUserType;
  /** Benefits effective time (seconds) */
  start_at?: Int64;
  /** Stake expiration time (seconds) */
  end_at?: Int64;
  /** The package corresponds to the cycle effect package instance Id, if the user purchased a version only, this field is empty */
  period_pack_instance_id?: string;
}

export interface VolcUserInfo {
  /** Volcano Identity Center Instance ID */
  volc_auth_instance_id?: string;
  /** Volcano User Level */
  volc_user_level?: common.UserLevel;
  /** Volcano User Instance Version */
  volc_instance_type?: common.VolcInstanceType;
}
/* eslint-enable */
