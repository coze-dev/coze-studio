/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as copilot_common from './copilot_common';

export type Int64 = string | number;

export enum AccountStatus {
  Available = 1,
  /** Account payment is not available */
  Unavailable = 2,
}

/** flow of equity */
export enum BenefitCostStatus {
  /** Withdrawn */
  Reverted = 0,
  /** Successful */
  Succeed = 1,
}

/** Types of Entities Affected by Benefits */
export enum BenefitEntityType {
  /** All equipment under the enterprise */
  EnterpriseAllDevices = 1,
  /** All end points under the enterprise */
  EnterpriseAllCustomConsumer = 2,
  /** single device */
  EnterpriseSingleDevice = 11,
  /** Single end point theme, customized by customer */
  EnterpriseSingleCustomConsumer = 12,
  /** API */
  API = 13,
  /** Plugin */
  Plugin = 14,
  /** Voice */
  Voice = 15,
  /** Workflow */
  Workflow = 16,
  /** Enterprise configuration class
Enterprise peace of mind configuration */
  EnterpriseConfConfidenceUsing = 51,
}

/** Equity History Type */
export enum BenefitHistoryType {
  /** bot consumption */
  ChatWithBot = 1,
  TopUpCredit = 2,
  BounsCredit = 3,
  ChargeBack = 4,
  ChargeBackReverse = 5,
  WorkflowConsume = 6,
  /** Intelligent Voice */
  IntelligentVoice = 11,
  /** Button Compass Consumption */
  Fornax = 12,
  EvaluateConsume = 41,
  EvaluateModelConsume = 42,
  /** app consumption */
  ProjectConsume = 61,
}

/** Stake flow root node type */
export enum BenefitRootHistoryType {
  /** bot consumption */
  BotConsume = 1,
  /** Workflow consumption */
  WorkflowConsume = 2,
  /** app consumption */
  ProjectConsume = 3,
  /** Intelligent Voice */
  IntelligentVoiceConsume = 4,
  /** Button Compass Consumption */
  FornaxConsume = 5,
  /** model evaluation consumption */
  EvaluateModelConsume = 6,
}

/** Equity type
 40 -59 free times
 60 - 99 limited viewership of
 100-109 resource points
 110-129 Fornax
 130-149 WorkSpace
 150-169 Operation and maintenance
 170-179 Knowledge Base
 180-199 voice
 200-219 Tenant related
 220-229 Release related */
export enum BenefitType {
  /** overseas */
  MessageCredit = 1,
  UserFreeChat = 2,
  TopUpMessageCredit = 3,
  BonusMessageCredit = 4,
  /** 40 -59 free times */
  Freetimes = 40,
  /** number of free reviews */
  EvaluateFree = 41,
  /** Workflow test runs free times */
  WorkflowTestRunFree = 42,
  /** App test runs for free */
  AppTestRunFree = 43,
  /** Plugin test run free times */
  PluginRunFree = 44,
  /** API runs for free */
  APIRunFree = 45,
  /** Number of free SDK runs */
  SDKRunFree = 46,
  /** 60 - 99 limited viewership of
The limited viewership of model RPM */
  RateLimitModelRPM = 60,
  /** Input limited viewership of TPM */
  RateLimitModelInputTPM = 61,
  /** Output TPM limited viewership of model */
  RateLimitModelOutputTPM = 62,
  /** Input limited viewership of TPM */
  RateLimitModelInputTPMBasic = 63,
  /** Output TPM limited viewership of base model */
  RateLimitModelOutputTPMBasic = 64,
  /** Plugin running limited viewership of QPS */
  PluginRunQPS = 65,
  /** The limited viewership of Plugin runtime */
  PluginRunParallel = 66,
  /** image node
Workflow limited viewership of QPS */
  WorkflowRunQPS = 67,
  /** The limited viewership of Workflow */
  WorkflowRunParallel = 68,
  /** API running QPS limited viewership of */
  APIRunQPS = 70,
  /** The limited viewership of voice QPS */
  VoiceQPS = 71,
  /** The limited viewership of speech concurrency */
  VoiceParallel = 72,
  /** 100-109 resource points
total number of resource points */
  ResourcePoint = 100,
  /** Free resource points, abandoned */
  FreeResourcePoint = 101,
  /** Resource points purchased by Volcano */
  VolcProResourcePoint = 102,
  /** periodic resource point */
  PeriodicResourcePoint = 103,
  /** channel decreasing resource point */
  ChannelResourcePoint = 104,
  /** trial resource point */
  CutAndTryResourcePoint = 109,
  /** 110-129 Fornax
Trace usage */
  TraceAmount = 111,
  /** Trace storage time */
  TraceStorageDuration = 112,
  /** 130-149 WorkSpace
Total Space */
  SpaceAmount = 131,
  /** Space capacity */
  SpacePeopleNumber = 132,
  /** Number of Collaborators in Space */
  SpaceCollaboratorNumber = 133,
  /** 150-169 Operation and maintenance
log storage duration */
  LogStorageDuration = 151,
  /** log export */
  LogExport = 152,
  /** 170-179 Knowledge Base
knowledge base capacity */
  Capacity = 170,
  /** 180-199 voice
Total number of timbre clones */
  VoiceCloneNumber = 180,
  /** Number of tone clone bases */
  VoiceCloneNumberBasic = 181,
  /** 200-219 Tenant related
maximum number of seats */
  SeatNumberLimit = 200,
  /** base number of seats */
  SeatNumberBasic = 201,
  /** Remove watermark */
  RemoveWatermark = 220,
  /** 240-269 configuration
Use with peace of mind */
  ConfidenceUsing = 240,
}

/** entitlement usage model */
export enum BenefitUseMode {
  /** Use according to quota */
  ByQuota = 1,
  /** Unlimited use */
  Unlimited = 2,
  /** Not Available */
  UnAvailable = 10,
}

export enum BotMode {
  SingleMode = 0,
  MutiAgent = 1,
  WorkflowMode = 2,
}

export enum ChargeItemType {
  /** 1-99 model related */
  ModelInputTPM = 1,
  ModelOutputTPM = 2,
  /** 100-199 voice related */
  VoiceClone = 100,
  VoiceStorage = 101,
  /** 200- */
  PluginRunQPS = 200,
  PluginRunParallel = 201,
}

export enum ChargeResourceType {
  Model = 1,
  Plugin = 2,
}

/** Validation result. Usually combined with BenefitType */
export enum CheckResultType {
  Pass = 1,
  /** exceeding the limit */
  OutOfLimitation = 2,
  /** Insufficient balance/balance */
  InsufficientBalance = 3,
}

/** checkpoint */
export enum CheckType {
  /** Validation only for equity balance */
  CheckCommon = 0,
  /** The conversation (with Chatflow) begins. */
  ChatStart = 1,
  /** The conversation (including Chatflow) is over. After the conversation is over, report the corresponding conversation result ErrCode. */
  ChatFinish = 2,
  /** Before calling the model (usually chat_engine/runtime), usually do limited viewership of */
  ModelCallBefore = 6,
  /** Model execution completed (model_agent/llm_gateway), usually reported */
  ModelExecDone = 7,
  /** Workflow execution. The pre-execution verification of workflows, usually non-conversational interfaces, such as the number of trials */
  WorkflowRunStart = 11,
  /** Workflow execution. After the workflow execution, usually a non-conversational interface */
  WorkflowRunFinish = 12,
  /** Workflow interrupt reentry */
  WorkflowRunResume = 13,
  /** Before calling the plugin, usually do limited viewership of */
  PluginCallBefore = 16,
  /** Plugin execution completed. Usually reported for plug-in usage */
  PluginExecFinish = 17,
  /** Before evaluation (Fornax evaluation multiplexing) */
  EvaluateBefore = 41,
  /** Evaluation Results Referee */
  EvaluateJudge = 42,
  /** Report at the end of voice consumption */
  VoiceUseFinish = 51,
  /** Trace log before falling into storage, used for quota */
  FornaxTraceBefore = 61,
}

/** Equity flow corresponds to the type of resource consumed */
export enum ConsumeResourceType {
  /** unknown */
  Unknown = 0,
  /** model */
  Model = 1,
  /** plugin */
  Plugin = 2,
  /** Voice (ASR/TTS) */
  Voice = 3,
  /** RTC */
  RTC = 4,
  /** Knowledge base (this type will not be exposed to the public for the time being) */
  Dateset = 5,
}

/** Cost attribution of equity flow User type */
export enum CostUserType {
  /** unknown */
  Unknown = 0,
  /** Enterprise (Domestic Huoshan Account) */
  Enterprise = 1,
  /** individual user */
  User = 2,
}

export enum CozeAccountType {
  /** unknown */
  Unknown = 0,
  /** Organization account */
  Organization = 1,
  /** personal account */
  Personal = 2,
}

/** User Benefits Package Status */
export enum CozeInstanceStaus {
  /** Running */
  Running = 1,
  /** unsubscribe */
  Unsubs = 2,
  /** due */
  Expired = 3,
  /** arrears */
  Overdue = 4,
}

export enum DurationType {
  Day = 1,
  Month = 2,
  Year = 3,
}

export enum EntityBenefitStatus {
  /** normal use */
  Valid = 1,
  /** freeze use */
  Frozen = 3,
  /** cancel */
  Cancel = 5,
  /** To take effect (this enumeration is calculated and there is no such data in the database) */
  Pending = 6,
}

export enum EntityPeriodType {
  /** Absolute time */
  AbsoluteTime = 1,
  /** relative time */
  RelativeTime = 2,
}

export enum ExecutionMode {
  /** Published/Official */
  Release = 0,
  /** Draft/Debug/Edit. */
  Draft = 1,
}

export enum InstanceLimitStatus {
  /** unrestricted */
  UnLimited = 1,
  /** Limited (in arrears) */
  Limited = 2,
}

export enum InstanceStatus {
  /** Created, it will not return to this state in theory */
  InstanceStatusCreating = 0,
  /** Running */
  Running = 1,
  /** The creation failed, and the state will not be returned in theory */
  InstanceStatusFailed = 2,
  /** unsubscribe recycling */
  UnsubsRecycled = 3,
  /** expiration shutdown */
  ExpiredClosed = 4,
  /** Recycling at maturity */
  ExpiredRecycled = 5,
  /** shutdown due */
  InstanceStatusOverdueShutdown = 6,
  /** Arrears recovery */
  InstanceStatusOverdueRecycled = 7,
  /** unsubscribe shutdown */
  InstanceStatusTerminatedShutdown = 8,
}

export enum LimitationTriggerUnit {
  Never = 0,
  Minute = 1,
  Hour = 2,
  Day = 3,
  Month = 4,
  Second = 5,
}

export enum MonetizationEntityType {
  Bot = 0,
  Project = 1,
}

/** Type of equity flow (for customers) */
export enum OpenBenefitType {
  /** unknown */
  Unknown = 0,
  /** Free gift (major categories, including the number of plug-in trials, etc. For domestic, currently only the personal free version has this type) */
  Free = 1,
  /** resource point */
  ResourcePoint = 2,
}

export enum OperateType {
  AddBenefit = 1,
  RefundSubscription = 2,
  RefundTopUp = 3,
  SubscriptionChargeBack = 4,
  TopUpChargeBack = 5,
  SubscriptionChargeBackReverse = 6,
  TopUpChargeBackReverse = 7,
}

export enum PluginBillType {
  /** Pay-per-call billing. Works with most plugins */
  ByCallTime = 0,
  /** Long-term billing (unit S). Suitable for music generation, video editing, etc */
  ByDuration = 1,
  /** Billing by token. Suitable for video generation */
  ByTotalTokens = 2,
  /** The plug-in itself is not billed, it is billed by the downstream. */
  NoneButByDownstream = 11,
}

/** Type of entity to which the resource is attributed */
export enum ResBelongsToEntityType {
  /** unknown */
  Unknown = 0,
  /** bot */
  Bot = 1,
  /** workflow */
  Workflow = 2,
  /** plugin */
  Plugin = 3,
  /** Application. Original Project */
  Application = 4,
  /** model */
  Model = 5,
  /** Speech (ASR/TTS) */
  Voice = 6,
}

export enum ResourceUsageStrategy {
  /** Unlimited */
  UnLimit = 1,
  /** restriction */
  Forbidden = 2,
  /** Pass the quota verification */
  ByQuota = 3,
}

/** scene */
export enum SceneType {
  /** dialogue */
  Chat = 1,
  /** workflow testrun */
  WorkflowTest = 2,
  /** evaluation bot */
  EvaluateBot = 41,
  /** evaluation model */
  EvaluateModel = 42,
}

export enum UserLevel {
  /** The free version. */
  Free = 0,
  /** overseas
PremiumLite */
  PremiumLite = 10,
  /** Premium */
  Premium = 15,
  PremiumPlus = 20,
  /** domestic
V1 Volcano Pro */
  V1ProInstance = 100,
  /** Personal flagship version */
  ProPersonal = 110,
  /** Team Edition */
  Team = 120,
  /** Enterprise Edition */
  Enterprise = 130,
}

export enum VoiceResType {
  /** timbre clone */
  VoiceClone = 1,
  /** Duplicate Voice - Text to Speech */
  TTSCustom = 2,
  /** System Voice - Text to Speech */
  TTSSystem = 3,
  /** Streaming automatic speech recognition - large model */
  ASRStream = 4,
  /** Recording file automatic speech recognition - large model */
  ASRFile = 5,
  /** Streaming automatic speech recognition - small model */
  ASRStreamSmall = 6,
  /** Audio file automatic speech recognition - small model */
  ASRFileSmall = 7,
  /** Voice call, audio duration */
  RTCVoice = 8,
  /** Conversational AI audio duration */
  RTCDialogAI = 9,
  /** Video call duration - 4k */
  RTCVideoCall4K = 10,
  /** Video call duration - 2k */
  RTCVideoCall2K = 11,
  /** Video call duration - 1080P */
  RTCVideoCall1080P = 12,
  /** Video call duration - 720P */
  RTCVideoCall720P = 13,
  /** Video call duration -360P */
  RTCVideoCall360P = 14,
  /** TTS related billing items [20-40]
Text to speech, charged by number of calls - small model */
  TTSSmall = 20,
  /** Speech Capability (Voiceprint) Billing Items
voiceprint ability */
  VoicePrint = 60,
}

export enum VolcanoUserType {
  Unknown = 0,
  RootUser = 1,
  BasicUser = 2,
}

export enum VolcInstanceType {
  /** Normal version */
  Normal = 1,
  /** channel version */
  Channel = 2,
}

export enum WorkflowMode {
  Unknown = 0,
  TestRun = 1,
  Released = 2,
}

export interface BenefitRecord {
  ID: string;
  IdempotencyKey: string;
  BizScene: string;
  ConsumeTime: Int64;
  CheckType: Int64;
  RecordRootID: Int64;
  AccountID: Int64;
  CozeUserID: Int64;
  EnterpriseID: string;
  CozeAccountType: Int64;
  ConnectorID: Int64;
  ConnectorUID: string;
  DeviceID: string;
  SpaceID: Int64;
  RootEntityType: Int64;
  RootEntityID: Int64;
  ChangeBalance: string;
  BalanceType: Int64;
  BizDetail?: BizDetail;
  ResourceType: Int64;
  ResourceID: string;
  ResModelContent?: ResModelContent;
  ResPluginContent?: ResPluginContent;
  ResVoiceContent?: ResVoiceContent;
  CostConnectorID: Int64;
  CostConnectorUID: string;
  CostAccountID: Int64;
  CostUserType: Int64;
  CostEnterpriseID: string;
  Status: Int64;
  CreatedAt: Int64;
  UpdatedAt: Int64;
}

export interface BizDetail {
  APIID?: Int64;
  APIOwnerID?: Int64;
  ByteTreeID?: string;
  LogID?: string;
  Caller?: string;
  Ftf?: string;
  Env?: string;
  OriPath?: string;
  OriHost?: string;
  OriConsumeTime?: Int64;
}

export interface CheckAndUpdateReq {
  /** Scene. Corresponding to BizScene, refer to  */
  biz_scene: string;
  /** checkpoint */
  check_type: CheckType;
  /** For concatenating a complete request */
  record_root_id: Int64;
  /** Execution mode (edit/publish) */
  exec_mode: ExecutionMode;
  /** User connection_id */
  connector_id: Int64;
  /** User connector_uid */
  connector_uid: string;
  /** Resource association basic information for calculating attribution of resource consumption */
  relation_basic?: ResRelationBaiscInfo;
  /** Object to which resource consumption belongs */
  belongs_to_entity?: ResBelongsToEntity;
  /** User Volcano account_id */
  account_id?: Int64;
  /** Consumption quantity (if not filled in, the default is 1 time) */
  cnt?: Int64;
  /** Dialog/end of run error code */
  err_code?: string;
  /** Resource consumptiontimestamp (in seconds) */
  consume_timestamp?: Int64;
  /** This refers to Coze UserID */
  coze_user_id?: Int64;
  /** At least one of the following three fields is required
This refers to Coze's AccountID. */
  coze_account_id?: Int64;
  /** This refers to Coze's AccountType. */
  coze_account_type?: CozeAccountType;
  /** Get this SpaceID first. If it is not filled, get it from RelationBasic. */
  space_id?: Int64;
  /** Detailed resource consumption
Required when reporting resource usage. Guaranteed idempotent (to ensure that resource consumption can be reentered), should be unique in each resource tier */
  uuid?: string;
  /** model resource */
  model_res_info?: ModeleResInfo;
  /** plugin resources */
  plugin_res_info?: PluginResInfo;
  /** voice resource */
  voice_res_info?: VoiceResInfo;
  /** extended field */
  extra?: Record<string, string>;
  Base?: base.Base;
}

export interface CheckAndUpdateResp {
  IsPass: boolean;
  /** user information */
  UserInfo?: UserBasicInfo;
  /** Details of equity verification results */
  BenefitResult?: Partial<Record<BenefitType, CheckResultType>>;
  DenyReason?: DenyReason;
  /** extended field */
  extra?: Record<string, string>;
  BaseResp?: base.BaseResp;
}

export interface CommonCheckAndUpdateReq {
  /** checkpoint */
  CheckType: CheckType;
  /** Guaranteed idempotent */
  UUID: string;
  /** scene */
  Scene: SceneType;
  ConnectionID: Int64;
  ConnectorUID: string;
  /** number of interests */
  Cnt?: Int64;
  SpaceID?: Int64;
  ModelID?: number;
  /** Invoked bot id */
  BotID?: Int64;
  /** Invoked workflow id */
  WorkflowID?: Int64;
  /** ID of the invoked plugin */
  PluginID?: Int64;
  /** Enter number of tokens */
  InputTokens?: Int64;
  /** Number of output tokens */
  OutputTokens?: Int64;
  /** Query End Error Code */
  ErrCode?: number;
  Base?: base.Base;
}

export interface CommonCheckAndUpdateResp {
  IsPass: boolean;
  /** Details of equity verification results */
  BenefitResult?: Partial<Record<BenefitType, CheckResultType>>;
  /** Used to concatenate a complete request, if the return value is not ", the caller puts the value in ctx.COZE_RECORD_ROOT_ID */
  RootID?: string;
  BaseResp?: base.BaseResp;
}

export interface CommonCounter {
  /** When Strategy == ByQuota, it indicates the amount used, and returns 0 if there is no relevant usage data for the equity. */
  used?: number;
  /** When Strategy == ByQuota, the usage limit is indicated */
  total?: number;
  /** usage policy */
  strategy?: ResourceUsageStrategy;
  /** Start time in seconds */
  start_at?: Int64;
  /** Expiration time, in seconds */
  end_at?: Int64;
}

export interface DenyReason {
  Code: number;
  Message: string;
}

/** model resource */
export interface ModeleResInfo {
  model_id?: Int64;
  /** model family */
  model_family?: copilot_common.ModelFamily;
  /** Enter number of tokens */
  input_tokens?: Int64;
  /** Number of output tokens */
  output_tokens?: Int64;
  /** Model AK Category */
  ak_catalog?: string;
  /** Model AK */
  model_ak?: string;
}

export interface PluginRelationInfo {
  /** Billing type */
  bill_type?: PluginBillType;
  /** Plugin function name. This field needs to be valued only if there are multiple billing options in a plugin */
  feature_name?: string;
}

export interface PluginResInfo {
  plugin_id?: Int64;
  plugin_api_id?: Int64;
  /** Is it an image stream? */
  is_image_flow?: boolean;
  /** Tool ID */
  tool_id?: Int64;
  /** tool name */
  tool_name?: string;
  /** plugin related information */
  relation_info?: PluginRelationInfo;
  /** Plugin execution time (in seconds). If the default exists, this value will be taken first. Suitable for plugins billed by execution time */
  duration?: Int64;
  /** Output the number of tokens. If it exists by default, this value will be taken first. Suitable for plugins that charge by the number of tokens */
  total_tokens?: Int64;
}

export interface PublicUserBasicInfo {
  user_level?: UserLevel;
  /** Volcano account info. CN Back */
  volc_account_info?: VolcAccountInfo;
}

/** The object to which the resource consumption belongs. If there is one, fill it to avoid repeated acquisition. */
export interface ResBelongsToEntity {
  /** outermost root bot id */
  root_bot_id?: Int64;
  /** Root bot created by Coze UserID */
  bot_creator_id?: Int64;
  /** Creator of the root bot AccountID */
  bot_creator_account_id?: Int64;
  /** Application (Original Project) ID */
  application_id?: Int64;
  /** Application (formerly Project) created by Coze UserID */
  application_creator_id?: Int64;
  /** Application (formerly Project) Creator AccountID */
  application_account_id?: Int64;
  /** Executed workflow id */
  workflow_id?: Int64;
  /** Is it executed asynchronously? */
  is_async_workflow?: boolean;
  /** Workflow execution ID */
  workflow_execute_id?: Int64;
  /** Is it an interrupt to reexecute Workflow? */
  is_reload_workflow?: boolean;
}

export interface ResModelContent {
  ModelID?: Int64;
  ModelFamily?: copilot_common.ModelFamily;
  ModelMetaID?: Int64;
  ModelInputTokens?: Int64;
  ModelOutputTokens?: Int64;
  AKCatalog?: string;
  LLMScene?: string;
  APICatalog?: string;
  ModelAK?: string;
}

/** Resource consumption general message body, the message body needs to include this structure when resource reporting. It is recommended to use the CheckAndUpdateReq structure first, and add this structure if a custom structure is defined. */
export interface ResMsgComm {
  /** Scene. Corresponding to BizScene, refer to  */
  biz_scene: string;
  /** Validation/Reporting Point */
  check_type: CheckType;
  /** For concatenating a complete request */
  record_root_id: Int64;
  /** Execution mode (edit/publish) */
  exec_mode: ExecutionMode;
  /** User connection_id */
  connector_id: Int64;
  /** User connector_uid */
  connector_uid: string;
  /** Guaranteed idempotence (ensuring that resource consumption is reentrant), should be unique across resource layers */
  uuid: string;
  /** Object to which resource consumption belongs */
  belongs_to_entity?: ResBelongsToEntity;
  /** Resource association basic information for calculating attribution of resource consumption */
  relation_basic?: ResRelationBaiscInfo;
  /** User Volcano account_id */
  account_id?: Int64;
  /** Resource consumptiontimestamp (in seconds) */
  consume_timestamp?: Int64;
  /** This refers to Coze UserID */
  coze_user_id?: Int64;
  /** At least one of the following three fields is required
This refers to Coze's AccountID. */
  coze_account_id?: Int64;
  /** This refers to Coze's AccountType. */
  coze_account_type?: CozeAccountType;
  /** Get this SpaceID first. If it is not filled, get it from RelationBasic. */
  space_id?: Int64;
  /** extended field */
  extra?: Record<string, string>;
}

export interface ResPluginContent {
  PluginID?: Int64;
  PluginAPIID?: Int64;
  IsImageFlow?: boolean;
}

/** Resource association basic information, used to calculate the attribution of resource consumption. If there is one, fill it to avoid repeated acquisition. */
export interface ResRelationBaiscInfo {
  /** Own space ID */
  space_id?: Int64;
  /** Space created by Coze UserID */
  space_owner_id?: Int64;
  /** Owned space creator AccountID */
  space_owner_account_id?: Int64;
  /** API source Required. Coze UserID corresponding to APIKey Owner */
  api_key_owner_id?: Int64;
  /** AccountID of APIKey Owner */
  api_key_owner_account_id?: Int64;
  /** The creator of the calling bot Coze UserID */
  bind_coze_uid?: Int64;
  /** The creator AccountID of the calling bot */
  bind_coze_account_id?: Int64;
  /** ByteTreeID, creator of the calling bot */
  byte_tree_id?: string;
}

export interface ResVoiceContent {
  VoiceResType?: VoiceResType;
  VoiceID?: string;
  CharNum?: number;
  AudioLength?: number;
  RTCDuration?: number;
  BeginTime?: Int64;
  EndTime?: Int64;
}

export interface UserBasicInfo {
  UserLevel?: UserLevel;
  /** Volcano account info. CN Back */
  VolcAccountInfo?: VolcAccountInfo;
  /** Volcano user information. CN Back */
  VolcUserInfo?: VolcUserInfo;
}

export interface VoiceResInfo {
  /** resource type */
  voice_type: VoiceResType;
  /** Speech to text, number of characters */
  char_num?: number;
  /** audio duration */
  audio_length?: number;
  /** call duration */
  rtc_duration?: number;
  /** Voice call start timestamp */
  begin_time?: Int64;
  /** Voice call end timestamp */
  end_time?: Int64;
  /** Corresponding coze_id */
  coze_id?: string;
  /** Counting, suitable for billing by number of calls */
  count?: number;
}

export interface VolcAccountInfo {
  /** Volcano Account ID */
  account_id?: Int64;
  /** Whether it is a Volcano Pro account, that is, whether it has been opened, true when UserLevel in (100, 110, 120, 130) (true even if the account shutdown is recycled) */
  is_volcano_pro_account?: boolean;
  /** Instance ID */
  instance_id?: string;
  /** Is the button professional version available (including package and stock professional version). Stock professional version only returns this field */
  coze_instance_status?: AccountStatus;
  /** Package (instance) status. Subscription-only packages return this field */
  instance_status?: InstanceStatus;
  /** Whether the package (instance) is limited (in arrears). Subscription-only packages return this field */
  limit_status?: InstanceLimitStatus;
  /** Volcano user type */
  volcano_user_type?: VolcanoUserType;
  /** Benefits effective time (seconds) */
  instance_begin_time?: Int64;
  /** Stake expiration time (seconds) */
  instance_end_time?: Int64;
  /** The package corresponds to the cycle effect package instance Id, if the user purchased a version only, this field is empty */
  period_pack_instance_id?: string;
}

export interface VolcUserInfo {
  /** Volcano Identity Center Instance ID */
  VolcAuthInstanceID?: string;
  /** The package level opened by Volcano */
  VolcUserLevel?: UserLevel;
  /** Volcano User Instance Version */
  VolcInstanceType?: VolcInstanceType;
}
/* eslint-enable */
