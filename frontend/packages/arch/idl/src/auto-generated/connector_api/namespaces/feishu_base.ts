/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum InputComponentType {
  /** Text text box, Figure 4 control */
  Text = 1,
  /** Radio, Figure 4 control */
  SingleSelect = 2,
  /** Multi-select, Figure 4 control */
  MultiSelect = 3,
  /** Field selector, Figure 4 control */
  FieldSelector = 4,
}

export enum OutputSubComponentType {
  /** No child components */
  None = 0,
  /** The output type is object */
  Object = 1,
}

/** Base is the English name of Bitable. So Bitable is FeishuBase. */
export interface FeishuBaseConfig {
  /** Markdown, corresponding to "#configure multidimensional Feishu table\ nput your..." */
  description: string;
  /** Mapping of all types of id to info */
  output_type_list: Array<OutputTypeInfo>;
  output_type: number;
  /** Markdown, corresponding to i next to "shortcut output type" */
  output_desc?: string;
  output_sub_component: OutputSubComponent;
  input_config: Array<InputConfig>;
  /** Markdown, corresponding to i next to "Configure Bitable Field" */
  input_desc?: string;
  input_type_list: Array<InputTypeInfo>;
  /** Output type When object is selected, object value is a list of optional types */
  object_value_type_list: Array<OutputTypeInfo>;
  /** Improve the listing information,  */
  to_complete_info?: ToCompleteInfo;
}

export interface GetFeishuBaseConfigRequest {
  bot_id: string;
}

export interface GetFeishuBaseConfigResponse {
  config?: FeishuBaseConfig;
  code: number;
  msg?: string;
}

export interface InputComponent {
  type: InputComponentType;
  /** Type == Text Only */
  max_char?: number;
  /** Type in [SingleSelect, MultiSelect] */
  choice?: Array<string>;
  /** Type == FieldSelector */
  supported_type?: Array<number>;
}

export interface InputConfig {
  field: string;
  title: string;
  placeholder?: string;
  input_component: InputComponent;
  required?: boolean;
  /** Markdown, corresponding to i next to user_query */
  desc?: string;
  /** It is invalid. It will only appear when it needs to be reconfigured. */
  invalid?: boolean;
}

export interface InputTypeInfo {
  id: number;
  name: string;
}

export interface OutputSubComponent {
  type: OutputSubComponentType;
  /** Only Type == object will have */
  item_list?: Array<OutputSubComponentItem>;
  /** Eg: i to the right of the structured output configuration */
  struct_output_desc?: string;
  /** Structured output, description of the id column */
  struct_id_desc?: string;
  /** Structured output, main attribute description */
  struct_primary_desc?: string;
}

export interface OutputSubComponentItem {
  key: string;
  /** FeishuBaseConfig. OutputType */
  output_type: number;
  /** Primary attribute, marking the attribute as the primary attribute for sorting. */
  is_primary?: boolean;
  /** Mark this property as the basis for filtering and grouping Object fields. */
  is_group_by_key?: boolean;
}

export interface OutputTypeInfo {
  /** If it will increase, it will not become enum. */
  id: number;
  /** Name, such as "text", "object", etc */
  name: string;
  /** Markdown, corresponding to Figure 3 "Need to be in Persona..." */
  tips?: string;
}

export interface ToCompleteInfo {
  /** Perfect the address for filling in the information */
  url: string;
  /** Is it filled in? */
  completed: boolean;
}

export interface UpdateFeishuBaseCompleteStatusRequest {
  bot_id: string;
}

export interface UpdateFeishuBaseCompleteStatusResponse {
  code: number;
  msg?: string;
}
/* eslint-enable */
