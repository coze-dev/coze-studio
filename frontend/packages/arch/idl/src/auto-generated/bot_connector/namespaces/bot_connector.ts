/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as bot_common from './bot_common';

export type Int64 = string | number;

/** =================================== message interface starts ===================================== */
export enum ChatMode {
  Normal = 0,
  Group = 1,
}

/** The type of transmission allowed by the context */
export enum ContextMode {
  Chat = 0,
  FunctionCall_1 = 1,
  FunctionCall_2 = 2,
  FunctionCall_3 = 3,
}

export enum FileType {
  file = 1,
  image = 2,
}

export enum LoadDirection {
  Unknown = 0,
  Prev = 1,
  Next = 2,
}

export enum MessageSource {
  /** normal chat message */
  Chat = 0,
  /** timed task */
  TaskManualTrigger = 1,
  /** notify */
  Notice = 2,
  /** asynchronous result */
  AsyncResult = 3,
}

export enum MetaType {
  /** Compatible value */
  Default_0 = 0,
  /** End-to-side direct replacement */
  Replaceable = 1,
  /** insert reference */
  Insertable = 2,
  /** document citation */
  DocumentRef = 3,
  /** Knowledge base reference card, new this time */
  KnowledgeCard = 4,
  /** The embedded multimedia information is only used by Alice for the end. Because full link multiplexing uses this field, it has been changed here. */
  EmbeddedMultimedia = 100,
}

export enum RoleType {
  user = 1,
  assistant = 2,
}

export enum SuggestReplyMode {
  System = 0,
  Custom = 1,
  Disable = 2,
  /** (Agent) Configuration using the source bot */
  OriBot = 3,
}

export interface BotInfo {
  /** bot id */
  Id: Int64;
  /** bot name */
  Name?: string;
  /** Bot description */
  Description?: string;
  /** bot avatar */
  Icon?: string;
  /** prompt */
  PromptInfo?: PromptInfo;
  /** model configuration */
  ModelInfo?: ModelInfo;
  /** List of plugins */
  PluginList?: Array<PluginInfo>;
  /** Opener configuration */
  OnboardingInfo?: OnboardingInfo;
  /** Workflow List */
  WorkFlowList?: Array<WorkFlowInfo>;
  /** Suggested configuration */
  SuggestReplyInfo?: SuggestReplyInfo;
  CreateTime?: Int64;
  UpdateTime?: Int64;
}

export interface BotUserConversation {
  BotID?: Int64;
  UserID?: string;
  SessionName?: string;
  ConnectorID?: Int64;
  ConversationID?: Int64;
  AccountID?: Int64;
  CreatorID?: string;
}

export interface CancelChatApiRequest {
  chat_id: string;
  conversation_id: string;
  Base?: base.Base;
}

export interface CancelChatApiResponse {
  data?: bot_common.ChatV3ChatDetail;
  BaseResp?: base.BaseResp;
}

export interface ChatMessage {
  role?: string;
  type?: string;
  content?: string;
  content_type?: string;
  msg_id?: string;
  content_time?: Int64;
  message_id?: Int64;
  reply_id?: Int64;
  section_id?: Int64;
  status?: string;
  ext?: string;
  broken_position?: number;
  display_content?: string;
  bot_id?: Int64;
  user_id?: string;
  exclude_context?: boolean;
  message_index?: Int64;
  source?: MessageSource;
  meta_infos?: Array<MetaInfo>;
  query_snap?: string;
  card_status?: Record<string, string>;
  reasoning_content?: string;
}

export interface ClearConversationApiRequest {
  conversation_id: string;
  Base?: base.Base;
}

export interface ClearConversationApiResponse {
  /** Error code */
  code?: Int64;
  /** error message */
  msg?: string;
  /** Section information */
  data?: Section;
  BaseResp?: base.BaseResp;
}

export interface ConversationData {
  id?: string;
  created_at?: Int64;
  meta_data?: Record<string, string>;
  creator_d?: string;
  connector_id?: string;
  last_section_id?: string;
  account_id?: Int64;
}

export interface CreateConversationApiRequest {
  meta_data?: Record<string, string>;
  /** Verify up to 16 */
  messages?: Array<EnterMessage>;
  bot_id?: string;
  connector_id?: string;
  app_id?: string;
  conversation_name?: string;
  get_or_create?: boolean;
  draft_mode?: boolean;
  workflow_id?: string;
  Base?: base.Base;
}

export interface CreateConversationApiResponse {
  data?: ConversationData;
  BaseResp: base.BaseResp;
}

export interface CreateMessageApiRequest {
  conversation_id: Int64;
  /** TODO field tied */
  role: string;
  /** content */
  content?: string;
  meta_data?: Record<string, string>;
  content_type?: string;
  Base?: base.Base;
}

export interface CreateMessageApiResponse {
  data?: OpenMessageApi;
  BaseResp: base.BaseResp;
}

export interface DatasetData {
  Name?: string;
  ID?: string;
}

/** dataset */
export interface DatasetInfo {
  Dataset?: Array<DatasetData>;
  TopK?: number;
  MinScore?: number;
  Auto?: boolean;
}

export interface DeleteMessageApiRequest {
  message_id: string;
  conversation_id: string;
  Base?: base.Base;
}

export interface DeleteMessageApiResponse {
  data?: OpenMessageApi;
  BaseResp?: base.BaseResp;
}

/** Bulk delete messages */
export interface DeleteMessageBody {
  MessageId: Int64;
  ConversationId: Int64;
}

export interface DraftMessageIdInfo {
  PushUuid?: string;
  Id?: string;
}

export interface EnterMessage {
  role: string;
  /** content */
  content?: string;
  meta_data?: Record<string, string>;
  /** text/card/object_string */
  content_type?: string;
  type?: string;
}

export interface IdempotentInfo {
  source: MessageSource;
  BatchId: string;
  UniqueId: string;
}

export interface ListChatMessageApiRequest {
  /** Session ID of the connector layer */
  conversation_id: string;
  /** Run ID */
  chat_id: string;
  Base?: base.Base;
}

export interface ListChatMessageApiResponse {
  data?: Array<bot_common.ChatV3MessageDetail>;
  BaseResp?: base.BaseResp;
}

export interface ListConversationData {
  conversations?: Array<ConversationData>;
  has_more?: boolean;
}

export interface ListConversationsApiRequest {
  page_num?: Int64;
  page_size?: Int64;
  /** Optional values: ASC, DESC */
  sort_order?: string;
  /** Optional value: created_at creation time */
  sort_field?: string;
  bot_id: string;
  connector_id?: string;
  Base?: base.Base;
}

export interface ListConversationsApiResponse {
  /** Error code */
  code?: Int64;
  /** error message */
  msg?: string;
  data?: ListConversationData;
  BaseResp?: base.BaseResp;
}

export interface ListMessageApiRequest {
  /** Session ID of the connector layer */
  conversation_id: Int64;
  /** Limit of articles per page TODO limit of 50 articles */
  limit?: Int64;
  /** Query order desc reverse order asc positive order TODO default reverse order */
  order?: string;
  /** Run ID */
  chat_id?: string;
  /** Preorder message cursor ID TODO str */
  before_id?: string;
  /** Post-order message cursor ID TODO str */
  after_id?: string;
  Base?: base.Base;
}

export interface ListMessageApiResponse {
  data?: Array<OpenMessageApi>;
  has_more?: boolean;
  first_id?: string;
  last_id?: string;
  BaseResp: base.BaseResp;
}

export interface ListMessageQueryOption {
  NeedMessageContext?: boolean;
}

export interface Message {
  /** user or assistant */
  Role: string;
  /** the content of the message */
  Content: string;
  ConversationId: Int64;
  /** customer meta data */
  CustomerData?: Record<string, string>;
  /** creation time */
  CreateTime?: Int64;
}

export interface MetaInfo {
  type?: MetaType;
  info?: string;
}

export interface ModelInfo {
  ModelType?: Int64;
  Temperature?: number;
  MaxTokens?: number;
  TopP?: number;
  FrequencyPenalty?: number;
  PresencePenalty?: number;
  ShortMemoryPolicy?: ShortMemoryPolicy;
}

export interface ModifyMessageApiRequest {
  conversation_id: Int64;
  message_id: Int64;
  meta_data?: Record<string, string>;
  /** content */
  content?: string;
  content_type?: string;
  Base?: base.Base;
}

export interface ModifyMessageApiResponse {
  message?: OpenMessageApi;
  BaseResp: base.BaseResp;
}

export interface MultiData {
  Url: string;
  Name?: string;
  /** File/picture/audio etc */
  Type: FileType;
}

export interface OnboardingInfo {
  /** opening statement */
  Prologue?: string;
  /** suggestion question */
  SuggestedQuestions?: Array<string>;
}

export interface OpenMessage {
  /** primary key ID */
  Id?: Int64;
  /** bot id */
  BotId?: Int64;
  Role?: RoleType;
  /** content */
  Content?: string;
  /** conversation id */
  ConversationId?: Int64;
  CustomerData?: Record<string, string>;
  /** creation time */
  CreatedAt?: Int64;
  /** update time */
  UpdatedAt?: Int64;
  /** multimodal data */
  MultiData?: Array<MultiData>;
  ChatId?: string;
  ContentType?: number;
  CustomerDataApi?: Record<string, string>;
  Type?: number;
  SectionID?: Int64;
  ReasoningContent?: string;
}

export interface OpenMessageApi {
  /** primary key ID */
  id?: string;
  /** Bot id//TODO All i64 plus annotation str, imported parameters and exported parameters are required */str, imported parameters and exported parameters must be */
  bot_id?: string;
  role?: string;
  /** content */
  content?: string;
  /** conversation id */
  conversation_id?: string;
  meta_data?: Record<string, string>;
  /** creation time */
  created_at?: Int64;
  /** Update time//The TODO time has been changed to int. */s been changed to int */
  updated_at?: Int64;
  chat_id?: string;
  content_type?: string;
  type?: string;
  section_id?: string;
  reasoning_content?: string;
}

export interface PlaygroundOriginMessage {
  Query: PoMessage;
  AnswerList: Array<PoMessage>;
  ContextList: Array<PoMessage>;
  SuggestList: Array<PoMessage>;
}

export interface PluginIdInfo {
  PluginId: Int64;
  ApiId?: Int64;
}

export interface PluginIdList {
  IdList?: Array<PluginIdInfo>;
}

export interface PluginInfo {
  PluginIdInfo: PluginIdInfo;
}

export interface PoMessage {
  ContentType: number;
  Content: string;
  Ext: string;
  DraftMessageIdInfo: DraftMessageIdInfo;
}

export interface PromptInfo {
  /** Text prompt */
  Prompt?: string;
}

export interface RetrieveChatOpenRequest {
  conversation_id: string;
  chat_id: string;
  Base?: base.Base;
}

export interface RetrieveChatOpenResponse {
  data?: bot_common.ChatV3ChatDetail;
  /** 11: optional RequiredAction RequiredAction (api.body = "required_action") */
  BaseResp?: base.BaseResp;
}

export interface RetrieveConversationApiRequest {
  conversation_id: Int64;
  Base?: base.Base;
}

export interface RetrieveConversationApiResponse {
  data?: ConversationData;
  BaseResp: base.BaseResp;
}

export interface RetrieveMessageApiRequest {
  conversation_id: Int64;
  message_id: Int64;
  Base?: base.Base;
}

export interface RetrieveMessageApiResponse {
  data?: OpenMessageApi;
  BaseResp: base.BaseResp;
}

export interface Section {
  id?: string;
  conversation_id?: string;
}

export interface ShortMemoryPolicy {
  ContextMode?: ContextMode;
  HistoryRound?: number;
}

/** suggest */
export interface SuggestReplyInfo {
  SuggestReplyMode?: SuggestReplyMode;
}

export interface WorkFlowIdList {
  IdList?: Array<Int64>;
}

export interface WorkFlowInfo {
  WorkFlowId: Int64;
}
/* eslint-enable */
