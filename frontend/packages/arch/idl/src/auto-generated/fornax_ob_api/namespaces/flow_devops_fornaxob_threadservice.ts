/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_fornaxob_common from './flow_devops_fornaxob_common';
import * as flow_devops_fornaxob_fieldfilterv2 from './flow_devops_fornaxob_fieldfilterv2';
import * as query from './query';

export type Int64 = string | number;

export interface GetThreadMetaRequest {
  /** space id */
  space_id: string;
  thread_id: string;
  /** ms */
  start_time?: string;
  /** ms, end_at >= start_at */
  end_time?: string;
  /** Platform type, if left blank, the default is fornax. */
  platform_type?: flow_devops_fornaxob_common.PlatformType;
  target_env?: flow_devops_fornaxob_common.EnvType;
  transferred?: boolean;
  'x-boe-env'?: string;
}

export interface GetThreadMetaResponse {
  data: ThreadMeta;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface GetThreadRequest {
  /** space id */
  space_id: string;
  thread_id: string;
  /** ms */
  start_time?: string;
  /** ms, end_at >= start_at */
  end_time?: string;
  /** default 20 max 200 */
  limit?: number;
  order_type?: flow_devops_fornaxob_common.OrderType;
  /** The page token is generated after the first query and passed in the subsequent queries
         to determine the starting point for the next page of results. */
  page_token?: string;
  /** Platform type, if left blank, the default is fornax. */
  platform_type?: flow_devops_fornaxob_common.PlatformType;
  target_env?: flow_devops_fornaxob_common.EnvType;
  transferred?: boolean;
  'x-boe-env'?: string;
}

export interface GetThreadResponse {
  data: Thread;
  /** The paging token on the next page, which is returned when the front end pulls the data on the next page. */
  next_page_token?: string;
  /** Is there any more data? */
  has_more?: boolean;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface GetThreadsConfigData {
  /** field meta information */
  field_metas: Record<string, ThreadFieldMeta>;
}

export interface GetThreadsConfigRequest {
  /** space id */
  space_id: string;
  /** Platform type, if left blank, the default is fornax. */
  platform_type?: flow_devops_fornaxob_common.PlatformType;
}

export interface GetThreadsConfigResponse {
  data?: GetThreadsConfigData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface ListThreadsRequest {
  /** space id */
  space_id: string;
  /** ms */
  start_time?: string;
  /** ms, end_at >= start_at */
  end_time?: string;
  filters?: flow_devops_fornaxob_fieldfilterv2.Filters;
  /** Full-Text search full-text search, will search the input and output fields */
  full_text_search?: string;
  /** default 20 max 200 */
  limit?: number;
  /** The page token is generated after the first query and passed in the subsequent queries
     to determine the starting point for the next page of results. */
  page_token?: string;
  /** Platform type, if left blank, the default is fornax. */
  platform_type?: flow_devops_fornaxob_common.PlatformType;
  target_env?: flow_devops_fornaxob_common.EnvType;
  /** Backend interface forwarding flag, non-service or agw use, the same field of other interfaces has the same effect */
  transferred?: boolean;
  /** Specify the swimlane when accessing the boe data, for non-business use, and the same field of other interfaces has the same effect */
  'x-boe-env'?: string;
}

export interface ListThreadsResponse {
  /** Only Thread dimension information is returned here, not Query dimension information. */
  threads?: Array<Thread>;
  /** The paging token on the next page, which is returned when the front end pulls the data on the next page. */
  next_page_token?: string;
  /** Is there any more data? */
  has_more?: boolean;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface Thread {
  queries?: Array<query.Query>;
  /** First query start time */
  start_time_min?: Int64;
  /** Last query start time */
  start_time_max?: Int64;
  /** total time spent */
  duration_sum?: Int64;
  /** Total token */
  tokens_sum?: Int64;
  /** The output of the last query */
  last_message?: string;
  /** Total number of queries */
  query_count?: Int64;
  /** session meta-information */
  thread_meta?: ThreadMeta;
  /** Aggregated conversation_id */
  conversation_id?: string;
  /** Aggregated thread_id */
  thread_id?: string;
  /** initialization message */
  init_message?: string;
  /** Last query input */
  last_input?: string;
  /** End time of the last query */
  end_time_max?: Int64;
}

/** After migrating the field in trace to the same structure as here, you need to drop FilterTypesV2. */
export interface ThreadFieldMeta {
  /** field type */
  value_type: flow_devops_fornaxob_common.ValueType;
  /** Supported operation types */
  filter_types: Array<flow_devops_fornaxob_fieldfilterv2.FieldFilterType>;
  /** Supported options */
  field_options?: flow_devops_fornaxob_fieldfilterv2.FieldOptions;
  /** Support custom filling in */
  support_customizable_option?: boolean;
  /** Supported operation types v2 */
  filter_types_v2?: Array<flow_devops_fornaxob_fieldfilterv2.FieldFilterType>;
}

export interface ThreadMeta {
  user_id?: string;
  /** Device ID */
  device_id?: string;
  /** device platform */
  device_platform?: string;
  /** channel */
  channel?: string;
  /** Channel ID */
  connector_id?: string;
}
/* eslint-enable */
