/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum BotEnvType {
  BotEnvType_DEBUG = 0,
  BotEnvType_RELEASE = 1,
}

export enum ContentType {
  ContentType_TEXT = 0,
  ContentType_IMAGE = 1,
  ContentType_VIDEO = 2,
  ContentType_AUDIO = 3,
  ContentType_FILE = 4,
  ContentType_CARD = 5,
}

export enum StatusType {
  StatusType_SUCCESS = 0,
  StatusType_FAIL = 1,
}

export enum TagType {
  TagType_STRING = 0,
  TagType_DOUBLE = 1,
  TagType_BOOL = 2,
  TagType_LONG = 3,
  TagType_BYTES = 4,
}

export interface Content {
  /** Query type, enumeration: text, image, video, audio, file, card */
  content_type?: ContentType;
  content?: ContentInfo;
}

export interface ContentInfo {
  /** User input text, audio to text, card information */
  text?: string;
  /** Image URL */
  img_url?: string;
  /** File URLs, files, videos, etc. are all stored in the form of file URLs */
  file_url?: string;
}

export interface FeedBackInfo {}

export interface IntensionInfo {}

export interface LLMInfo {
  input_tokens?: number;
  output_tokens?: number;
  total_tokens?: number;
}

/** service cluster meta-information */
export interface MetaInfo {
  psm?: string;
  cluster?: string;
  dc?: string;
  env?: string;
  pod_name?: string;
  stage?: string;
  region?: string;
}

export interface OutputInfo {
  /** Query type, enumeration: text, image, video, audio, file, card */
  messages?: Array<Content>;
}

export interface Query {
  query_id?: string;
  biz_type?: string;
  biz_sub_type?: string;
  biz_id?: string;
  trace_id?: string;
  log_id?: string;
  thread_id?: string;
  conversation_id?: string;
  start_time?: Int64;
  duration?: Int64;
  input?: Array<Content>;
  output?: Array<OutputInfo>;
  /** Query state, calculated based on the span state of the entire query */
  status?: StatusType;
  /** user-related information */
  user_info?: UserInfo;
  /** Safety-related information such as desensitization */
  security_info?: SecurityInfo;
  /** Query source related information */
  source_info?: SourceInfo;
  /** LLM related information */
  llm_info?: LLMInfo;
  /** User feedback related information */
  feedback_info?: FeedBackInfo;
  /** Intent to identify relevant information */
  intension_info?: IntensionInfo;
  meta_info?: MetaInfo;
  tags?: Record<string, Tag>;
  query_type?: Array<ContentType>;
  start_time_first_resp?: Int64;
  latency_first_resp?: Int64;
  message_id?: string;
}

export interface SecurityInfo {
  /** Is it desensitized? */
  is_desensitized: boolean;
  /** Desensitized input */
  desensitized_input?: Array<Content>;
  /** Desensitized output */
  desensitized_output?: Array<OutputInfo>;
}

export interface SourceInfo {
  bot_id?: string;
  /** bot version */
  bot_version?: string;
  /** Bot owner space ID */
  bot_space_id?: string;
  /** Bot Access Channel ID */
  connector_id?: string;
  /** channel */
  channel?: string;
  /** dialogue scene */
  DialogScene?: string;
  /** Bot development/formal environment */
  BotEnv?: BotEnvType;
  /** bot name */
  BotName?: string;
}

export interface Tag {
  key: string;
  tag_type: TagType;
  v_str?: string;
  v_double?: number;
  v_bool?: boolean;
  v_long?: Int64;
  v_bytes?: Array<number>;
}

export interface UserInfo {
  user_id?: string;
  /** Device ID */
  device_id?: string;
  /** device platform */
  device_platform?: string;
}
/* eslint-enable */
