/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum AggregationType {
  /** time aggregation type */
  Minute = 1,
  Hour = 2,
  Day = 3,
  Week = 4,
}

export enum AppType {
  /** Do not distinguish between application types */
  All = 0,
  PSM = 1,
  CozeBot = 2,
  PTaaS = 3,
  Model = 4,
  FornaxSaas = 5,
  FornaxPrompt = 6,
}

/** Indicator option type */
export enum IndicatorOptionType {
  Undefined = 0,
  /** Model unique identifier */
  ModelIdentification = 1,
  /** prompt key */
  PromptKey = 2,
}

export enum InsightIndicatorType {
  /** Types of indicators, continuously replenished */
  InsightIndicatorsToken = 1,
  InsightIndicatorsInputToken = 2,
  InsightIndicatorsOutputToken = 3,
  InsightIndicatorsUserCount = 4,
  InsightIndicatorsTraceCount = 5,
  InsightIndicatorsMessageCount = 6,
  InsightIndicatorsQPS = 7,
  InsightIndicatorsQPSSuccess = 8,
  InsightIndicatorsQPSFail = 9,
  InsightIndicatorsSpanCount = 10,
  InsightIndicatorsRootDurationP50 = 11,
  InsightIndicatorsRootDurationP90 = 12,
  InsightIndicatorsRootDurationP99 = 13,
  InsightIndicatorsRootDurationAvg = 14,
  InsightIndicatorsRootDurationMax = 15,
  InsightIndicatorsRootDurationMin = 16,
  InsightIndicatorsLLMDurationP50 = 17,
  InsightIndicatorsLLMDurationP90 = 18,
  InsightIndicatorsLLMDurationP99 = 19,
  InsightIndicatorsLLMDurationAvg = 20,
  InsightIndicatorsLLMDurationMax = 21,
  InsightIndicatorsLLMDurationMin = 22,
  InsightIndicatorsLatencyFirstRespP50 = 23,
  InsightIndicatorsLatencyFirstRespP90 = 24,
  InsightIndicatorsLatencyFirstRespP99 = 25,
  InsightIndicatorsLatencyFirstRespAvg = 26,
  InsightIndicatorsLatencyFirstRespMax = 27,
  InsightIndicatorsLatencyFirstRespMin = 28,
  InsightIndicatorsSuccessRate = 29,
  InsightIndicatorsModelQPS = 30,
  InsightIndicatorsModelQPSSuccess = 31,
  InsightIndicatorsModelQPSFail = 32,
  InsightIndicatorsModelSuccessRate = 33,
  InsightIndicatorsModelTokenRateP50 = 34,
  InsightIndicatorsModelTokenRateP90 = 35,
  InsightIndicatorsModelTokenRateP99 = 36,
  InsightIndicatorsModelTokenRateAvg = 37,
  InsightIndicatorsModelTokenRateMax = 38,
  InsightIndicatorsModelTokenRateMin = 39,
  InsightIndicatorsPromptHubToken = 40,
  InsightIndicatorsPromptHubInputToken = 41,
  InsightIndicatorsPromptHubOutputToken = 42,
  InsightIndicatorsModelCount = 43,
}

export enum OverviewIndicatorType {
  /** Overview of indicator types, continuously updated */
  OverviewIndicatorsUsegeCount = 1,
  OverviewIndicatorsModelErrorRate = 2,
  OverviewIndicatorsErrorRate = 3,
  OverviewIndicatorsModelDurationAvg = 4,
  OverviewIndicatorsModelToken = 5,
}

export interface GetIndicatorOptionsRequest {
  /** Options that need to be returned, such as model_identification */
  options: Array<IndicatorOptionType>;
  /** The following conditions are related to or
fornax space id */
  space_id: string;
}

export interface GetIndicatorOptionsResponse {
  /** Indicator options, classification of map [option] options */
  indicator_options: Partial<Record<IndicatorOptionType, Array<string>>>;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface Indicator {
  /** Indicator points, used to display line charts, discarded */
  indicator_points: Array<IndicatorPoint>;
  /** Index cumulative value, total */
  totals: string;
  /** Indicator points for multiple observation objects, used to display line graphs in multiple rows */
  multi_obs_objs_indicator_points?: Record<string, Array<IndicatorPoint>>;
}

export interface IndicatorPoint {
  /** indicator name */
  indicator_type: InsightIndicatorType;
  /** The value of the indicator, integer or decimal */
  indicator_value: string;
  /** Indicator timestamp, milliseconds */
  timestamp?: string;
}

export interface InsightIndicatorFilter {
  /** Application Type */
  app_type: AppType;
  /** psm list */
  psm?: Array<string>;
  /** Coze bot id list */
  coze_bot_id?: Array<string>;
  /** Prompt key + version list, empty version means no filtering version */
  prompt_key_version?: Array<PromptKeyVersion>;
  /** Is it evaluation traffic, false: is not evaluation traffic, true: is evaluation traffic, do not fill in: does not distinguish evaluation traffic */
  is_evaluation?: boolean;
  /** Model unique identifier, list, from QueryIndicatorOptions interface */
  model_identification?: Array<string>;
}

export interface ObsObjMeta {
  /** Display name, such as bot_id corresponding display name is bot_name, prompt and psm display name is yourself */
  show_name?: string;
}

export interface OverviewIndicator {
  /** Overview indicator name */
  overview_indicator_type: OverviewIndicatorType;
  /** Overview the value of the indicator, integer or decimal */
  overview_indicator_value?: string;
  /** The value, total or decimal, of the previous cycle's overview indicator */
  overview_indicator_last_value?: string;
}

export interface PromptKeyVersion {
  prompt_key: string;
  prompt_version?: Array<string>;
}

export interface QueryInsightIndicatorByOptionRequest {
  /** fornax space id */
  space_id: string;
  /** indicator type */
  indicator_type: InsightIndicatorType;
  /** Start time, 0:00 on the day. timestamp, milliseconds */
  start_time: Int64;
  /** End time, 23:59 on the day. timestamp, milliseconds */
  end_time: Int64;
  /** Options that need to be returned, such as prompt_key */
  options: IndicatorOptionType;
  /** Aggregation type, defaults to days */
  aggregation_type?: AggregationType;
  /** Application Type */
  app_type: AppType;
}

export interface QueryInsightIndicatorByOptionResponse {
  /** Metrics for multiple observation objects */
  indicator_options_with_value?: Record<string, string>;
  /** Index cumulative value, total */
  totals: string;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface QueryInsightIndicatorsRequest {
  /** fornax space id */
  space_id: string;
  /** indicator type */
  indicator_type: Array<InsightIndicatorType>;
  /** Start time, 0:00 on the day. timestamp, milliseconds */
  start_time: Int64;
  /** End time, 23:59 on the day. timestamp, milliseconds */
  end_time: Int64;
  /** conditional filtering */
  filter?: InsightIndicatorFilter;
  /** Aggregation type, defaults to days */
  aggregation_type?: AggregationType;
  /** Overview Metric Types */
  overview_indicator_type?: Array<OverviewIndicatorType>;
}

export interface QueryInsightIndicatorsResponse {
  /** indicator result */
  indicators: Partial<Record<InsightIndicatorType, Indicator>>;
  /** Observing object meta information, key corresponds to MultiObsObjsIndicatorPoints key */
  obs_objs_metas?: Record<string, ObsObjMeta>;
  /** Overview indicator results */
  overview_indicators?: Partial<
    Record<OverviewIndicatorType, OverviewIndicator>
  >;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}
/* eslint-enable */
