/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as metrics from './metrics';
import * as flow_devops_fornaxob_common from './flow_devops_fornaxob_common';

export type Int64 = string | number;

/** Types of operations views */
export enum MetricsType {
  Unknown = 1,
  /** Number of queries received per second, reflecting query load */
  GraphQueryQPS = 2,
  /** Query success rate, reflecting stability under current load */
  GraphQuerySuccessRate = 3,
  /** The delay from receiving the query to returning the first token reflects the response speed perceived by the query party */
  GraphFirstTokenLatency = 4,
  /** The time delay from receiving the query to returning all tokens reflects the overall performance of */
  GraphQueryLatency = 5,
  /** The number of calls to the large model per second, reflecting the call load of the large model */
  ModelQueryQPS = 6,
  /** The call success rate of the large model reflects the stability of the large model under the current load */
  ModelQuerySuccessRate = 7,
  /** The response duration of the large model reflects the overall performance of the large model */
  ModelQueryLatency = 8,
  /** The delay from receiving the query to returning the first token reflects the perceived response speed */
  ModelFirstTokenLatency = 9,
  /** The number of tokens returned per second by the large model */
  ModelTokensCount = 10,
}

export interface Curve {
  tag_kvs: Record<string, string>;
  points: Array<Point>;
}

export interface GetMetricsData {
  curves: Array<Curve>;
  /** downsampling interval */
  interval: metrics.DownsampleInterval;
}

export interface GetMetricsRequest {
  space_id: string;
  /** s */
  start_time: string;
  /** s, end_at >= start_at */
  end_time: string;
  metrics_type: MetricsType;
  aggregate_type?: metrics.AggregateType;
  /** tag */
  tag_kvs?: Record<string, Array<string>>;
  /** Filters (filters other than client_name) */
  filters?: Record<string, Array<string>>;
  top_k?: number;
  /** client_name will be used to compose metrics_name, so it is not placed in tags/fileters, but passed separately */
  client_names?: Array<string>;
  target_env?: flow_devops_fornaxob_common.EnvType;
  transferred?: boolean;
  'x-boe-env'?: string;
}

export interface GetMetricsResponse {
  data: GetMetricsData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface GetTagsOptionsData {
  /** psm: graph_list */
  clients: Record<string, Array<TagValueGraph>>;
  /** list of model names */
  models: Array<string>;
}

export interface GetTagsOptionsRequest {
  space_id: string;
  /** s */
  start_time: string;
  /** s, end_at >= start_at */
  end_time: string;
  target_env?: flow_devops_fornaxob_common.EnvType;
  transferred?: boolean;
  /** abandoned */
  client_names?: Array<string>;
  client_name?: string;
  app_id?: string;
  'x-boe-env'?: string;
}

export interface GetTagsOptionsResponse {
  data: GetTagsOptionsData;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  code?: number;
  /** Only for http requests; internal RPC is not used, unified access to Code and Msg through BaseResp */
  msg?: string;
}

export interface Point {
  x: Int64;
  x_alias: string;
  y: number;
}

export interface TagValueGraph {
  id: Int64;
  name: string;
}
/* eslint-enable */
