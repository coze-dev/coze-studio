/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum APIDebugStatus {
  DebugWaiting = 0,
  DebugPassed = 1,
}

export enum APIListOrderBy {
  CreateTime = 1,
}

export enum APIMethod {
  GET = 1,
  POST = 2,
  PUT = 3,
  DELETE = 4,
  PATCH = 5,
}

/** Subdivision types for File type parameters */
export enum AssistParameterType {
  DEFAULT = 1,
  IMAGE = 2,
  DOC = 3,
  CODE = 4,
  PPT = 5,
  TXT = 6,
  EXCEL = 7,
  AUDIO = 8,
  ZIP = 9,
  VIDEO = 10,
  /** voice */
  VOICE = 12,
}

export enum AsyncTaskExecuteStatus {
  /** unknown state */
  Unknown = 0,
  /** in progress */
  Executing = 1,
  /** successful execution */
  ExecuteSucceed = 2,
  /** execution failed */
  ExecuteFailed = 3,
}

/** enum OauthAuthSubType {
     Standard = 0
}
enum AuthorizationSubyType {
     Service_ApiKey = 0
     Service_BytedanceZeroTrust   = 1,
     Service_OIDC = 2,
     Oauth_Standard = 3,
} */
export enum AuthorizationServiceLocation {
  Header = 1,
  Query = 2,
}

export enum AuthorizationType {
  None = 0,
  Service = 1,
  OAuth = 3,
}

export enum CardAuditStatus {
  /** The review failed (see details for the reasons). */
  Rejected = -1,
  /** approved */
  Approved = 1,
  /** pending review */
  Pending = 100,
}

export enum CardBizType {
  Plugin = 1,
  Workflow = 2,
}

export enum CardBusinessType {
  Plugin = 1,
  WorkFlow = 2,
}

export enum CardCategory {
  Official = 1,
  Custom = 2,
}

export enum CardDisplayType {
  /** foundation */
  Basic = 1,
  /** vertical list */
  List = 2,
  /** custom card */
  Custom = 3,
  /** horizontal list */
  Slide = 4,
}

export enum CardStatus {
  Draft = 0,
  Published = 1,
  UnPublish = 2,
}

export enum CreationMethod {
  COZE = 0,
  IDE = 1,
}

export enum DebugExampleStatus {
  Default = 0,
  Enable = 1,
  Disable = 2,
}

export enum DebugOperation {
  /** Debugging, the debugging state will be saved, and the return value will be checked. */
  Debug = 1,
  /** Parse only the return value structure */
  Parse = 2,
}

/** Default imported parameter settings source */
export enum DefaultParamSource {
  /** default user input */
  Input = 0,
  /** reference variable */
  Variable = 1,
}

export enum FeedbackType {
  Unknown = 0,
  /** The required plugin was not found */
  NotFoundPlugin = 1,
  /** Official plugin feedback */
  OfficialPlugin = 2,
}

export enum FieldType {
  Object = 1,
  String = 2,
  Integer = 3,
  Bool = 4,
  Array = 5,
  Number = 6,
}

export enum GrantType {
  TokenExchange = 1,
  ClientCredential = 2,
}

export enum InstallStatus {
  USING = 1,
  REMOVE = 2,
  OFFLINE = 3,
  /** Inquiry is not passed on, for display */
  NOTINSTALL = 4,
}

/** authorization status */
export enum OAuthStatus {
  Authorized = 1,
  Unauthorized = 2,
}

export enum OnlineStatus {
  OFFLINE = 0,
  ONLINE = 1,
}

export enum OrderBy {
  CreateTime = 0,
  UpdateTime = 1,
  PublishTime = 2,
  Hot = 3,
}

export enum ParameterLocation {
  Path = 1,
  Query = 2,
  Body = 3,
  Header = 4,
}

export enum ParameterType {
  String = 1,
  Integer = 2,
  Number = 3,
  Object = 4,
  Array = 5,
  Bool = 6,
}

export enum PluginCardStatus {
  Latest = 1,
  /** The main card version has been upgraded. */
  NeedUpdate = 2,
  /** Plugin tool exported parameters do not match */
  ParamMisMatch = 3,
}

export enum PluginCurrentInfoItemType {
  source_code = 1,
  input_params = 2,
  openapi = 3,
}

export enum PluginDataFormat {
  OpenAPI = 1,
  Curl = 2,
  Postman = 3,
  Swagger = 4,
}

export enum PluginListPluginType {
  /** No workflow */
  ExceptWorkflow = 0,
  Workflow = 1,
  API = 2,
  /** In-team plugins only */
  SpaceAPI = 3,
}

/** plugin enumeration value */
export enum PluginParamTypeFormat {
  FileUrl = 0,
  ImageUrl = 1,
  DocUrl = 2,
  CodeUrl = 3,
  PptUrl = 4,
  TxtUrl = 5,
  ExcelUrl = 6,
  AudioUrl = 7,
  ZipUrl = 8,
  VideoUrl = 9,
}

export enum PluginPricingCalculationType {
  /** by number of times */
  ByTimes = 1,
  /** By base unit (e.g. token) */
  ByUnit = 2,
  /** Unlimited */
  Unlimited = 3,
}

export enum PluginPricingStrategy {
  /** free */
  Free = 0,
  /** dosage system */
  Quantity = 1,
  /** subscription system */
  Subscribe = 2,
}

export enum PluginProductStatus {
  Default = 0,
  Listed = 1,
  Unlisted = 2,
  Reviewing = 3,
}

export enum PluginReferrerScene {
  SingleAgent = 0,
  WorkflowLlmNode = 1,
}

export enum PluginStatus {
  /** default value */
  Draft = 0,
  SUBMITTED = 1,
  REVIEWING = 2,
  PREPARED = 3,
  PUBLISHED = 4,
  OFFLINE = 5,
  /** disable */
  BANNED = 6,
}

export enum PluginToolAuthType {
  /** strong authorization */
  Required = 0,
  /** semi-anonymous authorization */
  Supported = 1,
  /** not authorized */
  Disable = 2,
}

export enum PluginType {
  PLUGIN = 1,
  APP = 2,
  FUNC = 3,
  WORKFLOW = 4,
  IMAGEFLOW = 5,
  LOCAL = 6,
}

export enum PluginTypeForFilter {
  /** Includes PLUGIN and APP. */
  CloudPlugin = 1,
  /** Include LOCAL */
  LocalPlugin = 2,
  /** Includes WORKFLOW and IMAGEFLOW */
  WorkflowPlugin = 3,
}

export enum PricingCurrencyType {
  /** Type of currency quoted */
  USD = 0,
  CNY = 1,
}

/** Begin plugin billing information */
export enum PricingInterval {
  /** Time period of pricing */
  Second = 1,
  Minute = 2,
  Hour = 3,
  Day = 4,
  Month = 5,
  Year = 6,
}

export enum ProductDraftStatus {
  Default = 0,
  /** Under review. */
  Pending = 1,
  /** approved */
  Approved = 2,
  /** The review failed. */
  Rejected = 3,
  /** moderation is deprecated */
  Abandoned = 4,
}

export enum ProductStatus {
  NeverListed = 0,
  Listed = 1,
  Unlisted = 2,
  Banned = 3,
}

export enum ProductUnlistType {
  ByAdmin = 1,
  ByUser = 2,
}

export enum ProgramLang {
  Curl = 1,
  Wget = 2,
  NodeJS = 3,
  Python = 4,
  Golang = 5,
}

export enum QueryCardStatus {
  Published = 1,
  UnPublish = 2,
}

export enum RunMode {
  DefaultToSync = 0,
  Sync = 1,
  Async = 2,
  Streaming = 3,
}

export enum ScopeType {
  /** all */
  All = 0,
  /** himself */
  Self = 1,
}

export enum ServiceAuthSubType {
  ApiKey = 0,
  BytedanceZeroTrust = 1,
  OIDC = 2,
}

export enum SpaceRoleType {
  /** default */
  Default = 0,
  /** owner */
  Owner = 1,
  /** administrator */
  Admin = 2,
  /** ordinary member */
  Member = 3,
}

export enum TriggerEventType {
  /** Timed trigger */
  Time = 1,
  /** event trigger */
  Webhook = 2,
}

export enum TriggerExecStatus {
  /** Not implemented */
  Default = 0,
  /** successful execution */
  Succeed = 1,
  /** execution failed */
  Failed = 2,
}

export enum TriggerTaskType {
  /** preset task */
  PresetTask = 1,
  /** user task */
  UserTask = 2,
}

export enum WorkflowResponseMode {
  /** model summary */
  UseLLM = 0,
  /** Do not use model summaries */
  SkipLLM = 1,
}

export interface AgentTaskExecInfo {
  /** task id */
  task_id?: string;
  /** Trigger ID */
  serial_id?: string;
  /** task type */
  task_type?: TriggerTaskType;
  /** event type */
  event_type?: TriggerEventType;
  /** Agent version */
  bot_version?: string;
  /** User ID, only user triggers have */
  trigger_user_id?: string;
  /** channel */
  connector_id?: string;
  /** The execution result is true as success */
  exec_status?: TriggerExecStatus;
  /** Next run time, second timestamp */
  next_exec_duration?: number;
  /** Effective status, true is effective */
  valid_status?: boolean;
  /** configuration */
  config?: string;
}

export interface AgentTaskInfo {
  /** task id */
  id?: string;
  /** task name */
  task_name?: string;
  /** task type */
  task_type?: TriggerTaskType;
  /** Task trigger type */
  event_type?: TriggerEventType;
  /** task configuration */
  config?: string;
  /** Published channel, agent only supports Feishu. */
  connector_ids?: Array<string>;
  /** channel */
  connector_id?: string;
  /** The execution result is true as success */
  exec_status?: TriggerExecStatus;
  /** Next run time, second timestamp */
  next_exec_duration?: number;
  /** Effective status, true is effective */
  valid_status?: boolean;
  /** Agent version */
  bot_version?: string;
  /** User ID, only user triggers have */
  trigger_user_id?: string;
}

export interface APIExtend {
  /** Tool dimension authorization type */
  auth_mode?: PluginToolAuthType;
}

export interface APIInfo {
  plugin_id?: string;
  api_id?: string;
  plugin_version?: string;
  api_name?: string;
}

export interface APIListOrder {
  order_by?: APIListOrderBy;
  desc?: boolean;
}

export interface APIParameter {
  /** For the front end, no practical significance */
  id?: string;
  name?: string;
  desc?: string;
  type?: ParameterType;
  sub_type?: ParameterType;
  location?: ParameterLocation;
  is_required?: boolean;
  sub_parameters?: Array<APIParameter>;
  global_default?: string;
  global_disable?: boolean;
  local_default?: string;
  local_disable?: boolean;
  /** Default imported parameter settings source */
  default_param_source?: DefaultParamSource;
  /** Reference variable key */
  variable_ref?: string;
  assist_type?: AssistParameterType;
}

export interface APIStruct {
  name?: string;
  type?: FieldType;
  children?: Array<APIStruct>;
}

export interface AsyncConfig {
  /** Plugin id or workflow id */
  plugin_id?: string;
  /** Plugin tool name */
  api_name?: string;
  /** switch state */
  switch_status?: boolean;
  /** Prompt message when the asynchronous plug-in is running, maximum 1000 characters */
  message?: string;
}

export interface AsyncPluginTask {
  /** task id */
  task_id?: string;
  /** task name */
  task_name?: string;
  /** Task Type, Plugins | Workflow | Image Flow */
  task_type?: PluginType;
  /** user questions */
  query_msg?: string;
  /** task status */
  task_status?: AsyncTaskExecuteStatus;
  /** creation time */
  create_time?: Int64;
  /** Plugin avatar url */
  plugin_icon?: string;
}

export interface BindCardsStatusData {
  bind_cards?: Array<SignleBindCardStatus>;
  publish_time?: string;
}

export interface CardBindInfo {
  card_id?: string;
  mapping_rule?: string;
  max_display_rows?: Int64;
  card_version_num?: string;
  llm_text_card?: boolean;
  category?: CardCategory;
}

export interface CardBusinessInfo {
  biz_type: CardBusinessType;
  business_id: string;
  unique_id: string;
}

export interface CheckAndLockPluginEditData {
  /** Is it occupied? */
  Occupied?: boolean;
  /** If it is already occupied, return the user ID. */
  user?: Creator;
  /** Was it successful? */
  Seized?: boolean;
}

export interface CodeInfo {
  /** json */
  plugin_desc?: string;
  /** yaml */
  openapi_desc?: string;
  client_id?: string;
  client_secret?: string;
  service_token?: string;
}

export interface commonParamSchema {
  name?: string;
  value?: string;
}

export interface CozeCardInfo {
  card_id?: string;
  draft_card_id?: string;
  name?: string;
  creator_id?: string;
  card_category?: CardCategory;
  card_display_type?: CardDisplayType;
  version_num?: string;
  version_name?: string;
  description?: string;
  update_time?: string;
  creator?: Creator;
  basic_card_id?: string;
  list_card_id?: string;
  properties?: string;
  properties_hash?: string;
  thumbnail?: string;
  card_status?: CardStatus;
  publish_time?: string;
  audit_status?: CardAuditStatus;
  audit_failure_details?: Array<number>;
}

export interface CreateCardData {
  card_id?: string;
  draft_card_id?: string;
}

export interface Creator {
  id?: string;
  name?: string;
  avatar_url?: string;
  /** Did you create it yourself? */
  self?: boolean;
  space_roly_type?: SpaceRoleType;
  /** user name */
  user_unique_name?: string;
  /** user tag */
  user_label?: UserLabel;
}

/** -- Depends on the card entity -- */
export interface DebugExample {
  req_example?: string;
  resp_example?: string;
}

export interface DuplicateAPIInfo {
  method?: string;
  path?: string;
  count?: Int64;
}

export interface GetPlaygroundPluginListData {
  plugin_list?: Array<PluginInfoForPlayground>;
  total?: number;
}

export interface GetPluginCardsData {
  plugin_cards?: Array<PluginCards>;
}

export interface GetPluginChangelogData {
  total?: Int64;
  change_log_list?: Array<PluginChangelogRecord>;
}

export interface GetPluginListData {
  plugin_infos?: Array<PluginInfo>;
  total?: Int64;
  page?: number;
  size?: number;
}

export interface GetUserAuthorityData {
  can_edit?: boolean;
  can_read?: boolean;
  can_delete?: boolean;
  can_debug?: boolean;
  can_publish?: boolean;
  can_read_changelog?: boolean;
}

export interface GetWorkflowMessageNodesData {
  id?: string;
  plugin_id?: string;
  name?: string;
  message_nodes?: Array<NodeInfo>;
}

export interface NodeInfo {
  node_id?: string;
  node_type?: string;
  node_title?: string;
}

export interface PluginApi {
  /** operationId */
  name?: string;
  /** summary */
  desc?: string;
  parameters?: Array<PluginParameter>;
  plugin_id?: string;
  plugin_name?: string;
  /** The serial number is the same as the playground */
  api_id?: string;
  record_id?: string;
  /** Card binding information, nil if not bound. */
  card_binding_info?: PresetCardBindingInfo;
  /** Debug API example */
  debug_example?: DebugExample;
  function_name?: string;
  /** operating mode */
  run_mode?: RunMode;
}

export interface PluginAPIInfo {
  plugin_id?: string;
  api_id?: string;
  name?: string;
  desc?: string;
  path?: string;
  method?: APIMethod;
  request_params?: Array<APIParameter>;
  response_params?: Array<APIParameter>;
  create_time?: string;
  debug_status?: APIDebugStatus;
  disabled?: boolean;
  statistic_data?: PluginStatisticData;
  /** IDE Creation plugin shows the online status of the tool */
  online_status?: OnlineStatus;
  api_extend?: APIExtend;
  /** Card binding information, nil if not bound. */
  card_binding_info?: PresetCardBindingInfo;
  /** Debugging example */
  debug_example?: DebugExample;
  /** Debug sample state */
  debug_example_status?: DebugExampleStatus;
  function_name?: string;
}

export interface PluginCardResp {
  type_for_model?: string;
  return_direct?: string;
  card_type?: string;
  template_url?: string;
  template_id?: string;
  template_h5_url?: string;
  template_h5?: TemplateH5UrlObj;
  gravity?: string;
  response_for_model?: string;
  content_type?: string;
  code?: string;
  data?: string;
  response_type?: string;
  setting_response?: string;
  dsl_content?: string;
  /** Card Data - Model Summary Schema
0-Not set, online original logic
1-The default large model is summarized in combination with the tailoring content
2- Online original logic */
  card_summary_mode?: string;
  /** Structured data displayed in cards */
  info_in_card?: string;
}

export interface PluginCards {
  card_id?: string;
  plugin_id?: string;
  api_name?: string;
  status?: PluginCardStatus;
}

export interface PluginChangelogRecord {
  changelog_id?: string;
  create_time?: string;
  creator?: Creator;
  operation?: string;
}

export interface PluginCurrentInfoItemInfo {
  item_id?: string;
  /** 1. source_code type 2. input type 3. api yaml type */
  item_type?: PluginCurrentInfoItemType;
  content?: string;
}

export interface PluginIcon {
  uri?: string;
  url?: string;
}

export interface PluginInfo {
  id?: string;
  /** name_for_human */
  name?: string;
  /** description_for_human */
  desc_for_human?: string;
  plugin_icon?: string;
  plugin_type?: PluginType;
  status?: PluginStatus;
  /** json */
  plugin_desc?: string;
  /** Yaml, openapi plugin does not return */
  openapi_desc?: string;
  auth?: number;
  client_id?: string;
  client_secret?: string;
  service_token?: string;
  create_time?: Int64;
  update_time?: Int64;
  ClientUrl?: string;
  Scope?: string;
  RedirectUri?: string;
  /** Returns when querying user and plug-in relationships
user installation status */
  InstallStatus?: InstallStatus;
  /** User ID, selected when the user queries the installed/uninstalled list */
  UserID?: Int64;
  WorkFlowId?: string;
  /** The name of the API included in the plugin is supported by all types of plugins */
  api_names?: Array<string>;
  /** creator information */
  creator?: Creator;
  /** release status */
  publish_status?: boolean;
  space_id?: string;
  /** plugin statistics */
  statistic_data?: PluginStatisticData;
  /** public parameter list */
  common_params?: Partial<Record<ParameterLocation, Array<commonParamSchema>>>;
  /** The plugin's product listing status */
  plugin_product_list_status?: ProductStatus;
  /** Product status of the plugin (combined status) (deprecated) */
  plugin_product_status?: PluginProductStatus;
  /** Plugin creation method */
  creation_method?: CreationMethod;
  /** Product review status of the plugin */
  plugin_product_draft_status?: ProductDraftStatus;
  /** Can the current user delete the plugin? */
  cur_user_can_del?: boolean;
}

export interface PluginInfoForPlayground {
  id?: string;
  /** name_for_human */
  name?: string;
  /** description_for_human */
  desc_for_human?: string;
  plugin_icon?: string;
  plugin_type?: PluginType;
  status?: PluginStatus;
  auth?: number;
  client_id?: string;
  client_secret?: string;
  plugin_apis?: Array<PluginApi>;
  /** plugin tag */
  tag?: Int64;
  create_time?: string;
  update_time?: string;
  /** creator information */
  creator?: Creator;
  /** Space ID */
  space_id?: string;
  /** plugin statistics */
  statistic_data?: PluginStatisticData;
  common_params?: Partial<Record<ParameterLocation, Array<commonParamSchema>>>;
  /** Product status of the plugin */
  plugin_product_status?: ProductStatus;
  /** Plugin product removal type */
  plugin_product_unlist_type?: ProductUnlistType;
  /** Material ID */
  material_id?: string;
  /** Channel ID */
  channel_id?: number;
  /** Plugin creation method */
  creation_method?: CreationMethod;
  /** Is it an official plugin? */
  is_official?: boolean;
  /** Project ID */
  project_id?: string;
  /** Version number, millisecond timestamp */
  version_ts?: string;
  /** version name */
  version_name?: string;
}

export interface PluginMetaInfo {
  name?: string;
  desc?: string;
  url?: string;
  icon?: PluginIcon;
  auth_type?: Array<AuthorizationType>;
  /** service */
  location?: AuthorizationServiceLocation;
  /** service */
  key?: string;
  /** service */
  service_token?: string;
  /** JSON serialization */
  oauth_info?: string;
  common_params?: Partial<Record<ParameterLocation, Array<commonParamSchema>>>;
  sub_auth_type?: number;
  auth_payload?: string;
  /** Is the export IP fixed? */
  fixed_export_ip?: boolean;
  /** Private network connection id */
  private_link_id?: string;
}

export interface PluginParameter {
  name?: string;
  desc?: string;
  required?: boolean;
  type?: string;
  sub_parameters?: Array<PluginParameter>;
  /** If Type is an array, there is a subtype */
  sub_type?: string;
  /** fromNodeId if the value of the imported parameter is a reference */
  from_node_id?: string;
  /** Which node's key is specifically referenced? */
  from_output?: Array<string>;
  /** If the imported parameter is the user's hand input, put it here */
  value?: string;
  /** Format parameter */
  format?: PluginParamTypeFormat;
}

export interface PluginPriceInfo {
  /** Manually filled price
price */
  Price?: string;
  /** The currency type corresponding to the price */
  CurrencyType?: PricingCurrencyType;
  /** The time period corresponding to the price */
  Interval?: PricingInterval;
  /** The number of base units consumed per call */
  UnitsForOnce?: string;
  /** The name of the base unit (e.g. token) */
  UnitName?: string;
}

export interface PluginPriceLimit {
  /** price limit
number of times limit */
  TimesLimit?: string;
  /** The time period corresponding to the number of times limit */
  TimesInterval?: PricingInterval;
  /** Limitations on basic units */
  UnitsLimit?: string;
  /** The time period corresponding to the limit of the basic unit */
  UnitsInterval?: PricingInterval;
}

export interface PluginPriceResult {
  /** Automatically calculated price per call
price */
  Price?: string;
  /** The currency type corresponding to the price */
  CurrencyType?: PricingCurrencyType;
  /** The base unit consumed per call */
  TokensForOnce?: string;
}

export interface PluginPricingRule {
  /** Null: takes effect for the entire plugin; non-empty: takes effect for a single API */
  APIName?: string;
  /** Notes on information, such as procurement plans */
  Comment?: string;
  /** call restriction */
  PriceLimit?: PluginPriceLimit;
  /** Cost of manual filling */
  PriceInfo?: PluginPriceInfo;
  /** Calculated cost per call */
  PriceResult?: PluginPriceResult;
  /** Level 1 rule, free by default */
  PricingStrategy?: PluginPricingStrategy;
  /** secondary rule */
  PricingCalculationType?: PluginPricingCalculationType;
  /** rule ID */
  RuleID?: string;
  /** 0: effective for the entire plugin; non-0: effective for individual APIs */
  APIID?: string;
  /** plugin information */
  PluginInfo?: PluginInfo;
}

/** End plug-in billing information */
export interface PluginPublishInfo {
  /** publisher */
  publisher_id?: Int64;
  /** Version, millisecond timestamp */
  version_ts?: Int64;
  /** version name */
  version_name?: string;
  /** version description */
  version_desc?: string;
}

export interface PluginStatisticData {
  /** If it is empty, it will not be displayed. */
  bot_quote?: number;
}

/** Plugin preset card binding information */
export interface PresetCardBindingInfo {
  card_id?: string;
  card_version_num?: string;
  status?: PluginCardStatus;
  /** thumbnail */
  thumbnail?: string;
}

export interface PublishedPluginListData {
  plugin_list?: Array<PluginInfoForPlayground>;
  total?: Int64;
  page?: number;
  size?: number;
}

export interface QueryCardDetailData {
  card_detail?: CozeCardInfo;
}

export interface QueryCardListData {
  card_list?: Array<CozeCardInfo>;
  total?: Int64;
}

export interface RegisterPluginData {
  plugin_id?: string;
  openapi?: string;
}

export interface ResponseStyle {
  workflow_response_mode?: WorkflowResponseMode;
}

export interface SignleBindCardStatus {
  card_id?: string;
  business_id?: string;
  unique_id?: string;
  status?: PluginCardStatus;
  business_type?: CardBusinessType;
  card_version?: string;
}

export interface TemplateH5UrlObj {
  js_url?: string;
  css_url?: string;
  json_url?: string;
}

export interface UpdatePluginData {
  res?: boolean;
  edit_version?: number;
}

export interface UpsertPluginData {
  plugin_id?: string;
}

export interface UserLabel {
  label_id?: string;
  label_name?: string;
  icon_uri?: string;
  icon_url?: string;
  jump_link?: string;
}
/* eslint-enable */
