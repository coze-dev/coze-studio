/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as plugin_develop_common from './plugin_develop_common';
import * as base from './base';
import * as card from './card';

export type Int64 = string | number;

export enum ConnectStatus {
  /** Unconnected/Disconnected */
  Disconnected = 0,
  /** Connecting (requires user volcano to accept connection) */
  Connecting = 1,
  /** Connected */
  Connected = 2,
  /** User refuses to connect/connection fails */
  ConnectFailed = 3,
}

export enum OAuthPluginSource {
  Plugin = 1,
  Workflow = 2,
  ShortcutCommand = 3,
  Task = 4,
}

export enum OperateLinkType {
  /** Delete connection */
  Delete = 1,
}

export interface BatchCreateAPIRequest {
  plugin_id?: string;
  ai_plugin?: string;
  /** Tools information exists here, in OpenAPI yaml format */
  openapi?: string;
  space_id?: string;
  dev_id?: string;
  /** False: only create non-repeating paths
True: replace only existing paths */
  replace_same_paths?: boolean;
  /** List of paths to replace */
  paths_to_replace?: Array<plugin_develop_common.PluginAPIInfo>;
  edit_version?: number;
  Base?: base.Base;
}

export interface BatchCreateAPIResponse {
  code?: Int64;
  msg?: string;
  /** PathsToReplace represents the tools to override,
If BaseResp. StatusCode = DuplicateAPIPath, then PathsToReplace is not empty */
  paths_duplicated?: Array<plugin_develop_common.PluginAPIInfo>;
  paths_created?: Array<plugin_develop_common.PluginAPIInfo>;
  edit_version?: number;
  /** BaseResp.StatusCode
DuplicateAPIPath: There is a duplicate API Path with request. ReplaceDupPath = false
InvalidParam: Other errors */
  BaseResp: base.BaseResp;
}

export interface BatchGetPluginPricingRulesRequest {
  plugin_apis?: Array<plugin_develop_common.PluginApi>;
  Base?: base.Base;
}

export interface BatchGetPluginPricingRulesResponse {
  pricing_rules?: Array<plugin_develop_common.PluginPricingRule>;
  BaseResp?: base.BaseResp;
}

export interface BindCardRequest {
  plugin_id?: string;
  api_name?: string;
  card_id?: string;
  bot_id?: string;
  mapping_rule?: string;
  max_display_rows?: string;
  card_version_num?: string;
  agent_id?: string;
  llm_text_card?: boolean;
  biz_type?: plugin_develop_common.CardBusinessType;
  business_id?: string;
  unique_id?: string;
  /** Is the preset card selected? */
  plugin_preset_card_selected?: boolean;
  Base?: base.Base;
}

export interface BindCardResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface BindPluginPresetCardRequest {
  plugin_id?: string;
  /** 2: string api_name */
  card_id?: string;
  api_id?: string;
  mapping_rule?: string;
  max_display_rows?: Int64;
  card_version_num?: string;
  llm_text_card?: boolean;
  /** Edit state version, for plugin preset cards */
  edit_version?: number;
  Base?: base.Base;
}

export interface BindPluginPresetCardResponse {
  code?: Int64;
  msg?: string;
  edit_version?: number;
  BaseResp?: base.BaseResp;
}

export interface BuildCardBodyByRespRequest {
  card_id: string;
  mapping_rule: string;
  max_display_rows: string;
  card_version: string;
  connector_id: string;
  example_resp?: string;
  Base?: base.Base;
}

export interface BuildCardBodyByRespResponse {
  code?: Int64;
  msg?: string;
  plugin_card_resp?: plugin_develop_common.PluginCardResp;
  BaseResp?: base.BaseResp;
}

export interface CheckAndLockPluginEditRequest {
  plugin_id: string;
  Base?: base.Base;
}

export interface CheckAndLockPluginEditResponse {
  code: number;
  msg: string;
  data?: plugin_develop_common.CheckAndLockPluginEditData;
  BaseResp?: base.BaseResp;
}

export interface ConfigPluginAsyncRequest {
  /** bot id */
  bot_id: string;
  /** Channel id, currently only coze channels are supported, which is "10000010". */
  connector_id: string;
  /** Plugin id, or workflow id if workflow. */
  plugin_id: string;
  /** Switch status, whether to turn on the asynchronous switch */
  switch_status: boolean;
  /** Prompt message when the asynchronous plug-in is running, maximum 1000 characters */
  message?: string;
  /** Plugin tool name */
  api_name?: string;
  /** Whether to manually configure, add and remove plugins for the user pass false */
  by_user: boolean;
  /** Current user's team id */
  space_id: string;
  Base?: base.Base;
}

export interface ConfigPluginAsyncResponse {
  BaseResp?: base.BaseResp;
}

export interface Convert2OpenAPIRequest {
  plugin_name?: string;
  plugin_url?: string;
  data: string;
  merge_same_paths?: boolean;
  space_id?: string;
  plugin_description?: string;
  Base?: base.Base;
}

export interface Convert2OpenAPIResponse {
  code?: Int64;
  msg?: string;
  openapi?: string;
  ai_plugin?: string;
  plugin_data_format?: plugin_develop_common.PluginDataFormat;
  duplicate_api_infos?: Array<plugin_develop_common.DuplicateAPIInfo>;
  /** BaseResp.StatusCode
DuplicateAPIPath: Duplicate API Path in imported file with request. MergeSamePaths = false
InvalidParam: Other errors */
  BaseResp?: base.BaseResp;
}

export interface CreateAPIRequest {
  /** Use this interface the first time you call save and continue */
  plugin_id: string;
  name: string;
  desc: string;
  path?: string;
  method?: plugin_develop_common.APIMethod;
  api_extend?: plugin_develop_common.APIExtend;
  request_params?: Array<plugin_develop_common.APIParameter>;
  response_params?: Array<plugin_develop_common.APIParameter>;
  disabled?: boolean;
  /** edit version */
  edit_version?: number;
  function_name?: string;
  Base?: base.Base;
}

export interface CreateAPIResponse {
  code?: Int64;
  msg?: string;
  api_id?: string;
  edit_version?: number;
  BaseResp?: base.BaseResp;
}

export interface CreateCardRequest {
  space_id?: string;
  card_id?: string;
  version_num?: string;
  Base?: base.Base;
}

export interface CreateCardResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.CreateCardData;
  BaseResp?: base.BaseResp;
}

export interface CreatePluginFeedbackRequest {
  plugin_id?: string;
  feedback_type?: plugin_develop_common.FeedbackType;
  feedback?: string;
  /** referer */
  Referer?: string;
  Base?: base.Base;
}

export interface CreatePluginFeedbackResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DebugAPIRequest {
  plugin_id: string;
  api_id: string;
  parameters: string;
  /** json */
  operation: plugin_develop_common.DebugOperation;
  edit_version?: number;
  Base?: base.Base;
}

export interface DebugAPIResponse {
  code?: Int64;
  msg?: string;
  response_params?: Array<plugin_develop_common.APIParameter>;
  /** This field is returned when parsing */
  success?: boolean;
  resp?: string;
  reason?: string;
  raw_resp?: string;
  raw_req?: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteAPIRequest {
  plugin_id: string;
  api_id: string;
  edit_version?: number;
  Base?: base.Base;
}

export interface DeleteAPIResponse {
  code?: Int64;
  msg?: string;
  edit_version?: number;
  BaseResp?: base.BaseResp;
}

export interface DeleteBotDefaultParamsRequest {
  bot_id?: string;
  dev_id?: string;
  plugin_id?: string;
  api_name?: string;
  /** Bot removal tool when: DeleteBot = false, APIName to set
Delete bot: DeleteBot = true, APIName is empty */
  delete_bot?: boolean;
  space_id?: string;
  plugin_referrer_id?: string;
  plugin_referrer_scene?: plugin_develop_common.PluginReferrerScene;
  workflow_id?: string;
  Base?: base.Base;
}

export interface DeleteBotDefaultParamsResponse {
  BaseResp?: base.BaseResp;
}

export interface DeleteCardRequest {
  card_id?: string;
  Base?: base.Base;
}

export interface DeleteCardResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DelPluginRequest {
  plugin_id?: string;
  Base?: base.Base;
}

export interface DelPluginResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetAgentTaskExecListRequest {
  /** agent id */
  bot_id: string;
  /** team id */
  space_id: string;
  /** Task ID */
  trigger_id: string;
  /** Channels, if you don't fill in, it means all channels. */
  connector_ids?: Array<string>;
  /** Trigger user id */
  trigger_user_id?: string;
  /** Page number, starting from 1, if not filled in, the default is 1. */
  page?: number;
  /** Page size, do not fill in the default 20 */
  size?: number;
  Base?: base.Base;
}

export interface GetAgentTaskExecListResponse {
  code?: number;
  msg?: string;
  /** Trigger list */
  task_exec_list?: Array<plugin_develop_common.AgentTaskExecInfo>;
  /** page number */
  page?: number;
  /** paging size */
  size?: number;
  /** total number of articles */
  total?: number;
  BaseResp?: base.BaseResp;
}

export interface GetAgentTaskListRequest {
  /** agent id */
  bot_id: string;
  /** team id */
  space_id: string;
  /** Trigger event type, not filled to represent all types */
  trigger_event_type?: plugin_develop_common.TriggerEventType;
  /** Channels, if you don't fill in, it means all channels. */
  connector_id?: string;
  /** Task type, if not filled in, all types */
  trigger_type?: plugin_develop_common.TriggerTaskType;
  /** Trigger name, if not filled in, it will not be filtered by name */
  trigger_name?: string;
  /** Trigger ID */
  trigger_id?: string;
  /** User trigger user id */
  trigger_user_id?: string;
  /** Page number, starting from 1, if not filled in, the default is 1. */
  page?: number;
  /** Page size, do not fill in the default 20 */
  size?: number;
  Base?: base.Base;
}

export interface GetAgentTaskListResponse {
  code?: number;
  msg?: string;
  /** Trigger list */
  task_list?: Array<plugin_develop_common.AgentTaskInfo>;
  /** page number */
  page?: number;
  /** paging size */
  size?: number;
  /** total number of articles */
  total?: number;
  BaseResp?: base.BaseResp;
}

export interface GetAPIRespStructRequest {
  plugin_id?: string;
  api_name?: string;
  space_id?: string;
  Base?: base.Base;
}

export interface GetAsyncPluginConfigRequest {
  /** bot id */
  bot_id: string;
  /** Channel id, currently only coze channels are supported, which is "10000010". */
  connector_id: string;
  /** Plugin id, or workflow id if workflow. */
  plugin_id?: string;
  /** Plugin tool name */
  api_name?: string;
  /** Current user's team id */
  space_id: string;
  Base?: base.Base;
}

export interface GetAsyncPluginConfigResponse {
  data?: plugin_develop_common.AsyncConfig;
  /** Total number of asynchronous plug-ins configured by bot */
  async_config_count?: number;
  BaseResp?: base.BaseResp;
}

export interface GetBindCardsStatusRequest {
  space_id?: string;
  bot_id?: string;
  business_list?: Array<plugin_develop_common.CardBusinessInfo>;
  agent_id?: string;
  using_master?: boolean;
  Base?: base.Base;
}

export interface GetBindCardsStatusResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.BindCardsStatusData;
  BaseResp?: base.BaseResp;
}

export interface GetBotDefaultParamsRequest {
  space_id?: string;
  bot_id?: string;
  dev_id?: string;
  plugin_id?: string;
  api_name?: string;
  plugin_referrer_id?: string;
  plugin_referrer_scene?: plugin_develop_common.PluginReferrerScene;
  plugin_is_debug?: boolean;
  workflow_id?: string;
  plugin_publish_version_ts?: string;
  Base?: base.Base;
}

export interface GetBotDefaultParamsResponse {
  code?: Int64;
  msg?: string;
  request_params?: Array<plugin_develop_common.APIParameter>;
  response_params?: Array<plugin_develop_common.APIParameter>;
  response_style?: plugin_develop_common.ResponseStyle;
  BaseResp?: base.BaseResp;
}

export interface GetCardBindRequest {
  plugin_id?: string;
  api_name?: string;
  bot_id?: string;
  agent_id?: string;
  biz_type?: plugin_develop_common.CardBusinessType;
  business_id?: string;
  unique_id?: string;
  Base?: base.Base;
}

export interface GetCardBindResponse {
  code?: Int64;
  msg?: string;
  mapping_rule?: string;
  card_id?: string;
  max_display_rows?: Int64;
  card_version_num?: string;
  category?: plugin_develop_common.CardCategory;
  llm_text_card?: boolean;
  /** Is the plug-in preset card selected? */
  plugin_preset_card_selected?: boolean;
  BaseResp?: base.BaseResp;
}

export interface GetCardRespStructRequest {
  biz_type?: plugin_develop_common.CardBizType;
  plugin_id?: string;
  unique_id?: string;
  space_id?: string;
  from_plugin_preset?: boolean;
  Base?: base.Base;
}

export interface GetCardRespStructResponse {
  code?: Int64;
  msg?: string;
  api_struct?: Array<plugin_develop_common.APIStruct>;
  BaseResp?: base.BaseResp;
}

export interface GetDevPluginListRequest {
  status?: Array<plugin_develop_common.PluginStatus>;
  page?: number;
  size?: number;
  dev_id: string;
  space_id?: string;
  scope_type?: plugin_develop_common.ScopeType;
  order_by?: plugin_develop_common.OrderBy;
  /** Release status filter: true: published, false: not published */
  publish_status?: boolean;
  /** Plugin name or tool name */
  name?: string;
  /** Plugin Type Filter, End/Cloud */
  plugin_type_for_filter?: plugin_develop_common.PluginTypeForFilter;
  project_id?: string;
  /** plugin id list */
  plugin_ids?: Array<string>;
  Base?: base.Base;
}

export interface GetDevPluginListResponse {
  code?: number;
  msg?: string;
  plugin_list?: Array<plugin_develop_common.PluginInfoForPlayground>;
  total?: string;
  baseResp?: base.BaseResp;
}

export interface GetNL2APPConfigRequest {
  Base?: base.Base;
}

export interface GetNL2APPConfigResponse {
  /** JSON format */
  config?: string;
  BaseResp?: base.BaseResp;
}

export interface GetOAuthPluginListRequest {
  entity_id: string;
  /** 'Authorization context, 0-bot, 1-project, 2-workflow' */
  context_type?: number;
  /** The version of the authorized entity, depending on context_type, may be bot_version, project_version, workflow_version */
  entity_version?: string;
  Base?: base.Base;
}

export interface GetOAuthPluginListResponse {
  oauth_plugin_list?: Array<OAuthPluginInfo>;
  BaseResp: base.BaseResp;
}

export interface GetOAuthSchemaRequest {
  Base?: base.Base;
}

export interface GetOAuthSchemaResponse {
  code?: Int64;
  msg?: string;
  oauth_schema?: string;
  ide_conf?: string;
  /** The agreed json */
  BaseResp?: base.BaseResp;
}

export interface GetOAuthStatusRequest {
  plugin_id: string;
  /** 'Authorization context, 0-bot, 1-project, 2-workflow' */
  context_type?: number;
  /** bot_id, project_id or workflow_id */
  entity_id?: string;
  /** 'Authorization type, 0-separate authorization, 1-shared authorization ' */
  auth_mode?: number;
  /** Whether it is a draft version, only the sharing license will have a draft version. */
  is_draft?: boolean;
  /** Whether to force access to authorized client_url, currently only sharing authorization scenarios need to be set to true */
  force_get_client_url?: boolean;
  Base?: base.Base;
}

export interface GetOAuthStatusResponse {
  /** Is it an authorized plugin? */
  is_oauth?: boolean;
  /** user authorization status */
  status?: plugin_develop_common.OAuthStatus;
  /** Unauthorized, return the authorized url. */
  content?: string;
  BaseResp: base.BaseResp;
}

export interface GetPlaygroundPluginListRequest {
  /** page number */
  page?: number;
  /** page size */
  size?: number;
  /** Search by API name */
  name?: string;
  /** team id */
  space_id?: string;
  /** plugin id list */
  plugin_ids?: Array<string>;
  /** plugin type filter */
  plugin_types?: Array<number>;
  /** Plugin channels, get all channels by default */
  channel_id?: number;
  /** Is it a plug-in created by yourself? */
  self_created?: boolean;
  /** sort */
  order_by?: number;
  /** Whether to get the plugin and temporary field removed from the channel and use it for the wk reference page */
  is_get_offline?: boolean;
  /** referer */
  Referer?: string;
  Base?: base.Base;
}

export interface GetPlaygroundPluginListResponse {
  code: number;
  msg: string;
  data?: plugin_develop_common.GetPlaygroundPluginListData;
  BaseResp?: base.BaseResp;
}

export interface GetPluginAPIsRequest {
  plugin_id: string;
  api_ids?: Array<string>;
  page?: number;
  size?: number;
  order?: plugin_develop_common.APIListOrder;
  preview_version_ts?: string;
  Base?: base.Base;
}

export interface GetPluginAPIsResponse {
  code?: Int64;
  msg?: string;
  api_info?: Array<plugin_develop_common.PluginAPIInfo>;
  total?: number;
  edit_version?: number;
  BaseResp?: base.BaseResp;
}

export interface GetPluginAsyncTaskListRequest {
  /** bot id */
  bot_id: string;
  /** Channel id, currently only coze channels are supported, which is "10000010". */
  connector_id: string;
  /** Current page, starting from 1 */
  page: number;
  /** page number */
  size: number;
  /** Current user's team id */
  space_id: string;
  Base?: base.Base;
}

export interface GetPluginAsyncTaskListResponse {
  /** task list */
  tasks?: Array<plugin_develop_common.AsyncPluginTask>;
  page?: number;
  size?: number;
  total?: number;
  BaseResp?: base.BaseResp;
}

export interface GetPluginCardsRequest {
  space_id?: string;
  bot_id?: string;
  plugins?: Array<plugin_develop_common.APIInfo>;
  agent_id?: string;
  using_master?: boolean;
  Base?: base.Base;
}

export interface GetPluginCardsResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.GetPluginCardsData;
  BaseResp?: base.BaseResp;
}

export interface GetPluginChangelogRequest {
  plugin_id: string;
  page: number;
  size: number;
  Base?: base.Base;
}

export interface GetPluginChangelogResponse {
  code: number;
  msg: string;
  data?: plugin_develop_common.GetPluginChangelogData;
  BaseResp?: base.BaseResp;
}

export interface GetPluginExportIPConfigRequest {
  /** space id */
  space_id: string;
  Base?: base.Base;
}

export interface GetPluginExportIPConfigResponse {
  /** Does the space support configuration? */
  is_support?: boolean;
  BaseResp?: base.BaseResp;
}

export interface GetPluginInfoRequest {
  /** Currently only plugins are supported OpenAPI plugin information */
  plugin_id: string;
  preview_version_ts?: string;
  Base?: base.Base;
}

export interface GetPluginInfoResponse {
  code?: Int64;
  msg?: string;
  meta_info?: plugin_develop_common.PluginMetaInfo;
  code_info?: plugin_develop_common.CodeInfo;
  status?: boolean;
  /** 0 No updates 1 Yes updates Not released */
  published?: boolean;
  /** Has it been published? */
  creator?: plugin_develop_common.Creator;
  /** creator information */
  statistic_data?: plugin_develop_common.PluginStatisticData;
  plugin_product_status?: plugin_develop_common.ProductStatus;
  /** Privacy Statement Status */
  privacy_status?: boolean;
  /** Privacy Statement Content */
  privacy_info?: string;
  creation_method?: plugin_develop_common.CreationMethod;
  ide_code_runtime?: string;
  /** edit version */
  edit_version?: number;
  plugin_type?: plugin_develop_common.PluginType;
  /** Product status of the plugin */
  BaseResp?: base.BaseResp;
}

export interface GetPluginListRequest {
  status?: Array<plugin_develop_common.PluginStatus>;
  page?: number;
  size?: number;
  space_id?: string;
  scope_type?: plugin_develop_common.ScopeType;
  order_by?: plugin_develop_common.OrderBy;
  /** Release status filter: true: published, false: not published */
  publish_status?: boolean;
  /** Plugin name or tool name */
  name?: string;
  plugin_type_for_filter?: plugin_develop_common.PluginTypeForFilter;
  Base?: base.Base;
}

export interface GetPluginListResponse {
  code?: Int64;
  msg?: string;
  data: plugin_develop_common.GetPluginListData;
  BaseResp?: base.BaseResp;
}

export interface GetPluginNextVersionRequest {
  plugin_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface GetPluginNextVersionResponse {
  code?: Int64;
  msg?: string;
  next_version_name?: string;
  BaseResp?: base.BaseResp;
}

export interface GetPluginPresetCardBindRequest {
  plugin_id?: string;
  /** 2: string api_name */
  api_id?: string;
  Base?: base.Base;
}

export interface GetPluginPresetCardBindResponse {
  code?: Int64;
  msg?: string;
  mapping_rule?: string;
  card_id?: string;
  max_display_rows?: Int64;
  card_version_num?: string;
  category?: plugin_develop_common.CardCategory;
  llm_text_card?: boolean;
  BaseResp?: base.BaseResp;
}

export interface GetPluginPresetCardRequest {
  plugin_id?: string;
  api_name?: string;
  Base?: base.Base;
}

export interface GetPluginPresetCardResponse {
  code?: Int64;
  msg?: string;
  /** The information of the plug-in preset binding card */
  card_bind_info?: plugin_develop_common.CardBindInfo;
  /** The information on the card itself */
  card_info?: plugin_develop_common.CozeCardInfo;
  card_meta_info?: Array<card.CardMetaInfo>;
  BaseResp?: base.BaseResp;
}

export interface GetPluginPricingRulesByWorkflowIDRequest {
  workflow_id: string;
  space_id: string;
  Base?: base.Base;
}

export interface GetPluginPricingRulesByWorkflowIDResponse {
  pricing_rules?: Array<plugin_develop_common.PluginPricingRule>;
  BaseResp?: base.BaseResp;
}

export interface GetPluginPublishHistoryRequest {
  plugin_id: string;
  space_id: string;
  /** Turn the page, what page? */
  page?: number;
  /** Flip pages, a few entries per page */
  size?: number;
  Base?: base.Base;
}

export interface GetPluginPublishHistoryResponse {
  code?: Int64;
  msg?: string;
  /** reverse time */
  plugin_publish_info_list?: Array<plugin_develop_common.PluginPublishInfo>;
  /** How many in total, greater than page x size description and next page */
  total?: number;
  BaseResp?: base.BaseResp;
}

export interface GetPrivateLinkInfoData {
  private_link?: PrivateLink;
}

export interface GetPrivateLinkInfoRequest {
  private_link_id?: string;
  Base?: base.Base;
}

export interface GetPrivateLinkInfoResponse {
  data?: GetPrivateLinkInfoData;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetPublishedPluginListRequest {
  space_id?: string;
  page?: number;
  size?: number;
  user_space_ids?: Array<string>;
  plugin_ids?: Array<string>;
  Base?: base.Base;
}

export interface GetPublishedPluginListResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.PublishedPluginListData;
  BaseResp?: base.BaseResp;
}

export interface GetQueriedOAuthPluginListRequest {
  bot_id: string;
  Base?: base.Base;
}

export interface GetQueriedOAuthPluginListResponse {
  oauth_plugin_list?: Array<OAuthPluginInfo>;
  BaseResp: base.BaseResp;
}

export interface GetUpdatedAPIsRequest {
  plugin_id: string;
  Base?: base.Base;
}

export interface GetUpdatedAPIsResponse {
  code?: Int64;
  msg?: string;
  created_api_names?: Array<string>;
  deleted_api_names?: Array<string>;
  updated_api_names?: Array<string>;
  BaseResp?: base.BaseResp;
}

export interface GetUserAuthorityRequest {
  plugin_id: string;
  creation_method: plugin_develop_common.CreationMethod;
  project_id?: string;
  Base?: base.Base;
}

export interface GetUserAuthorityResponse {
  code: number;
  msg: string;
  data?: plugin_develop_common.GetUserAuthorityData;
  BaseResp?: base.BaseResp;
}

export interface GetWorkflowMessageNodesRequest {
  /** Space ID */
  space_id?: string;
  plugin_id?: string;
  Base?: base.Base;
}

export interface GetWorkflowMessageNodesResponse {
  /** return code */
  code?: Int64;
  /** Return information */
  msg?: string;
  /** result */
  data?: plugin_develop_common.GetWorkflowMessageNodesData;
  BaseResp?: base.BaseResp;
}

export interface NoUpdatedPromptRequest {
  plugin_id: string;
  Base?: base.Base;
}

export interface NoUpdatedPromptResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface OAuthPluginInfo {
  plugin_id?: string;
  /** user authorization status */
  status?: plugin_develop_common.OAuthStatus;
  /** Plugin name */
  name?: string;
  /** plugin avatar */
  plugin_icon?: string;
  /** workflow, or bot */
  source_type?: Array<OAuthPluginSource>;
}

export interface OperatePrivateLinkRequest {
  private_link_id?: string;
  /** operation type */
  operate_type?: OperateLinkType;
  Base?: base.Base;
}

export interface OperatePrivateLinkResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface OptimizeParamPromptRequest {
  request_params?: Array<plugin_develop_common.APIParameter>;
  response_params?: Array<plugin_develop_common.APIParameter>;
  api_desc?: string;
  space_id?: string;
  plugin_id: string;
  Base?: base.Base;
}

export interface OptimizeParamPromptResponse {
  /** Optimized parameter Desc field */
  request_params?: Array<plugin_develop_common.APIParameter>;
  /** Optimized parameter Desc field */
  response_params?: Array<plugin_develop_common.APIParameter>;
  BaseResp?: base.BaseResp;
}

export interface OptimizeToolPromptRequest {
  api_desc?: string;
  space_id?: string;
  plugin_id: string;
  Base?: base.Base;
}

export interface OptimizeToolPromptResponse {
  /** Optimized description */
  api_desc?: string;
  BaseResp?: base.BaseResp;
}

export interface PluginAPI2CodeRequest {
  plugin_id: string;
  api_id: string;
  space_id: string;
  dev_id: string;
  program_lang: plugin_develop_common.ProgramLang;
  Base?: base.Base;
}

export interface PluginAPI2CodeResponse {
  code?: Int64;
  msg?: string;
  program_lang?: plugin_develop_common.ProgramLang;
  program_code?: string;
  BaseResp?: base.BaseResp;
}

export interface PrivateLink {
  /** Required when updating */
  id?: string;
  /** Name, only name updates are allowed */
  name?: string;
  /** End point node service id */
  endpoint_service_id?: string;
  /** End point service domain */
  domain?: string;
  /** Private plugin access URL */
  plugin_access_url?: string;
  enterprise_id?: string;
  /** state */
  status?: ConnectStatus;
}

export interface PrivateLinkListData {
  private_links?: Array<PrivateLink>;
}

export interface PrivateLinkListRequest {
  /** Enterprise ID */
  enterprise_id?: string;
  Base?: base.Base;
}

export interface PrivateLinkListResponse {
  data?: PrivateLinkListData;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface PublishPluginRequest {
  plugin_id: string;
  /** Privacy Statement Status */
  privacy_status?: boolean;
  /** Privacy Statement Content */
  privacy_info?: string;
  version_name?: string;
  version_desc?: string;
  Base?: base.Base;
}

export interface PublishPluginResponse {
  code?: Int64;
  msg?: string;
  version_ts?: string;
  BaseResp?: base.BaseResp;
}

export interface QueryCardDetailRequest {
  space_id?: string;
  card_id?: string;
  card_version?: string;
  Base?: base.Base;
}

export interface QueryCardDetailResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.QueryCardDetailData;
  BaseResp?: base.BaseResp;
}

export interface QueryCardListRequest {
  page?: number;
  size?: number;
  space_id?: string;
  category?: plugin_develop_common.CardCategory;
  bind_card_id?: string;
  status?: plugin_develop_common.QueryCardStatus;
  Base?: base.Base;
}

export interface QueryCardListResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.QueryCardListData;
  BaseResp?: base.BaseResp;
}

export interface QuickBindPluginPresetCardRequest {
  plugin_id?: string;
  api_name?: string;
  bot_id?: string;
  agent_id?: string;
  /** The ID of the currently selected team */
  space_id?: string;
  Base?: base.Base;
}

export interface QuickBindPluginPresetCardResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface RegisterPluginMetaRequest {
  name: string;
  desc: string;
  url?: string;
  icon: plugin_develop_common.PluginIcon;
  auth_type?: plugin_develop_common.AuthorizationType;
  location?: plugin_develop_common.AuthorizationServiceLocation;
  /** service */
  key?: string;
  /** service   Authorization: xxxxxx */
  service_token?: string;
  /** service */
  oauth_info?: string;
  /** JSON serialization */
  space_id: string;
  common_params?: Partial<
    Record<
      plugin_develop_common.ParameterLocation,
      Array<plugin_develop_common.commonParamSchema>
    >
  >;
  /** Default 0 default original form creation method, 1 cloud ide creation method */
  creation_method?: plugin_develop_common.CreationMethod;
  /** IDE created under the code programming language "1" Node.js "2" Python3 */
  ide_code_runtime?: string;
  plugin_type?: plugin_develop_common.PluginType;
  project_id?: string;
  /** Level 2 authorization type */
  sub_auth_type?: number;
  auth_payload?: string;
  /** Set fixed exit IP */
  fixed_export_ip?: boolean;
  /** Private network connection id */
  private_link_id?: string;
  /** public parameter list */
  Base?: base.Base;
}

export interface RegisterPluginMetaResponse {
  code?: Int64;
  msg?: string;
  plugin_id?: string;
  BaseResp?: base.BaseResp;
}

export interface RegisterPluginRequest {
  /** ap_json */
  ai_plugin?: string;
  /** openapi.yaml */
  openapi?: string;
  client_id?: string;
  client_secret?: string;
  service_token?: string;
  /** Plugin type, 1 plugin 2 = app 3 = func */
  plugin_type?: plugin_develop_common.PluginType;
  space_id?: string;
  import_from_file?: boolean;
  project_id?: string;
  Base?: base.Base;
}

export interface RegisterPluginResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.RegisterPluginData;
  BaseResp?: base.BaseResp;
}

export interface RevokeAuthTokenRequest {
  plugin_id: string;
  /** If not passed using uid assignment bot_id = connector_uid */
  bot_id?: string;
  context_type?: number;
  Base?: base.Base;
}

export interface RevokeAuthTokenResponse {
  BaseResp: base.BaseResp;
}

export interface SavePluginRequest {
  plugin_id?: string;
  item_infos?: Array<plugin_develop_common.PluginCurrentInfoItemInfo>;
  Base?: base.Base;
}

export interface SavePluginResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface SetAgentTaskStatusRequest {
  /** agent id */
  bot_id: string;
  /** team id */
  space_id: string;
  /** Task ID */
  trigger_id: string;
  /** Channel ID */
  connector_id: string;
  /** Whether to set to invalid, default no */
  set_invalid?: boolean;
  Base?: base.Base;
}

export interface SetAgentTaskStatusResponse {
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface UnlockPluginEditRequest {
  plugin_id: string;
  Base?: base.Base;
}

export interface UnlockPluginEditResponse {
  code: number;
  msg: string;
  released: boolean;
  BaseResp?: base.BaseResp;
}

export interface UpdateAPIRequest {
  plugin_id: string;
  api_id: string;
  name?: string;
  desc?: string;
  path?: string;
  method?: plugin_develop_common.APIMethod;
  request_params?: Array<plugin_develop_common.APIParameter>;
  response_params?: Array<plugin_develop_common.APIParameter>;
  disabled?: boolean;
  api_extend?: plugin_develop_common.APIExtend;
  /** edit version */
  edit_version?: number;
  /** Whether to save debug results */
  save_example?: boolean;
  /** debug result */
  debug_example?: plugin_develop_common.DebugExample;
  function_name?: string;
  /** enable/disable */
  Base?: base.Base;
}

export interface UpdateAPIResponse {
  code?: Int64;
  msg?: string;
  edit_version?: number;
  BaseResp?: base.BaseResp;
}

export interface UpdateBotDefaultParamsRequest {
  space_id?: string;
  bot_id?: string;
  dev_id?: string;
  plugin_id?: string;
  api_name?: string;
  request_params?: Array<plugin_develop_common.APIParameter>;
  response_params?: Array<plugin_develop_common.APIParameter>;
  plugin_referrer_id?: string;
  plugin_referrer_scene?: plugin_develop_common.PluginReferrerScene;
  response_style?: plugin_develop_common.ResponseStyle;
  workflow_id?: string;
  Base?: base.Base;
}

export interface UpdateBotDefaultParamsResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface UpdatePluginMetaRequest {
  plugin_id: string;
  name?: string;
  desc?: string;
  url?: string;
  icon?: plugin_develop_common.PluginIcon;
  /** uri */
  auth_type?: plugin_develop_common.AuthorizationType;
  location?: plugin_develop_common.AuthorizationServiceLocation;
  /** service */
  key?: string;
  /** service   Authorization: xxxxxx */
  service_token?: string;
  /** service */
  oauth_info?: string;
  /** JSON serialization */
  common_params?: Partial<
    Record<
      plugin_develop_common.ParameterLocation,
      Array<plugin_develop_common.commonParamSchema>
    >
  >;
  /** //default 0 default original form creation method, 1 cloud ide creation method */reation method, 1 cloud ide creation method */
  creation_method?: plugin_develop_common.CreationMethod;
  /** edit version */
  edit_version?: number;
  plugin_type?: plugin_develop_common.PluginType;
  /** Level 2 authorization type */
  sub_auth_type?: number;
  auth_payload?: string;
  /** Whether to configure fixed exit IP */
  fixed_export_ip?: boolean;
  /** Private network connection id */
  private_link_id?: string;
  Base?: base.Base;
}

export interface UpdatePluginMetaResponse {
  code?: Int64;
  msg?: string;
  edit_version?: number;
  BaseResp?: base.BaseResp;
}

export interface UpdatePluginRequest {
  plugin_id?: string;
  ai_plugin?: string;
  openapi?: string;
  client_id?: string;
  client_secret?: string;
  service_token?: string;
  source_code?: string;
  /** edit version */
  edit_version?: number;
  /** function code */
  Base?: base.Base;
}

export interface UpdatePluginResponse {
  code?: Int64;
  msg?: string;
  data: plugin_develop_common.UpdatePluginData;
  BaseResp?: base.BaseResp;
}

export interface UpsertPluginRequest {
  plugin_id: string;
  space_id: string;
  plugin_desc: string;
  api_desc: string;
  project_id?: string;
  Base?: base.Base;
}

export interface UpsertPluginResponse {
  code?: Int64;
  msg?: string;
  data?: plugin_develop_common.UpsertPluginData;
  BaseResp?: base.BaseResp;
}

export interface UpsertPrivateLinkData {
  /** Creating the scene will return the ID of the successful creation. */
  private_link_id?: string;
}

export interface UpsertPrivateLinkRequest {
  private_link?: PrivateLink;
  Base?: base.Base;
}

export interface UpsertPrivateLinkResponse {
  data?: UpsertPrivateLinkData;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface WakeupIdePluginRequest {
  project_id?: string;
  dev_id?: string;
  space_id?: string;
  Base?: base.Base;
}

export interface WakeupIdePluginResponse {
  code?: number;
  message?: string;
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
