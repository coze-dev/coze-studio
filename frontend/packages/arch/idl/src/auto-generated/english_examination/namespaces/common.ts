/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

/** ======================= enumerate ======================= */
export enum DeleteStatus {
  /** Normal */
  Normal = 0,
  /** delete */
  Deleted = 1,
}

export enum GradeLevel {
  /** unknown */
  Unknown = 0,
  /** A1.1 */
  A11 = 1,
  /** A1.2 */
  A12 = 2,
  /** A2.1 */
  A21 = 3,
  /** A2.2 */
  A22 = 4,
  /** B1.1 */
  B11 = 5,
  /** B1.2 */
  B12 = 6,
  /** B2.1 */
  B21 = 7,
  /** B2.2 */
  B22 = 8,
  /** C1.1 */
  C11 = 9,
  /** C1.2 */
  C12 = 10,
  /** C2 */
  C2 = 11,
}

export enum PaperExamStatus {
  /** to start */
  NotStart = 0,
  /** In the exam */
  InProgress = 1,
  /** The exam is over. */
  Finished = 2,
  /** forced exit */
  Exited = 3,
  /** If the time is not submitted, the system will automatically end it. */
  Suspend = 4,
}

export enum PaperLevel {
  /** unknown */
  Unknown = 0,
  /** A1 */
  A1 = 1,
  /** A2 */
  A2 = 2,
  /** B1 */
  B1 = 3,
  /** B2 */
  B2 = 4,
  /** C1 */
  C1 = 5,
}

export enum PaperStatus {
  /** Normal */
  Normal = 0,
  /** disable */
  Disbled = 1,
}

/** Title option correct status */
export enum QuestionOptionCorrectStatus {
  /** error */
  Incorrect = 0,
  /** correct */
  Correct = 1,
}

export enum RemindType {
  /** unknown */
  Unknown = 0,
  /** test notification */
  Test = 1,
  /** Formal notice */
  Formal = 2,
}

export enum TeamExamCategory {
  /** test */
  Test = 0,
  /** Team exam */
  TeamExam = 1,
}

/** Team exam correction type */
export enum TeamExamCheckType {
  /** machine correction */
  DeprecatedMachine = 0,
  /** manual correction */
  DeprecatedManual = 1,
  /** Artificial AI */
  Manual = 2,
  /** Machine AI */
  Machine = 3,
  /** Unified examination (manual correction) */
  UnifiedManual = 4,
  /** Unified Examination (Machine Correction) */
  UnifiedMachine = 5,
}

/** Team exam status */
export enum TeamExamStatus {
  /** in progress */
  InProgress = 0,
  /** Not started */
  Pending = 1,
  /** Completed. */
  Finished = 2,
}

export interface CreatePaperExamParams {
  /** Enter username */
  username?: string;
  /** Candidate mailbox */
  lark_email: string;
  /** Paper grade */
  paper_level: PaperLevel;
}

export interface CreatePaperQuestionOptionParams {
  /** Topic ID */
  paper_question_id?: Int64;
  /** option content */
  content?: string;
  /** option correctness */
  is_correct?: QuestionOptionCorrectStatus;
}

/** ======================= request model ======================= */
export interface CreatePaperQuestionParams {
  /** Topic group ID */
  paper_question_group_id?: Int64;
  /** question stem */
  content?: string;
  /** list of options */
  options?: Array<CreatePaperQuestionOptionParams>;
}

/** ======================= response model ======================= */
export interface Paper {
  /** Paper ID */
  id?: Int64;
  /** Test paper name */
  name?: string;
  /** Paper grade */
  level?: PaperLevel;
  /** Test paper status */
  status?: PaperStatus;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
  /** number of questions */
  question_count?: number;
}

export interface PaperExam {
  /** Exam ID */
  id?: Int64;
  /** user ID */
  user_id?: Int64;
  /** user name */
  username?: string;
  /** user email */
  lark_email?: string;
  /** Paper grade */
  paper_level?: PaperLevel;
  /** Paper ID */
  paper_id?: Int64;
  /** answer situation */
  answer_situation?: string;
  /** answer level */
  answer_level?: GradeLevel;
  /** video list */
  video_urls?: Array<string>;
  /** Examination status */
  status?: PaperExamStatus;
  /** answer list */
  answers?: Array<PaperExamAnswer>;
  /** Test paper information */
  paper?: Paper;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface PaperExamAnswer {
  /** ID */
  id?: Int64;
  /** Exam ID */
  paper_exam_id?: Int64;
  /** Topic ID */
  paper_question_id?: Int64;
  /** Option ID, comma-separated option id list when multi-selecting */
  answer?: string;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface PaperExamParseResult {
  /** user name */
  username?: string;
  /** user email */
  lark_email?: string;
  /** Paper grade */
  paper_level?: PaperLevel;
  /** Can it be imported? */
  is_valid?: boolean;
  /** Remarks */
  remark?: string;
}

export interface PaperQuestion {
  /** Topic ID */
  id?: Int64;
  /** Topic group ID */
  paper_question_group_id?: Int64;
  /** question stem */
  content?: string;
  /** list of options */
  options?: Array<PaperQuestionOption>;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface PaperQuestionGroup {
  /** Topic group ID */
  id?: Int64;
  /** Paper ID */
  paper_id?: Int64;
  /** question stem */
  content?: string;
  /** associated audio */
  audio_id?: string;
  /** associated image */
  picture?: string;
  /** list of topics */
  questions?: Array<PaperQuestion>;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface PaperQuestionOption {
  /** Option ID */
  id?: Int64;
  /** Topic ID */
  paper_question_id?: Int64;
  /** option content */
  content?: string;
  /** option correctness */
  is_correct?: QuestionOptionCorrectStatus;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface PlayInfo {
  /** Status video status */
  status?: Int64;
  /** ditto */
  message?: string;
  /** provider name */
  account_name?: string;
  /** Media type audio video */
  media_type?: string;
  /** original video length */
  duration?: number;
  /** cover screenshot */
  poster_url?: string;
  /** Transcoding video information, including video broadcast address, video meta information */
  video_infos?: Array<VideoInfo>;
  /** Cover screenshot uri */
  poster_uri?: string;
  /** popularity */
  popularity_level?: Int64;
  /** Help information address */
  help_info_u_r_l?: string;
  /** The state of maintenance under the video architecture */
  user_action?: string;
}

export interface UpdatePaperQuestionOptionParams {
  /** Option ID, create if 0 */
  id?: Int64;
  /** Topic ID */
  paper_question_id?: Int64;
  /** option content */
  content?: string;
  /** option correctness */
  is_correct?: QuestionOptionCorrectStatus;
  /** Option marked for deletion */
  mark_as_delete?: boolean;
}

export interface UpdatePaperQuestionParams {
  /** Topic ID, created if 0 */
  id?: Int64;
  /** Topic group ID */
  paper_question_group_id?: Int64;
  /** question stem */
  content?: string;
  /** list of options */
  options?: Array<UpdatePaperQuestionOptionParams>;
  /** Topics marked for deletion */
  mark_as_delete?: boolean;
}

export interface VideoInfo {
  /** Primary broadcast address */
  main_url?: string;
  /** Standby broadcast address */
  backup_url?: string;
  /** video meta information */
  video_meta?: VideoMeta;
  /** Used to tell the client side when the currently returned URL expires (future time) */
  url_expire?: Int64;
  /** Video File ID, a unique identifier for p2p playback */
  file_id?: string;
}

export interface VideoMeta {
  /** video length */
  height?: Int64;
  /** video width */
  width?: Int64;
  /** Format (mp4) */
  format?: string;
  /** video length */
  duration?: number;
  /** video size */
  size?: Int64;
  /** video bitrate */
  bitrate?: Int64;
  /** resolution */
  definition?: string;
  /** Logo name */
  logo_type?: string;
  /** encoding format */
  codec_type?: string;
  /** video type */
  encoded_type?: string;
}
/* eslint-enable */
