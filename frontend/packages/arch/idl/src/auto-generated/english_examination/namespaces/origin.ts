/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export enum GradeExamClientType {
  /** Mini Program */
  MiniProgram = 0,
  /** web page */
  Web = 1,
}

/** Original test
 ======================= enumerate ======================= */
export enum GradeExamStatus {
  /** in progress */
  InProgress = 0,
  /** Completed. */
  Finished = 1,
  /** Pending correction */
  ToBeChecked = 3,
}

export enum GradeExamSyncType {
  /** out of sync */
  NotSync = 0,
  /** synchronization */
  Sync = 1,
}

export enum GradeExamType {
  /** grading */
  Rank = 0,
  /** unit */
  Unit = 1,
  /** New grading labor */
  NewRankManual = 2,
  /** New grading machine change */
  NewRankMachine = 3,
}

export enum LibraryQuestionPart {
  /** Part 1 */
  One = 1,
  /** Part 2 */
  Two = 2,
  /** Part 3 */
  Three = 3,
  /** Part 4 */
  Four = 4,
}

export enum LibraryQuestionStatus {
  /** go offline */
  Offline = 0,
  /** go online */
  Online = 1,
}

export enum LibraryQuestionType {
  /** vocabulary */
  Word = 0,
  /** grammar */
  Grammar = 1,
  /** hearing */
  Listening = 2,
  /** spoken language */
  Speaking = 3,
  /** New speaking questions */
  NewSpeaking = 4,
}

export interface CreateLibraryQuestion {
  content?: string;
  options?: Array<string>;
  answer?: number;
  type?: LibraryQuestionType;
  level?: string;
  /** Audio */
  audio_uri?: string;
  /** New Oral Questions - Part */
  part?: LibraryQuestionPart;
  /** New Speaking Questions - Pictures */
  image_uri?: string;
}

export interface GradeExam {
  id?: Int64;
  /** user ID */
  user_id?: Int64;
  /** Team Exam ID */
  team_exam_id?: Int64;
  /** grade */
  level?: string;
  /** grade */
  grade?: string;
  /** start time */
  start_duration?: number;
  /** Client side type */
  client_type?: GradeExamClientType;
  /** state */
  status?: GradeExamStatus;
  /** type */
  type?: GradeExamType;
  /** synchronous apaas */
  sync_type?: GradeExamSyncType;
  /** list of topics */
  questions?: Array<GradeExamLibraryQuestion>;
  /** creation time */
  created_at?: Int64;
}

export interface GradeExamLibraryQuestion {
  id?: Int64;
  /** Exam ID */
  grade_exam_id?: Int64;
  /** Question Bank Question ID */
  library_question_id?: Int64;
  /** Round ID */
  round_id?: Int64;
  /** User answer */
  user_answer?: string;
  /** Question Bank Topic */
  library_question?: LibraryQuestion;
}

export interface LibraryQuestion {
  id?: Int64;
  /** question stem */
  content?: string;
  /** option */
  options?: string;
  /** Old tos audio */
  audio?: string;
  /** imageX Audio */
  audio_uri?: string;
  /** answer */
  answer?: number;
  /** grade */
  level?: string;
  /** type */
  type?: LibraryQuestionType;
  /** state */
  status?: LibraryQuestionStatus;
  /** New Oral Questions - Part */
  part?: LibraryQuestionPart;
  /** New speaking questions - question stem audio */
  content_audio_uri?: string;
  /** New Speaking Questions - Pictures */
  image_uri?: string;
  /** imageX Audio URLs */
  audio_url?: string;
  /** New Speaking Questions - Question Stem Audio Url */
  content_audio_url?: string;
  /** New Speaking Questions - Image URLs */
  image_url?: string;
}

/** ======================= response model ======================= */
export interface Team {
  id?: Int64;
  /** Team name */
  name?: string;
  /** Team avatar */
  avatar?: string;
}

export interface TeamExam {
  id?: Int64;
  /** Team ID */
  team_id?: Int64;
  /** correction type */
  check_type?: common.TeamExamCheckType;
  /** state */
  status?: common.TeamExamStatus;
  /** Team */
  team?: Team;
  /** user test record */
  user_team_exam?: UserTeamExam;
}

export interface UpdateLibraryQuestion {
  /** Topic ID */
  id?: Int64;
  /** question stem */
  content?: string;
  /** option */
  options?: Array<string>;
  /** answer */
  answer?: number;
  /** state */
  status?: LibraryQuestionStatus;
  /** TOS Audio */
  audio?: string;
  /** Audio */
  audio_uri?: string;
  /** New Speaking Questions - Pictures */
  image_uri?: string;
}

export interface UserTeamExam {
  id?: Int64;
  /** user ID */
  user_id?: Int64;
  /** Team Exam ID */
  team_exam_id?: Int64;
  /** Level Exam ID */
  grade_exam_id?: Int64;
}
/* eslint-enable */
