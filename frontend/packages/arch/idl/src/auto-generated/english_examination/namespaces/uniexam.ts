/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

/** Examination qualification */
export enum CertStatus {
  /** unknown */
  Unknown = 0,
  /** effective */
  Valid = 1,
  /** invalid */
  Invalid = 2,
  /** No questions available (speaking or listening) */
  OutOfQuestions = 3,
}

export enum ConfirmUniExamType {
  /** unknown */
  Unknown = 0,
  /** confirm */
  Confirm = 1,
  /** save */
  Save = 2,
  /** timing confirmation */
  ConfirmByCron = 3,
}

export enum DetailLevel {
  /** unknown */
  Unknown = 0,
  /** A1.1 */
  A1_1 = 1,
  /** A1.2 */
  A1_2 = 2,
  /** A2.1 */
  A2_1 = 3,
  /** A2.2 */
  A2_2 = 4,
  /** B1.1 */
  B1_1 = 5,
  /** B1.2 */
  B1_2 = 6,
  /** B2.1 */
  B2_1 = 7,
  /** B2.2 */
  B2_2 = 8,
  /** C1.1 */
  C1_1 = 9,
  /** C1.2 */
  C1_2 = 10,
  /** C2 */
  C2 = 11,
}

export enum EmailOperation {
  /** unknown */
  Unknown = 0,
  /** new */
  Create = 1,
  /** cover */
  Update = 2,
  /** delete */
  Delete = 3,
}

export enum ExamCategory {
  /** unknown */
  Unknown = 0,
  /** official exam */
  Formal = 1,
  /** mock exam */
  Simulation = 2,
  /** spoken questions */
  OralPractice = 3,
}

export enum GeneralLevel {
  /** unknown */
  Unknown = 0,
  /** A2 */
  A2 = 1,
  /** B1 */
  B1 = 2,
  /** B2 */
  B2 = 3,
  /** C1 */
  C1 = 4,
}

/** Delete state */
export enum IsDeleted {
  /** No */
  No = 0,
  /** Yes */
  Yes = 1,
}

/** Unified Examination
 ======================= enumerate =======================
 online status */
export enum OnlineStatus {
  /** go offline */
  Offline = 0,
  /** go online */
  Online = 1,
}

export enum PracticeStatus {
  /** No */
  No = 0,
  /** Yes */
  Yes = 1,
}

/** Title correction status */
export enum QuestionCheckStatus {
  /** Unapproved */
  NotChecked = 0,
  /** ASR success */
  AsrSuccess = 1,
  /** ASR failure */
  AsrFailed = 2,
  /** Correction successful */
  CheckSuccess = 3,
  /** correction failed */
  CheckFailed = 4,
}

export enum QuestionGroupCategory {
  /** unknown */
  Unknown = 0,
  /** Length of hearing */
  ShortLong = 1,
  /** N choose n */
  NFromN = 2,
}

/** Spoken part identification */
export enum QuestionOralPart {
  /** Part 1 */
  One = 1,
  /** Part 2 */
  Two = 2,
  /** Part 3 */
  Three = 3,
  /** Part 4 */
  Four = 4,
}

export enum RobotMessageStatus {
  /** to be pushed */
  Pending = 0,
  /** Pushing */
  Sending = 1,
  /** Push successful */
  Success = 2,
  /** push failed */
  Failed = 3,
}

export enum RobotMessageType {
  /** Team learning reminder */
  TeamStudy = 0,
  /** Team test reminder */
  DeprecatedTeamExam = 1,
  /** Feishu group event notification */
  FeishuGroupActivity = 2,
  /** Unified Exam Reminder */
  UniExamRemind = 3,
}

/** mock exam */
export enum SimulationStatus {
  /** No */
  No = 0,
  /** Yes */
  Yes = 1,
}

export enum TeamExamConfigurationType {
  /** filter based */
  Filter = 0,
  /** Mailbox based */
  Email = 1,
}

export enum TeamExamUserStatus {
  /** unknown */
  Unknown = 0,
  /** Configuration successful */
  Success = 1,
  /** Configuration failed */
  Failure = 2,
}

/** user test status */
export enum UniExamStatus {
  /** in progress */
  InProgress = 0,
  /** Completed. */
  Finished = 1,
  /** Pending review */
  ToBeReviewed = 2,
  /** Pending correction */
  ToBeChecked = 3,
  /** to be tested */
  ToBeAdditional = 4,
  /** Additional test in progress */
  AdditionInProgress = 5,
  /** Exited */
  Exited = 6,
  /** forced exit */
  ForcedExit = 7,
}

export enum UserType {
  /** unknown */
  Unknown = 0,
  /** Feishu user */
  Lark = 1,
  /** external user */
  External = 2,
}

export interface OralCheckTaskResult {
  /** Task ID */
  task_id?: string;
  /** "pending", "completed", "failed" */
  status?: string;
  /** Audio URI */
  audio_uri?: string;
  /** user audio to text */
  asr_text?: string;
  /** Gpt correction result of text */
  gpt_check_result?: string;
  /** error message */
  error?: string;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface RobotMessage {
  /** Message ID */
  id?: Int64;
  /** message content */
  payload?: string;
  /** push time */
  push_time?: Int64;
  /** message type */
  type?: RobotMessageType;
  /** message status */
  status?: RobotMessageStatus;
  /** Association ID, corresponding to RobotMessageType */
  rid?: Int64;
  /** push record */
  schedule_records?: Array<ScheduleRecord>;
}

export interface ScheduleRecord {
  /** record ID */
  id?: Int64;
  /** bot message ID */
  robot_message_id?: Int64;
  /** push result */
  schedule_result?: string;
  /** push user */
  schedule_users?: string;
}

/** ======================= response model ======================= */
export interface Team {
  id?: Int64;
  /** Team name */
  name?: string;
  /** Team avatar */
  avatar?: string;
  /** The latest team exam */
  latest_team_exam?: TeamExam;
  /** Team Exam List */
  team_exams?: Array<TeamExam>;
}

export interface TeamExam {
  id?: Int64;
  /** test name */
  name?: string;
  /** Team ID */
  team_id?: Int64;
  /** Correction Type 0 Unknown Status 4 Manual Correction 5 Machine Correction */
  check_type?: common.TeamExamCheckType;
  /** Status 0 In progress 1 Not started 2 Completed */
  status?: common.TeamExamStatus;
  /** start time */
  begin_at?: Int64;
  /** end time */
  end_at?: Int64;
  /** Examination eligibility filter conditions */
  filter?: TeamExamTestFilter;
  /** Type 0 Test 1 Team Exam (Historical Data) */
  category?: common.TeamExamCategory;
  /** Team */
  team?: Team;
  /** My exam records */
  my_uni_exam?: UniExam;
  /** List of user exams participating in the team exam (maximum 100) */
  uni_exams?: Array<UniExam>;
  /** Total number of user exam lists participating in team exams */
  uni_exams_total?: Int64;
  /** List of users who have not completed the exam (maximum 100) */
  unfinished_users?: Array<User>;
  /** Total number of users who did not complete the exam */
  unfinished_users_total?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface TeamExamTestEmail {
  /** email list */
  emails?: Array<string>;
  /** Email excel file URL */
  file_url?: string;
}

export interface TeamExamTestFilter {
  /** English group */
  english_group?: Array<string>;
  /** Employee role */
  role?: Array<string>;
  /** The highest score in history */
  highest_score?: Array<string>;
  /** Is there any non-Chinese subordinate? */
  has_overseas_subordinate?: boolean;
}

export interface UniExam {
  id?: Int64;
  /** user ID */
  user_id?: Int64;
  /** Team Exam ID */
  team_exam_id?: Int64;
  /** Listening Test ID */
  uni_exam_listening_paper_id?: Int64;
  /** Listening first test ID */
  uni_exam_listening_paper_plus_one_id?: Int64;
  /** Listening Second Additional Test ID */
  uni_exam_listening_paper_plus_two_id?: Int64;
  /** Oral Question 1 */
  uniexam_oral_question_one_id?: Int64;
  /** Speaking Question 2 */
  uniexam_oral_question_two_id?: Int64;
  /** Oral Question 3 */
  uniexam_oral_question_three_id?: Int64;
  /** Oral Question 4 */
  uniexam_oral_question_four_id?: Int64;
  /** Video address, discarded, changed to video conference list */
  video_uri?: string;
  /** number of departures */
  leave_count?: number;
  /** state */
  status?: UniExamStatus;
  /** Listening test level */
  listening_paper_level?: GeneralLevel;
  /** Listening test score */
  listening_score?: number;
  /** Hearing rating (A/B/C1.1/2) */
  listening_level?: DetailLevel;
  /** spoken score */
  oral_score?: number;
  /** Oral grading (A/B/C1.1/2) */
  oral_level?: DetailLevel;
  /** Final rating (A/B/C1.1/2) */
  final_level?: DetailLevel;
  /** 0 official 1 mock exam */
  is_simulated?: SimulationStatus;
  /** Synchronize to external table record id */
  apaas_english_grade_id?: Int64;
  /** user information */
  user?: User;
  /** Team information */
  team?: Team;
  /** Exam Type 1 Formal Exam 2 Mock Exam 3 Speaking Brush Questions */
  category?: ExamCategory;
  /** Type 4 New version grading [manual] 5 New version grading [machine modification] */
  check_type?: common.TeamExamCheckType;
  /** Team Exam Information */
  team_exam?: TeamExam;
  /** video address list */
  video_uri_list?: Array<string>;
  /** video address list */
  video_url_list?: Array<string>;
  /** List of speaking questions */
  oral_questions?: Array<UniExamQuestion>;
  /** Answer list */
  answers?: Array<UniExamAnswer>;
  /** Listening Test Paper List */
  listening_papers?: Array<UniExamListeningPaper>;
  /** Video URL, obsolete */
  video_url?: string;
  /** external presentation ID */
  external_id?: string;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface UniExamAnswer {
  id?: Int64;
  /** user id */
  user_id?: Int64;
  /** Test record ID */
  uni_exam_id?: Int64;
  /** Paper ID */
  uniexam_listening_paper_id?: Int64;
  /** Question ID */
  uniexam_question_id?: Int64;
  /** Test question option id */
  uniexam_question_option_id?: Int64;
  /** Recording content */
  audio_uri?: string;
  /** Oral correction record */
  question_check?: UniExamQuestionCheck;
  /** Recording URL */
  audio_url?: string;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface UniExamAnswerUpdateParams {
  /** Question ID */
  uniexam_question_id?: Int64;
  /** Option ID (Listening Answer) */
  uni_exam_question_option_id?: Int64;
  /** Recorded URI (spoken answer) */
  audio_uri?: string;
}

export interface UniExamListeningPaper {
  /** Paper ID */
  id?: Int64;
  /** Test paper name */
  name?: string;
  /** Paper grade */
  level?: GeneralLevel;
  /** Test paper status */
  status?: OnlineStatus;
  /** Whether to mock the test paper */
  is_simulated?: SimulationStatus;
  /** Topic group list */
  question_groups?: Array<UniExamQuestionGroup>;
}

export interface UniExamQuestion {
  id?: Int64;
  /** Topic group id */
  uniexam_question_group_id?: Int64;
  /** question stem */
  content?: string;
  /** Audio */
  audio_uri?: string;
  /** picture */
  image_uri?: string;
  /** Speaking part 1 | 2 | 3 | 4 */
  oral_part?: QuestionOralPart;
  /** 0 offline 1 online */
  status?: OnlineStatus;
  /** 0 formal questions 1 mock questions */
  is_simulated?: SimulationStatus;
  /** Audio URL */
  audio_url?: string;
  /** image URL */
  picture_url?: string;
  /** list of options */
  options?: Array<UniExamQuestionOption>;
}

export interface UniExamQuestionCheck {
  id?: Int64;
  /** Question ID */
  uniexam_question_id?: Int64;
  /** Answer ID */
  uniexam_answer_id?: Int64;
  /** correction status */
  status?: QuestionCheckStatus;
  /** user audio to text */
  asr_text?: string;
  /** Gpt correction result of text */
  gpt_check_result?: string;
  /** CEFR rating */
  cefr_level?: DetailLevel;
  /** update time */
  updated_at?: Int64;
  /** creation time */
  created_at?: Int64;
}

export interface UniExamQuestionCreateNFNParams {
  /** Topic ID, pass empty to create, otherwise update */
  question_id?: Int64;
  /** Topic group ID */
  uni_exam_question_group_id?: Int64;
  /** title */
  content?: string;
  /** associated audio */
  audio_uri?: string;
  /** associated image */
  image_uri?: string;
  /** option content */
  option_content?: string;
}

export interface UniExamQuestionCreateParams {
  /** Topic group ID */
  uni_exam_question_group_id?: Int64;
  /** title */
  content?: string;
  /** associated audio */
  audio_uri?: string;
  /** associated image */
  image_uri?: string;
  /** list of options */
  options?: Array<UniExamQuestionOptionCreateParams>;
}

export interface UniExamQuestionGroup {
  id?: Int64;
  /** Paper ID */
  uniexam_listening_paper_id?: Int64;
  /** question stem */
  content?: string;
  /** Audio */
  audio_uri?: string;
  /** picture */
  image_uri?: string;
  /** Topic group type */
  category?: QuestionGroupCategory;
  /** list of options */
  option_contents?: Array<string>;
  /** Audio URL */
  audio_url?: string;
  /** image URL */
  picture_url?: string;
  /** list of topics */
  questions?: Array<UniExamQuestion>;
}

export interface UniExamQuestionOption {
  id?: Int64;
  /** Topic ID */
  uni_exam_question_id?: Int64;
  /** option content */
  content?: string;
  /** option correctness */
  is_correct?: common.QuestionOptionCorrectStatus;
}

export interface UniExamQuestionOptionCreateParams {
  /** Topic ID */
  uni_exam_question_id?: Int64;
  /** option content */
  content?: string;
  /** option correctness */
  is_correct?: common.QuestionOptionCorrectStatus;
}

export interface UniExamQuestionOptionUpdateParams {
  /** Option ID */
  id?: Int64;
  /** Topic ID */
  uni_exam_question_id?: Int64;
  /** option content */
  content?: string;
  /** option correctness */
  is_correct?: common.QuestionOptionCorrectStatus;
  /** Option marked for deletion */
  mark_as_delete?: boolean;
}

export interface UniExamQuestionUpdateParams {
  /** Topic ID */
  id?: Int64;
  /** Topic group ID */
  uni_exam_question_group_id?: Int64;
  /** title */
  content?: string;
  /** associated audio */
  audio_uri?: string;
  /** associated image */
  image_uri?: string;
  /** list of options */
  options?: Array<UniExamQuestionOptionUpdateParams>;
  /** Topics marked for deletion */
  mark_as_delete?: boolean;
}

export interface UniExamScoreRecord {
  /** Listening test level */
  listening_paper_level?: GeneralLevel;
  /** Listening test score */
  listening_score?: number;
  /** Hearing rating (A/B/C1.1/2) */
  listening_level?: DetailLevel;
  /** spoken score */
  oral_score?: number;
  /** Oral grading (A/B/C1.1/2) */
  oral_level?: DetailLevel;
  /** Final rating (A/B/C1.1/2) */
  final_level?: DetailLevel;
  /** creation time */
  created_at?: Int64;
  /** Unified Exam ID */
  exam_id?: Int64;
}

export interface User {
  id?: Int64;
  /** user name */
  name?: string;
  /** avatar */
  avatar?: string;
  /** email */
  email?: string;
  /** Test ID */
  test_id?: Int64;
  /** test name */
  test_name?: string;
  /** Unified Exam ID */
  exam_id?: Int64;
}
/* eslint-enable */
