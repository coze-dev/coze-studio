/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';
import * as common from './common';
import * as uniexam from './uniexam';
import * as origin from './origin';

export type Int64 = string | number;

export interface AnswerMyPaperExamQuestionReq {
  paper_exam_id?: Int64;
  question_answers?: Record<Int64, Array<Int64>>;
  base?: base.Base;
}

export interface AnswerMyPaperExamQuestionResp {
  paper_exam_answers?: Array<common.PaperExamAnswer>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface BatchCreateUserPaperExaminationReq {
  /** List of exam lists */
  paper_exams: Array<common.CreatePaperExamParams>;
  base?: base.Base;
}

export interface BatchCreateUserPaperExaminationResp {
  /** success list */
  success_list?: Array<common.PaperExam>;
  /** failure list */
  fail_list?: Array<string>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CheckAdminPermissionReq {
  base?: base.Base;
}

export interface CheckAdminPermissionResp {
  is_admin?: boolean;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CheckAlphaTestPermissionReq {
  base?: base.Base;
}

export interface CheckAlphaTestPermissionResp {
  is_alpha?: boolean;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ConfirmUniExamRecordReq {
  /** Test record ID */
  id?: Int64;
  /** Listening test paper grade */
  listening_paper_level?: uniexam.GeneralLevel;
  /** Listening score */
  listening_score?: number;
  /** Hearing level */
  listening_level?: uniexam.DetailLevel;
  /** spoken score */
  oral_score?: number;
  /** speaking level */
  oral_level?: uniexam.DetailLevel;
  /** Final grading (if the final grading is not passed, only the score is saved, and the status remains unchanged. If the final grading is passed, it will be confirmed that it will be submitted for correction, and the status will be changed to completed) */
  final_level?: uniexam.DetailLevel;
  /** Confirmation Type (0: Unknown 1: Confirmation 2: Save) */
  confirm_type?: uniexam.ConfirmUniExamType;
  base?: base.Base;
}

export interface ConfirmUniExamRecordResp {
  uni_exam?: uniexam.UniExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreatePaperReq {
  /** Test paper name */
  name: string;
  /** Test paper difficulty */
  level: common.PaperLevel;
  base?: base.Base;
}

export interface CreatePaperResp {
  paper?: common.Paper;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateQuestionGroupReq {
  /** Paper ID */
  paper_id: Int64;
  /** question stem */
  content: string;
  /** associated audio */
  audio_id?: string;
  /** associated image */
  picture?: string;
  /** list of topics */
  questions?: Array<common.CreatePaperQuestionParams>;
  base?: base.Base;
}

export interface CreateQuestionGroupResp {
  question_group?: common.PaperQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateQuestionOptionReq {
  /** Topic ID */
  paper_question_id: Int64;
  /** option content */
  content: string;
  /** Is it correct? */
  is_correct: common.QuestionOptionCorrectStatus;
  base?: base.Base;
}

export interface CreateQuestionOptionResp {
  question_option?: common.PaperQuestionOption;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateQuestionReq {
  /** Topic group ID */
  paper_question_group_id: Int64;
  /** question stem */
  content: string;
  /** list of options */
  question_options?: Array<common.CreatePaperQuestionOptionParams>;
  base?: base.Base;
}

export interface CreateQuestionResp {
  question?: common.PaperQuestion;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateTeamExamTestReq {
  /** test name */
  name?: string;
  /** Correction Type 4 Manual Correction 5 Machine Correction */
  check_type?: common.TeamExamCheckType;
  /** Start time (second timestamp) */
  start_at?: Int64;
  /** End time (second timestamp) */
  end_at?: Int64;
  /** user filter */
  filter?: uniexam.TeamExamTestFilter;
  /** Email filter */
  email?: uniexam.TeamExamTestEmail;
  base?: base.Base;
}

export interface CreateTeamExamTestResp {
  /** Test ID */
  id?: Int64;
  /** List of unsuccessful users (under other testing) */
  test_conflict_users?: Array<uniexam.User>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateUniExamPaperReq {
  /** Test paper name */
  name: string;
  /** Test paper difficulty */
  level: uniexam.GeneralLevel;
  base?: base.Base;
}

export interface CreateUniExamPaperResp {
  paper?: uniexam.UniExamListeningPaper;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateUniExamQuestionGroupNFNReq {
  /** Paper ID */
  paper_id?: Int64;
  /** Topic group ID, pass empty to create, otherwise update */
  question_group_id?: Int64;
  /** question stem */
  content?: string;
  /** Audio URI */
  audio_uri?: string;
  /** image URI */
  image_uri?: string;
  /** list of options */
  option_contents?: Array<string>;
  /** list of topics */
  questions?: Array<uniexam.UniExamQuestionCreateNFNParams>;
  base?: base.Base;
}

export interface CreateUniExamQuestionGroupNFNResp {
  question_group?: uniexam.UniExamQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateUniExamQuestionGroupReq {
  /** Paper ID */
  paper_id?: Int64;
  /** question stem */
  content?: string;
  /** Audio URI */
  audio_uri?: string;
  /** image URI */
  image_uri?: string;
  /** list of topics */
  questions?: Array<uniexam.UniExamQuestionCreateParams>;
  base?: base.Base;
}

export interface CreateUniExamQuestionGroupResp {
  question_group?: uniexam.UniExamQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface CreateUniExamQuestionReq {
  /** Topic group ID */
  question_group_id?: Int64;
  /** question stem */
  content?: string;
  /** Audio URI */
  audio_uri?: string;
  /** image URI */
  image_uri?: string;
  /** Oral questions */
  oral_part?: uniexam.QuestionOralPart;
  base?: base.Base;
}

export interface CreateUniExamQuestionResp {
  question?: uniexam.UniExamQuestion;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteOriginLibraryQuestionReq {
  /** Topic ID */
  id: Int64;
  base?: base.Base;
}

export interface DeleteOriginLibraryQuestionResp {
  question?: origin.LibraryQuestion;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeletePaperReq {
  /** Paper ID */
  id: number;
  base?: base.Base;
}

export interface DeletePaperResp {
  paper?: common.Paper;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteQuestionGroupReq {
  /** Topic group ID */
  id: Int64;
  base?: base.Base;
}

export interface DeleteQuestionGroupResp {
  question_group?: common.PaperQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteTeamExamRecordReq {
  /** Test record ID */
  id?: Int64;
  base?: base.Base;
}

export interface DeleteTeamExamRecordResp {
  team_exam?: uniexam.TeamExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteTeamExamRemindReq {
  /** robot_message_id */
  id?: Int64;
  base?: base.Base;
}

export interface DeleteTeamExamRemindResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteUniExamPaperReq {
  /** Paper ID */
  id: number;
  base?: base.Base;
}

export interface DeleteUniExamPaperResp {
  paper?: uniexam.UniExamListeningPaper;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteUniExamQuestionGroupReq {
  /** Topic group ID */
  id?: Int64;
  base?: base.Base;
}

export interface DeleteUniExamQuestionGroupResp {
  question_group?: uniexam.UniExamQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteUniExamQuestionReq {
  /** Topic ID */
  id?: Int64;
  base?: base.Base;
}

export interface DeleteUniExamQuestionResp {
  question?: uniexam.UniExamQuestion;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteUniExamRecordReq {
  /** Test record ID */
  id?: Int64;
  base?: base.Base;
}

export interface DeleteUniExamRecordResp {
  uni_exam?: uniexam.UniExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface DeleteUserPaperExaminationReq {
  /** ID */
  id: Int64;
  base?: base.Base;
}

export interface DeleteUserPaperExaminationResp {
  paper_exam?: common.PaperExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ExportConflictUsersReq {
  team_exam_id?: Int64;
  /** user filter */
  filter?: uniexam.TeamExamTestFilter;
  /** Email filter */
  email?: uniexam.TeamExamTestEmail;
  base?: base.Base;
}

export interface ExportConflictUsersResp {
  /** File URL */
  file_url?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ExportTeamExamRecordReq {
  /** Test record ID */
  id?: Int64;
  base?: base.Base;
}

export interface ExportTeamExamRecordResp {
  /** File URL */
  file_url?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ExportUniExamRecordReq {
  /** filter condition */
  filter?: UniExamRecordFilter;
  base?: base.Base;
}

export interface ExportUniExamRecordResp {
  /** File URL */
  file_url?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ExportUserPaperExaminationReq {
  base?: base.Base;
}

export interface ExportUserPaperExaminationResp {
  /** Export result tos file */
  excel_id?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface FinishUniExamRecordReq {
  /** Test record ID */
  id?: Int64;
  base?: base.Base;
}

export interface FinishUniExamRecordResp {
  uni_exam?: uniexam.UniExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetMyPaperExamReq {
  base?: base.Base;
}

export interface GetMyPaperExamResp {
  exams?: Array<common.PaperExam>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetOralAnswerCheckReq {
  /** Spoken Answer Audio URI */
  audio_uri: string;
  base?: base.Base;
}

export interface GetOralAnswerCheckResp {
  /** user audio to text */
  asr_text?: string;
  /** Gpt correction result of text */
  gpt_check_result?: string;
  /** Voice Correction Task ID */
  task_id?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetOralAnswerCheckTaskResultReq {
  /** Task ID */
  task_id: string;
  base?: base.Base;
}

export interface GetOralAnswerCheckTaskResultResp {
  /** user audio to text */
  asr_text?: string;
  /** Gpt correction result of text */
  gpt_check_result?: string;
  /** Task details */
  task?: uniexam.OralCheckTaskResult;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetOriginExamCertReq {
  base?: base.Base;
}

export interface GetOriginExamCertResp {
  exam_cert?: origin.TeamExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetOriginExamNextRoundReq {
  /** Exam ID */
  grade_exam_id?: Int64;
  /** Team Exam ID */
  team_exam_id?: Int64;
  /** Current round ID */
  current_round_id?: number;
  base?: base.Base;
}

export interface GetOriginExamNextRoundResp {
  /** list of topics */
  questions?: Array<origin.GradeExamLibraryQuestion>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetPlayVideoInfoReq {
  vids: Array<string>;
  base?: base.Base;
}

export interface GetPlayVideoInfoResp {
  play_info_map?: Record<string, common.PlayInfo>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetSessionUserInfoReq {
  'x-innovation-token'?: string;
  base?: base.Base;
}

export interface GetSessionUserInfoResp {
  id?: Int64;
  lark_name?: string;
  lark_email?: string;
  lark_union_id?: string;
  lark_open_id?: string;
  lark_user_id?: string;
  user_type?: uniexam.UserType;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetTeamExamRecordReq {
  /** Test record ID */
  id?: Int64;
  base?: base.Base;
}

export interface GetTeamExamRecordResp {
  team_exam?: uniexam.TeamExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetUniExamCertReq {
  base?: base.Base;
}

export interface GetUniExamCertResp {
  team_exam?: uniexam.TeamExam;
  /** Exam eligibility status */
  cert_status?: uniexam.CertStatus;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetUniExamRecordReq {
  /** Test record ID */
  id?: Int64;
  base?: base.Base;
}

export interface GetUniExamRecordResp {
  uni_exam?: uniexam.UniExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface GetUploadVideoTokenReq {
  base?: base.Base;
}

export interface GetUploadVideoTokenResp {
  access_key_id?: string;
  secret_access_key?: string;
  session_token?: string;
  expired_time?: string;
  current_time?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListCreateTeamExamTestOptionsReq {
  base?: base.Base;
}

export interface ListCreateTeamExamTestOptionsResp {
  /** English group */
  english_group?: Array<string>;
  /** Employee role */
  role?: Array<string>;
  /** The highest score in history */
  highest_score?: Array<string>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListOriginExamResultReq {
  base?: base.Base;
}

export interface ListOriginExamResultResp {
  grade_exams?: Array<origin.GradeExam>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListOriginLibraryQuestionReq {
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  /** keyword */
  keyword?: string;
  /** grade */
  level?: string;
  /** type */
  type?: origin.LibraryQuestionType;
  /** state */
  status?: origin.LibraryQuestionStatus;
  /** New Oral Questions - Part */
  part?: origin.LibraryQuestionPart;
  base?: base.Base;
}

export interface ListOriginLibraryQuestionResp {
  questions?: Array<origin.LibraryQuestion>;
  total?: number;
  page?: number;
  page_size?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListPaperForExamReq {
  /** Exam ID */
  paper_exam_id: Int64;
  base?: base.Base;
}

export interface ListPaperForExamResp {
  papers?: Array<common.Paper>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListPaperReq {
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  /** Test paper status */
  status?: common.PaperStatus;
  /** Test paper difficulty */
  level?: common.PaperLevel;
  base?: base.Base;
}

export interface ListPaperResp {
  papers?: Array<common.Paper>;
  total?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListQuestionGroupReq {
  /** Paper ID */
  paper_id: Int64;
  base?: base.Base;
}

export interface ListQuestionGroupResp {
  question_groups?: Array<common.PaperQuestionGroup>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListTeamExamRecordReq {
  /** Page number (default is 1) */
  page?: number;
  /** Number of pages (default is 100) */
  page_size?: number;
  /** test name */
  name?: string;
  /** email */
  user_email?: string;
  base?: base.Base;
}

export interface ListTeamExamRecordResp {
  team_exams?: Array<uniexam.TeamExam>;
  total?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListTeamExamRemindReq {
  /** Team Exam ID */
  team_exam_id?: Int64;
  base?: base.Base;
}

export interface ListTeamExamRemindResp {
  robot_messages?: Array<uniexam.RobotMessage>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListTeamReq {
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  /** Team name */
  name?: string;
  base?: base.Base;
}

export interface ListTeamResp {
  teams?: Array<uniexam.Team>;
  total?: number;
  page?: number;
  page_size?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniExamPaperReq {
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  /** Test paper status */
  status?: uniexam.OnlineStatus;
  /** Test paper difficulty */
  level?: uniexam.GeneralLevel;
  base?: base.Base;
}

export interface ListUniExamPaperResp {
  papers?: Array<uniexam.UniExamListeningPaper>;
  total?: number;
  page?: number;
  page_size?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniExamQuestionGroupReq {
  /** Paper ID */
  paper_id?: Int64;
  base?: base.Base;
}

export interface ListUniExamQuestionGroupResp {
  question_groups?: Array<uniexam.UniExamQuestionGroup>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniExamQuestionReq {
  /** Topic type */
  part?: uniexam.QuestionOralPart;
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  base?: base.Base;
}

export interface ListUniExamQuestionResp {
  questions?: Array<uniexam.UniExamQuestion>;
  total?: number;
  page?: number;
  page_size?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniExamRecordFilterOptionsReq {
  base?: base.Base;
}

export interface ListUniExamRecordFilterOptionsResp {
  team_exams?: Array<uniexam.TeamExam>;
  check_types?: Array<common.TeamExamCheckType>;
  status?: Array<uniexam.UniExamStatus>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniExamRecordReq {
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  /** filter condition */
  filter?: UniExamRecordFilter;
  base?: base.Base;
}

export interface ListUniExamRecordResp {
  uni_exams?: Array<uniexam.UniExam>;
  total?: number;
  page?: number;
  page_size?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniExamResultReq {
  base?: base.Base;
}

export interface ListUniExamResultResp {
  uni_exams?: Array<uniexam.UniExam>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUniexamScoreHistoryReq {
  /** Test record ID */
  exam_id?: Int64;
  base?: base.Base;
}

export interface ListUniexamScoreHistoryResp {
  scores?: Array<uniexam.UniExamScoreRecord>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ListUserPaperExaminationReq {
  /** page number */
  page?: number;
  /** number of pages per page */
  page_size?: number;
  base?: base.Base;
}

export interface ListUserPaperExaminationResp {
  paper_exams?: Array<common.PaperExam>;
  total?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface LoginByJwtReq {
  authorization: string;
  base?: base.Base;
}

export interface LoginByJwtResp {
  base_resp?: base.BaseResp;
}

export interface LoginReq {
  code?: string;
  state?: string;
  session_id?: string;
  base?: base.Base;
}

export interface LoginResp {
  base_resp?: base.BaseResp;
}

export interface MagicCheckReq {
  /** content */
  content?: string;
  base?: base.Base;
}

export interface MagicCheckResp {
  /** fraction */
  score?: Int64;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface MCreateOriginLibraryQuestionReq {
  questions?: Array<origin.CreateLibraryQuestion>;
  base?: base.Base;
}

export interface MCreateOriginLibraryQuestionResp {
  questions?: Array<origin.LibraryQuestion>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ParseUserPaperExaminationReq {
  /** List form file tos file */
  excel_id: string;
  base?: base.Base;
}

export interface ParseUserPaperExaminationResp {
  results?: Array<common.PaperExamParseResult>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface PushUniExamRecordReq {
  /** Test record ID */
  id?: Int64;
  /** push type */
  check_type?: common.TeamExamCheckType;
  base?: base.Base;
}

export interface PushUniExamRecordResp {
  team_exam?: uniexam.TeamExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface RemindTeamExamReq {
  /** Test record ID */
  id?: Int64;
  /** push content */
  content?: string;
  /** push time */
  timestamp?: Int64;
  base?: base.Base;
}

export interface RemindTeamExamResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface RemindTestReq {
  /** Message ID */
  id?: Int64;
  base?: base.Base;
}

export interface RemindTestResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ReportLeaveScreenReq {
  paper_exam_id?: Int64;
  base?: base.Base;
}

export interface ReportLeaveScreenResp {
  leave_count?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ReportOriginExamLeaveReq {
  /** Test record ID */
  grade_exam_id?: Int64;
  base?: base.Base;
}

export interface ReportOriginExamLeaveResp {
  leave_count?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface ReportUniExamLeaveReq {
  /** Unified Exam ID */
  uni_exam_id?: Int64;
  base?: base.Base;
}

export interface ReportUniExamLeaveResp {
  leave_count?: number;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SaveVideoChunkReq {
  /** Unified Exam ID */
  uni_exam_id?: Int64;
  /** Video URI */
  video_uri?: string;
  base?: base.Base;
}

export interface SaveVideoChunkResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SearchUserReq {
  /** keyword */
  keyword?: string;
  base?: base.Base;
}

export interface SearchUserResp {
  users?: Array<uniexam.User>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface StartMyPaperExamReq {
  base?: base.Base;
}

export interface StartMyPaperExamResp {
  paper_exam?: common.PaperExam;
  question_groups?: Array<common.PaperQuestionGroup>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface StartOriginExamReq {
  /** Team Exam ID */
  team_exam_id?: Int64;
  base?: base.Base;
}

export interface StartOriginExamResp {
  /** Test record */
  grade_exam?: origin.GradeExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface StartUniExamReq {
  /** Team Exam ID */
  team_exam_id?: Int64;
  /** Exam Type (1 Formal Exam 2 Mock Exam 3 Oral Brush Questions) */
  category?: uniexam.ExamCategory;
  base?: base.Base;
}

export interface StartUniExamResp {
  /** Starting Exam Record */
  uni_exam?: uniexam.UniExam;
  /** Next spoken question */
  oral_question?: uniexam.UniExamQuestion;
  /** Next listening question */
  listening_question?: uniexam.UniExamQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SubmitMyPaperExamReq {
  paper_exam_id?: Int64;
  video_id?: string;
  force_submit?: boolean;
  base?: base.Base;
}

export interface SubmitMyPaperExamResp {
  paper_exam?: common.PaperExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SubmitOriginExamAnswerReq {
  /** Exam ID */
  grade_exam_id?: Int64;
  /** Question Bank Question ID */
  library_question_id?: Int64;
  /** User answer */
  user_answer?: string;
  base?: base.Base;
}

export interface SubmitOriginExamAnswerResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SubmitOriginExamReq {
  /** Exam ID */
  grade_exam_id?: Int64;
  /** Video ID */
  video_id?: string;
  /** Is it mandatory to submit? */
  force_submit?: boolean;
  base?: base.Base;
}

export interface SubmitOriginExamResp {
  grade_exam?: origin.GradeExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SubmitUniExamAnswerReq {
  /** Unified Exam ID */
  uni_exam_id?: Int64;
  /** user answer list */
  uni_exam_answers?: Array<uniexam.UniExamAnswerUpdateParams>;
  base?: base.Base;
}

export interface SubmitUniExamAnswerResp {
  /** Is it necessary to submit an exam? */
  need_submit_exam?: boolean;
  /** Next spoken question */
  oral_question?: uniexam.UniExamQuestion;
  /** Next listening question */
  listening_question?: uniexam.UniExamQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface SubmitUniExamReq {
  /** Unified Exam ID */
  uni_exam_id?: Int64;
  /** Video URI */
  video_uri?: string;
  /** Is it mandatory to submit? */
  force_submit?: boolean;
  base?: base.Base;
}

export interface SubmitUniExamResp {
  uni_exam?: uniexam.UniExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface TextToSpeechReq {
  text?: string;
  base?: base.Base;
}

export interface TextToSpeechResp {
  content?: string;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UniExamRecordFilter {
  /** Test Status List */
  status?: Array<uniexam.UniExamStatus>;
  /** user ID */
  user_id?: Int64;
  /** Feishu Name */
  user_name?: string;
  /** Feishu mailbox */
  user_email?: string;
  /** 1 Formal exam 2 Mock exam 3 Oral brush questions */
  categories?: Array<uniexam.ExamCategory>;
  /** Exam ID or external ID */
  exam_id?: string;
  /** 4 Manual correction 5 Machine correction */
  check_types?: Array<common.TeamExamCheckType>;
  /** Test ID List */
  test_ids?: Array<Int64>;
}

export interface UpdateOriginLibraryQuestionReq {
  question?: origin.UpdateLibraryQuestion;
  base?: base.Base;
}

export interface UpdateOriginLibraryQuestionResp {
  question?: origin.LibraryQuestion;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdatePaperReq {
  /** Paper ID */
  id?: Int64;
  /** Test paper name */
  name?: string;
  /** Test paper difficulty */
  level?: common.PaperLevel;
  /** Test paper status */
  status?: common.PaperStatus;
  base?: base.Base;
}

export interface UpdatePaperResp {
  paper?: common.Paper;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateQuestionGroupReq {
  /** Test group ID */
  id: Int64;
  /** question stem */
  content?: string;
  /** associated audio */
  audio_id?: string;
  /** associated image */
  picture?: string;
  /** list of topics */
  questions?: Array<common.UpdatePaperQuestionParams>;
  base?: base.Base;
}

export interface UpdateQuestionGroupResp {
  question_group?: common.PaperQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateTeamExamTestReq {
  /** Test ID */
  id?: Int64;
  /** Add personnel mailbox */
  email?: uniexam.TeamExamTestEmail;
  /** Operation Type 1: Add 2: Overwrite 3: Delete */
  operation?: uniexam.EmailOperation;
  base?: base.Base;
}

export interface UpdateTeamExamTestResp {
  /** Delete failed user list */
  delete_failed_users?: Array<uniexam.User>;
  /** List of unsuccessful users (under other testing) */
  test_conflict_users?: Array<uniexam.User>;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateTeamExamUserReq {
  /** Test ID */
  team_exam_id?: Int64;
  /** List of unsuccessful users (under other testing) */
  test_conflict_users?: Array<uniexam.User>;
  base?: base.Base;
}

export interface UpdateTeamExamUserResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateUniExamAnswerReq {
  /** Unified Exam ID */
  uni_exam_id?: Int64;
  /** Unified Exam Question ID */
  uni_exam_question_id?: Int64;
  /** User answer */
  user_answer?: string;
  base?: base.Base;
}

export interface UpdateUniExamAnswerResp {
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateUniExamPaperReq {
  /** Paper ID */
  id?: Int64;
  /** Test paper name */
  name?: string;
  /** 0 offline 1 online */
  status?: uniexam.OnlineStatus;
  /** 0 formal questions 1 mock questions */
  is_simulated?: uniexam.SimulationStatus;
  base?: base.Base;
}

export interface UpdateUniExamPaperResp {
  paper?: uniexam.UniExamListeningPaper;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateUniExamQuestionGroupReq {
  /** Topic group ID */
  id?: Int64;
  /** question stem */
  content?: string;
  /** Audio URI */
  audio_uri?: string;
  /** image URI */
  image_uri?: string;
  /** list of topics */
  questions?: Array<uniexam.UniExamQuestionUpdateParams>;
  base?: base.Base;
}

export interface UpdateUniExamQuestionGroupResp {
  question_group?: uniexam.UniExamQuestionGroup;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateUniExamQuestionReq {
  /** Topic ID */
  id?: Int64;
  /** question stem */
  content?: string;
  /** Audio URI */
  audio_uri?: string;
  /** image URI */
  image_uri?: string;
  /** 0 offline 1 online */
  status?: uniexam.OnlineStatus;
  /** 0 formal questions 1 mock questions */
  is_simulated?: uniexam.SimulationStatus;
  base?: base.Base;
}

export interface UpdateUniExamQuestionResp {
  question?: uniexam.UniExamQuestion;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}

export interface UpdateUserPaperExaminationReq {
  /** ID */
  id: Int64;
  /** Test paper difficulty */
  level?: common.PaperLevel;
  /** test paper */
  paper_id?: Int64;
  base?: base.Base;
}

export interface UpdateUserPaperExaminationResp {
  paper_exam?: common.PaperExam;
  code?: number;
  message?: string;
  base_resp?: base.BaseResp;
}
/* eslint-enable */
