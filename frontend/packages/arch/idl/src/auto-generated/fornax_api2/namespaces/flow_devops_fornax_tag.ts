/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';

export type Int64 = string | number;

/** Marking target object type */
export enum TagBindTargetObjectType {
  /** use case */
  Case = 1,
  /** Execution records of tasks and use cases */
  Task = 2,
  /** dataset */
  Dataset = 3,
  /** Datasets/Dialog Groups */
  DatasetRowGroup = 4,
  /** rule group */
  RuleGroup = 5,
  /** rule */
  Rule = 6,
  /** Evaluation Report/Dialogue Group */
  ReportRowGroup = 7,
  /** Prompt */
  Prompt = 8,
  /** manual annotation */
  ManualAnnotationItem = 9,
}

/** label hierarchy */
export enum TagLevel {
  Primary = 1,
  Secondary = 2,
}

export enum TagStatus {
  Valid = 1,
  InValid = 2,
}

export interface CreateTagRequest {
  space_id: Int64;
  UserID?: string;
  /** Tag Supported markup object types, specifying parent_id not passed when creating secondary tags */
  target_object_types?: Array<TagBindTargetObjectType>;
  tag: Tag;
  Base?: base.Base;
}

export interface CreateTagResponse {
  tag?: Tag;
  BaseResp?: base.BaseResp;
}

export interface CreateTagTargetBindRequest {
  tag_id: Int64;
  UserID?: string;
  /** Label space */
  space_id: Int64;
  target_object_id: Int64;
  target_object_type: TagBindTargetObjectType;
  /** Custom query index for labels */
  custom_search_key: string;
  Base?: base.Base;
}

export interface CreateTagTargetBindResponse {
  BaseResp?: base.BaseResp;
}

export interface GetTagByNameRequest {
  tag_name?: string;
  UserID?: string;
  space_id: Int64;
  Base?: base.Base;
}

export interface GetTagByNameResponse {
  tag?: Tag;
  BaseResp?: base.BaseResp;
}

export interface ListTagRequest {
  space_id: Int64;
  UserID?: string;
  page?: Int64;
  page_size?: Int64;
  /** -- search fields -- */
  fuzzy_name?: string;
  creator_id?: Int64;
  target_object_types?: Array<TagBindTargetObjectType>;
  /** Custom query index for tags, for different target object types TargetObjectType, custom query index convention for specific business id */
  custom_search_key?: string;
  /** Ignore disabled tags */
  ignore_invalid_tag?: boolean;
  Base?: base.Base;
}

export interface ListTagResponse {
  tags?: Array<Tag>;
  total?: Int64;
  Session?: Session;
  BaseResp?: base.BaseResp;
}

export interface MCreateTagTargetBindRequest {
  tag_ids: Array<Int64>;
  UserID?: string;
  /** Label space */
  space_id: Int64;
  target_object_id: Int64;
  target_object_type: TagBindTargetObjectType;
  /** Custom query index for labels */
  custom_search_key: string;
  Base?: base.Base;
}

export interface MCreateTagTargetBindResponse {
  BaseResp?: base.BaseResp;
}

export interface MGetTagListByTargetIDsRequest {
  space_id: Int64;
  UserID?: string;
  target_ids: Array<Int64>;
  target_object_type: TagBindTargetObjectType;
  Base?: base.Base;
}

export interface MGetTagListByTargetIDsResponse {
  tags?: Record<Int64, Array<Tag>>;
  BaseResp?: base.BaseResp;
}

export interface MGetTagsRequest {
  tag_ids?: Array<Int64>;
  UserID?: string;
  space_id: Int64;
  Base?: base.Base;
}

export interface MGetTagsResponse {
  tags?: Array<Tag>;
  BaseResp?: base.BaseResp;
}

export interface MGetTagTargetBindRequest {
  tag_ids: Array<Int64>;
  UserID?: string;
  /** Label space */
  space_id: Int64;
  target_object_type: TagBindTargetObjectType;
  /** Custom query index for labels */
  custom_search_key?: string;
  Base?: base.Base;
}

export interface MGetTagTargetBindResponse {
  target_ids: Record<Int64, Array<Int64>>;
  BaseResp?: base.BaseResp;
}

export interface RemoveTagTargetBindRequest {
  space_id: Int64;
  UserID?: string;
  tag_id: Int64;
  target_object_type: TagBindTargetObjectType;
  target_object_id: Int64;
  Base?: base.Base;
}

export interface RemoveTagTargetBindResponse {
  BaseResp?: base.BaseResp;
}

export interface Session {
  UserID?: string;
}

export interface Tag {
  tag_id?: Int64;
  /** tag associated object type information */
  bind_info?: Array<TagBindInfo>;
  /** label name */
  name: string;
  /** label hierarchy */
  level: TagLevel;
  /** label hierarchy */
  children?: Array<Tag>;
  /** Parent tag ID, the parent tag of the first-level tag is itself */
  parent_tag_id?: Int64;
  /** Label effective status */
  status?: TagStatus;
  /** creator */
  creator_id?: Int64;
  /** creation time */
  create_time?: Int64;
  /** update time */
  update_time?: Int64;
}

export interface TagBindInfo {
  /** Associated Object Type */
  target_object_type: TagBindTargetObjectType;
  /** number of associated objects */
  count?: Int64;
}

export interface UpdateTagRequest {
  space_id: Int64;
  UserID?: string;
  /** Overwrite the current list of associated object types, which may trigger deletion of the associated object type */
  target_object_types?: Array<TagBindTargetObjectType>;
  tag: Tag;
  Base?: base.Base;
}

export interface UpdateTagResponse {
  tag?: Tag;
  BaseResp?: base.BaseResp;
}

export interface UpdateTargetBindTagsRequest {
  space_id: Int64;
  UserID?: string;
  tag_ids: Array<Int64>;
  target_object_type: TagBindTargetObjectType;
  target_object_id: Int64;
  custom_search_key: string;
  Base?: base.Base;
}

export interface UpdateTargetBindTagsResponse {
  BaseResp?: base.BaseResp;
}
/* eslint-enable */
