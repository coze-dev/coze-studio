/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum AnnotateType {
  /** GSB evaluation rule scenarios, including only badcases */
  BadCase = 1,
}

/** subject type */
export enum AuthPrincipalType {
  Undefined = 0,
  /** user */
  User = 1,
  /** department */
  Department = 2,
}

export enum ComboType {
  ComboTypeUndefined = 0,
  ComboTypeAnd = 1,
  ComboTypeOr = 2,
}

export enum CompareType {
  Undefined = 0,
  /** SP comparison */
  SystemPromptCmp = 1,
  /** model comparison */
  ModelCmp = 2,
  /** free comparison */
  SelfCmp = 3,
}

export enum ConditionType {
  ConditionTypeUndefined = 0,
  ConditionTypeExpr = 1,
  ConditionTypeCombo = 2,
}

export enum ContentType {
  Text = 1,
  Image = 2,
  Binary = 3,
  ImageVariable = 4,
}

export enum Env {
  Undefined = 0,
  /** boe */
  BOE = 1,
  /** onlien */
  Online = 2,
}

export enum EvalStrategyStrategyEnum {
  Undefined = 0,
  /** The first phase only supports AIPaas GSB. */
  AIPassGSB = 1,
  /** Phase 2 migration to Fornax */
  FornaxEval = 2,
}

export enum GrayReleaseFieldType {
  Undefined = 0,
  Uid = 1,
  Did = 2,
  CustomKey = 3,
}

export enum GrayReleaseStrategy {
  /** Do not turn on grey release */
  None = 0,
  /** Instance grey release */
  InstanceGrayRelease = 1,
}

export enum GSBResult {
  Undefined = 0,
  Good = 1,
  Same = 2,
  Bad = 3,
}

export enum MessageType {
  System = 1,
  User = 2,
  Assistant = 3,
  Tool = 4,
  Placeholder = 20,
}

/** Model family, especially for different model access providers */
export enum ModelClass {
  Undefined = 0,
  /** gpt */
  GPT = 1,
  /** Byte */
  SEED = 2,
  /** google */
  Gemini = 3,
  /** Amazon */
  Claude = 4,
  /** ERNIE Bot */
  Ernie = 5,
  /** baichuan */
  Baichuan = 6,
  /** Ali */
  Qwen = 7,
  /** Zhipu */
  GML = 8,
  /** deep search */
  DeepSeek = 9,
}

export enum OperatorType {
  OperatorTypeUndefined = 0,
  OperatorTypeEq = 1,
  OperatorTypeIn = 2,
  OperatorTypeNotIn = 3,
  OperatorTypeNotEq = 4,
  OperatorTypeGt = 5,
  OperatorTypeGte = 6,
  OperatorTypeLt = 7,
  OperatorTypeLte = 8,
  OperatorTypeIsNull = 9,
  OperatorTypeIsNotNull = 10,
}

export enum OptimizeEngine {
  Undefined = 0,
  AIPaas_GradientDescent = 1,
}

export enum OptimizeExecutionStatus {
  Undefined = 0,
  Init = 1,
  Running = 2,
  Canceled = 3,
  Fail = 4,
  Completed = 5,
}

export enum OptimizeTargetType {
  Prompt = 1,
}

export enum OrderField {
  CreateTime = 1,
  LastedPublishTime = 2,
}

/** Prompt encryption type */
export enum PromptEncryptOption {
  Undefined = 0,
  /** Encrypt and return plaintext */
  EncryptWithPlainText = 1,
  /** Encrypt and do not return plaintext */
  EncryptWithoutPlainText = 2,
}

/** Cue word type */
export enum PromptType {
  Undefined = 0,
  /** Completion Mode */
  Completion = 1,
  /** chat mode */
  Chat = 2,
  /** Completion Mode V2 */
  Completion_V2 = 3,
  /** Prompt fragment */
  Segment = 4,
}

/** release status */
export enum PublishStatus {
  Undefined = 0,
  /** unpublished */
  UnPublish = 1,
  /** Published */
  Published = 2,
}

export enum ReleaseStatus {
  Undefined = 0,
  /** online */
  Online = 1,
  /** go offline */
  Offline = 2,
  /** Grey release (abandoned) */
  InGray = 3,
  /** small traffic */
  Canary = 4,
  /** single computer room */
  SingleDC = 5,
}

export enum ReleaseSubtaskStatus {
  /** Not started */
  PendingStart = 1,
  /** in progress */
  InProgress = 2,
  /** Successful execution to be confirmed */
  ExecuteSuccess = 3,
  /** pending approval */
  PendingApproval = 4,
  /** approved */
  ApprovalPassed = 5,
  /** approval rejected */
  ApprovalRejected = 6,
  /** Completed. */
  Finished = 7,
  /** fail */
  Failed = 8,
  /** Skipped */
  Skipped = 9,
  /** Rolled back */
  Rollbacked = 10,
  /** Cancelled */
  Canceled = 11,
}

export enum ReleaseTaskStatus {
  /** Not started */
  PendingStart = 1,
  /** in progress */
  Inprogress = 2,
  /** pending approval */
  PendingApproval = 3,
  /** approved */
  ApprovalPass = 4,
  /** approval rejected */
  ApprovalRejected = 5,
  /** Grey release */
  GrayReleasing = 6,
  /** release complete */
  Finished = 7,
  /** Cancelled */
  Canceled = 8,
  /** Rolled back */
  Rollbacked = 9,
}

export enum ReleaseType {
  Undefined = 0,
  /** publish */
  Release = 1,
  /** Rollback */
  RollBack = 2,
  /** go offline */
  Offline = 3,
  /** Grey release (scrap) */
  GrayRelease = 4,
  /** Grey release cancelled (abandoned) */
  GrayCancel = 5,
  /** canary */
  CanaryRelease = 6,
  /** Single room release */
  SingleDCRelease = 7,
}

export enum ReplyType {
  /** Final result */
  ReplyTypeFinalAnswer = 0,
  /** tool call */
  ReplyTypeToolCall = 1,
}

export enum ReportEventType {
  Undefined = 0,
  /** Debugging the Official Prompt */
  DebugOfficialPrompt = 1,
  /** Adopt the Official Prompt */
  AdoptOfficialPrompt = 2,
}

/** resource type */
export enum ResourceType {
  Undefined = 0,
  Space = 1,
  Prompt = 2,
  Application = 3,
  Evaluation = 4,
  Trace = 5,
  Agent = 6,
}

/** secret label */
export enum SecurityLevel {
  Undefined = 0,
  L1 = 1,
  L2 = 2,
  L3 = 3,
  L4 = 4,
}

/** Spatial character type */
export enum SpaceRoleType {
  Undefined = 0,
  /** person in charge */
  Owner = 1,
  /** developer */
  Developer = 2,
  /** tester */
  Tester = 3,
}

/** space type */
export enum SpaceType {
  Undefined = 0,
  Personal = 1,
  Team = 2,
  /** official space */
  Official = 3,
}

export enum StreamState {
  /** non-streaming */
  StreamStateNone = 1,
  /** Streaming starts (first packet) */
  StreamStateBegin = 2,
  /** streaming */
  StreamStateStreaming = 3,
  /** End of churn transfer (tail packet) */
  StreamStateEnd = 4,
}

export enum TenantType {
  /** Byte */
  ByteDance = 0,
  /** Dcar */
  Dcar = 1,
}

export enum ToolChoiceType {
  Auto = 1,
  None = 2,
  Specific = 3,
}

export enum ToolType {
  Function = 1,
  /** for gemini native tool */
  GoogleSearch = 2,
}

export enum TriggerOperation {
  /** start */
  Start = 1,
  /** approved */
  ApprovalPass = 2,
  /** approval rejected */
  ApprovalReject = 3,
  /** complete */
  Finish = 4,
  /** Retry */
  Retry = 5,
  /** skip */
  Skip = 6,
  /** Next step (currently automatically triggered, no front-end trigger is required) */
  Next = 7,
}

/** Variable type */
export enum VariableType {
  Undefined = 0,
  String = 1,
  /** Deprecated, using Number does not partition integers and floating-point numbers */
  Integer = 2,
  Boolean = 3,
  Number = 4,
  Array = 5,
  Object = 6,
  Placeholder = 7,
  Image = 8,
}
/* eslint-enable */
