/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum Action {
  Undefined = 0,
  Authorize = 1,
  Revoke = 2,
}

/** subject type */
export enum AuthPrincipalType {
  Undefined = 0,
  /** user */
  User = 1,
  /** department */
  Department = 2,
  /** Coze logo */
  CozeIdentifier = 3,
}

export enum Connector {
  undefined = 0,
  feishu = 1,
  coze = 2,
  gitlab = 3,
}

/** resource type */
export enum ResourceType {
  Undefined = 0,
  Space = 1,
  Prompt = 2,
  Application = 3,
  Evaluation = 4,
  Trace = 5,
  Agent = 6,
}

export enum TenantType {
  /** Byte */
  ByteDance = 0,
  /** Dcar */
  Dcar = 1,
}

/** operation information */
export interface AuthAction {
  /** unique identifier */
  unique_key?: string;
  /** Operation display name */
  name?: string;
  /** Entity type, century does not bind entities, only records operation objects */
  entity_type?: string;
}

/** Coze logo */
export interface AuthCozeIdentifier {
  /** identity ticket */
  identity_ticket?: string;
}

/** authentication department */
export interface AuthDepartment {
  /** Department ID */
  department_id?: string;
}

/** Authentication resources, objects */
export interface AuthEntity {
  /** entity unique ID */
  id?: string;
  /** entity type */
  entity_type?: string;
  /** Space ID */
  space_id?: string;
  /** Entity owner user ID */
  owner_user_id?: string;
}

export interface AuthorizationRecord {
  connector?: Connector;
  action?: Action;
  scopes?: Array<string>;
  created_at?: Int64;
  is_expired?: boolean;
}

/** Authentication subject */
export interface AuthPrincipal {
  /** subject type */
  auth_principal_type?: AuthPrincipalType;
  /** authenticated user */
  auth_user?: AuthUser;
  /** authentication department */
  auth_department?: AuthDepartment;
  /** Coze logo */
  auth_coze_identifier?: AuthCozeIdentifier;
}

/** Role Information */
export interface AuthRole {
  /** unique identifier */
  unique_key?: string;
  /** character display name */
  name?: string;
  /** Associated Action List */
  actions?: Array<AuthAction>;
  /** entity type */
  entity_type?: string;
}

/** authenticated user */
export interface AuthUser {
  /** Email prefix, just send one with FornaxUserID. */
  sso_username?: string;
  /** Fornax User ID */
  fornax_user_id?: string;
  /** tenant type */
  tenant?: TenantType;
}

export interface OAuthConfig {
  connector: Connector;
  clientID?: string;
  redirectURI: string;
  authorizeURI?: string;
}

export interface ServiceAccount {
  id: Int64;
  defaultSpaceID: Int64;
  accessKey: string;
  secretKey?: string;
  secretKeyCipher?: string;
}

/** Subject + object + permission spot, authentication result */
export interface SubjectActionObjectAuthRes {
  /** Subject + object + permission spot authentication pair */
  subject_action_objects?: SubjectActionObjects;
  /** Is it allowed? */
  is_allowed?: boolean;
}

/** Subject + object + permission spot, authentication combination information */
export interface SubjectActionObjects {
  /** Subject, usually the user when authenticating */
  subject?: AuthPrincipal;
  /** permission unique identifier */
  action?: string;
  /** Object list, handled by default according to the logic of or */
  objects?: Array<AuthEntity>;
}

/** Subject + Object + Role */
export interface SubjectRoleObject {
  /** Principal, when authorized, user or department */
  subject?: AuthPrincipal;
  /** Role Information */
  role?: AuthRole;
  /** object */
  object?: AuthEntity;
}

export interface UploadToken {
  access_key_id: string;
  secret_access_key: string;
  session_token: string;
  expired_time: string;
  current_time: string;
}
/* eslint-enable */
