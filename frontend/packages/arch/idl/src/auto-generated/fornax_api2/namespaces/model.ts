/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum ByteTreeNodeResourceProvider {
  TCE = 1,
  TCC = 2,
  Bernard = 3,
}

export enum DataImportMode {
  Undefined = 0,
  /** add */
  Append = 1,
  /** cover */
  Overwrite = 2,
}

export enum DataSourceType {
  Undefined = 0,
  TOS = 1,
}

export enum Family {
  Undefined = 0,
  GPT = 1,
  Seed = 2,
  Gemini = 3,
  Claude = 4,
  Ernie = 5,
  Baichuan = 6,
  Qwen = 7,
  GLM = 8,
  SkyLark = 9,
  Moonshot = 10,
  Minimax = 11,
  Doubao = 12,
  Baichuan2 = 13,
  DeepSeekV2 = 14,
  DeepSeekCoderV2 = 15,
  DeepseekCoder = 16,
  InternLM2_5 = 17,
  Qwen2 = 18,
  Qwen2_5 = 19,
  Qwen2_5_Coder = 20,
  MiniCPM = 21,
  MiniCPM3 = 22,
  ChatGLM3 = 23,
  Mistral = 24,
  Gemma = 25,
  Gemma2 = 26,
  InternVL2 = 27,
  InternVL2_5 = 28,
  DeepSeekV3 = 29,
  DeepSeekR1 = 30,
}

export enum IDC {
  HL = 1,
  LF = 2,
  LQ = 3,
  YG = 4,
  GL = 5,
  MALIVA = 101,
  SG1 = 201,
  MY = 202,
  MY2 = 203,
  MYCISB = 204,
}

export enum MerlinFramework {
  LLMServerPublic = 1,
  Laplace = 2,
  /** E-commerce team-specific agreement, see  */
  Mixinfer = 3,
}

export enum MerlinLLMInterface {
  MatxInference = 1,
}

export enum MerlinQuotaPoolType {
  /** stable resources */
  Default = 0,
  /** tidal resources */
  Hybrid = 1,
  /** often mixed resources */
  HybridShare = 2,
  /** Third-party resource ali */
  ALI = 3,
  /** Third-party resources hw */
  HW = 4,
  /** hw arm */
  HWARM = 5,
  /** Flexible selling of resources, which may be preempted at any time */
  Spot = 6,
  /** Preemptible stable resources */
  Preemptible = 20,
}

export enum ModelFilterKey {
  ModelType = 1,
  ModelUserRight = 2,
  ModelFeature = 3,
  ModelFunction = 4,
  ModelScenario = 5,
  Custom = 20,
}

export enum ModelParamType {
  Unknown = 0,
  Float = 1,
  Int = 2,
  Boolean = 3,
  String = 4,
}

export enum ModelStatus {
  Undefined = 0,
  /** Health is available */
  Available = 1,
  /** Deploying */
  Deploying = 2,
  /** Unavailable (offline) */
  Unavailable = 3,
  /** offline. */
  Offlining = 4,
}

export enum Provider {
  /** GPT OpenAPI Platform */
  GPTOpenAPI = 1,
  /** Volcano Ark */
  Maas = 2,
  /** Temporarily specific seed from bot_engine access */
  BotEngine = 3,
  /** Merlin Platform */
  Merlin = 4,
  /** Merlin-seed platform */
  MerlinSeed = 5,
}

export enum ProviderAccountType {
  AKSK = 1,
  APIKey = 2,
}

export enum Region {
  CN = 1,
  SG = 2,
  US = 3,
}

export enum RuntimeCustomParamType {
  Unknown = 0,
  StringList = 1,
  IntList = 2,
  FloatList = 3,
  String = 4,
  Int = 5,
  Float = 6,
  Bool = 7,
}

export enum RuntimeHookType {
  Unknown = 0,
  MsgPreHook = 1,
}

export enum SftTaskBaseModelType {
  Foundation = 0,
  Custom = 1,
}

export enum SftTaskErrCode {
  Default = 0,
  /** The first 2 digits represent a misclassification, and the last 4 digits represent a specific error
10 Common Errors */
  InternalErr = 100000,
  /** Error uploading training dataset to platform */
  TrainingSetUploadedErr = 100001,
  /** Error creating fine tuning task on the platform side */
  CreateProviderSftTaskErr = 100002,
  /** 20 Merlin task instance overall error */
  MerlinTaskInternalError = 200000,
  /** Gpu cpu mem package matching error */
  MerlinGpuCpuMemRatioBad = 200001,
  /** 21 Merlin training scripts actively reported bugs */
  MerlinReportedInternalErr = 210000,
  MerlinOOM = 210001,
  /** No model training product found */
  MerlinNoModelGenerated = 210002,
  /** 30 Volcano Ark mission failed
ARK universal error */
  MaaSInternalErr = 300000,
  /** Validation set scaling exception */
  MaaSValidationSetSplitErr = 300001,
  /** The training data format does not meet expectations */
  MaaSTrainingSetNoValid = 300002,
  /** The Huoshan Account of the business party has not opened the model service. */
  MaaSAccountModelServiceIsNotActivated = 300003,
  /** Required request parameters are missing. Please confirm the request parameters and try again. */
  MaaSRequiredParamMissing = 300004,
  /** The requested parameter value is invalid. Please check the correctness of the parameter value and try again. */
  MaaSRequestParamInvalid = 300005,
  /** Object's Label Has Duplicate Keys */
  MaaSDuplicateTags = 300006,
  /** Cannot upload validation set and set training dataset sampling as validation set percentage at the same time, this operation is not supported */
  MaaSNotSupportedToConfigureValidationSetAndPercentage = 300007,
  /** You do not have permission to access the configuration of the underlying model, and this operation is not supported */
  MaaSNotPermittedToAccessModel = 300008,
  /** The model does not support this training method and does not support this operation */
  MaaSModelNotSupportTheTrainingMethod = 300009,
  /** The version of the base model does not support this training method and does not support this operation */
  MaaSFoundationModelNotSupportTheTrainingMethod = 300010,
  /** Your bill is overdue and this operation is not supported. Please go to the volcano expense center to recharge. */
  MaaSAccountBalanceOverdue = 300011,
  /** Unknown error, please try again later. If multiple attempts still fail, please submit a work order. */
  MaaSUnknownErr = 300012,
}

export enum SftTaskHyperParamType {
  Int = 1,
  Float = 2,
  String = 3,
  Bool = 4,
  Percentage = 5,
}

export enum SftTaskOutputExportType {
  /** Export to new model */
  NewModel = 1,
  /** Export to an existing model */
  ExistModel = 2,
}

export enum SftTaskOutputStatus {
  /** not exported */
  Available = 1,
  /** Exported */
  Exported = 2,
  /** Expired */
  Expired = 3,
  /** Exporting */
  Exporting = 4,
  /** Export failed */
  ExportFailed = 5,
}

export enum SftTaskResourceMerlinVersion {
  RemoveAnyGPU = 1,
}

export enum SftTaskRunEventType {
  Undefined = 0,
  ErrorOccured = 1,
  UploadCkpt = 2,
  ReportMetricsURL = 3,
  ReportProgress = 5,
  ReportTrainingStart = 6,
  ReportTrainingFinished = 7,
}

export enum SftTaskStatusPhase {
  Preprocessing = 0,
  Queued = 1,
  Deploying = 2,
  Running = 3,
  Completing = 4,
  Completed = 5,
  Terminating = 6,
  Terminated = 7,
  Failed = 8,
}

export enum SftTaskTrainingMethod {
  LoRA = 1,
  Full = 2,
}

export enum SftTaskTrainingType {
  SftFineTuning = 1,
}

export enum SftTaskValidationSetType {
  SplitFromTrainingSet = 1,
}

export enum TaskStatus {
  Undefined = 0,
  /** Initializing now. */
  Initializing = 1,
  /** Running now. */
  Running = 2,
  /** successfully completed */
  Done = 3,
  /** fail */
  Failed = 4,
  /** manual termination */
  Terminated = 5,
  /** Completed successfully, but with errors */
  DoneWithError = 6,
}

export enum TrainingDataFileType {
  Undefined = 0,
  JSONL = 1,
}

export enum TrainingDatasetType {
  Undefined = 0,
  SFTChat = 1,
  SFTFunctionCall = 2,
  SFTMultiModalUnderstanding = 3,
}

export enum TrainingFileOpType {
  Undefined = 0,
  Get = 1,
  Put = 2,
}

export enum UsageScenario {
  /** Default scene */
  Default = 1,
  /** evaluation scenario */
  Evaluation = 2,
  /** Prompt as a Service */
  PromptAsAService = 3,
  /** AI marking */
  AIAnnotate = 4,
  /** mass score */
  AIScore = 5,
  /** data label */
  AITag = 6,
}

export enum ValidateStatus {
  Pass = 1,
  Failed = 2,
  Skip = 3,
}

export enum VisibleMode {
  /** Default (visible only in the model's space) */
  Default = 1,
  /** Designated space visible */
  Specified = 2,
  /** All spaces are visible */
  All = 3,
}

export interface Ability {
  /** maximum context length */
  maxContextTokens?: Int64;
  /** Maximum input length */
  maxInputTokens?: Int64;
  /** Maximum output length */
  maxOutputTokens?: Int64;
  /** Whether to support function calls */
  functionCallEnabled?: boolean;
  /** Whether to support JSON mode */
  jsonModeEnabled?: boolean;
  /** Whether to support multimodality (model input) */
  multiModalEnabled?: boolean;
  /** Multimodal capability configuration (model input) */
  multiModalAbility?: MultiModalAbility;
  /** Message preprocessing hook */
  messagePreHandleHook?: RuntimeHook;
  /** The available parameter configuration of the model has a higher priority than the original maxContextTokens/maxInputTokens/maxOutputTokens. */
  modelParams?: Array<ModelParam>;
  /** Whether to support the thinking ability switch */
  thinkingSwitchEnabled?: boolean;
  /** Thinking ability allocation */
  thinkingAbility?: ThinkingAbility;
  /** Whether to support multimodality (model output) */
  multiModalOutputEnabled?: boolean;
}

export interface Account {
  /** account id */
  id?: Int64;
  /** Is it a public account? */
  isPublic?: boolean;
  /** Model ID */
  modelID?: Int64;
  /** Own space id */
  spaceID?: Int64;
  /** area */
  region?: Region;
  /** usage scenario */
  usageScenario?: UsageScenario;
  /** Authorization authentication information */
  authorization?: Authorization;
  /** Limited viewership of information */
  quota?: Quota;
  /** founder */
  createdBy?: string;
  /** Update Person */
  updatedBy?: string;
  /** creation time */
  createdAt?: Int64;
  /** update time */
  updatedAt?: Int64;
  /** Edit version (used to solve the problem of multiple people updating at the same time) */
  editVersion?: Int64;
  /** Model platform account id, provided when referencing the account hosted on the platform, empty when adding AKSK/Key directly. */
  modelProviderAccountID?: Int64;
}

export interface Authorization {
  gptOpenAPI?: GPTOpenAPIAuth;
  maas?: MaasAuth;
  botEngine?: BotEngineAuth;
}

export interface BotEngineAuth {
  connectorID?: Int64;
}

/** Notice: Only partial information is included here */
export interface ByteTreeNode {
  id?: string;
  name?: string;
  i18nName?: string;
  type?: string;
  path?: string;
  i18nPath?: string;
  levelID?: Int64;
  isLeaf?: boolean;
}

export interface DataSource {
  type?: DataSourceType;
  tosFile?: TOSFile;
}

export interface DeployQuota {
  nodeID?: string;
  nodePath?: string;
  type?: string;
  displayType?: string;
  region?: string;
  zone?: string;
  /** available */
  available?: Int64;
}

export interface GPTOpenAPIAuth {
  ak?: string;
}

export interface GPTOpenAPIInfo {
  apiBaseURL?: string;
  apiVersion?: string;
}

export interface IDCDeployDetail {
  deployID?: string;
  /** Resource corresponds to ByteTree node id */
  byteNodeID?: string;
  region?: string;
  deviceType?: string;
  deviceDisplayName?: string;
  instance?: string;
}

export interface InstanceResourceOption {
  cpus?: string;
  /** Unit GB */
  mem?: string;
  gpus?: string;
}

export interface InvalidDataSet {
  datasetID?: string;
  datasetName?: string;
  invalidReason?: string;
}

export interface MaaSAccountValidate {
  akValidate?: ProviderValidateDetail;
  kmsValidate?: ProviderValidateDetail;
  tosValidate?: ProviderValidateDetail;
}

export interface MaasAuth {
  /** When using a multi-cloud proxy, ak can not pass */
  ak?: string;
  sk?: string;
  /** 2.0 Control surface authentication method */
  apiKey?: string;
  usedForSFT?: boolean;
  projects?: Array<string>;
  /** Use a multi-cloud proxy */
  useMultiCloud?: boolean;
  /** Service account name, required when using a multi-cloud proxy */
  serviceAccountName?: string;
  /** Do you need to migrate to ByteCloud Ark? */
  needMigArk?: boolean;
}

export interface MaasInfo {
  host?: string;
  region?: string;
  /** v3 sdk */
  baseURL?: string;
  /** The ID of the fine-tuning model task */
  customizationJobsID?: string;
}

export interface MaaSRegionConfig {
  region?: string;
  host?: string;
}

export interface MerlinInfo {
  psm?: string;
  cluster?: string;
  idcs?: Array<IDC>;
  framework?: MerlinFramework;
  instanceResourceOption?: InstanceResourceOption;
  /** resource allocation */
  deployDetailM?: Partial<Record<IDC, IDCDeployDetail>>;
  /** Service Node ID */
  byteTreeNodeID?: Int64;
  /** ByteTree path */
  byteTreeNodePath?: string;
  /** Service details link */
  serviceDetailURL?: string;
  /** LLM interface information */
  llmInterface?: MerlinLLMInterface;
  /** Whether to turn on vllm */
  useVLLMServe?: boolean;
  /** The API path of calling vllm is only used when vllm is enabled */
  vllmAPIPath?: string;
}

export interface MerlinResourceCluster {
  type?: MerlinQuotaPoolType;
  /** Is it an available resource? */
  preemptible?: boolean;
  /** Merlin user group id */
  groupID?: Int64;
  /** Merlin user group name */
  groupName?: string;
  /** Merlin cluster id */
  clusterID?: string;
  /** Merlin cluster name */
  clusterName?: string;
  /** The key is the optional GPUV model, and the value is the number of remaining GPUs for that model */
  availableGpuvs?: Record<string, Int64>;
  /** Number of remaining CPUs */
  cpuNum?: string;
  /** The amount of remaining memory, in MB */
  memory?: string;
  /** computer room */
  dc?: string;
  /** describe */
  desc?: string;
  /** The key is the optional gpuv model, and the value is the recommended package for this model. */
  gpuvSets?: Record<string, MerlinResourceGpuSet>;
}

export interface MerlinResourceGpuSet {
  /** Number of GPUs */
  gpu?: number;
  /** CPU number */
  cpu?: number;
  /** Memory, unit is GB. */
  memory?: number;
}

export interface Model {
  /** Model id, can be empty in saas scenario, if it is empty, use identification+provider to call the model directly */
  id?: Int64;
  /** Model identification (name, endpoint, alignment with each provider) */
  identification?: string;
  /** display name */
  displayName?: string;
  /** model description */
  description?: string;
  /** Model family */
  family?: Family;
  /** provider */
  provider?: Provider;
  /** provider information */
  providerInfo?: ProviderInfo;
  /** Is it a public model? */
  isPublic?: boolean;
  /** visibility */
  visibility?: Visibility;
  /** Own space id */
  spaceID?: Int64;
  /** model capability */
  ability?: Ability;
  /** Default runtime parameters */
  defaultRuntimeParam?: RuntimeParam;
  /** founder */
  createdBy?: string;
  /** Update Person */
  updatedBy?: string;
  /** creation time */
  createdAt?: Int64;
  /** update time */
  updatedAt?: Int64;
  /** Edit version (used to solve the problem of multiple people updating at the same time) */
  editVersion?: Int64;
  modelStatus?: ModelStatus;
  /** Model ID on the model provider side */
  externalModelID?: string;
  /** Models generated by new inference points from the output of the fine-tuning model task */
  sftTaskID?: Int64;
  /** model version */
  modelVersion?: string;
  /** model avatar */
  modelIcon?: string;
  /** Model Company */
  modelVendor?: string;
  /** The real name of the model (displayed on the right side of the vendor, it may be the model name of the bean bag endpoint or other vendors) */
  actualName?: string;
  /** model label */
  modelTags?: Array<string>;
}

export interface ModelParam {
  name?: string;
  label?: string;
  desc?: string;
  /** Type: bool/int/float, etc */
  modelParamType?: ModelParamType;
  min?: string;
  max?: string;
  defaultVal?: string;
  /** enumeration */
  modelParamOptions?: Array<ModelParamOption>;
}

export interface ModelParamOption {
  /** impression value */
  label?: string;
  /** actual value */
  value?: string;
}

export interface MultiModalAbility {
  /** [1,99] Image configuration
Does it support pictures? */
  imageEnabled?: boolean;
  /** Does it support binary images? */
  binaryImageEnabled?: boolean;
  /** Single image size limit, range [0, 20] MB */
  maxImageSizeInMB?: number;
  /** Maximum number of images, range [-1, 100], -1 means unlimited */
  maxImageCount?: number;
}

export interface OnlyReadable {
  /** Whether read-only */
  onlyReadable?: boolean;
  /** read-only reason */
  desc?: string;
}

/** Hosted model platform account information */
export interface ProviderAccount {
  id?: string;
  spaceID?: string;
  provider?: Provider;
  type?: ProviderAccountType;
  name?: string;
  providerRegion?: string;
  maasAccount?: MaasAuth;
  updatedAt?: string;
  createdAt?: string;
  updatedBy?: string;
  createdBy?: string;
}

export interface ProviderAccountRelatedResources {
  sftTaskCount?: string;
  sftTaskIDs?: Array<string>;
  modelCount?: string;
  modelIDs?: Array<string>;
}

export interface ProviderInfo {
  gptOpenAPI?: GPTOpenAPIInfo;
  maas?: MaasInfo;
  merlin?: MerlinInfo;
}

export interface ProviderValidateDetail {
  status?: ValidateStatus;
  invalidatedReason?: string;
  /** If the verification fails, the user can go to the designated platform through the url here to deal with it. */
  providerURL?: string;
}

export interface Quota {
  qpm?: Int64;
  tpm?: Int64;
}

export interface RuntimeCustomParam {
  name?: string;
  type?: RuntimeCustomParamType;
  value?: string;
}

export interface RuntimeHook {
  type?: RuntimeHookType;
  url?: string;
}

export interface RuntimeParam {
  /** Maximum output length */
  maxTokens?: Int64;
  temperature?: number;
  topP?: number;
  topK?: Int64;
  jsonMode?: boolean;
  /** Stop word, the value must be a json serialized string array */
  stopWords?: string;
  /** Runtime custom parameters */
  runtimeCustomParams?: Array<RuntimeCustomParam>;
  /** Does the default support thinking ability? */
  thinkingEnabled?: boolean;
  /** Valid when thinkingEnabled==true, meaning default thinking max token */
  thinkingBudgetTokens?: Int64;
}

export interface SftTask {
  id?: string;
  name?: string;
  spaceID?: string;
  provider?: Provider;
  accountID?: string;
  accountName?: string;
  createdBy?: string;
  updatedBy?: string;
  createTimeInMS?: string;
  updateTimeInMS?: string;
  trainingType?: SftTaskTrainingType;
  trainingMethod?: SftTaskTrainingMethod;
  /** Selected model */
  sftBasedModel?: SftTaskBaseModel;
  /** set superparameter */
  hyperParams?: Array<SftTaskHyperParam>;
  /** Selected dataset */
  dataset?: SftTaskDataset;
  /** Maximum number of output models */
  modelOutputLimit?: number;
  /** Model output at task completion */
  outputs?: Array<SftTaskOutput>;
  /** state of the task */
  status?: SftTaskStatus;
  /** Links to various external platforms */
  providerURLInfo?: SftTaskProviderURLInfo;
  /** describe */
  description?: string;
  /** Is Fornax's model associated? If so, it is not allowed to delete this task */
  isRelatedToFrnModels?: boolean;
  /** Resource allocation (currently only available for Merlin) */
  resource?: SftTaskResource;
  /** Training product configuration (currently only available for merlin) */
  outputConfig?: SftTaskOutputConfig;
  hyperParamsCategories?: Array<SftTaskHyperParamCategory>;
  /** Whether read-only */
  onlyReadable?: OnlyReadable;
}

export interface SftTaskBaseModel {
  /** custom model */
  customModel?: SftTaskCustomModel;
  /** basic model */
  foundationModel?: SftTaskFoundationModel;
  /** model type */
  type?: SftTaskBaseModelType;
}

export interface SftTaskCustomModel {
  id?: string;
  name?: string;
  updateTimeInMS?: string;
  /** Hyperparameters for the task of training this custom model */
  hyperParams?: Array<SftTaskHyperParam>;
  /** Which base model is this custom model trained on? */
  foundationModel?: SftTaskFoundationModel;
}

export interface SftTaskDataset {
  /** training dataset */
  trainingSet?: SftTaskTrainingSet;
  /** validation set */
  validationSet?: SftTaskValidationSet;
}

export interface SftTaskFoundationModel {
  name?: string;
  /** Model Source (Manufacturer) */
  vendor?: string;
  desc?: string;
  /** display name */
  displayName?: string;
  version?: string;
  versionUpdateTimeInMS?: string;
  versionDesc?: string;
  versionConfigID?: string;
  /** series */
  family?: Family;
  /** series description */
  familyName?: string;
  /** parameter quantity */
  modelSize?: string;
  /** context length */
  contextSize?: string;
  /** parameter description */
  modelFTType?: string;
  /** Model card URL */
  modelCardURL?: string;
  modelTags?: Array<string>;
  ability?: Ability;
  /** Whether the model is not visible in the front end (e.g. the doubao-embedding model, because the training dataset does not support embedding data, so the model is not displayed first) */
  invisible?: boolean;
}

export interface SftTaskHyperParam {
  name?: string;
  value?: string;
  type?: SftTaskHyperParamType;
  min?: string;
  max?: string;
  defaultValue?: string;
  desc?: string;
  options?: Array<string>;
  /** When selecting a custom model for incremental training, whether this parameter allows locking and does not allow users to modify it when creating a task */
  incrementalLearningLocked?: boolean;
  /** For display, if it is an empty string, use name as the bottom */
  displayName?: string;
  isRequired?: boolean;
}

export interface SftTaskHyperParamCategory {
  name?: string;
  displayName?: string;
  desc?: string;
  isRequired?: boolean;
  defaultValue?: boolean;
  value?: boolean;
  hyperParams?: Array<SftTaskHyperParam>;
  /** Help documentation link */
  helpDocLink?: string;
}

export interface SftTaskOutput {
  index?: number;
  customModelID?: string;
  customModelCreateTimeInMS?: string;
  createTimeInMS?: string;
  name?: string;
  /** Is it exported? */
  status?: SftTaskOutputStatus;
  /** Private model information registered in Fornax */
  registeredModel?: Array<SftTaskRegisteredModel>;
  /** describe */
  description?: string;
  /** expiration time */
  expireTimeInMS?: string;
  /** Version number, only the merlin model is supported for the time being. */
  modelVersion?: string;
  /** Model path (temporarily only merlin models are supported, which is the hdfs address) */
  modelPath?: string;
  /** This model (version) is at the URL of the model provider, and only the merlin model is supported for the time being */
  modelProviderURL?: string;
  /** Status details, temporarily only if status fails to export will it have a value. */
  statusDetail?: string;
}

export interface SftTaskOutputConfig {
  /** Exported model name */
  exportModelName?: string;
  /** export method */
  exportType?: SftTaskOutputExportType;
}

export interface SftTaskPresetDataset {
  name?: string;
}

export interface SftTaskProgress {
  /** The planned epoch */
  plannedEpoch?: Int64;
  /** The current epoch */
  currentEpoch?: Int64;
  /** The planned steps */
  plannedStep?: Int64;
  /** Current step */
  currentStep?: Int64;
  /** Estimated time remaining, seconds */
  eta?: Int64;
  /** Is the training completed? */
  isTraningFinished?: boolean;
}

export interface SftTaskProviderURLInfo {
  /** Task details */
  TaskDetailURL?: string;
  /** performance metric */
  MetricsURL?: string;
  /** log */
  LogURL?: string;
  /** Timeline */
  TimelineURL?: string;
  /** model output */
  OutputURL?: string;
  /** Training-time assessment */
  EvaluationURL?: string;
  /** System metrics */
  SystemMetricsURL?: string;
}

export interface SftTaskRegisteredModel {
  modelID?: string;
  name?: string;
}

export interface SftTaskResource {
  provider?: Provider;
  merlin?: SftTaskResourceMerlin;
}

export interface SftTaskResourceMerlin {
  type?: MerlinQuotaPoolType;
  /** User group id, only 1 is supported for the time being. */
  groupIDs?: Array<string>;
  /** cluster id */
  clusterID?: string;
  /** Whether to use available resources */
  preemptible?: boolean;
  /** Role configuration, only 1 is supported for the time being. */
  roles?: Array<SftTaskResourceMerlinRole>;
  /** Key is the user group id and val is the user group name */
  groupNames?: Record<Int64, string>;
  /** cluster name */
  clusterName?: string;
  /** The version of the Merlin resource format, currently the only function: because the resource format is not forward compatible, only the resource with the specified version number can be written to the new task when copying the fine-tuning task */
  version?: SftTaskResourceMerlinVersion;
}

export interface SftTaskResourceMerlinRole {
  /** Number of instances, required 1 */
  num?: number;
  /** Virtual GPU model */
  gpuv?: string;
  /** Number of GPUs */
  gpu?: number;
  /** CPU number */
  cpu?: number;
  /** Memory size, in MB */
  memory?: number;
}

export interface SftTaskStatus {
  /** state */
  phase?: SftTaskStatusPhase;
  /** Time of arrival */
  phaseTimeInMS?: string;
  /** The status is the queuing rank when queuing */
  queuePosition?: number;
  /** A detailed description of the status, such as an error message */
  detail?: string;
  /** status code */
  code?: number;
}

export interface SftTaskTrainingSet {
  trainingSetID?: string;
  /** preset dataset */
  presetDataset?: SftTaskPresetDataset;
  /** Preset datasets as a percentage of training datasets */
  presetDatasetPercentage?: number;
  /** Support fine-tuning tasks using multiple training datasets */
  trainingSetIDs?: Array<string>;
  /** custom dataset path */
  trainingSetPath?: string;
}

export interface SftTaskValidationSet {
  type?: SftTaskValidationSetType;
  /** Percentage split from training set */
  splitPercentage?: number;
}

export interface ThinkingAbility {
  /** Is thinking enabled by default? */
  switchDefaultEnabled?: boolean;
  /** Think maximum token */
  maxBudgetTokens?: Int64;
  /** Think minimum token, must be greater than 0 */
  minBudgetTokens?: Int64;
}

export interface TOSFile {
  bucket?: string;
  key?: string;
}

export interface TrainingDataImportTask {
  id?: string;
  datasetID?: string;
  status?: TaskStatus;
  fileType?: TrainingDataFileType;
  dataSource?: DataSource;
  mode?: DataImportMode;
  /** File size, in bytes */
  totalSize?: number;
  /** Processed data size, in bytes */
  processedSize?: number;
  /** Number of rows processed */
  processedLineCount?: number;
  /** Number of rows imported */
  outputLineCount?: number;
  errLog?: string;
  msg?: string;
  /** Fornax space ID */
  spaceID?: string;
  /** creator ID */
  createdBy?: string;
  /** Creation time, seconds */
  createdAt?: string;
  /** Updater ID */
  updatedBy?: string;
  /** Update time in seconds */
  updatedAt?: string;
}

export interface Visibility {
  mode?: VisibleMode;
  /** Mode is valid for Specified and is configured as a space other than the space to which the model belongs */
  spaceIDs?: Array<Int64>;
}
/* eslint-enable */
