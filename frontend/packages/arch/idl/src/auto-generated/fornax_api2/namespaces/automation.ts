/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as flow_devops_evaluation_task from './flow_devops_evaluation_task';

export type Int64 = string | number;

export enum ApplyStatus {
  Pending = 1,
  Approved = 2,
  Rejected = 3,
  Canceled = 4,
}

export enum BuiltinSpanFilterType {
  Undefined = 0,
  /** Root Node on Business Meaning (as distinct from Trace Root) */
  BizRootSpan = 1,
  /** Model span */
  LLMSpan = 2,
  /** non-built-in filtering */
  CustomSpan = 3,
}

/** Schedule */
export enum ExecutePeriodic {
  Undefined = 0,
  Everyday = 1,
  Workdays = 2,
  Weekends = 3,
  Monday = 4,
  Tuesday = 5,
  Wednesday = 6,
  Thursday = 7,
  Friday = 8,
  Saturday = 9,
  Sunday = 10,
}

/** Comparison operator */
export enum FilterCmpOp {
  Undefined = 0,
  /** greater than */
  GT = 1,
  /** greater than or equal */
  GTE = 2,
  /** less than */
  LT = 3,
  /** less than or equal */
  LTE = 4,
  In = 5,
  NotIn = 6,
  /** equal */
  Eq = 7,
  /** not equal */
  NEq = 8,
  Like = 9,
  NotLike = 10,
  /** Have the tag */
  Exists = 11,
  /** No tag */
  NotExists = 12,
}

/** logical operator */
export enum FilterLogicOp {
  Undefined = 0,
  Nop = 1,
  And = 2,
  Or = 3,
  Not = 4,
}

export enum ObjectType {
  Undefined = 0,
  CozeBot = 1,
  FornaxPSM = 2,
  Prompt = 3,
  Doubao = 4,
  FornaxAgent = 5,
}

export enum SecurityLevel {
  L4 = 4,
}

export enum Span2ColumnSourceType {
  PromptVariable = 1,
  SpanMeta = 2,
  SpanTag = 3,
}

export enum TaskStatusType {
  Undefined = 0,
  Unstarted = 1,
  Running = 2,
  Succeeded = 3,
  Failed = 4,
  Pending = 5,
  Stopped = 6,
}

/** Task */
export enum TaskType {
  Undefined = 0,
  /** Span import dataset */
  SpanToDataset = 1,
  /** Online Review Span */
  SpanEval = 2,
  /** Batch execution automation use cases */
  BatchExecAutoUseCase = 3,
  /** Deprecated: Use SpanToDataset uniformly
Data reflow for model fine-tuning */
  SpanToDatasetForModelSFT = 4,
}

export enum ValueKind {
  Undefined = 0,
  Bool = 1,
  Integer = 2,
  Double = 3,
  String = 4,
}

export interface ApplyTicket {
  id?: string;
  url?: string;
  /** ticket status */
  status?: ApplyStatus;
  /** approval node */
  node?: string;
  /** Effective time */
  validateAt?: string;
  /** failure time */
  invalidateAt?: string;
}

export interface BackfillStat {
  /** Number of spans retrieved from observations */
  retrievedSpanCount?: string;
  /** Number of spans written to dataset */
  backfilledSpanCount?: string;
  /** backfill status */
  backfillStatus?: TaskStatusType;
}

export interface BatchExecAutoUseCaseStat {
  common?: StatusDetailCommon;
  /** Implementation of each use case */
  evalCaseRun?: Array<EvalCaseRun>;
}

export interface ColumnInfo {
  /** Dataset column name */
  name: string;
  /** comment */
  desc?: string;
}

/** ProcessorConfig */
export interface DatasetConfig {
  /** 0 indicates a new dataset */
  datasetID: string;
  datasetName?: string;
  /** By default, the input & output tag of the span is written to the column of the same name in the dataset, and the backflow of other columns is defined through extraColumns */
  extraColumns?: Array<Span2ColumnConfig>;
  /** omitDefaultColumns=true, do not write the default input and output columns */
  omitDefaultColumns?: boolean;
  datasetDesc?: string;
}

/** Deprecated */
export interface DatasetForModelSFTConfig {
  datasetID?: string;
  datasetName?: string;
  customColumns?: Array<ColumnInfo>;
}

export interface EffectiveTime {
  /** unix timestamp */
  startAt?: string;
  /** unix timestamp */
  endAt?: string;
  /** Effective date, subject to the effective time */
  effectiveDays?: ExecutePeriodic;
  /** Effective time - start, HH: mm: SS */
  effectivePeriodStart?: string;
  /** Effective time - end, HH: mm: SS */
  effectivePeriodEnd?: string;
  /** Effective time - time zone, Â± HH: MM. */
  effectivePeriodTimeZone?: string;
}

export interface EvalCase {
  id: string;
  name?: string;
}

export interface EvalCaseRun {
  /** Use Case ID */
  caseID?: string;
  /** evaluation task ID */
  taskID?: string;
  caseName?: string;
  status?: flow_devops_evaluation_task.TaskStatus;
}

export interface EvalCasesConfig {
  evalCases: Array<EvalCase>;
}

export interface EvalRuleConfig {
  evalRuleID: string;
  evalRuleName?: string;
}

/** Rule */
export interface Rule {
  /** Task Object Type */
  objectType?: ObjectType;
  /** Task object unique key, corresponding to cozeBot and fornax psm appUID */
  objectUID?: string;
  objectName?: string;
  /** Specify additional information about the task object by filtering. Such as env + cluster for fornax psm */
  objectFilter?: SpanFilter;
  /** sampling configuration */
  sampler?: Sampler;
  /** filter criteria */
  spanFilter?: SpanFilter;
  /** Deprecated, typo, replace with triggerTime (13) field */
  tiggerTime?: TriggerTime;
  /** effective time window */
  effectiveTime?: EffectiveTime;
  /** The id of the task object on the fornax platform */
  objectID?: Int64;
  /** Built-in filters, including complex filtering logic defined at the server level. For filtering the "Data Type" field of the page */
  builtinFilter?: BuiltinSpanFilterType;
  /** reflow historical data */
  effectiveTimeFromPast?: EffectiveTime;
  /** Timed trigger timeliness configuration */
  triggerTime?: TriggerTime;
  /** Processor Config
dataset */
  dataset?: DatasetConfig;
  /** Online evaluation rules */
  evalRule?: EvalRuleConfig;
  /** Batch evaluation use cases */
  evalCases?: EvalCasesConfig;
  /** Deprecated data reflow for model fine tuning */
  datasetForModelSFT?: DatasetForModelSFTConfig;
}

/** Sampler */
export interface Sampler {
  /** sample rate */
  sampleRate?: number;
  /** upper limit of sampling */
  sampleSize?: string;
}

export interface Span2ColumnConfig {
  sourceType: Span2ColumnSourceType;
  /** Depending on the sourceType, its value is the span attribute, the key of the prompt variable, etc */
  sourceField: string;
  /** Specify the JSON extraction path for sourceField */
  sourceFieldJSONPath?: string;
  /** Dataset column name */
  datasetColumn: string;
}

export interface SpanEvalStat {
  common?: StatusDetailCommon;
  /** evaluation rule ID */
  ruleID?: string;
  /** evaluation task ID */
  taskID?: string;
  caseID?: Int64;
  /** Number of spans matching the filter */
  matchedSpan?: string;
  /** Number of spans hit by sampler */
  sampledSpan?: string;
  firstWrittenAt?: string;
  lastWrittenAt?: string;
  /** Waiting for review */
  queuing?: string;
  /** Under evaluation */
  evaluating?: string;
  /** Evaluation completed */
  evaluated?: string;
  /** review failed */
  evaluateFailed?: string;
}

/** Span filter */
export interface SpanFilter {
  op: FilterLogicOp;
  tagFilters?: Array<TagFilter>;
  spanFilters?: Array<SpanFilter>;
}

export interface SpanToDatasetStat {
  common?: StatusDetailCommon;
  /** Dataset ID */
  datasetID?: string;
  /** Number of spans matching the filter */
  matchedSpan?: string;
  /** Number of spans hit by sampler */
  sampledSpan?: string;
  /** upper limit of sampling */
  sampleLimit?: string;
  /** first write time */
  firstWrittenAt?: string;
  /** last write time */
  lastWrittenAt?: string;
  /** Number of spans written to the dataset */
  writtenSpan?: string;
  /** The dataset is full */
  hitsDatasetLimit?: boolean;
}

/** Task Status Detail */
export interface StatusDetailCommon {
  /** Reason for termination of task */
  pauseReason?: string;
}

/** field filter */
export interface TagFilter {
  tag: string;
  op: FilterCmpOp;
  valueKind: ValueKind;
  /** JSON-encoded values of the same type as valueKind. When op is a set-dependent operator value such as In, NotIn, etc., the type is an array corresponding to valueKind. */
  value?: string;
}

/** Field filter options */
export interface TagFilterOption {
  tag?: string;
  description?: string;
  isRequired?: boolean;
  type?: ValueKind;
  /** Permissible comparison operations */
  operators?: Array<FilterCmpOp>;
  /** list of options */
  options?: Array<string>;
  /** Whether to allow custom options */
  allowCustomOption?: boolean;
  /** Default unit */
  defaultUnit?: string;
}

/** Task */
export interface Task {
  /** Task ID */
  id?: string;
  /** name */
  name?: string;
  /** Location */
  spaceID?: string;
  /** type */
  type?: TaskType;
  /** state */
  status?: TaskStatusType;
  /** describe */
  description?: string;
  rule?: Rule;
  /** Can it be deleted */
  deletable?: boolean;
  /** Is it editable? */
  editable?: boolean;
  /** Classification */
  securityLevel?: SecurityLevel;
  /** Approval ticket information */
  ticket?: ApplyTicket;
  /** Status detail
Dataset import status details */
  spanToDatatasetStat?: SpanToDatasetStat;
  /** Online review status details */
  spanEvalStat?: SpanEvalStat;
  /** Batch Review Status Details */
  batchExecAutoUseCaseStat?: BatchExecAutoUseCaseStat;
  /** Backfill historical data details */
  backfillStat?: BackfillStat;
  /** creator */
  createdBy?: string;
  /** Updater */
  updatedBy?: string;
  /** creation time */
  createdAt?: string;
  /** update time */
  updatedAt?: string;
}

export interface TriggerTime {
  execAt?: string;
  /** repeat by day */
  repeatDays?: ExecutePeriodic;
}
/* eslint-enable */
