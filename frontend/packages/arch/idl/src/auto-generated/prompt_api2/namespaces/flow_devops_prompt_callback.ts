/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as base from './base';

export type Int64 = string | number;

export enum ContentType {
  Text = 1,
  Image = 2,
  Binary = 3,
}

export enum MessageType {
  System = 1,
  User = 2,
  Assistant = 3,
  Tool = 4,
  Placeholder = 20,
}

export enum ToolType {
  Function = 1,
}

export enum VariableType {
  Undefined = 0,
  String = 1,
  /** Deprecated, using Number does not partition integers and floating-point numbers */
  Integer = 2,
  Boolean = 3,
  Number = 4,
  Array = 5,
  Object = 6,
  Placeholder = 7,
}

export interface BinaryContent {
  mime_type?: string;
  data?: Blob;
}

export interface ContentPart {
  type?: ContentType;
  /** text content */
  text?: string;
  /** image URL */
  image?: Image;
  /** binary content */
  binary_content?: BinaryContent;
  /** configuration */
  config?: ContentPartConfig;
}

export interface ContentPartConfig {
  image_resolution?: string;
}

export interface FunctionCall {
  name?: string;
  arguments?: string;
}

export interface Image {
  url?: string;
}

/** Message */
export interface Message {
  id?: Int64;
  message_type?: MessageType;
  content?: string;
  tool_calls?: Array<ToolCall>;
  tool_call_id?: string;
  /** Multimodal message content sharding */
  parts?: Array<ContentPart>;
  metadata?: Record<string, string>;
}

export interface PromptTemplate {
  template_type?: string;
  message_list?: Array<Message>;
  /** variable definition */
  variable_defs?: Array<VariableDef>;
  metadata?: Record<string, string>;
}

export interface RenderPromptTemplateRequest {
  prompt_template?: PromptTemplate;
  /** Variable value */
  variable_vals?: Array<VariableVal>;
  base?: base.Base;
}

export interface RenderPromptTemplateResponse {
  message_list?: Array<Message>;
  base_resp?: base.BaseResp;
}

export interface ToolCall {
  id?: string;
  type?: ToolType;
  function_call?: FunctionCall;
}

export interface VariableDef {
  /** variable name */
  key?: string;
  /** variable description */
  desc?: string;
  /** Variable type */
  variable_type?: VariableType;
}

export interface VariableVal {
  /** variable name */
  key?: string;
  /** ordinary variable value */
  value?: string;
  /** Placeholder message */
  placeholder_messages?: Array<Message>;
}
/* eslint-enable */
