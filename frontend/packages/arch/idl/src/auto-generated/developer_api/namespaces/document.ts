/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum DocumentSourceType {
  /** local upload */
  Document = 0,
  /** url */
  Web = 1,
  /** custom */
  Custom = 2,
  /** third party */
  ThirdParty = 3,
}

export enum DocumentStatus {
  /** Uploading */
  Processing = 0,
  /** take effect */
  Enable = 1,
  /** failure */
  Disable = 2,
  /** delete */
  Deleted = 3,
  /** fail */
  Failed = 9,
}

export enum DocumentUpdateType {
  NoUpdate = 0,
  Cover = 1,
  Append = 2,
}

/** file type */
export enum FormatType {
  /** Text */
  Text = 0,
  /** form */
  Table = 1,
}

export interface CreateDocumentRequest {
  /** Knowledge Base ID */
  dataset_id?: string;
  /** Space ID */
  space_id?: string;
  /** file information */
  document?: DocumentInfo;
}

export interface CreateDocumentResponse {
  code?: number;
  msg?: string;
  /** document id */
  id?: string;
}

/** Table column information */
export interface DocTableColumn {
  id?: string;
  /** listing */
  column_name?: string;
  /** Is it a semantically matched column? */
  is_semantic?: boolean;
  /** List the serial number originally in excel */
  sequence?: string;
}

export interface DocTableSheet {
  /** Number of sheet */
  id?: Int64;
  /** Sheet name */
  sheet_name?: string;
  /** total number of rows */
  total_row?: Int64;
}

/** file information */
export interface DocumentInfo {
  name?: string;
  document_id?: string;
  /** file resource */
  tos_uri?: string;
  /** Number of bots used */
  bot_used_count?: number;
  /** creation time */
  create_time?: number;
  /** update time */
  update_time?: number;
  /** founder */
  creator_id?: string;
  /** number of segments included */
  slice_count?: number;
  /** filename suffix */
  type?: string;
  /** File size, number of bytes */
  size?: number;
  /** character count */
  char_count?: number;
  /** state */
  status?: DocumentStatus;
  /** hit count */
  hit_count?: number;
  /** source */
  source_type?: DocumentSourceType;
  /** update type */
  update_type?: DocumentUpdateType;
  /** update interval */
  update_interval?: number;
  /** slicing rule */
  rule?: string;
  /** file type */
  format_type?: FormatType;
  /** Table structure for table types */
  table_meta?: Array<DocTableColumn>;
  /** URL address */
  web_url?: string;
  /** Details of the status; if the slice fails, return the failure information */
  status_descript?: string;
  /** Has the document synchronized by the three parties been disconnected? */
  is_disconnect?: boolean;
  /** Tripartite file id */
  data_source_id?: Int64;
}

export interface GetDocumentTableInfoRequest {
  /** If the table is uploaded for the first URL, pass the value */
  submit_web_id?: string;
  /** If the table is uploaded for the first local file, pass the value */
  tos_uri?: string;
  /** If it is a table with an existing document, pass the value */
  document_id?: string;
  /** File ID of the tripartite data source */
  source_file_id?: string;
  /** file type */
  source_type?: DocumentSourceType;
}

export interface GetDocumentTableInfoResponse {
  code?: number;
  msg?: string;
  sheet_list?: Array<DocTableSheet>;
  /** key: sheet_id -> list<DocTableColumn> */
  table_meta?: Record<string, Array<DocTableColumn>>;
  /** key: sheet_id -> list_preview_data, list idx: line_idx, list elem: key(sequence) -> value(cell_data) */
  preview_data?: Record<string, Array<Record<string, string>>>;
}

export interface ListDocumentData {
  documents_info?: Array<DocumentInfo>;
  total?: number;
}

export interface ListDocumentRequest {
  dataset_id?: string;
  page?: number;
  size?: number;
  document_id?: string;
}

export interface ListDocumentResponse {
  code?: number;
  msg?: string;
  data?: ListDocumentData;
}

export interface UpdateDocumentRequest {
  document_id?: string;
  status?: DocumentStatus;
  document_name?: string;
  /** Table type metadata */
  table_meta?: Array<DocTableColumn>;
}

export interface UpdateDocumentResponse {
  code?: number;
  msg?: string;
}

export interface UpdateWebRuleRequest {
  document_id?: string;
  update_type?: DocumentUpdateType;
  update_interval?: number;
}

export interface UpdateWebRuleResponse {
  code?: number;
  msg?: string;
}
/* eslint-enable */
