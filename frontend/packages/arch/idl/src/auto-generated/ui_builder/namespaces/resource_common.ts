/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

export type Int64 = string | number;

export enum ActionKey {
  /** copy */
  Copy = 1,
  /** delete */
  Delete = 2,
  /** enable/disable */
  EnableSwitch = 3,
  /** edit */
  Edit = 4,
}

export enum CopyStatus {
  Successful = 1,
  Processing = 2,
  Failed = 3,
}

export enum ProjectResourceActionKey {
  /** rename */
  Rename = 1,
  /** Create a copy/copy to the current project */
  Copy = 2,
  /** Copy to repository */
  CopyToLibrary = 3,
  /** Move to Library */
  MoveToLibrary = 4,
  /** delete */
  Delete = 5,
  /** enable */
  Enable = 6,
  /** disable */
  Disable = 7,
  /** Switch to funcflow */
  SwitchToFuncflow = 8,
  /** Switch to chatflow */
  SwitchToChatflow = 9,
}

export enum ProjectResourceGroupType {
  Workflow = 1,
  Plugin = 2,
  Data = 3,
}

export enum PublishStatus {
  /** unpublished */
  UnPublished = 1,
  /** Published */
  Published = 2,
}

export enum ResourceCopyScene {
  /** Copy resources within the project, shallow copy */
  CopyProjectResource = 1,
  /** Copy the project resources to the Library, and publish after copying */
  CopyResourceToLibrary = 2,
  /** Move project resources to Library, copy to publish, and delete project resources later */
  MoveResourceToLibrary = 3,
  /** Copy Library Resources to Project */
  CopyResourceFromLibrary = 4,
  /** Copy the project, along with the resources. Copy the current draft. */
  CopyProject = 5,
  /** The project is published to the channel, and the associated resources need to be published (including the store). Publish with the current draft. */
  PublishProject = 6,
  /** Copy the project template. */
  CopyProjectTemplate = 7,
  /** The project is published to a template, and the template is published in the specified version of the project. */
  PublishProjectTemplate = 8,
  /** The project template is on the shelves. */
  LaunchProjectTemplate = 9,
  /** Draft version archive */
  ArchiveProject = 10,
  /** Online version loaded into draft, draft version loaded into draft */
  RollbackProject = 11,
  /** Cross-spatial replication of a single resource */
  CrossSpaceCopy = 12,
  /** item cross-spatial replication */
  CrossSpaceCopyProject = 13,
}

export enum ResType {
  Plugin = 1,
  Workflow = 2,
  Imageflow = 3,
  Knowledge = 4,
  UI = 5,
  Database = 7,
  Variable = 8,
}

export enum SyncOperation {
  Upsert = 1,
  Delete = 2,
}

/** struct ResourceCopyExtraInfo{
    //Indicates that after operating the resource, the resource should be changed to this namefter manipulating the resource, the resource should be changed to this name
    1 : optional string ResourceName (go.tag = "json:\"resource_name\"", agw.key = "resource_name")
    //Indicates the version number after the resource is publishedthe version number of the resource after it was published
    2 : optional string VersionNum  (go.tag = "json:\"version_num\"", agw.key = "version_num")
    //Version description of this versionion description of this version
    3 : optional string VersionDesc  (go.tag = "json:\"version_desc\"", agw.key = "version_desc")
    //Different information for each resource, for plugins, is a personal information collection declaration. schema and conventions for each resource partyn, and the plugin is a personal information collection declaration. schema and conventions for each resource party
    4 : optional string ResourceExtendInfo  (go.tag = "json:\"resource_extend_info\"", agw.key = "resource_extend_info")
} */
export enum TaskStatus {
  Successed = 1,
  Processing = 2,
  Failed = 3,
}

export interface RefTreeNode {
  ResourceLocator?: ResourceLocator;
  /** References to sub-resources can occur multiple times at different levels. A-B, A-C-B, A-D, B can appear in ChildrenNodes of A and C at the same time */
  ChildrenNodes?: Array<RefTreeNode>;
}

export interface ResourceCopyEnv {
  Scene?: ResourceCopyScene;
  /** Original project ID. Values if the copied resource is in the project. Scenario: CopyProjectResource, CopyResourceToLibrary, MoveResourceToLibrary, CopyProject */
  OriginProjectID?: Int64;
  /** Target project ID. If the copied resource is to be assigned project_id, there is a value. Scenario: CopyProjectResource, CopyResourceFromLibrary, CopyProject */
  TargetProjectID?: Int64;
  /** The ID of the resource to be copied/moved by the user. Valued if the target of the operation is a resource. Scenario: CopyProjectResource, CopyResourceToLibrary, MoveResourceToLibrary, CopyResourceFromLibrary */
  ResourceLocator?: ResourceLocator;
  /** The only constraint of the secondary task, the control idempotent. If there is one, it will be passed, and there is no need to pass it when initiating the task. */
  TaskUniqKey?: string;
  /** When the project is published, the project version. Scenario: PublishProject, PublishProjectTemplate */
  TargetProjectVersion?: Int64;
  OriginProjectSpaceID?: Int64;
  TargetProjectSpaceID?: Int64;
  /** operator user id */
  CurrentUserID?: Int64;
  /** When publishing a template, the original project version. or when copying a template, the project version of the template. */
  OriginProjectVersion?: Int64;
}

/** A structure used to locate a resource's data: a version of a resource */
export interface ResourceLocator {
  ResID?: Int64;
  ResType?: ResType;
  /** The current version of the resource, if not the latest version. Project release or Library release */
  PublishVersion?: Int64;
}
/* eslint-enable */
