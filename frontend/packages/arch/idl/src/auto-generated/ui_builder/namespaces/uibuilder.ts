/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as custom_package from './custom_package';
import * as base from './base';
import * as crawl from './crawl';
import * as resource_common from './resource_common';
import * as starry from './starry';

export type Int64 = string | number;

export enum ChannelType {
  /** web page */
  Web = 1,
  /** H5, Mini Program */
  Client = 2,
}

export enum CreatedBy {
  /** anyone */
  All = 1,
  /** current user */
  CurrentUser = 2,
}

export enum PreviewMode {
  Web = 1,
  H5 = 2,
}

export enum Scene {
  /** picture */
  Picture = 1,
  /** Audio */
  Audio = 2,
  /** video */
  Video = 3,
  /** thumbnail */
  Thumbnail = 4,
  /** file */
  File = 5,
}

export enum UserStatus {
  Normal = 1,
  Banned = 2,
  Canceled = 3,
}

export enum UserType {
  External = 0,
  Internal = 1,
}

export interface ChannelData {
  id?: string;
  ui_id?: string;
  channel_id?: number;
  sandbox_id?: string;
  /** UI associated with plugin */
  ui_relation?: UIRelation;
  /** describe */
  description?: string;
  /** DSL content */
  dsl_content?: string;
  creator_id?: Int64;
  /** Create timestamp */
  create_time?: string;
  /** Modify timestamp */
  update_time?: string;
}

export interface CompareComponentData {
  added?: Array<custom_package.ComponentMetaInfo>;
  deleted?: Array<custom_package.ComponentMetaInfo>;
  modified?: Array<custom_package.ComponentMetaInfo>;
  latest_package?: custom_package.Package;
  old_package?: custom_package.Package;
}

export interface CompareCustomComponentRequest {
  space_id: string;
  project_id: string;
  component_name: string;
  old_version_name: string;
  new_version_name?: string;
  Base?: base.Base;
}

export interface CompareCustomComponentResponse {
  data?: CompareComponentData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface ComponentData {
  component_info?: custom_package.Package;
  user_info?: UserBasicInfo;
  is_import?: boolean;
}

export interface ComponentListData {
  list?: Array<ComponentData>;
  total?: string;
}

export interface CreateSnapshotForOpenAPIData {
  /** Snapshot URL address */
  url?: string;
}

export interface CreateSnapshotForOpenAPIRequest {
  /** Project ID */
  app_id?: string;
  /** Project Channel */
  channel?: number;
  /** ext_json */
  ext_json?: string;
  /** Screenshot selection */
  screenshot_option?: crawl.ScreenshotOption;
  /** Analog device information */
  device?: crawl.Device;
  /** ConnectorID */
  connector_id?: string;
  /** js element selector */
  wait_element?: string;
  Base?: base.Base;
}

export interface CreateSnapshotForOpenAPIResponse {
  data?: CreateSnapshotForOpenAPIData;
  code?: number;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CreateSnapshotForWebRequest {
  /** Project ID */
  project_id: string;
  /** Project Version Code */
  version_code: string;
  /** Project Channel */
  channel: number;
  /** ext_json */
  ext_json?: string;
  /** Screenshot selection */
  screenshot_option?: crawl.ScreenshotOption;
  /** Analog device information */
  device?: crawl.Device;
  /** ConnectorID */
  connector_id?: string;
  /** js selector */
  wait_element: string;
  Base?: base.Base;
}

export interface CreateSnapshotForWebResponse {
  data?: SnapshotData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CreateSnapshotRequest {
  /** Project ID */
  project_id: string;
  /** Project Version Code */
  version_code?: string;
  /** Project Channel */
  channel: number;
  /** ext_json */
  ext_json?: string;
  /** Screenshot selection */
  screenshot_option?: crawl.ScreenshotOption;
  /** Analog device information */
  device?: crawl.Device;
  /** ConnectorID */
  connector_id?: string;
  /** js selector */
  wait_element: string;
  Base?: base.Base;
}

export interface CreateSnapshotResponse {
  data?: SnapshotData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface CreateUIRequest {
  space_id?: string;
  project_id?: string;
  ui_id?: string;
  ui_name?: string;
  channel?: ChannelType;
  'X-Space-Id'?: string;
  'X-Project-Id'?: string;
  Base?: base.Base;
}

export interface CreateUIResponse {
  data?: UIData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DeleteCustomComponentRequest {
  project_id: string;
  component_name: string;
  Base?: base.Base;
}

export interface DeleteCustomComponentResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface DSLData {
  dsl_content?: string;
  ui_relation?: UIRelation;
  ext_pages?: string;
  entry_page_path?: string;
  tab_bar?: string;
}

export interface GenerateCodePackageData {
  /** outgoing package ID */
  generate_id: string;
  /** Project ID */
  project_id: string;
  /** Project Version Code */
  version_code: string;
  /** Task status: 0 pending; 1 successful; 2 out of code; -1 failed */
  status: number;
  /** File URI */
  file_uri?: string;
  /** File URL */
  file_url?: string;
  /** Create timestamp */
  create_time?: string;
  /** Last modified timestamp */
  update_time?: string;
}

export interface GetCustomComponentListRequest {
  created_by?: CreatedBy;
  search?: string;
  channel_id: ChannelType;
  project_id: string;
  space_id: string;
  'X-Space-Id'?: string;
  page: number;
  size: number;
  Base?: base.Base;
}

export interface GetCustomComponentListResponse {
  data?: ComponentListData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetImportedComponentListRequest {
  channel_id: ChannelType;
  project_id: string;
  space_id: string;
  'X-Space-Id'?: string;
  page?: number;
  size?: number;
  Base?: base.Base;
}

export interface GetImportedComponentListResponse {
  data?: ComponentListData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetPublishSnapshotData {
  /** Snapshot */
  snapshot?: string;
}

export interface GetPublishSnapshotRequest {
  /** Project ID */
  project_id: string;
  /** Project Version Code */
  version_code: string;
  /** Project Channel */
  channel: ChannelType;
  Base?: base.Base;
}

export interface GetPublishSnapshotResponse {
  data?: GetPublishSnapshotData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetUIDSLRequest {
  /** Project ID */
  project_id: string;
  /** Project Version Code */
  version_code?: string;
  /** Project Channel */
  channel: ChannelType;
  /** Parse ext pages */
  with_ext_pages?: boolean;
  /** Whether to submit for trial */
  IsAudit?: boolean;
  /** ConnectorID */
  connector_id?: string;
  Base?: base.Base;
}

export interface GetUIDSLResponse {
  data?: DSLData;
  url_collection?: URLCollection;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface GetUIInfoByProjectVersionData {
  /** ui id */
  ui_id?: Int64;
  /** ui version */
  ui_version?: Int64;
  /** Follow the channel list of the release version */
  channel_list?: Array<number>;
  /** Current draft channel list */
  draftChannelList?: Array<number>;
}

export interface GetUIPreviewModeData {
  preview_mode_list: Array<PreviewMode>;
}

export interface GetUIRelationData {
  ref_tree_nodes_map?: Partial<
    Record<ChannelType, Array<resource_common.RefTreeNode>>
  >;
}

export interface GetUIRequest {
  space_id?: string;
  project_id?: string;
  ui_id?: string;
  starry_app_id?: string;
  'X-Space-Id'?: string;
  'X-Project-Id'?: string;
  Base?: base.Base;
}

export interface GetUIResponse {
  data?: UIData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface ImportCustomComponentRequest {
  project_id: string;
  component_name: string;
  version_name: string;
  space_id: string;
  channel_id: number;
  component_id?: string;
  Base?: base.Base;
}

export interface ImportCustomComponentResponse {
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface RefreshUIDSLInternalRequest {
  /** dsl */
  dsl_content: string;
  /** Resource expiration time, seconds */
  expire_time?: number;
  Base?: base.Base;
}

export interface RefreshUIDSLInternalResponse {
  data?: DSLData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface SnapshotData {
  /** Snapshot URL address */
  url: string;
}

export interface StarryGetSandboxData {
  Sandbox?: starry.ISandbox;
  App?: starry.IApp;
}

export interface StarryGetSandboxRefreshData {
  Sandbox?: starry.ISandbox;
}

export interface StarryGetSandboxRefreshRequest {
  sandbox_id?: string;
  'X-Space-Id'?: string;
  'X-Project-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetSandboxRefreshResponse {
  data?: StarryGetSandboxRefreshData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryGetSandboxRequest {
  sandbox_id?: string;
  with_app?: boolean;
  is_preview?: boolean;
  'X-Space-Id'?: string;
  'X-Project-Id'?: string;
  Base?: base.Base;
}

export interface StarryGetSandboxResponse {
  data?: StarryGetSandboxData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface StarryUpdateSandboxData {
  actionId?: string;
  sandbox?: string;
}

export interface StarryUpdateSandboxRequest {
  sandbox_id?: string;
  crdt_history?: string;
  action?: string;
  'X-Space-Id'?: string;
  'X-Project-Id'?: string;
  Base?: base.Base;
}

export interface StarryUpdateSandboxResponse {
  data?: StarryUpdateSandboxData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface UIData {
  ui_id?: string;
  space_id?: string;
  project_id?: string;
  starry_app_id?: string;
  /** 5:   string                                 DraftID             (agw.source = 'body',   agw.key = 'draft_id')                           , */
  ui_name?: string;
  publish_status?: number;
  creator_id?: string;
  audit_status?: number;
  /** Failed the review Details */
  audit_failure_details?: Array<number>;
  /** Thumbnail generation state */
  thumb_status?: number;
  /** Thumbnail name */
  thumb_name?: string;
  /** Create timestamp */
  create_time?: string;
  /** Last modified timestamp */
  update_time?: string;
  /** UI DSL content */
  dsl_content?: string;
  /** UI description */
  description?: string;
  /** Channel data details */
  channel_map?: Partial<Record<ChannelType, ChannelData>>;
  /** Channel list */
  channel_list?: Array<ChannelType>;
}

export interface UIRelation {
  plugin_ids?: Array<string>;
  workflow_ids?: Array<string>;
}

export interface UploadFileData {
  /** File URL */
  upload_url?: string;
  /** File URI, submit using this */
  upload_uri?: string;
}

export interface UploadFileRequest {
  /** file suffix */
  file_type?: string;
  /** file name */
  FileName?: string;
  /** file data */
  data?: Blob;
  /** scene */
  scene?: Scene;
  'X-Space-Id'?: string;
  'X-Project-Id'?: string;
  /** MIME type */
  'Content-Type'?: string;
  base?: base.Base;
}

export interface UploadFileResponse {
  data?: UploadFileData;
  code?: Int64;
  msg?: string;
  BaseResp?: base.BaseResp;
}

export interface URISet {
  uri?: string;
  scene?: Scene;
}

export interface URLCollection {
  urls?: Array<string>;
}

export interface URLMapData {
  /** map[uri]url */
  url_map?: Record<string, string>;
}

export interface UserBasicInfo {
  user_id: string;
  /** nickname */
  user_name: string;
  /** avatar */
  user_avatar: string;
  /** user name */
  user_unique_name?: string;
  /** user creation time */
  create_time?: Int64;
}
/* eslint-enable */
