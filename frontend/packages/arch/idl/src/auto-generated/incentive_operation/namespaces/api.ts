/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import * as common from './common';

export type Int64 = string | number;

export interface ListTaskRequest {
  page: Int64;
  size: Int64;
  task_id?: Int64;
  task_status?: common.TaskStatus;
  task_name?: string;
}

export interface ListTaskResponse {
  code: number;
  message: string;
  data?: ListTaskResult;
}

export interface ListTaskResult {
  task_list?: Array<Task>;
}

export interface ListUserTaskRequest {
  page_size: Int64;
  page_token?: string;
}

export interface ListUserTaskResponse {
  code: number;
  message: string;
  data?: ListUserTaskResult;
}

export interface ListUserTaskResult {
  user_task_list?: Array<UserTask>;
  has_more?: boolean;
  page_token?: string;
}

export interface Task {
  task_id?: string;
  task_name?: string;
  desc?: string;
  /** show
bill copy */
  bill_desc_starling_key?: string;
  /** User task center display copy */
  user_task_desc_starling_key?: string;
  /** Button related configuration */
  button?: common.UserTaskButton;
  /** Reward, it is tentatively planned that only one reward will be issued for each task in the first phase, and the reward can only be Token. */
  reward?: common.Reward;
  /** limit the number of times
limit the number of times */
  times_limit?: number;
  /** Whether to limit */
  limit_restriction?: boolean;
  /** refresh
Refresh Type */
  peroid_type?: common.PeriodType;
  /** cycle duration */
  peroid_value?: Int64;
  /** state */
  task_status?: common.TaskStatus;
}

export interface UpdateTaskRequest {
  task_id: string;
  /** display settings
bill copy */
  bill_desc_starling_key?: string;
  /** User task center display copy */
  user_task_desc_starling_key?: string;
  /** Button related configuration */
  button?: common.UserTaskButton;
  /** Reward settings, it is tentatively planned that only one reward will be issued for each task in the first phase, and the reward can only be Token.
If there are other rewards or multiple rewards, report an error directly */
  reward?: common.Reward;
  /** limit setting
limit the number of times */
  times_limit?: number;
  /** Whether to limit */
  limit_restriction?: boolean;
  /** Refresh the settings, there is only one task under each task group tentatively
If there are multiple tasks under the task group, an error will be reported directly
Refresh Type */
  peroid_type?: common.PeriodType;
  /** cycle duration */
  peroid_value?: Int64;
  /** Other configurations
Has it been hidden */
  hide?: boolean;
  /** Hide when done */
  drop_when_finish?: boolean;
  /** task description */
  task_desc?: string;
  /** The event trigger key, the original TCC configuration, is stored in the DB instead, and is used to map the task name to the task ID in the rules engine */
  event_trigger_key?: string;
  /** user control */
  user_control?: common.UserControl;
  /** blacklist */
  black_list?: Array<Int64>;
  /** whitelist */
  white_list?: Array<Int64>;
}

export interface UpdateTaskResponse {
  code: number;
  message: string;
}

export interface UpdateTaskStatusRequest {
  task_id: string;
  task_status?: common.TaskStatus;
}

export interface UpdateTaskStatusResponse {
  code: number;
  message: string;
}

export interface UserTask {
  task_id?: string;
  task_name?: string;
  desc?: string;
  reward_list?: Array<common.Reward>;
  button?: common.UserTaskButton;
  user_task_progress?: UserTaskProgress;
}

export interface UserTaskProgress {
  current?: Int64;
  total?: Int64;
}
/* eslint-enable */
