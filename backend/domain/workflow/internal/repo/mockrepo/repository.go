// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mockWorkflowRepo is a generated GoMock package.
package mockWorkflowRepo

import (
	context "context"
	reflect "reflect"

	canvas "code.byted.org/flow/opencoze/backend/domain/workflow/internal/canvas"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BatchGetSubWorkflowCanvas mocks base method.
func (m *MockRepository) BatchGetSubWorkflowCanvas(ctx context.Context, parent []*canvas.Node) (map[string]*canvas.Canvas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSubWorkflowCanvas", ctx, parent)
	ret0, _ := ret[0].(map[string]*canvas.Canvas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSubWorkflowCanvas indicates an expected call of BatchGetSubWorkflowCanvas.
func (mr *MockRepositoryMockRecorder) BatchGetSubWorkflowCanvas(ctx, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSubWorkflowCanvas", reflect.TypeOf((*MockRepository)(nil).BatchGetSubWorkflowCanvas), ctx, parent)
}

// GetSubWorkflowCanvas mocks base method.
func (m *MockRepository) GetSubWorkflowCanvas(ctx context.Context, parent *canvas.Node) (*canvas.Canvas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubWorkflowCanvas", ctx, parent)
	ret0, _ := ret[0].(*canvas.Canvas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubWorkflowCanvas indicates an expected call of GetSubWorkflowCanvas.
func (mr *MockRepositoryMockRecorder) GetSubWorkflowCanvas(ctx, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubWorkflowCanvas", reflect.TypeOf((*MockRepository)(nil).GetSubWorkflowCanvas), ctx, parent)
}
