// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package databasemock is a generated GoMock package.
package databasemock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	database "code.byted.org/flow/opencoze/backend/domain/workflow/crossdomain/database"
)

// MockCustomSQLExecutor is a mock of CustomSQLExecutor interface.
type MockCustomSQLExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCustomSQLExecutorMockRecorder
}

// MockCustomSQLExecutorMockRecorder is the mock recorder for MockCustomSQLExecutor.
type MockCustomSQLExecutorMockRecorder struct {
	mock *MockCustomSQLExecutor
}

// NewMockCustomSQLExecutor creates a new mock instance.
func NewMockCustomSQLExecutor(ctrl *gomock.Controller) *MockCustomSQLExecutor {
	mock := &MockCustomSQLExecutor{ctrl: ctrl}
	mock.recorder = &MockCustomSQLExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomSQLExecutor) EXPECT() *MockCustomSQLExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCustomSQLExecutor) Execute(ctx context.Context, request *database.CustomSQLRequest) (*database.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, request)
	ret0, _ := ret[0].(*database.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCustomSQLExecutorMockRecorder) Execute(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCustomSQLExecutor)(nil).Execute), ctx, request)
}

// MockQueryer is a mock of Queryer interface.
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer.
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance.
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockQueryer) Query(ctx context.Context, request *database.QueryRequest) (*database.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, request)
	ret0, _ := ret[0].(*database.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryerMockRecorder) Query(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), ctx, request)
}

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdater) Update(arg0 context.Context, arg1 *database.UpdateRequest) (*database.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*database.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUpdaterMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdater)(nil).Update), arg0, arg1)
}

// MockInserter is a mock of Inserter interface.
type MockInserter struct {
	ctrl     *gomock.Controller
	recorder *MockInserterMockRecorder
}

// MockInserterMockRecorder is the mock recorder for MockInserter.
type MockInserterMockRecorder struct {
	mock *MockInserter
}

// NewMockInserter creates a new mock instance.
func NewMockInserter(ctrl *gomock.Controller) *MockInserter {
	mock := &MockInserter{ctrl: ctrl}
	mock.recorder = &MockInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInserter) EXPECT() *MockInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockInserter) Insert(ctx context.Context, request *database.InsertRequest) (*database.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, request)
	ret0, _ := ret[0].(*database.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockInserterMockRecorder) Insert(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInserter)(nil).Insert), ctx, request)
}

// MockDeleter is a mock of Deleter interface.
type MockDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDeleterMockRecorder
}

// MockDeleterMockRecorder is the mock recorder for MockDeleter.
type MockDeleterMockRecorder struct {
	mock *MockDeleter
}

// NewMockDeleter creates a new mock instance.
func NewMockDeleter(ctrl *gomock.Controller) *MockDeleter {
	mock := &MockDeleter{ctrl: ctrl}
	mock.recorder = &MockDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleter) EXPECT() *MockDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeleter) Delete(arg0 context.Context, arg1 *database.DeleteRequest) (*database.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*database.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDeleterMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleter)(nil).Delete), arg0, arg1)
}
