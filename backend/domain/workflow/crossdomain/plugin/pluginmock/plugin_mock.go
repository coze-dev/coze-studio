// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go

// Package pluginmock is a generated GoMock package.
package pluginmock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	plugin "code.byted.org/flow/opencoze/backend/domain/workflow/crossdomain/plugin"
)

// MockPluginRunner is a mock of PluginRunner interface.
type MockPluginRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPluginRunnerMockRecorder
}

// MockPluginRunnerMockRecorder is the mock recorder for MockPluginRunner.
type MockPluginRunnerMockRecorder struct {
	mock *MockPluginRunner
}

// NewMockPluginRunner creates a new mock instance.
func NewMockPluginRunner(ctrl *gomock.Controller) *MockPluginRunner {
	mock := &MockPluginRunner{ctrl: ctrl}
	mock.recorder = &MockPluginRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginRunner) EXPECT() *MockPluginRunnerMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockPluginRunner) Invoke(ctx context.Context, request *plugin.PluginRequest) (*plugin.PluginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, request)
	ret0, _ := ret[0].(*plugin.PluginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockPluginRunnerMockRecorder) Invoke(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockPluginRunner)(nil).Invoke), ctx, request)
}
