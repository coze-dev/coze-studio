// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go
//
// Generated by this command:
//
//	mockgen -destination pluginmock/plugin_mock.go --package pluginmock -source plugin.go
//

// Package pluginmock is a generated GoMock package.
package pluginmock

import (
	context "context"
	reflect "reflect"

	plugin "code.byted.org/flow/opencoze/backend/domain/workflow/crossdomain/plugin"
	tool "github.com/cloudwego/eino/components/tool"
	gomock "go.uber.org/mock/gomock"
)

// MockToolService is a mock of ToolService interface.
type MockToolService struct {
	ctrl     *gomock.Controller
	recorder *MockToolServiceMockRecorder
	isgomock struct{}
}

// MockToolServiceMockRecorder is the mock recorder for MockToolService.
type MockToolServiceMockRecorder struct {
	mock *MockToolService
}

// NewMockToolService creates a new mock instance.
func NewMockToolService(ctrl *gomock.Controller) *MockToolService {
	mock := &MockToolService{ctrl: ctrl}
	mock.recorder = &MockToolServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolService) EXPECT() *MockToolServiceMockRecorder {
	return m.recorder
}

// GetPluginInvokableTools mocks base method.
func (m *MockToolService) GetPluginInvokableTools(ctx context.Context, req *plugin.PluginToolsInvokableRequest) (map[int64]tool.InvokableTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginInvokableTools", ctx, req)
	ret0, _ := ret[0].(map[int64]tool.InvokableTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInvokableTools indicates an expected call of GetPluginInvokableTools.
func (mr *MockToolServiceMockRecorder) GetPluginInvokableTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInvokableTools", reflect.TypeOf((*MockToolService)(nil).GetPluginInvokableTools), ctx, req)
}

// GetPluginToolsInfo mocks base method.
func (m *MockToolService) GetPluginToolsInfo(ctx context.Context, req *plugin.PluginToolsInfoRequest) (*plugin.PluginToolsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginToolsInfo", ctx, req)
	ret0, _ := ret[0].(*plugin.PluginToolsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginToolsInfo indicates an expected call of GetPluginToolsInfo.
func (mr *MockToolServiceMockRecorder) GetPluginToolsInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginToolsInfo", reflect.TypeOf((*MockToolService)(nil).GetPluginToolsInfo), ctx, req)
}
