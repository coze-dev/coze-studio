// Code generated by MockGen. DO NOT EDIT.
// Source: knowledge.go

// Package knowledgemock is a generated GoMock package.
package knowledgemock

import (
	context "context"
	reflect "reflect"

	knowledge "code.byted.org/flow/opencoze/backend/domain/workflow/crossdomain/knowledge"
	gomock "go.uber.org/mock/gomock"
)

// MockKnowledgeOperator is a mock of KnowledgeOperator interface.
type MockKnowledgeOperator struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeOperatorMockRecorder
}

// MockKnowledgeOperatorMockRecorder is the mock recorder for MockKnowledgeOperator.
type MockKnowledgeOperatorMockRecorder struct {
	mock *MockKnowledgeOperator
}

// NewMockKnowledgeOperator creates a new mock instance.
func NewMockKnowledgeOperator(ctrl *gomock.Controller) *MockKnowledgeOperator {
	mock := &MockKnowledgeOperator{ctrl: ctrl}
	mock.recorder = &MockKnowledgeOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeOperator) EXPECT() *MockKnowledgeOperatorMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockKnowledgeOperator) Retrieve(arg0 context.Context, arg1 *knowledge.RetrieveRequest) (*knowledge.RetrieveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", arg0, arg1)
	ret0, _ := ret[0].(*knowledge.RetrieveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockKnowledgeOperatorMockRecorder) Retrieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockKnowledgeOperator)(nil).Retrieve), arg0, arg1)
}

// Store mocks base method.
func (m *MockKnowledgeOperator) Store(ctx context.Context, document *knowledge.CreateDocumentRequest) (*knowledge.CreateDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, document)
	ret0, _ := ret[0].(*knowledge.CreateDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockKnowledgeOperatorMockRecorder) Store(ctx, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockKnowledgeOperator)(nil).Store), ctx, document)
}
