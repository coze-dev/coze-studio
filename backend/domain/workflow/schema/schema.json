{
  "nodes": [
    {
      "blocks": [],
      "data": {
        "nodeMeta": {
          "description": "工作流的起始节点，用于设定启动工作流需要的信息",
          "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Start-v2.jpg",
          "subTitle": "",
          "title": "开始"
        },
        "outputs": [
          {
            "name": "input_array",
            "required": true,
            "schema": {
              "type": "string"
            },
            "type": "list"
          },
          {
            "name": "input_array_1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "type": "list"
          },
          {
            "name": "batch_concurrency",
            "required": true,
            "type": "integer"
          },
          {
            "name": "optional",
            "required": false,
            "type": "string"
          }
        ],
        "trigger_parameters": []
      },
      "edges": null,
      "id": "100001",
      "meta": {
        "position": {
          "x": -8.243918918918919,
          "y": -82.4391891891892
        }
      },
      "type": "1"
    },
    {
      "blocks": [],
      "data": {
        "inputs": {
          "inputParameters": [
            {
              "input": {
                "schema": {
                  "type": "string"
                },
                "type": "list",
                "value": {
                  "content": {
                    "blockID": "163658",
                    "name": "key0_list",
                    "source": "block-output"
                  },
                  "rawMeta": {
                    "type": 99
                  },
                  "type": "ref"
                }
              },
              "name": "output"
            }
          ],
          "terminatePlan": "returnVariables"
        },
        "nodeMeta": {
          "description": "工作流的最终节点，用于返回工作流运行后的结果信息",
          "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-End-v2.jpg",
          "subTitle": "",
          "title": "结束"
        }
      },
      "edges": null,
      "id": "900001",
      "meta": {
        "position": {
          "x": 1323,
          "y": 18
        }
      },
      "type": "2"
    },
    {
      "blocks": [
        {
          "blocks": [],
          "data": {
            "inputs": {
              "code": "// 在这里，您可以通过 ‘params’  获取节点中的输入变量，并通过 'ret' 输出结果\n// 'params' 和 'ret' 已经被正确地注入到环境中\n// 下面是一个示例，获取节点输入中参数名为‘input’的值：\n// const input = params.input; \n// 下面是一个示例，输出一个包含多种数据类型的 'ret' 对象：\n// const ret = { \"name\": ‘小明’, \"hobbies\": [“看书”, “旅游”] };\n\nasync function main({ params }: Args): Promise<Output> {\n    // 构建输出对象\n    const ret = {\n        \"key0\": params.input + params.input_1, // 拼接两次入参 input 的值\n    };\n\n    return ret;\n}",
              "inputParameters": [
                {
                  "input": {
                    "type": "string",
                    "value": {
                      "content": {
                        "blockID": "163658",
                        "name": "input",
                        "source": "block-output"
                      },
                      "type": "ref"
                    }
                  },
                  "name": "input"
                },
                {
                  "input": {
                    "type": "string",
                    "value": {
                      "content": {
                        "blockID": "163658",
                        "name": "input_int_array",
                        "source": "block-output"
                      },
                      "rawMeta": {
                        "type": 1
                      },
                      "type": "ref"
                    }
                  },
                  "name": "input_1"
                }
              ],
              "language": 5,
              "settingOnError": {}
            },
            "nodeMeta": {
              "description": "编写代码，处理输入变量来生成返回值",
              "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg",
              "mainColor": "#00B2B2",
              "subTitle": "代码",
              "title": "代码"
            },
            "outputs": [
              {
                "name": "key0",
                "schema": [
                  {
                    "name": "key1",
                    "type": "string"
                  }
                ],
                "type": "object"
              }
            ]
          },
          "edges": null,
          "id": "143962",
          "meta": {
            "position": {
              "x": 92.64694185353045,
              "y": 45.07933272029426
            }
          },
          "type": "5"
        },
        {
          "blocks": [],
          "data": {
            "inputs": {
              "code": "// 在这里，您可以通过 ‘params’  获取节点中的输入变量，并通过 'ret' 输出结果\n// 'params' 和 'ret' 已经被正确地注入到环境中\n// 下面是一个示例，获取节点输入中参数名为‘input’的值：\n// const input = params.input; \n// 下面是一个示例，输出一个包含多种数据类型的 'ret' 对象：\n// const ret = { \"name\": ‘小明’, \"hobbies\": [“看书”, “旅游”] };\n\nasync function main({ params }: Args): Promise<Output> {\n    // 构建输出对象\n    const ret = {\n        \"key0\": params.input + params.input, // 拼接两次入参 input 的值\n        \"key1\": [\"hello\", \"world\"], // 输出一个数组\n        \"key2\": { // 输出一个Object\n            \"key21\": \"hi\"\n        },\n    };\n\n    return ret;\n}",
              "inputParameters": [
                {
                  "input": {
                    "type": "integer",
                    "value": {
                      "content": {
                        "blockID": "100001",
                        "name": "batch_concurrency",
                        "source": "block-output"
                      },
                      "rawMeta": {
                        "type": 2
                      },
                      "type": "ref"
                    }
                  },
                  "name": "batch_concurrency"
                }
              ],
              "language": 5,
              "settingOnError": {}
            },
            "nodeMeta": {
              "description": "编写代码，处理输入变量来生成返回值",
              "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg",
              "mainColor": "#00B2B2",
              "subTitle": "代码",
              "title": "代码_2"
            },
            "outputs": [
              {
                "name": "key0",
                "type": "string"
              },
              {
                "name": "key1",
                "schema": {
                  "type": "string"
                },
                "type": "list"
              },
              {
                "name": "key2",
                "schema": [
                  {
                    "name": "key21",
                    "type": "string"
                  }
                ],
                "type": "object"
              }
            ]
          },
          "edges": null,
          "id": "184826",
          "meta": {
            "position": {
              "x": 92.64694185353045,
              "y": 225.83486806332962
            }
          },
          "type": "5"
        }
      ],
      "data": {
        "inputs": {
          "batchSize": {
            "type": "integer",
            "value": {
              "content": "100",
              "type": "literal"
            }
          },
          "concurrentSize": {
            "type": "integer",
            "value": {
              "content": {
                "blockID": "100001",
                "name": "batch_concurrency",
                "source": "block-output"
              },
              "rawMeta": {
                "type": 2
              },
              "type": "ref"
            }
          },
          "inputParameters": [
            {
              "input": {
                "schema": {
                  "type": "string"
                },
                "type": "list",
                "value": {
                  "content": {
                    "blockID": "100001",
                    "name": "input_array",
                    "source": "block-output"
                  },
                  "type": "ref"
                }
              },
              "name": "input"
            },
            {
              "input": {
                "schema": {
                  "type": "string"
                },
                "type": "list",
                "value": {
                  "content": {
                    "blockID": "100001",
                    "name": "input_array_1",
                    "source": "block-output"
                  },
                  "rawMeta": {
                    "type": 99
                  },
                  "type": "ref"
                }
              },
              "name": "input_int_array"
            }
          ]
        },
        "nodeMeta": {
          "description": "通过设定批量运行次数和逻辑，运行批处理体内的任务",
          "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Batch-v2.jpg",
          "mainColor": "#00B2B2",
          "subTitle": "批处理",
          "title": "批处理"
        },
        "outputs": [
          {
            "input": {
              "schema": {
                "type": "string"
              },
              "type": "list",
              "value": {
                "content": {
                  "blockID": "143962",
                  "name": "key0.key1",
                  "source": "block-output"
                },
                "rawMeta": {
                  "type": 1
                },
                "type": "ref"
              }
            },
            "name": "key0_list"
          },
          {
            "input": {
              "schema": {
                "type": "string"
              },
              "type": "list",
              "value": {
                "content": {
                  "blockID": "143962",
                  "name": "key0.key1",
                  "source": "block-output"
                },
                "rawMeta": {
                  "type": 1
                },
                "type": "ref"
              }
            },
            "name": "key1_list"
          },
          {
            "input": {
              "schema": {
                "type": "string"
              },
              "type": "list",
              "value": {
                "content": {
                  "blockID": "184826",
                  "name": "key0",
                  "source": "block-output"
                },
                "rawMeta": {
                  "type": 1
                },
                "type": "ref"
              }
            },
            "name": "key0_list1"
          }
        ]
      },
      "edges": [
        {
          "sourceNodeID": "163658",
          "targetNodeID": "143962",
          "sourcePortID": "batch-function-inline-output"
        },
        {
          "sourceNodeID": "143962",
          "targetNodeID": "163658",
          "sourcePortID": "",
          "targetPortID": "batch-function-inline-input"
        },
        {
          "sourceNodeID": "163658",
          "targetNodeID": "184826",
          "sourcePortID": "batch-function-inline-output"
        },
        {
          "sourceNodeID": "184826",
          "targetNodeID": "163658",
          "sourcePortID": "",
          "targetPortID": "batch-function-inline-input"
        }
      ],
      "id": "163658",
      "meta": {
        "canvasPosition": {
          "x": 393.7541508519709,
          "y": 72.92066727970574
        },
        "position": {
          "x": 529.5,
          "y": -180
        }
      },
      "type": "28"
    },
    {
      "blocks": [],
      "data": {
        "inputs": {
          "code": "// 在这里，您可以通过 ‘params’  获取节点中的输入变量，并通过 'ret' 输出结果\n// 'params' 和 'ret' 已经被正确地注入到环境中\n// 下面是一个示例，获取节点输入中参数名为‘input’的值：\n// const input = params.input; \n// 下面是一个示例，输出一个包含多种数据类型的 'ret' 对象：\n// const ret = { \"name\": ‘小明’, \"hobbies\": [“看书”, “旅游”] };\n\nasync function main({ params }: Args): Promise<Output> {\n    // 构建输出对象\n    const ret = {\n        \"key0\": params.input, // 拼接两次入参 input 的值\n        \"key1\": params.optional\n    };\n\n    return ret;\n}",
          "inputParameters": [
            {
              "input": {
                "schema": {
                  "type": "string"
                },
                "type": "list",
                "value": {
                  "content": {
                    "blockID": "163658",
                    "name": "key0_list",
                    "source": "block-output"
                  },
                  "rawMeta": {
                    "type": 99
                  },
                  "type": "ref"
                }
              },
              "name": "input"
            },
            {
              "input": {
                "type": "string",
                "value": {
                  "content": "static_value",
                  "rawMeta": {
                    "type": 1
                  },
                  "type": "literal"
                }
              },
              "name": "input_1"
            },
            {
              "input": {
                "type": "string",
                "value": {
                  "content": {
                    "blockID": "100001",
                    "name": "optional",
                    "source": "block-output"
                  },
                  "rawMeta": {
                    "type": 1
                  },
                  "type": "ref"
                }
              },
              "name": "optional"
            }
          ],
          "language": 5,
          "settingOnError": {}
        },
        "nodeMeta": {
          "description": "编写代码，处理输入变量来生成返回值",
          "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg",
          "mainColor": "#00B2B2",
          "subTitle": "代码",
          "title": "代码_1"
        },
        "outputs": [
          {
            "name": "key0",
            "schema": {
              "type": "string"
            },
            "type": "list"
          },
          {
            "name": "key1",
            "type": "string"
          }
        ]
      },
      "edges": null,
      "id": "176395",
      "meta": {
        "position": {
          "x": 1009.5,
          "y": -180
        }
      },
      "type": "5"
    },
    {
      "blocks": [],
      "data": {
        "inputs": {
          "mergeGroups": [
            {
              "name": "Group1",
              "variables": [
                {
                  "type": "string",
                  "value": {
                    "content": "G",
                    "rawMeta": {
                      "type": 1
                    },
                    "type": "literal"
                  }
                },
                {
                  "type": "string",
                  "value": {
                    "content": "G",
                    "rawMeta": {
                      "type": 1
                    },
                    "type": "literal"
                  }
                },
                {
                  "type": "string",
                  "value": {
                    "content": "G",
                    "rawMeta": {
                      "type": 1
                    },
                    "type": "literal"
                  }
                }
              ]
            },
            {
              "name": "Group2",
              "variables": []
            }
          ]
        },
        "nodeMeta": {
          "description": "对多个分支的输出进行聚合处理",
          "icon": "https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/VariableMerge-icon.jpg",
          "mainColor": "#00B2B2",
          "subTitle": "变量聚合",
          "title": "变量聚合"
        },
        "outputs": [
          {
            "name": "Group1",
            "type": "string"
          }
        ]
      },
      "edges": null,
      "id": "194847",
      "meta": {
        "position": {
          "x": 1009.5,
          "y": 209.3392781464897
        }
      },
      "type": "32"
    }
  ],
  "edges": [
    {
      "sourceNodeID": "100001",
      "targetNodeID": "163658",
      "sourcePortID": ""
    },
    {
      "sourceNodeID": "176395",
      "targetNodeID": "900001",
      "sourcePortID": ""
    },
    {
      "sourceNodeID": "163658",
      "targetNodeID": "176395",
      "sourcePortID": "batch-output"
    }
  ],
  "versions": {
    "loop": "v2",
    "batch": "v2"
  }
}