package schema

import (
	"context"
	"errors"
	"fmt"

	"github.com/cloudwego/eino/compose"
	"github.com/cloudwego/eino/schema"

	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/batch"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/database"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/httprequester"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/knowledge"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/loop"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/qa"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/selector"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/textprocessor"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/variableaggregator"
	"code.byted.org/flow/opencoze/backend/domain/workflow/nodes/variableassigner"
	"code.byted.org/flow/opencoze/backend/domain/workflow/variables"
)

type NodeSchema struct {
	Key string `json:"key"`

	Type NodeType `json:"type"`

	// Configs are node specific configurations with pre-defined config key and config value.
	// Will not participate in request-time field mapping, nor as node's static values.
	// In a word, these Configs are INTERNAL to node's implementation, the workflow layer is not aware of them.
	Configs any `json:"configs"`

	// Inputs are node specific input fields with pre-defined field name, or user defined input fields with dynamic field name.
	// Can have either ref or literal as value.
	// Will participate in request-time field mapping, or as node's static values.
	// In a words, these Inputs are managed at workflow layer:
	// the workflow engine is responsible to infer field mappings and static values from these, and add dependencies accordingly.
	Inputs []*nodes.InputField `json:"inputs"`

	// Outputs are node specific output fields with pre-defined field name, or user defined output fields with dynamic field name.
	// Usually they do not have 'Source' information, as they are generated by node itself, not referenced from other nodes or set as static value.
	// In some cases, they can have 'Source' information, because they refer to outputs of inner workflow's nodes (such as Batch node's output),
	// or they just use static values (such as part of End node's output).
	// The workflow layer is not aware of these Outputs.
	Outputs map[string]*LayeredFieldInfo `json:"outputs"`

	Lambda *compose.Lambda // not serializable, used for internal test.
}

type LayeredFieldInfo struct {
	Info   *nodes.FieldInfo             `json:"info"`
	Object map[string]*LayeredFieldInfo `json:"object"`
}

type NodeType string

const (
	NodeTypeLLM                NodeType = "LLM"
	NodeTypeSelector           NodeType = "Selector"
	NodeTypeBatch              NodeType = "Batch"
	NodeTypeVariableAggregator NodeType = "VariableAggregator"
	NodeTypeIntentDetector     NodeType = "IntentDetector"
	NodeTypeTextProcessor      NodeType = "TextProcessor"
	NodeTypeHTTPRequester      NodeType = "HTTPRequester"
	NodeTypeLoop               NodeType = "Loop"
	NodeTypeContinue           NodeType = "Continue"
	NodeTypeBreak              NodeType = "Break"
	NodeTypeVariableAssigner   NodeType = "VariableAssigner"
	NodeTypeQuestionAnswer     NodeType = "QuestionAnswer"
	NodeTypeInputReceiver      NodeType = "InputReceiver"
	NodeTypeDatabaseCustomSQL  NodeType = "DatabaseCustomSQL"
	NodeTypeDatabaseQuery      NodeType = "DatabaseQuery"
	NodeTypeDatabaseInsert     NodeType = "DatabaseInsert"
	NodeTypeDatabaseDelete     NodeType = "DatabaseDelete"
	NodeTypeDatabaseUpdate     NodeType = "DatabaseUpdate"
	NodeTypeKnowledgeIndexer   NodeType = "KnowledgeIndexer"
	NodeTypeKnowledgeRetrieve  NodeType = "KnowledgeRetrieve"

	NodeTypeLambda NodeType = "Lambda"
)

type Node struct {
	Lambda          *compose.Lambda
	Graph           compose.AnyGraph
	InterruptBefore bool
}

func (s *NodeSchema) New(ctx context.Context, inner compose.Runnable[map[string]any, map[string]any]) (*Node, error) {
	switch s.Type {
	case NodeTypeLambda:
		if s.Lambda == nil {
			return nil, fmt.Errorf("lambda is not defined for NodeTypeLambda")
		}

		return &Node{Lambda: s.Lambda}, nil
	case NodeTypeSelector:
		conf, err := s.ToSelectorConfig()
		if err != nil {
			return nil, err
		}

		sl, err := selector.NewSelector(ctx, conf)
		if err != nil {
			return nil, err
		}

		i := func(ctx context.Context, in map[string]any) (int, error) {
			newIn, err := s.SelectorInputConverter(in)
			if err != nil {
				return -1, err
			}

			return sl.Select(ctx, newIn)
		}

		return &Node{Lambda: compose.InvokableLambda(i)}, nil
	case NodeTypeBatch:
		if inner == nil {
			return nil, fmt.Errorf("inner workflow must not be nil when creating batch node")
		}

		conf, err := s.ToBatchConfig(inner)
		if err != nil {
			return nil, err
		}

		b, err := batch.NewBatch(ctx, conf)
		if err != nil {
			return nil, err
		}

		return &Node{Lambda: compose.InvokableLambda(b.Execute)}, nil
	case NodeTypeVariableAggregator:
		conf, err := s.ToVariableAggregatorConfig()
		if err != nil {
			return nil, err
		}

		va, err := variableaggregator.NewVariableAggregator(ctx, conf)
		if err != nil {
			return nil, err
		}

		i := func(ctx context.Context, in map[string]any) (map[string]any, error) {
			newIn, err := s.VariableAggregatorInputConverter(in)
			if err != nil {
				return nil, err
			}

			return va.Invoke(ctx, newIn)
		}

		return &Node{Lambda: compose.InvokableLambda(i)}, nil
	case NodeTypeTextProcessor:
		conf, err := s.ToTextProcessorConfig()
		if err != nil {
			return nil, err
		}

		tp, err := textprocessor.NewTextProcessor(ctx, conf)
		if err != nil {
			return nil, err
		}

		return &Node{Lambda: compose.InvokableLambda(tp.Invoke)}, nil
	case NodeTypeHTTPRequester:
		conf, err := s.ToHTTPRequesterConfig()
		if err != nil {
			return nil, err
		}

		hr, err := httprequester.NewHTTPRequester(ctx, conf)
		if err != nil {
			return nil, err
		}

		return &Node{Lambda: compose.InvokableLambda(hr.Invoke)}, nil
	case NodeTypeContinue:
		i := func(ctx context.Context, in map[string]any, opts ...any) (map[string]any, error) {
			return map[string]any{}, nil
		}
		c := func(ctx context.Context, in *schema.StreamReader[map[string]any], opts ...any) (map[string]any, error) {
			in.Close()
			return map[string]any{}, nil
		}
		l, err := compose.AnyLambda(i, nil, c, nil)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: l}, nil
	case NodeTypeBreak:
		b, err := loop.NewBreak(ctx, &variables.ParentIntermediateStore{})
		if err != nil {
			return nil, err
		}
		i := func(ctx context.Context, in map[string]any, opts ...any) (map[string]any, error) {
			if err := b.DoBreak(ctx); err != nil {
				return nil, err
			}
			return map[string]any{}, nil
		}
		c := func(ctx context.Context, in *schema.StreamReader[map[string]any], opts ...any) (map[string]any, error) {
			in.Close()
			if err := b.DoBreak(ctx); err != nil {
				return nil, err
			}
			return map[string]any{}, nil
		}
		l, err := compose.AnyLambda(i, nil, c, nil)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: l}, nil
	case NodeTypeVariableAssigner:
		handler := &variables.VariableHandler{
			UserVarStore:               nil, // TODO: inject this
			SystemVarStore:             nil, // TODO: inject this
			AppVarStore:                nil, // TODO: inject this
			ParentIntermediateVarStore: &variables.ParentIntermediateStore{},
		}

		conf, err := s.ToVariableAssignerConfig(handler)
		if err != nil {
			return nil, err
		}
		va, err := variableassigner.NewVariableAssigner(ctx, conf)
		if err != nil {
			return nil, err
		}
		i := func(ctx context.Context, in map[string]any) (map[string]any, error) {
			err := va.Assign(ctx, in)
			if err != nil {
				return nil, err
			}

			return map[string]any{}, nil
		}
		return &Node{Lambda: compose.InvokableLambda(i)}, nil
	case NodeTypeLoop:
		conf, err := s.ToLoopConfig(inner)
		if err != nil {
			return nil, err
		}
		l, err := loop.NewLoop(ctx, conf)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: compose.InvokableLambda(l.Execute)}, nil
	case NodeTypeQuestionAnswer:
		conf, err := s.ToQAConfig(ctx)
		if err != nil {
			return nil, err
		}
		qA, err := qa.NewQuestionAnswer(ctx, conf)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: compose.InvokableLambda(qA.Execute)}, nil
	case NodeTypeInputReceiver:
		i := func(ctx context.Context, in map[string]any) (map[string]any, error) {
			return in, nil
		}
		return &Node{Lambda: compose.InvokableLambda(i), InterruptBefore: true}, nil
	case NodeTypeDatabaseCustomSQL:
		conf, err := s.ToDatabaseCustomSQLConfig()
		if err != nil {
			return nil, err
		}

		sqler, err := database.NewCustomSQL(ctx, conf)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: compose.InvokableLambda(sqler.Execute)}, nil
	case NodeTypeDatabaseQuery:
		conf, err := s.ToDatabaseQueryConfig()
		if err != nil {
			return nil, err
		}

		query, err := database.NewQuery(ctx, conf)
		if err != nil {
			return nil, err
		}

		i := func(ctx context.Context, in map[string]any) (map[string]any, error) {
			conditionGroup, err := database.ConvertClauseGroupToConditionGroup(ctx, conf.ClauseGroup, in)
			if err != nil {
				return nil, err
			}
			return query.Query(ctx, conditionGroup)
		}
		return &Node{Lambda: compose.InvokableLambda(i)}, nil
	case NodeTypeDatabaseInsert:
		conf, err := s.ToDatabaseInsertConfig()
		if err != nil {
			return nil, err
		}

		insert, err := database.NewInsert(ctx, conf)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: compose.InvokableLambda(insert.Insert)}, nil
	case NodeTypeDatabaseUpdate:
		conf, err := s.ToDatabaseUpdateConfig()
		if err != nil {
			return nil, err
		}
		update, err := database.NewUpdate(ctx, conf)
		if err != nil {
			return nil, err
		}

		i := func(ctx context.Context, in map[string]any) (map[string]any, error) {
			inventory, err := database.ConvertClauseGroupToUpdateInventory(ctx, conf.ClauseGroup, in)
			if err != nil {
				return nil, err
			}
			return update.Update(ctx, inventory)
		}

		return &Node{Lambda: compose.InvokableLambda(i)}, nil
	case NodeTypeDatabaseDelete:
		conf, err := s.ToDatabaseDeleteConfig()
		if err != nil {
			return nil, err
		}

		del, err := database.NewDelete(ctx, conf)
		if err != nil {
			return nil, err
		}

		i := func(ctx context.Context, in map[string]any) (map[string]any, error) {
			conditionGroup, err := database.ConvertClauseGroupToConditionGroup(ctx, conf.ClauseGroup, in)
			if err != nil {
				return nil, err
			}
			return del.Delete(ctx, conditionGroup)
		}

		return &Node{Lambda: compose.InvokableLambda(i)}, nil
	case NodeTypeKnowledgeIndexer:
		conf, err := s.ToKnowledgeIndexerConfig()
		if err != nil {
			return nil, err
		}
		w, err := knowledge.NewKnowledgeIndexer(ctx, conf)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: compose.InvokableLambda(w.Store)}, nil
	case NodeTypeKnowledgeRetrieve:
		conf, err := s.ToKnowledgeRetrieveConfig()
		if err != nil {
			return nil, err
		}
		r, err := knowledge.NewKnowledgeRetrieve(ctx, conf)
		if err != nil {
			return nil, err
		}
		return &Node{Lambda: compose.InvokableLambda(r.Retrieve)}, nil
	default:
		panic("not implemented")
	}
}

type State struct {
	Handler   *variables.VariableHandler
	Answers   map[string][]string
	Questions map[string][]*qa.Question
	Input     map[string]map[string]any
}

func init() {
	_ = compose.RegisterSerializableType[*State]("schema_state")
	_ = compose.RegisterSerializableType[*variables.VariableHandler]("variable_handler")
	_ = compose.RegisterSerializableType[*variables.ParentIntermediateStore]("parent_intermediate_store")
	_ = compose.RegisterSerializableType[[]*qa.Question]("qa_question_list")
	_ = compose.RegisterSerializableType[qa.Question]("qa_question")
	_ = compose.RegisterSerializableType[map[string]any]("map[string]any")
	_ = compose.RegisterSerializableType[[]string]("[]string")
}

func (s *State) AddQuestion(nodeKey string, question *qa.Question) {
	s.Questions[nodeKey] = append(s.Questions[nodeKey], question)
}

func GenState() compose.GenLocalState[*State] {
	return func(ctx context.Context) (state *State) {
		return &State{
			Handler: &variables.VariableHandler{
				UserVarStore:               nil, // TODO: inject this
				SystemVarStore:             nil, // TODO: inject this
				AppVarStore:                nil, // TODO: inject this
				ParentIntermediateVarStore: &variables.ParentIntermediateStore{},
			},
			Answers:   make(map[string][]string),
			Questions: make(map[string][]*qa.Question),
			Input:     make(map[string]map[string]any),
		}
	}
}

func (s *NodeSchema) StatePreHandler() compose.StatePreHandler[map[string]any, *State] {
	var handlers []compose.StatePreHandler[map[string]any, *State]

	handlerForVars := s.statePreHandlerForVars()
	if handlerForVars != nil {
		handlers = append(handlers, handlerForVars)
	}

	if s.Type == NodeTypeQuestionAnswer {
		handlers = append(handlers, func(ctx context.Context, in map[string]any, state *State) (map[string]any, error) {
			if len(in) > 0 {
				state.Input[s.Key] = in
				return in, nil
			}

			out := make(map[string]any)
			for k, v := range state.Input[s.Key] {
				out[k] = v
			}

			out[qa.QuestionsKey] = state.Questions[s.Key]
			out[qa.AnswersKey] = state.Answers[s.Key]
			return out, nil
		})
	} else if s.Type == NodeTypeInputReceiver { // if state has this node's input, use it
		handlers = append(handlers, func(ctx context.Context, in map[string]any, state *State) (map[string]any, error) {
			if userInput, ok := state.Input[s.Key]; ok && len(userInput) > 0 {
				return userInput, nil
			}
			return in, nil
		})
	}

	if len(handlers) == 0 {
		return nil
	}

	return func(ctx context.Context, in map[string]any, state *State) (map[string]any, error) {
		var err error
		for _, h := range handlers {
			in, err = h(ctx, in, state)
			if err != nil {
				return nil, err
			}
		}

		return in, nil
	}
}

func (s *NodeSchema) statePreHandlerForVars() compose.StatePreHandler[map[string]any, *State] {
	// checkout the node's inputs, if it has any variable, use the state's variableHandler to get the variables and set them to the input
	var vars []*nodes.InputField
	for _, input := range s.Inputs {
		if input.Info.Source.Ref != nil && input.Info.Source.Ref.VariableType != nil {
			vars = append(vars, input)
		}
	}

	if len(vars) == 0 {
		return nil
	}

	return func(ctx context.Context, in map[string]any, state *State) (map[string]any, error) {
		out := make(map[string]any)
		for k, v := range in {
			out[k] = v
		}

		for _, input := range vars {
			v, err := state.Handler.Get(ctx, *input.Info.Source.Ref.VariableType, input.Info.Source.Ref.FromPath)
			if err != nil {
				return nil, err
			}
			nodes.SetMapValue(out, input.Path, v)
		}

		return out, nil
	}
}

func (s *NodeSchema) OutputPortCount() int {
	switch s.Type {
	case NodeTypeSelector:
		return len(s.Configs.([]*selector.OneClauseSchema)) + 1
	case NodeTypeQuestionAnswer:
		if mustGetKey[qa.AnswerType]("AnswerType", s.Configs.(map[string]any)) == qa.AnswerByChoices {
			if mustGetKey[qa.ChoiceType]("ChoiceType", s.Configs.(map[string]any)) == qa.FixedChoices {
				return len(mustGetKey[[]string]("FixedChoices", s.Configs.(map[string]any))) + 1
			} else {
				return 2
			}
		}
		return 1
	case NodeTypeIntentDetector:
		intents := mustGetKey[[]string]("Intents", s.Configs.(map[string]any))
		return len(intents) + 1
	default:
		return 1
	}
}

type BranchMapping []map[string]bool

func (s *NodeSchema) GetBranch(bMapping *BranchMapping) (*compose.GraphBranch, error) {
	if bMapping == nil || len(*bMapping) == 0 {
		return nil, errors.New("no branch mapping")
	}

	endNodes := make(map[string]bool)
	for i := range *bMapping {
		for k := range (*bMapping)[i] {
			endNodes[k] = true
		}
	}

	switch s.Type {
	case NodeTypeSelector:
		condition := func(ctx context.Context, choice int) (map[string]bool, error) {
			if choice < 0 || choice > len(*bMapping) {
				return nil, fmt.Errorf("node %s choice out of range: %d", s.Key, choice)
			}

			choices := make(map[string]bool, len((*bMapping)[choice]))
			for k := range (*bMapping)[choice] {
				choices[k] = true
			}

			return choices, nil
		}
		return compose.NewGraphMultiBranch(condition, endNodes), nil
	case NodeTypeQuestionAnswer:
		conf := s.Configs.(map[string]any)
		if mustGetKey[qa.AnswerType]("AnswerType", conf) == qa.AnswerByChoices {
			condition := func(ctx context.Context, in map[string]any) (map[string]bool, error) {
				optionID, ok := nodes.TakeMapValue(in, compose.FieldPath{qa.OptionIDKey})
				if !ok {
					return nil, fmt.Errorf("failed to take option id from input map: %v", in)
				}

				if optionID.(string) == "other" {
					return (*bMapping)[len(*bMapping)-1], nil
				}

				optionIDInt, ok := qa.AlphabetToInt(optionID.(string))
				if !ok {
					return nil, fmt.Errorf("failed to convert option id from input map: %v", optionID)
				}

				if optionIDInt < 0 || optionIDInt >= len(*bMapping)-1 {
					return nil, fmt.Errorf("failed to take option id from input map: %v", in)
				}

				return (*bMapping)[optionIDInt], nil
			}
			return compose.NewGraphMultiBranch(condition, endNodes), nil
		}
		return nil, fmt.Errorf("this qa node should not have branches: %s", s.Key)

	case NodeTypeIntentDetector:
		condition := func(ctx context.Context, in map[string]any) (map[string]bool, error) {
			classificationId, ok := nodes.TakeMapValue(in, compose.FieldPath{"classificationId"})
			if !ok {
				return nil, fmt.Errorf("failed to take classification id from input map: %v", in)
			}

			// Intent detector the node default branch uses classificationId=0. But currently scene, the implementation uses default as the last element of the array.
			// Therefore, when classificationId=0, it needs to be converted into the node corresponding to the last index of the array.
			// Other options also need to reduce the index by 1.
			id := classificationId.(int64)
			realID := id - 1

			if realID >= int64(len(*bMapping)) {
				return nil, fmt.Errorf("invalid classification id from input, classification id: %v", classificationId)
			}

			if realID < 0 {
				realID = int64(len(*bMapping)) - 1
			}

			return (*bMapping)[realID], nil
		}
		return compose.NewGraphMultiBranch(condition, endNodes), nil
	default:
		return nil, fmt.Errorf("this node should not have branches: %s", s.Key)
	}
}
