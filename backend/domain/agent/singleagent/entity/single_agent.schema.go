// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package entity

type ModelInfo struct {
	ModelID int64 `json:"model_id" yaml:"model_id" mapstructure:"model_id"`
	// Model Name
	ModelName string `json:"model_name" yaml:"model_name" mapstructure:"model_name"`

	// Maximum Token Count
	MaxTokens int `json:"max_tokens" yaml:"max_tokens" mapstructure:"max_tokens"`

	// Temperature Parameter
	Temperature float64 `json:"temperature" yaml:"temperature" mapstructure:"temperature"`

	FrequencyPenalty float64 `json:"frequency_penalty" yaml:"frequency_penalty" mapstructure:"frequency_penalty"`
	PresencePenalty  float64 `json:"presence_penalty" yaml:"presence_penalty" mapstructure:"presence_penalty"`
}

type SearchStrategy string

const (
	FullText SearchStrategy = "full_text"
	Semantic SearchStrategy = "semantic"
	Hybrid   SearchStrategy = "hybrid"
)

type NoDataReplyMode string

const (
	Default NoDataReplyMode = "default"
	Custom  NoDataReplyMode = "custom"
)

type ShowSourceMode string

const (
	Card ShowSourceMode = "card"
	Text ShowSourceMode = "text"
)

type Knowledge struct {
	Auto bool `json:"auto" yaml:"auto" mapstructure:"auto"`

	Items []*KnowledgeItem `json:"items" yaml:"items" mapstructure:"items"`

	TopK      int            `json:"topk" yaml:"topk" mapstructure:"topk"`
	MinScore  float64        `json:"min_score" yaml:"min_score" mapstructure:"min_score"`
	MaxTokens int            `json:"max_tokens" yaml:"max_tokens" mapstructure:"max_tokens"`
	Strategy  SearchStrategy `json:"strategy" yaml:"strategy" mapstructure:"strategy"`

	UseRerank  bool `json:"use_rerank" yaml:"use_rerank" mapstructure:"use_rerank"`
	UseRewrite bool `json:"use_rewrite" yaml:"use_rewrite" mapstructure:"use_rewrite"`

	ReplyMode          NoDataReplyMode `json:"no_data_reply_mode" yaml:"no_data_reply_mode" mapstructure:"no_data_reply_mode"`
	NoDataCustomPrompt string          `json:"no_data_custom_prompt" yaml:"no_data_custom_prompt" mapstructure:"no_data_custom_prompt"`

	ShowSource         bool            `json:"show_source" yaml:"show_source" mapstructure:"show_source"`
	ShowSourceMode     ShowSourceMode  `json:"show_source_mode,omitempty" yaml:"show_source_mode,omitempty" mapstructure:"show_source_mode"`
}

type KnowledgeItem struct {
	ID int64 `json:"id" yaml:"id" mapstructure:"id"`
}

type Prompt struct {
	// System Prompt
	Persona string `json:"persona" yaml:"persona" mapstructure:"persona"`
}

type Plugin struct {
	// API ID List
	APIs []*PluginAPI `json:"apis" yaml:"apis" mapstructure:"apis"`
}

type PluginAPI struct {
	PluginID int64  `json:"plugin_id" yaml:"plugin_id" mapstructure:"plugin_id"`
	ApiID    int64  `json:"api_id" yaml:"api_id" mapstructure:"api_id"`
	Version  string `json:"version" yaml:"version" mapstructure:"version"`
}

type Workflow struct {
	// Workflow ID List
	Items []*WorkflowItem `json:"items" yaml:"items" mapstructure:"items"`
}

type WorkflowItem struct {
	ID      int    `json:"id" yaml:"id" mapstructure:"id"`
	Version string `json:"version" yaml:"version" mapstructure:"version"`
}

type SuggestReplyStatus int

const (
	SuggestReplyStatusEnabled  SuggestReplyStatus = 0
	SuggestReplyStatusDisabled SuggestReplyStatus = 1
)

type SuggestReplyMode int

const (
	SuggestReplyModeAuto         SuggestReplyMode = 0
	SuggestReplyModeCustomPrompt SuggestReplyMode = 1
)

// Suggested Reply Configuration
type SuggestReply struct {
	Status SuggestReplyStatus `json:"status" yaml:"status" mapstructure:"status"`
	Mode   SuggestReplyMode   `json:"mode" yaml:"mode" mapstructure:"mode"`

	Prompt string `json:"prompt" yaml:"prompt" mapstructure:"prompt"`
}

// Jump Configuration
type JumpConfig struct {
}
