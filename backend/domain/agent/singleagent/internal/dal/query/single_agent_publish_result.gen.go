// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/agent/singleagent/internal/dal/model"
)

func newSingleAgentPublishResult(db *gorm.DB, opts ...gen.DOOption) singleAgentPublishResult {
	_singleAgentPublishResult := singleAgentPublishResult{}

	_singleAgentPublishResult.singleAgentPublishResultDo.UseDB(db, opts...)
	_singleAgentPublishResult.singleAgentPublishResultDo.UseModel(&model.SingleAgentPublishResult{})

	tableName := _singleAgentPublishResult.singleAgentPublishResultDo.TableName()
	_singleAgentPublishResult.ALL = field.NewAsterisk(tableName)
	_singleAgentPublishResult.ID = field.NewInt64(tableName, "id")
	_singleAgentPublishResult.PublishID = field.NewString(tableName, "publish_id")
	_singleAgentPublishResult.ConnectorID = field.NewInt64(tableName, "connector_id")
	_singleAgentPublishResult.PublishResult = field.NewString(tableName, "publish_result")
	_singleAgentPublishResult.CreatedAt = field.NewInt64(tableName, "created_at")
	_singleAgentPublishResult.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_singleAgentPublishResult.Extra = field.NewString(tableName, "extra")

	_singleAgentPublishResult.fillFieldMap()

	return _singleAgentPublishResult
}

// singleAgentPublishResult bot 渠道和发布版本流水表
type singleAgentPublishResult struct {
	singleAgentPublishResultDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键id
	PublishID     field.String // 发布 id
	ConnectorID   field.Int64  // 10000010, 10000011, 10000012, 10000023, 482431, 489823
	PublishResult field.String // 发布结果
	CreatedAt     field.Int64  // Create Time in Milliseconds
	UpdatedAt     field.Int64  // Update Time in Milliseconds
	Extra         field.String // 扩展字段

	fieldMap map[string]field.Expr
}

func (s singleAgentPublishResult) Table(newTableName string) *singleAgentPublishResult {
	s.singleAgentPublishResultDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s singleAgentPublishResult) As(alias string) *singleAgentPublishResult {
	s.singleAgentPublishResultDo.DO = *(s.singleAgentPublishResultDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *singleAgentPublishResult) updateTableName(table string) *singleAgentPublishResult {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.PublishID = field.NewString(table, "publish_id")
	s.ConnectorID = field.NewInt64(table, "connector_id")
	s.PublishResult = field.NewString(table, "publish_result")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.Extra = field.NewString(table, "extra")

	s.fillFieldMap()

	return s
}

func (s *singleAgentPublishResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *singleAgentPublishResult) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["publish_id"] = s.PublishID
	s.fieldMap["connector_id"] = s.ConnectorID
	s.fieldMap["publish_result"] = s.PublishResult
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["extra"] = s.Extra
}

func (s singleAgentPublishResult) clone(db *gorm.DB) singleAgentPublishResult {
	s.singleAgentPublishResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s singleAgentPublishResult) replaceDB(db *gorm.DB) singleAgentPublishResult {
	s.singleAgentPublishResultDo.ReplaceDB(db)
	return s
}

type singleAgentPublishResultDo struct{ gen.DO }

type ISingleAgentPublishResultDo interface {
	gen.SubQuery
	Debug() ISingleAgentPublishResultDo
	WithContext(ctx context.Context) ISingleAgentPublishResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISingleAgentPublishResultDo
	WriteDB() ISingleAgentPublishResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISingleAgentPublishResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISingleAgentPublishResultDo
	Not(conds ...gen.Condition) ISingleAgentPublishResultDo
	Or(conds ...gen.Condition) ISingleAgentPublishResultDo
	Select(conds ...field.Expr) ISingleAgentPublishResultDo
	Where(conds ...gen.Condition) ISingleAgentPublishResultDo
	Order(conds ...field.Expr) ISingleAgentPublishResultDo
	Distinct(cols ...field.Expr) ISingleAgentPublishResultDo
	Omit(cols ...field.Expr) ISingleAgentPublishResultDo
	Join(table schema.Tabler, on ...field.Expr) ISingleAgentPublishResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISingleAgentPublishResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISingleAgentPublishResultDo
	Group(cols ...field.Expr) ISingleAgentPublishResultDo
	Having(conds ...gen.Condition) ISingleAgentPublishResultDo
	Limit(limit int) ISingleAgentPublishResultDo
	Offset(offset int) ISingleAgentPublishResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleAgentPublishResultDo
	Unscoped() ISingleAgentPublishResultDo
	Create(values ...*model.SingleAgentPublishResult) error
	CreateInBatches(values []*model.SingleAgentPublishResult, batchSize int) error
	Save(values ...*model.SingleAgentPublishResult) error
	First() (*model.SingleAgentPublishResult, error)
	Take() (*model.SingleAgentPublishResult, error)
	Last() (*model.SingleAgentPublishResult, error)
	Find() ([]*model.SingleAgentPublishResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SingleAgentPublishResult, err error)
	FindInBatches(result *[]*model.SingleAgentPublishResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SingleAgentPublishResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISingleAgentPublishResultDo
	Assign(attrs ...field.AssignExpr) ISingleAgentPublishResultDo
	Joins(fields ...field.RelationField) ISingleAgentPublishResultDo
	Preload(fields ...field.RelationField) ISingleAgentPublishResultDo
	FirstOrInit() (*model.SingleAgentPublishResult, error)
	FirstOrCreate() (*model.SingleAgentPublishResult, error)
	FindByPage(offset int, limit int) (result []*model.SingleAgentPublishResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISingleAgentPublishResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s singleAgentPublishResultDo) Debug() ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Debug())
}

func (s singleAgentPublishResultDo) WithContext(ctx context.Context) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s singleAgentPublishResultDo) ReadDB() ISingleAgentPublishResultDo {
	return s.Clauses(dbresolver.Read)
}

func (s singleAgentPublishResultDo) WriteDB() ISingleAgentPublishResultDo {
	return s.Clauses(dbresolver.Write)
}

func (s singleAgentPublishResultDo) Session(config *gorm.Session) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Session(config))
}

func (s singleAgentPublishResultDo) Clauses(conds ...clause.Expression) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s singleAgentPublishResultDo) Returning(value interface{}, columns ...string) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s singleAgentPublishResultDo) Not(conds ...gen.Condition) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s singleAgentPublishResultDo) Or(conds ...gen.Condition) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s singleAgentPublishResultDo) Select(conds ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s singleAgentPublishResultDo) Where(conds ...gen.Condition) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s singleAgentPublishResultDo) Order(conds ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s singleAgentPublishResultDo) Distinct(cols ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s singleAgentPublishResultDo) Omit(cols ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s singleAgentPublishResultDo) Join(table schema.Tabler, on ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s singleAgentPublishResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s singleAgentPublishResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s singleAgentPublishResultDo) Group(cols ...field.Expr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s singleAgentPublishResultDo) Having(conds ...gen.Condition) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s singleAgentPublishResultDo) Limit(limit int) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s singleAgentPublishResultDo) Offset(offset int) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s singleAgentPublishResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s singleAgentPublishResultDo) Unscoped() ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Unscoped())
}

func (s singleAgentPublishResultDo) Create(values ...*model.SingleAgentPublishResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s singleAgentPublishResultDo) CreateInBatches(values []*model.SingleAgentPublishResult, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s singleAgentPublishResultDo) Save(values ...*model.SingleAgentPublishResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s singleAgentPublishResultDo) First() (*model.SingleAgentPublishResult, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleAgentPublishResult), nil
	}
}

func (s singleAgentPublishResultDo) Take() (*model.SingleAgentPublishResult, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleAgentPublishResult), nil
	}
}

func (s singleAgentPublishResultDo) Last() (*model.SingleAgentPublishResult, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleAgentPublishResult), nil
	}
}

func (s singleAgentPublishResultDo) Find() ([]*model.SingleAgentPublishResult, error) {
	result, err := s.DO.Find()
	return result.([]*model.SingleAgentPublishResult), err
}

func (s singleAgentPublishResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SingleAgentPublishResult, err error) {
	buf := make([]*model.SingleAgentPublishResult, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s singleAgentPublishResultDo) FindInBatches(result *[]*model.SingleAgentPublishResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s singleAgentPublishResultDo) Attrs(attrs ...field.AssignExpr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s singleAgentPublishResultDo) Assign(attrs ...field.AssignExpr) ISingleAgentPublishResultDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s singleAgentPublishResultDo) Joins(fields ...field.RelationField) ISingleAgentPublishResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s singleAgentPublishResultDo) Preload(fields ...field.RelationField) ISingleAgentPublishResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s singleAgentPublishResultDo) FirstOrInit() (*model.SingleAgentPublishResult, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleAgentPublishResult), nil
	}
}

func (s singleAgentPublishResultDo) FirstOrCreate() (*model.SingleAgentPublishResult, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleAgentPublishResult), nil
	}
}

func (s singleAgentPublishResultDo) FindByPage(offset int, limit int) (result []*model.SingleAgentPublishResult, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s singleAgentPublishResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s singleAgentPublishResultDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s singleAgentPublishResultDo) Delete(models ...*model.SingleAgentPublishResult) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *singleAgentPublishResultDo) withDO(do gen.Dao) *singleAgentPublishResultDo {
	s.DO = *do.(*gen.DO)
	return s
}
