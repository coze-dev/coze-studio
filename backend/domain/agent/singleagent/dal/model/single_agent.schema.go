// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import "encoding/json"
import "fmt"

// Jump Configuration
type JumpConfig map[string]interface{}

type Knowledge struct {
	// Knowledge Base ID List
	Ids []int `json:"ids" yaml:"ids" mapstructure:"ids"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Knowledge) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["ids"]; raw != nil && !ok {
		return fmt.Errorf("field ids in Knowledge: required")
	}
	type Plain Knowledge
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Knowledge(plain)
	return nil
}

type ModelInfo struct {
	// Maximum Token Count
	MaxTokens int `json:"max_tokens" yaml:"max_tokens" mapstructure:"max_tokens"`

	// Model Name
	ModelName string `json:"model_name" yaml:"model_name" mapstructure:"model_name"`

	// Temperature Parameter
	Temperature float64 `json:"temperature" yaml:"temperature" mapstructure:"temperature"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ModelInfo) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["max_tokens"]; raw != nil && !ok {
		return fmt.Errorf("field max_tokens in ModelInfo: required")
	}
	if _, ok := raw["model_name"]; raw != nil && !ok {
		return fmt.Errorf("field model_name in ModelInfo: required")
	}
	if _, ok := raw["temperature"]; raw != nil && !ok {
		return fmt.Errorf("field temperature in ModelInfo: required")
	}
	type Plain ModelInfo
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ModelInfo(plain)
	return nil
}

type Plugins struct {
	// API ID List
	ApiIds []int `json:"api_ids" yaml:"api_ids" mapstructure:"api_ids"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Plugins) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["api_ids"]; raw != nil && !ok {
		return fmt.Errorf("field api_ids in Plugins: required")
	}
	type Plain Plugins
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Plugins(plain)
	return nil
}

type Prompt struct {
	// System Prompt
	Sp string `json:"sp" yaml:"sp" mapstructure:"sp"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Prompt) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["sp"]; raw != nil && !ok {
		return fmt.Errorf("field sp in Prompt: required")
	}
	type Plain Prompt
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Prompt(plain)
	return nil
}

// Suggested Reply Configuration
type SuggestReply map[string]interface{}

type Workflow struct {
	// Workflow ID List
	Ids []int `json:"ids" yaml:"ids" mapstructure:"ids"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Workflow) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["ids"]; raw != nil && !ok {
		return fmt.Errorf("field ids in Workflow: required")
	}
	type Plain Workflow
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Workflow(plain)
	return nil
}
