// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/app/internal/dal/model"
)

func newConnectorReleaseRef(db *gorm.DB, opts ...gen.DOOption) connectorReleaseRef {
	_connectorReleaseRef := connectorReleaseRef{}

	_connectorReleaseRef.connectorReleaseRefDo.UseDB(db, opts...)
	_connectorReleaseRef.connectorReleaseRefDo.UseModel(&model.ConnectorReleaseRef{})

	tableName := _connectorReleaseRef.connectorReleaseRefDo.TableName()
	_connectorReleaseRef.ALL = field.NewAsterisk(tableName)
	_connectorReleaseRef.ID = field.NewInt64(tableName, "id")
	_connectorReleaseRef.RecordID = field.NewInt64(tableName, "record_id")
	_connectorReleaseRef.ConnectorID = field.NewInt64(tableName, "connector_id")
	_connectorReleaseRef.PublishConfig = field.NewField(tableName, "publish_config")
	_connectorReleaseRef.PublishStatus = field.NewInt32(tableName, "publish_status")
	_connectorReleaseRef.CreatedAt = field.NewInt64(tableName, "created_at")
	_connectorReleaseRef.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_connectorReleaseRef.fillFieldMap()

	return _connectorReleaseRef
}

// connectorReleaseRef Connector Release Record Reference
type connectorReleaseRef struct {
	connectorReleaseRefDo

	ALL           field.Asterisk
	ID            field.Int64 // Primary Key
	RecordID      field.Int64 // Publish Record ID
	ConnectorID   field.Int64 // Publish Connector ID
	PublishConfig field.Field // Publish Configuration
	PublishStatus field.Int32 // Publish Status
	CreatedAt     field.Int64 // Create Time in Milliseconds
	UpdatedAt     field.Int64 // Update Time in Milliseconds

	fieldMap map[string]field.Expr
}

func (c connectorReleaseRef) Table(newTableName string) *connectorReleaseRef {
	c.connectorReleaseRefDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c connectorReleaseRef) As(alias string) *connectorReleaseRef {
	c.connectorReleaseRefDo.DO = *(c.connectorReleaseRefDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *connectorReleaseRef) updateTableName(table string) *connectorReleaseRef {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.RecordID = field.NewInt64(table, "record_id")
	c.ConnectorID = field.NewInt64(table, "connector_id")
	c.PublishConfig = field.NewField(table, "publish_config")
	c.PublishStatus = field.NewInt32(table, "publish_status")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *connectorReleaseRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *connectorReleaseRef) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["record_id"] = c.RecordID
	c.fieldMap["connector_id"] = c.ConnectorID
	c.fieldMap["publish_config"] = c.PublishConfig
	c.fieldMap["publish_status"] = c.PublishStatus
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c connectorReleaseRef) clone(db *gorm.DB) connectorReleaseRef {
	c.connectorReleaseRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c connectorReleaseRef) replaceDB(db *gorm.DB) connectorReleaseRef {
	c.connectorReleaseRefDo.ReplaceDB(db)
	return c
}

type connectorReleaseRefDo struct{ gen.DO }

type IConnectorReleaseRefDo interface {
	gen.SubQuery
	Debug() IConnectorReleaseRefDo
	WithContext(ctx context.Context) IConnectorReleaseRefDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConnectorReleaseRefDo
	WriteDB() IConnectorReleaseRefDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConnectorReleaseRefDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConnectorReleaseRefDo
	Not(conds ...gen.Condition) IConnectorReleaseRefDo
	Or(conds ...gen.Condition) IConnectorReleaseRefDo
	Select(conds ...field.Expr) IConnectorReleaseRefDo
	Where(conds ...gen.Condition) IConnectorReleaseRefDo
	Order(conds ...field.Expr) IConnectorReleaseRefDo
	Distinct(cols ...field.Expr) IConnectorReleaseRefDo
	Omit(cols ...field.Expr) IConnectorReleaseRefDo
	Join(table schema.Tabler, on ...field.Expr) IConnectorReleaseRefDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConnectorReleaseRefDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConnectorReleaseRefDo
	Group(cols ...field.Expr) IConnectorReleaseRefDo
	Having(conds ...gen.Condition) IConnectorReleaseRefDo
	Limit(limit int) IConnectorReleaseRefDo
	Offset(offset int) IConnectorReleaseRefDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConnectorReleaseRefDo
	Unscoped() IConnectorReleaseRefDo
	Create(values ...*model.ConnectorReleaseRef) error
	CreateInBatches(values []*model.ConnectorReleaseRef, batchSize int) error
	Save(values ...*model.ConnectorReleaseRef) error
	First() (*model.ConnectorReleaseRef, error)
	Take() (*model.ConnectorReleaseRef, error)
	Last() (*model.ConnectorReleaseRef, error)
	Find() ([]*model.ConnectorReleaseRef, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConnectorReleaseRef, err error)
	FindInBatches(result *[]*model.ConnectorReleaseRef, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ConnectorReleaseRef) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConnectorReleaseRefDo
	Assign(attrs ...field.AssignExpr) IConnectorReleaseRefDo
	Joins(fields ...field.RelationField) IConnectorReleaseRefDo
	Preload(fields ...field.RelationField) IConnectorReleaseRefDo
	FirstOrInit() (*model.ConnectorReleaseRef, error)
	FirstOrCreate() (*model.ConnectorReleaseRef, error)
	FindByPage(offset int, limit int) (result []*model.ConnectorReleaseRef, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConnectorReleaseRefDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c connectorReleaseRefDo) Debug() IConnectorReleaseRefDo {
	return c.withDO(c.DO.Debug())
}

func (c connectorReleaseRefDo) WithContext(ctx context.Context) IConnectorReleaseRefDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c connectorReleaseRefDo) ReadDB() IConnectorReleaseRefDo {
	return c.Clauses(dbresolver.Read)
}

func (c connectorReleaseRefDo) WriteDB() IConnectorReleaseRefDo {
	return c.Clauses(dbresolver.Write)
}

func (c connectorReleaseRefDo) Session(config *gorm.Session) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Session(config))
}

func (c connectorReleaseRefDo) Clauses(conds ...clause.Expression) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c connectorReleaseRefDo) Returning(value interface{}, columns ...string) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c connectorReleaseRefDo) Not(conds ...gen.Condition) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c connectorReleaseRefDo) Or(conds ...gen.Condition) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c connectorReleaseRefDo) Select(conds ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c connectorReleaseRefDo) Where(conds ...gen.Condition) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c connectorReleaseRefDo) Order(conds ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c connectorReleaseRefDo) Distinct(cols ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c connectorReleaseRefDo) Omit(cols ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c connectorReleaseRefDo) Join(table schema.Tabler, on ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c connectorReleaseRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c connectorReleaseRefDo) RightJoin(table schema.Tabler, on ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c connectorReleaseRefDo) Group(cols ...field.Expr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c connectorReleaseRefDo) Having(conds ...gen.Condition) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c connectorReleaseRefDo) Limit(limit int) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c connectorReleaseRefDo) Offset(offset int) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c connectorReleaseRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c connectorReleaseRefDo) Unscoped() IConnectorReleaseRefDo {
	return c.withDO(c.DO.Unscoped())
}

func (c connectorReleaseRefDo) Create(values ...*model.ConnectorReleaseRef) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c connectorReleaseRefDo) CreateInBatches(values []*model.ConnectorReleaseRef, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c connectorReleaseRefDo) Save(values ...*model.ConnectorReleaseRef) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c connectorReleaseRefDo) First() (*model.ConnectorReleaseRef, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectorReleaseRef), nil
	}
}

func (c connectorReleaseRefDo) Take() (*model.ConnectorReleaseRef, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectorReleaseRef), nil
	}
}

func (c connectorReleaseRefDo) Last() (*model.ConnectorReleaseRef, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectorReleaseRef), nil
	}
}

func (c connectorReleaseRefDo) Find() ([]*model.ConnectorReleaseRef, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConnectorReleaseRef), err
}

func (c connectorReleaseRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConnectorReleaseRef, err error) {
	buf := make([]*model.ConnectorReleaseRef, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c connectorReleaseRefDo) FindInBatches(result *[]*model.ConnectorReleaseRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c connectorReleaseRefDo) Attrs(attrs ...field.AssignExpr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c connectorReleaseRefDo) Assign(attrs ...field.AssignExpr) IConnectorReleaseRefDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c connectorReleaseRefDo) Joins(fields ...field.RelationField) IConnectorReleaseRefDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c connectorReleaseRefDo) Preload(fields ...field.RelationField) IConnectorReleaseRefDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c connectorReleaseRefDo) FirstOrInit() (*model.ConnectorReleaseRef, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectorReleaseRef), nil
	}
}

func (c connectorReleaseRefDo) FirstOrCreate() (*model.ConnectorReleaseRef, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectorReleaseRef), nil
	}
}

func (c connectorReleaseRefDo) FindByPage(offset int, limit int) (result []*model.ConnectorReleaseRef, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c connectorReleaseRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c connectorReleaseRefDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c connectorReleaseRefDo) Delete(models ...*model.ConnectorReleaseRef) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *connectorReleaseRefDo) withDO(do gen.Dao) *connectorReleaseRefDo {
	c.DO = *do.(*gen.DO)
	return c
}
