// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/app/internal/dal/model"
)

func newAppRelease(db *gorm.DB, opts ...gen.DOOption) appRelease {
	_appRelease := appRelease{}

	_appRelease.appReleaseDo.UseDB(db, opts...)
	_appRelease.appReleaseDo.UseModel(&model.AppRelease{})

	tableName := _appRelease.appReleaseDo.TableName()
	_appRelease.ALL = field.NewAsterisk(tableName)
	_appRelease.ID = field.NewInt64(tableName, "id")
	_appRelease.AppID = field.NewInt64(tableName, "app_id")
	_appRelease.SpaceID = field.NewInt64(tableName, "space_id")
	_appRelease.ConnectorID = field.NewInt64(tableName, "connector_id")
	_appRelease.Publisher = field.NewInt64(tableName, "publisher")
	_appRelease.ReleaseInfo = field.NewString(tableName, "release_info")
	_appRelease.Version = field.NewString(tableName, "version")
	_appRelease.Status = field.NewInt32(tableName, "status")
	_appRelease.CreatedAt = field.NewInt64(tableName, "created_at")
	_appRelease.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_appRelease.fillFieldMap()

	return _appRelease
}

// appRelease Application Release
type appRelease struct {
	appReleaseDo

	ALL         field.Asterisk
	ID          field.Int64  // Primary Key
	AppID       field.Int64  // Application ID
	SpaceID     field.Int64  // Space ID
	ConnectorID field.Int64  // Release Connector ID
	Publisher   field.Int64  // Publisher
	ReleaseInfo field.String // Release Information
	Version     field.String // Release Version
	Status      field.Int32  // Release Status
	CreatedAt   field.Int64  // Create Time in Milliseconds
	UpdatedAt   field.Int64  // Update Time in Milliseconds

	fieldMap map[string]field.Expr
}

func (a appRelease) Table(newTableName string) *appRelease {
	a.appReleaseDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appRelease) As(alias string) *appRelease {
	a.appReleaseDo.DO = *(a.appReleaseDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appRelease) updateTableName(table string) *appRelease {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AppID = field.NewInt64(table, "app_id")
	a.SpaceID = field.NewInt64(table, "space_id")
	a.ConnectorID = field.NewInt64(table, "connector_id")
	a.Publisher = field.NewInt64(table, "publisher")
	a.ReleaseInfo = field.NewString(table, "release_info")
	a.Version = field.NewString(table, "version")
	a.Status = field.NewInt32(table, "status")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *appRelease) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appRelease) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["space_id"] = a.SpaceID
	a.fieldMap["connector_id"] = a.ConnectorID
	a.fieldMap["publisher"] = a.Publisher
	a.fieldMap["release_info"] = a.ReleaseInfo
	a.fieldMap["version"] = a.Version
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a appRelease) clone(db *gorm.DB) appRelease {
	a.appReleaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appRelease) replaceDB(db *gorm.DB) appRelease {
	a.appReleaseDo.ReplaceDB(db)
	return a
}

type appReleaseDo struct{ gen.DO }

type IAppReleaseDo interface {
	gen.SubQuery
	Debug() IAppReleaseDo
	WithContext(ctx context.Context) IAppReleaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppReleaseDo
	WriteDB() IAppReleaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppReleaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppReleaseDo
	Not(conds ...gen.Condition) IAppReleaseDo
	Or(conds ...gen.Condition) IAppReleaseDo
	Select(conds ...field.Expr) IAppReleaseDo
	Where(conds ...gen.Condition) IAppReleaseDo
	Order(conds ...field.Expr) IAppReleaseDo
	Distinct(cols ...field.Expr) IAppReleaseDo
	Omit(cols ...field.Expr) IAppReleaseDo
	Join(table schema.Tabler, on ...field.Expr) IAppReleaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppReleaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppReleaseDo
	Group(cols ...field.Expr) IAppReleaseDo
	Having(conds ...gen.Condition) IAppReleaseDo
	Limit(limit int) IAppReleaseDo
	Offset(offset int) IAppReleaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppReleaseDo
	Unscoped() IAppReleaseDo
	Create(values ...*model.AppRelease) error
	CreateInBatches(values []*model.AppRelease, batchSize int) error
	Save(values ...*model.AppRelease) error
	First() (*model.AppRelease, error)
	Take() (*model.AppRelease, error)
	Last() (*model.AppRelease, error)
	Find() ([]*model.AppRelease, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppRelease, err error)
	FindInBatches(result *[]*model.AppRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppRelease) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppReleaseDo
	Assign(attrs ...field.AssignExpr) IAppReleaseDo
	Joins(fields ...field.RelationField) IAppReleaseDo
	Preload(fields ...field.RelationField) IAppReleaseDo
	FirstOrInit() (*model.AppRelease, error)
	FirstOrCreate() (*model.AppRelease, error)
	FindByPage(offset int, limit int) (result []*model.AppRelease, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppReleaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appReleaseDo) Debug() IAppReleaseDo {
	return a.withDO(a.DO.Debug())
}

func (a appReleaseDo) WithContext(ctx context.Context) IAppReleaseDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appReleaseDo) ReadDB() IAppReleaseDo {
	return a.Clauses(dbresolver.Read)
}

func (a appReleaseDo) WriteDB() IAppReleaseDo {
	return a.Clauses(dbresolver.Write)
}

func (a appReleaseDo) Session(config *gorm.Session) IAppReleaseDo {
	return a.withDO(a.DO.Session(config))
}

func (a appReleaseDo) Clauses(conds ...clause.Expression) IAppReleaseDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appReleaseDo) Returning(value interface{}, columns ...string) IAppReleaseDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appReleaseDo) Not(conds ...gen.Condition) IAppReleaseDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appReleaseDo) Or(conds ...gen.Condition) IAppReleaseDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appReleaseDo) Select(conds ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appReleaseDo) Where(conds ...gen.Condition) IAppReleaseDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appReleaseDo) Order(conds ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appReleaseDo) Distinct(cols ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appReleaseDo) Omit(cols ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appReleaseDo) Join(table schema.Tabler, on ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appReleaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appReleaseDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appReleaseDo) Group(cols ...field.Expr) IAppReleaseDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appReleaseDo) Having(conds ...gen.Condition) IAppReleaseDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appReleaseDo) Limit(limit int) IAppReleaseDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appReleaseDo) Offset(offset int) IAppReleaseDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appReleaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppReleaseDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appReleaseDo) Unscoped() IAppReleaseDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appReleaseDo) Create(values ...*model.AppRelease) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appReleaseDo) CreateInBatches(values []*model.AppRelease, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appReleaseDo) Save(values ...*model.AppRelease) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appReleaseDo) First() (*model.AppRelease, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppRelease), nil
	}
}

func (a appReleaseDo) Take() (*model.AppRelease, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppRelease), nil
	}
}

func (a appReleaseDo) Last() (*model.AppRelease, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppRelease), nil
	}
}

func (a appReleaseDo) Find() ([]*model.AppRelease, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppRelease), err
}

func (a appReleaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppRelease, err error) {
	buf := make([]*model.AppRelease, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appReleaseDo) FindInBatches(result *[]*model.AppRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appReleaseDo) Attrs(attrs ...field.AssignExpr) IAppReleaseDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appReleaseDo) Assign(attrs ...field.AssignExpr) IAppReleaseDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appReleaseDo) Joins(fields ...field.RelationField) IAppReleaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appReleaseDo) Preload(fields ...field.RelationField) IAppReleaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appReleaseDo) FirstOrInit() (*model.AppRelease, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppRelease), nil
	}
}

func (a appReleaseDo) FirstOrCreate() (*model.AppRelease, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppRelease), nil
	}
}

func (a appReleaseDo) FindByPage(offset int, limit int) (result []*model.AppRelease, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appReleaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appReleaseDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appReleaseDo) Delete(models ...*model.AppRelease) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appReleaseDo) withDO(do gen.Dao) *appReleaseDo {
	a.DO = *do.(*gen.DO)
	return a
}
