// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/plugin/internal/dal/model"
)

func newToolProductRef(db *gorm.DB, opts ...gen.DOOption) toolProductRef {
	_toolProductRef := toolProductRef{}

	_toolProductRef.toolProductRefDo.UseDB(db, opts...)
	_toolProductRef.toolProductRefDo.UseModel(&model.ToolProductRef{})

	tableName := _toolProductRef.toolProductRefDo.TableName()
	_toolProductRef.ALL = field.NewAsterisk(tableName)
	_toolProductRef.ID = field.NewInt64(tableName, "id")
	_toolProductRef.SpaceID = field.NewInt64(tableName, "space_id")
	_toolProductRef.PluginID = field.NewInt64(tableName, "plugin_id")
	_toolProductRef.Version = field.NewString(tableName, "version")
	_toolProductRef.SubURL = field.NewString(tableName, "sub_url")
	_toolProductRef.Method = field.NewString(tableName, "method")
	_toolProductRef.Operation = field.NewField(tableName, "operation")

	_toolProductRef.fillFieldMap()

	return _toolProductRef
}

// toolProductRef Tool Product Reference
type toolProductRef struct {
	toolProductRefDo

	ALL       field.Asterisk
	ID        field.Int64  // Tool ID
	SpaceID   field.Int64  // Space ID
	PluginID  field.Int64  // Plugin ID
	Version   field.String // Tool Version, e.g. v1.0.0
	SubURL    field.String // Sub URL Path
	Method    field.String // HTTP Request Method
	Operation field.Field  // Tool Openapi Operation Schema

	fieldMap map[string]field.Expr
}

func (t toolProductRef) Table(newTableName string) *toolProductRef {
	t.toolProductRefDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toolProductRef) As(alias string) *toolProductRef {
	t.toolProductRefDo.DO = *(t.toolProductRefDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toolProductRef) updateTableName(table string) *toolProductRef {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.SpaceID = field.NewInt64(table, "space_id")
	t.PluginID = field.NewInt64(table, "plugin_id")
	t.Version = field.NewString(table, "version")
	t.SubURL = field.NewString(table, "sub_url")
	t.Method = field.NewString(table, "method")
	t.Operation = field.NewField(table, "operation")

	t.fillFieldMap()

	return t
}

func (t *toolProductRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toolProductRef) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["space_id"] = t.SpaceID
	t.fieldMap["plugin_id"] = t.PluginID
	t.fieldMap["version"] = t.Version
	t.fieldMap["sub_url"] = t.SubURL
	t.fieldMap["method"] = t.Method
	t.fieldMap["operation"] = t.Operation
}

func (t toolProductRef) clone(db *gorm.DB) toolProductRef {
	t.toolProductRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toolProductRef) replaceDB(db *gorm.DB) toolProductRef {
	t.toolProductRefDo.ReplaceDB(db)
	return t
}

type toolProductRefDo struct{ gen.DO }

type IToolProductRefDo interface {
	gen.SubQuery
	Debug() IToolProductRefDo
	WithContext(ctx context.Context) IToolProductRefDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IToolProductRefDo
	WriteDB() IToolProductRefDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IToolProductRefDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IToolProductRefDo
	Not(conds ...gen.Condition) IToolProductRefDo
	Or(conds ...gen.Condition) IToolProductRefDo
	Select(conds ...field.Expr) IToolProductRefDo
	Where(conds ...gen.Condition) IToolProductRefDo
	Order(conds ...field.Expr) IToolProductRefDo
	Distinct(cols ...field.Expr) IToolProductRefDo
	Omit(cols ...field.Expr) IToolProductRefDo
	Join(table schema.Tabler, on ...field.Expr) IToolProductRefDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IToolProductRefDo
	RightJoin(table schema.Tabler, on ...field.Expr) IToolProductRefDo
	Group(cols ...field.Expr) IToolProductRefDo
	Having(conds ...gen.Condition) IToolProductRefDo
	Limit(limit int) IToolProductRefDo
	Offset(offset int) IToolProductRefDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IToolProductRefDo
	Unscoped() IToolProductRefDo
	Create(values ...*model.ToolProductRef) error
	CreateInBatches(values []*model.ToolProductRef, batchSize int) error
	Save(values ...*model.ToolProductRef) error
	First() (*model.ToolProductRef, error)
	Take() (*model.ToolProductRef, error)
	Last() (*model.ToolProductRef, error)
	Find() ([]*model.ToolProductRef, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToolProductRef, err error)
	FindInBatches(result *[]*model.ToolProductRef, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ToolProductRef) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IToolProductRefDo
	Assign(attrs ...field.AssignExpr) IToolProductRefDo
	Joins(fields ...field.RelationField) IToolProductRefDo
	Preload(fields ...field.RelationField) IToolProductRefDo
	FirstOrInit() (*model.ToolProductRef, error)
	FirstOrCreate() (*model.ToolProductRef, error)
	FindByPage(offset int, limit int) (result []*model.ToolProductRef, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IToolProductRefDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t toolProductRefDo) Debug() IToolProductRefDo {
	return t.withDO(t.DO.Debug())
}

func (t toolProductRefDo) WithContext(ctx context.Context) IToolProductRefDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toolProductRefDo) ReadDB() IToolProductRefDo {
	return t.Clauses(dbresolver.Read)
}

func (t toolProductRefDo) WriteDB() IToolProductRefDo {
	return t.Clauses(dbresolver.Write)
}

func (t toolProductRefDo) Session(config *gorm.Session) IToolProductRefDo {
	return t.withDO(t.DO.Session(config))
}

func (t toolProductRefDo) Clauses(conds ...clause.Expression) IToolProductRefDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toolProductRefDo) Returning(value interface{}, columns ...string) IToolProductRefDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toolProductRefDo) Not(conds ...gen.Condition) IToolProductRefDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toolProductRefDo) Or(conds ...gen.Condition) IToolProductRefDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toolProductRefDo) Select(conds ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toolProductRefDo) Where(conds ...gen.Condition) IToolProductRefDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toolProductRefDo) Order(conds ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toolProductRefDo) Distinct(cols ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toolProductRefDo) Omit(cols ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toolProductRefDo) Join(table schema.Tabler, on ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toolProductRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toolProductRefDo) RightJoin(table schema.Tabler, on ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toolProductRefDo) Group(cols ...field.Expr) IToolProductRefDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toolProductRefDo) Having(conds ...gen.Condition) IToolProductRefDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toolProductRefDo) Limit(limit int) IToolProductRefDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toolProductRefDo) Offset(offset int) IToolProductRefDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toolProductRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IToolProductRefDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toolProductRefDo) Unscoped() IToolProductRefDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toolProductRefDo) Create(values ...*model.ToolProductRef) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toolProductRefDo) CreateInBatches(values []*model.ToolProductRef, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toolProductRefDo) Save(values ...*model.ToolProductRef) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toolProductRefDo) First() (*model.ToolProductRef, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToolProductRef), nil
	}
}

func (t toolProductRefDo) Take() (*model.ToolProductRef, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToolProductRef), nil
	}
}

func (t toolProductRefDo) Last() (*model.ToolProductRef, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToolProductRef), nil
	}
}

func (t toolProductRefDo) Find() ([]*model.ToolProductRef, error) {
	result, err := t.DO.Find()
	return result.([]*model.ToolProductRef), err
}

func (t toolProductRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToolProductRef, err error) {
	buf := make([]*model.ToolProductRef, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toolProductRefDo) FindInBatches(result *[]*model.ToolProductRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toolProductRefDo) Attrs(attrs ...field.AssignExpr) IToolProductRefDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toolProductRefDo) Assign(attrs ...field.AssignExpr) IToolProductRefDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toolProductRefDo) Joins(fields ...field.RelationField) IToolProductRefDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toolProductRefDo) Preload(fields ...field.RelationField) IToolProductRefDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toolProductRefDo) FirstOrInit() (*model.ToolProductRef, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToolProductRef), nil
	}
}

func (t toolProductRefDo) FirstOrCreate() (*model.ToolProductRef, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToolProductRef), nil
	}
}

func (t toolProductRefDo) FindByPage(offset int, limit int) (result []*model.ToolProductRef, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toolProductRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toolProductRefDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toolProductRefDo) Delete(models ...*model.ToolProductRef) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toolProductRefDo) withDO(do gen.Dao) *toolProductRefDo {
	t.DO = *do.(*gen.DO)
	return t
}
