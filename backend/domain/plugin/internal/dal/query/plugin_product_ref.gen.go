// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/plugin/internal/dal/model"
)

func newPluginProductRef(db *gorm.DB, opts ...gen.DOOption) pluginProductRef {
	_pluginProductRef := pluginProductRef{}

	_pluginProductRef.pluginProductRefDo.UseDB(db, opts...)
	_pluginProductRef.pluginProductRefDo.UseModel(&model.PluginProductRef{})

	tableName := _pluginProductRef.pluginProductRefDo.TableName()
	_pluginProductRef.ALL = field.NewAsterisk(tableName)
	_pluginProductRef.ID = field.NewInt64(tableName, "id")
	_pluginProductRef.SpaceID = field.NewInt64(tableName, "space_id")
	_pluginProductRef.DeveloperID = field.NewInt64(tableName, "developer_id")
	_pluginProductRef.RefProductID = field.NewInt64(tableName, "ref_product_id")
	_pluginProductRef.IconURI = field.NewString(tableName, "icon_uri")
	_pluginProductRef.ServerURL = field.NewString(tableName, "server_url")
	_pluginProductRef.PluginType = field.NewInt32(tableName, "plugin_type")
	_pluginProductRef.CreatedAt = field.NewInt64(tableName, "created_at")
	_pluginProductRef.Version = field.NewString(tableName, "version")
	_pluginProductRef.VersionDesc = field.NewString(tableName, "version_desc")
	_pluginProductRef.Manifest = field.NewField(tableName, "manifest")
	_pluginProductRef.OpenapiDoc = field.NewField(tableName, "openapi_doc")

	_pluginProductRef.fillFieldMap()

	return _pluginProductRef
}

// pluginProductRef Plugin Product Reference
type pluginProductRef struct {
	pluginProductRefDo

	ALL          field.Asterisk
	ID           field.Int64  // Plugin ID
	SpaceID      field.Int64  // Space ID
	DeveloperID  field.Int64  // Developer ID
	RefProductID field.Int64  // Referent Product ID
	IconURI      field.String // Icon URI
	ServerURL    field.String // Server URL
	PluginType   field.Int32  // Plugin Type, 1:http, 6:local
	CreatedAt    field.Int64  // Create Time in Milliseconds
	Version      field.String // Plugin Version, e.g. v1.0.0
	VersionDesc  field.String // Plugin Version Description
	Manifest     field.Field  // Plugin Manifest
	OpenapiDoc   field.Field  // OpenAPI Document, only stores the root

	fieldMap map[string]field.Expr
}

func (p pluginProductRef) Table(newTableName string) *pluginProductRef {
	p.pluginProductRefDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pluginProductRef) As(alias string) *pluginProductRef {
	p.pluginProductRefDo.DO = *(p.pluginProductRefDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pluginProductRef) updateTableName(table string) *pluginProductRef {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.DeveloperID = field.NewInt64(table, "developer_id")
	p.RefProductID = field.NewInt64(table, "ref_product_id")
	p.IconURI = field.NewString(table, "icon_uri")
	p.ServerURL = field.NewString(table, "server_url")
	p.PluginType = field.NewInt32(table, "plugin_type")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.Version = field.NewString(table, "version")
	p.VersionDesc = field.NewString(table, "version_desc")
	p.Manifest = field.NewField(table, "manifest")
	p.OpenapiDoc = field.NewField(table, "openapi_doc")

	p.fillFieldMap()

	return p
}

func (p *pluginProductRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pluginProductRef) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["developer_id"] = p.DeveloperID
	p.fieldMap["ref_product_id"] = p.RefProductID
	p.fieldMap["icon_uri"] = p.IconURI
	p.fieldMap["server_url"] = p.ServerURL
	p.fieldMap["plugin_type"] = p.PluginType
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["version"] = p.Version
	p.fieldMap["version_desc"] = p.VersionDesc
	p.fieldMap["manifest"] = p.Manifest
	p.fieldMap["openapi_doc"] = p.OpenapiDoc
}

func (p pluginProductRef) clone(db *gorm.DB) pluginProductRef {
	p.pluginProductRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pluginProductRef) replaceDB(db *gorm.DB) pluginProductRef {
	p.pluginProductRefDo.ReplaceDB(db)
	return p
}

type pluginProductRefDo struct{ gen.DO }

type IPluginProductRefDo interface {
	gen.SubQuery
	Debug() IPluginProductRefDo
	WithContext(ctx context.Context) IPluginProductRefDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPluginProductRefDo
	WriteDB() IPluginProductRefDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPluginProductRefDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPluginProductRefDo
	Not(conds ...gen.Condition) IPluginProductRefDo
	Or(conds ...gen.Condition) IPluginProductRefDo
	Select(conds ...field.Expr) IPluginProductRefDo
	Where(conds ...gen.Condition) IPluginProductRefDo
	Order(conds ...field.Expr) IPluginProductRefDo
	Distinct(cols ...field.Expr) IPluginProductRefDo
	Omit(cols ...field.Expr) IPluginProductRefDo
	Join(table schema.Tabler, on ...field.Expr) IPluginProductRefDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPluginProductRefDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPluginProductRefDo
	Group(cols ...field.Expr) IPluginProductRefDo
	Having(conds ...gen.Condition) IPluginProductRefDo
	Limit(limit int) IPluginProductRefDo
	Offset(offset int) IPluginProductRefDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginProductRefDo
	Unscoped() IPluginProductRefDo
	Create(values ...*model.PluginProductRef) error
	CreateInBatches(values []*model.PluginProductRef, batchSize int) error
	Save(values ...*model.PluginProductRef) error
	First() (*model.PluginProductRef, error)
	Take() (*model.PluginProductRef, error)
	Last() (*model.PluginProductRef, error)
	Find() ([]*model.PluginProductRef, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PluginProductRef, err error)
	FindInBatches(result *[]*model.PluginProductRef, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PluginProductRef) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPluginProductRefDo
	Assign(attrs ...field.AssignExpr) IPluginProductRefDo
	Joins(fields ...field.RelationField) IPluginProductRefDo
	Preload(fields ...field.RelationField) IPluginProductRefDo
	FirstOrInit() (*model.PluginProductRef, error)
	FirstOrCreate() (*model.PluginProductRef, error)
	FindByPage(offset int, limit int) (result []*model.PluginProductRef, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPluginProductRefDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pluginProductRefDo) Debug() IPluginProductRefDo {
	return p.withDO(p.DO.Debug())
}

func (p pluginProductRefDo) WithContext(ctx context.Context) IPluginProductRefDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pluginProductRefDo) ReadDB() IPluginProductRefDo {
	return p.Clauses(dbresolver.Read)
}

func (p pluginProductRefDo) WriteDB() IPluginProductRefDo {
	return p.Clauses(dbresolver.Write)
}

func (p pluginProductRefDo) Session(config *gorm.Session) IPluginProductRefDo {
	return p.withDO(p.DO.Session(config))
}

func (p pluginProductRefDo) Clauses(conds ...clause.Expression) IPluginProductRefDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pluginProductRefDo) Returning(value interface{}, columns ...string) IPluginProductRefDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pluginProductRefDo) Not(conds ...gen.Condition) IPluginProductRefDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pluginProductRefDo) Or(conds ...gen.Condition) IPluginProductRefDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pluginProductRefDo) Select(conds ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pluginProductRefDo) Where(conds ...gen.Condition) IPluginProductRefDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pluginProductRefDo) Order(conds ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pluginProductRefDo) Distinct(cols ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pluginProductRefDo) Omit(cols ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pluginProductRefDo) Join(table schema.Tabler, on ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pluginProductRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pluginProductRefDo) RightJoin(table schema.Tabler, on ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pluginProductRefDo) Group(cols ...field.Expr) IPluginProductRefDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pluginProductRefDo) Having(conds ...gen.Condition) IPluginProductRefDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pluginProductRefDo) Limit(limit int) IPluginProductRefDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pluginProductRefDo) Offset(offset int) IPluginProductRefDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pluginProductRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginProductRefDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pluginProductRefDo) Unscoped() IPluginProductRefDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pluginProductRefDo) Create(values ...*model.PluginProductRef) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pluginProductRefDo) CreateInBatches(values []*model.PluginProductRef, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pluginProductRefDo) Save(values ...*model.PluginProductRef) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pluginProductRefDo) First() (*model.PluginProductRef, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginProductRef), nil
	}
}

func (p pluginProductRefDo) Take() (*model.PluginProductRef, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginProductRef), nil
	}
}

func (p pluginProductRefDo) Last() (*model.PluginProductRef, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginProductRef), nil
	}
}

func (p pluginProductRefDo) Find() ([]*model.PluginProductRef, error) {
	result, err := p.DO.Find()
	return result.([]*model.PluginProductRef), err
}

func (p pluginProductRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PluginProductRef, err error) {
	buf := make([]*model.PluginProductRef, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pluginProductRefDo) FindInBatches(result *[]*model.PluginProductRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pluginProductRefDo) Attrs(attrs ...field.AssignExpr) IPluginProductRefDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pluginProductRefDo) Assign(attrs ...field.AssignExpr) IPluginProductRefDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pluginProductRefDo) Joins(fields ...field.RelationField) IPluginProductRefDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pluginProductRefDo) Preload(fields ...field.RelationField) IPluginProductRefDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pluginProductRefDo) FirstOrInit() (*model.PluginProductRef, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginProductRef), nil
	}
}

func (p pluginProductRefDo) FirstOrCreate() (*model.PluginProductRef, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginProductRef), nil
	}
}

func (p pluginProductRefDo) FindByPage(offset int, limit int) (result []*model.PluginProductRef, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pluginProductRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pluginProductRefDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pluginProductRefDo) Delete(models ...*model.PluginProductRef) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pluginProductRefDo) withDO(do gen.Dao) *pluginProductRefDo {
	p.DO = *do.(*gen.DO)
	return p
}
