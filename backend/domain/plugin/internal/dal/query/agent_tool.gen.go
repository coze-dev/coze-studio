// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/plugin/internal/dal/model"
)

func newAgentTool(db *gorm.DB, opts ...gen.DOOption) agentTool {
	_agentTool := agentTool{}

	_agentTool.agentToolDo.UseDB(db, opts...)
	_agentTool.agentToolDo.UseModel(&model.AgentTool{})

	tableName := _agentTool.agentToolDo.TableName()
	_agentTool.ALL = field.NewAsterisk(tableName)
	_agentTool.ID = field.NewInt64(tableName, "id")
	_agentTool.AgentID = field.NewInt64(tableName, "agent_id")
	_agentTool.ToolID = field.NewInt64(tableName, "tool_id")
	_agentTool.CreatedAt = field.NewInt64(tableName, "created_at")
	_agentTool.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_agentTool.DeletedAt = field.NewField(tableName, "deleted_at")
	_agentTool.RequestParams = field.NewField(tableName, "request_params")
	_agentTool.ResponseParams = field.NewField(tableName, "response_params")

	_agentTool.fillFieldMap()

	return _agentTool
}

// agentTool Agent Tool
type agentTool struct {
	agentToolDo

	ALL            field.Asterisk
	ID             field.Int64 // Primary Key ID
	AgentID        field.Int64 // Agent ID
	ToolID         field.Int64 // Tool ID
	CreatedAt      field.Int64 // Create Time in Milliseconds
	UpdatedAt      field.Int64 // Update Time in Milliseconds
	DeletedAt      field.Field // Delete Time in Milliseconds
	RequestParams  field.Field // Agent Tool Request Parameters
	ResponseParams field.Field // Agent Tool Response Parameters

	fieldMap map[string]field.Expr
}

func (a agentTool) Table(newTableName string) *agentTool {
	a.agentToolDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentTool) As(alias string) *agentTool {
	a.agentToolDo.DO = *(a.agentToolDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentTool) updateTableName(table string) *agentTool {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.ToolID = field.NewInt64(table, "tool_id")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.RequestParams = field.NewField(table, "request_params")
	a.ResponseParams = field.NewField(table, "response_params")

	a.fillFieldMap()

	return a
}

func (a *agentTool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentTool) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["tool_id"] = a.ToolID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["request_params"] = a.RequestParams
	a.fieldMap["response_params"] = a.ResponseParams
}

func (a agentTool) clone(db *gorm.DB) agentTool {
	a.agentToolDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentTool) replaceDB(db *gorm.DB) agentTool {
	a.agentToolDo.ReplaceDB(db)
	return a
}

type agentToolDo struct{ gen.DO }

type IAgentToolDo interface {
	gen.SubQuery
	Debug() IAgentToolDo
	WithContext(ctx context.Context) IAgentToolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentToolDo
	WriteDB() IAgentToolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentToolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentToolDo
	Not(conds ...gen.Condition) IAgentToolDo
	Or(conds ...gen.Condition) IAgentToolDo
	Select(conds ...field.Expr) IAgentToolDo
	Where(conds ...gen.Condition) IAgentToolDo
	Order(conds ...field.Expr) IAgentToolDo
	Distinct(cols ...field.Expr) IAgentToolDo
	Omit(cols ...field.Expr) IAgentToolDo
	Join(table schema.Tabler, on ...field.Expr) IAgentToolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentToolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentToolDo
	Group(cols ...field.Expr) IAgentToolDo
	Having(conds ...gen.Condition) IAgentToolDo
	Limit(limit int) IAgentToolDo
	Offset(offset int) IAgentToolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentToolDo
	Unscoped() IAgentToolDo
	Create(values ...*model.AgentTool) error
	CreateInBatches(values []*model.AgentTool, batchSize int) error
	Save(values ...*model.AgentTool) error
	First() (*model.AgentTool, error)
	Take() (*model.AgentTool, error)
	Last() (*model.AgentTool, error)
	Find() ([]*model.AgentTool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTool, err error)
	FindInBatches(result *[]*model.AgentTool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentTool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentToolDo
	Assign(attrs ...field.AssignExpr) IAgentToolDo
	Joins(fields ...field.RelationField) IAgentToolDo
	Preload(fields ...field.RelationField) IAgentToolDo
	FirstOrInit() (*model.AgentTool, error)
	FirstOrCreate() (*model.AgentTool, error)
	FindByPage(offset int, limit int) (result []*model.AgentTool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentToolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentToolDo) Debug() IAgentToolDo {
	return a.withDO(a.DO.Debug())
}

func (a agentToolDo) WithContext(ctx context.Context) IAgentToolDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentToolDo) ReadDB() IAgentToolDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentToolDo) WriteDB() IAgentToolDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentToolDo) Session(config *gorm.Session) IAgentToolDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentToolDo) Clauses(conds ...clause.Expression) IAgentToolDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentToolDo) Returning(value interface{}, columns ...string) IAgentToolDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentToolDo) Not(conds ...gen.Condition) IAgentToolDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentToolDo) Or(conds ...gen.Condition) IAgentToolDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentToolDo) Select(conds ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentToolDo) Where(conds ...gen.Condition) IAgentToolDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentToolDo) Order(conds ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentToolDo) Distinct(cols ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentToolDo) Omit(cols ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentToolDo) Join(table schema.Tabler, on ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentToolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentToolDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentToolDo) Group(cols ...field.Expr) IAgentToolDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentToolDo) Having(conds ...gen.Condition) IAgentToolDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentToolDo) Limit(limit int) IAgentToolDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentToolDo) Offset(offset int) IAgentToolDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentToolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentToolDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentToolDo) Unscoped() IAgentToolDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentToolDo) Create(values ...*model.AgentTool) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentToolDo) CreateInBatches(values []*model.AgentTool, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentToolDo) Save(values ...*model.AgentTool) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentToolDo) First() (*model.AgentTool, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTool), nil
	}
}

func (a agentToolDo) Take() (*model.AgentTool, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTool), nil
	}
}

func (a agentToolDo) Last() (*model.AgentTool, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTool), nil
	}
}

func (a agentToolDo) Find() ([]*model.AgentTool, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentTool), err
}

func (a agentToolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentTool, err error) {
	buf := make([]*model.AgentTool, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentToolDo) FindInBatches(result *[]*model.AgentTool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentToolDo) Attrs(attrs ...field.AssignExpr) IAgentToolDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentToolDo) Assign(attrs ...field.AssignExpr) IAgentToolDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentToolDo) Joins(fields ...field.RelationField) IAgentToolDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentToolDo) Preload(fields ...field.RelationField) IAgentToolDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentToolDo) FirstOrInit() (*model.AgentTool, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTool), nil
	}
}

func (a agentToolDo) FirstOrCreate() (*model.AgentTool, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentTool), nil
	}
}

func (a agentToolDo) FindByPage(offset int, limit int) (result []*model.AgentTool, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentToolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentToolDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentToolDo) Delete(models ...*model.AgentTool) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentToolDo) withDO(do gen.Dao) *agentToolDo {
	a.DO = *do.(*gen.DO)
	return a
}
