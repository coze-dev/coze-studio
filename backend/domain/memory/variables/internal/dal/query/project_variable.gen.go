// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"code.byted.org/flow/opencoze/backend/domain/memory/variables/internal/dal/model"
)

func newProjectVariable(db *gorm.DB, opts ...gen.DOOption) projectVariable {
	_projectVariable := projectVariable{}

	_projectVariable.projectVariableDo.UseDB(db, opts...)
	_projectVariable.projectVariableDo.UseModel(&model.ProjectVariable{})

	tableName := _projectVariable.projectVariableDo.TableName()
	_projectVariable.ALL = field.NewAsterisk(tableName)
	_projectVariable.ID = field.NewInt64(tableName, "id")
	_projectVariable.CreatorID = field.NewInt64(tableName, "creator_id")
	_projectVariable.ProjectID = field.NewString(tableName, "project_id")
	_projectVariable.VariableList = field.NewField(tableName, "variable_list")
	_projectVariable.CreatedAt = field.NewInt64(tableName, "created_at")
	_projectVariable.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_projectVariable.Version = field.NewString(tableName, "version")

	_projectVariable.fillFieldMap()

	return _projectVariable
}

// projectVariable KV Memory meta
type projectVariable struct {
	projectVariableDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键ID
	CreatorID    field.Int64  // 创建者ID
	ProjectID    field.String // project ID
	VariableList field.Field  // 变量配置的json数据
	CreatedAt    field.Int64  // 创建时间
	UpdatedAt    field.Int64  // 更新时间
	Version      field.String // project版本,为空代表草稿态

	fieldMap map[string]field.Expr
}

func (p projectVariable) Table(newTableName string) *projectVariable {
	p.projectVariableDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectVariable) As(alias string) *projectVariable {
	p.projectVariableDo.DO = *(p.projectVariableDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectVariable) updateTableName(table string) *projectVariable {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatorID = field.NewInt64(table, "creator_id")
	p.ProjectID = field.NewString(table, "project_id")
	p.VariableList = field.NewField(table, "variable_list")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.Version = field.NewString(table, "version")

	p.fillFieldMap()

	return p
}

func (p *projectVariable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectVariable) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["creator_id"] = p.CreatorID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["variable_list"] = p.VariableList
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["version"] = p.Version
}

func (p projectVariable) clone(db *gorm.DB) projectVariable {
	p.projectVariableDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectVariable) replaceDB(db *gorm.DB) projectVariable {
	p.projectVariableDo.ReplaceDB(db)
	return p
}

type projectVariableDo struct{ gen.DO }

type IProjectVariableDo interface {
	gen.SubQuery
	Debug() IProjectVariableDo
	WithContext(ctx context.Context) IProjectVariableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectVariableDo
	WriteDB() IProjectVariableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectVariableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectVariableDo
	Not(conds ...gen.Condition) IProjectVariableDo
	Or(conds ...gen.Condition) IProjectVariableDo
	Select(conds ...field.Expr) IProjectVariableDo
	Where(conds ...gen.Condition) IProjectVariableDo
	Order(conds ...field.Expr) IProjectVariableDo
	Distinct(cols ...field.Expr) IProjectVariableDo
	Omit(cols ...field.Expr) IProjectVariableDo
	Join(table schema.Tabler, on ...field.Expr) IProjectVariableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectVariableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectVariableDo
	Group(cols ...field.Expr) IProjectVariableDo
	Having(conds ...gen.Condition) IProjectVariableDo
	Limit(limit int) IProjectVariableDo
	Offset(offset int) IProjectVariableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectVariableDo
	Unscoped() IProjectVariableDo
	Create(values ...*model.ProjectVariable) error
	CreateInBatches(values []*model.ProjectVariable, batchSize int) error
	Save(values ...*model.ProjectVariable) error
	First() (*model.ProjectVariable, error)
	Take() (*model.ProjectVariable, error)
	Last() (*model.ProjectVariable, error)
	Find() ([]*model.ProjectVariable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectVariable, err error)
	FindInBatches(result *[]*model.ProjectVariable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectVariable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectVariableDo
	Assign(attrs ...field.AssignExpr) IProjectVariableDo
	Joins(fields ...field.RelationField) IProjectVariableDo
	Preload(fields ...field.RelationField) IProjectVariableDo
	FirstOrInit() (*model.ProjectVariable, error)
	FirstOrCreate() (*model.ProjectVariable, error)
	FindByPage(offset int, limit int) (result []*model.ProjectVariable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectVariableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectVariableDo) Debug() IProjectVariableDo {
	return p.withDO(p.DO.Debug())
}

func (p projectVariableDo) WithContext(ctx context.Context) IProjectVariableDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectVariableDo) ReadDB() IProjectVariableDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectVariableDo) WriteDB() IProjectVariableDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectVariableDo) Session(config *gorm.Session) IProjectVariableDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectVariableDo) Clauses(conds ...clause.Expression) IProjectVariableDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectVariableDo) Returning(value interface{}, columns ...string) IProjectVariableDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectVariableDo) Not(conds ...gen.Condition) IProjectVariableDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectVariableDo) Or(conds ...gen.Condition) IProjectVariableDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectVariableDo) Select(conds ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectVariableDo) Where(conds ...gen.Condition) IProjectVariableDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectVariableDo) Order(conds ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectVariableDo) Distinct(cols ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectVariableDo) Omit(cols ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectVariableDo) Join(table schema.Tabler, on ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectVariableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectVariableDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectVariableDo) Group(cols ...field.Expr) IProjectVariableDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectVariableDo) Having(conds ...gen.Condition) IProjectVariableDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectVariableDo) Limit(limit int) IProjectVariableDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectVariableDo) Offset(offset int) IProjectVariableDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectVariableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectVariableDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectVariableDo) Unscoped() IProjectVariableDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectVariableDo) Create(values ...*model.ProjectVariable) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectVariableDo) CreateInBatches(values []*model.ProjectVariable, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectVariableDo) Save(values ...*model.ProjectVariable) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectVariableDo) First() (*model.ProjectVariable, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectVariable), nil
	}
}

func (p projectVariableDo) Take() (*model.ProjectVariable, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectVariable), nil
	}
}

func (p projectVariableDo) Last() (*model.ProjectVariable, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectVariable), nil
	}
}

func (p projectVariableDo) Find() ([]*model.ProjectVariable, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectVariable), err
}

func (p projectVariableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectVariable, err error) {
	buf := make([]*model.ProjectVariable, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectVariableDo) FindInBatches(result *[]*model.ProjectVariable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectVariableDo) Attrs(attrs ...field.AssignExpr) IProjectVariableDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectVariableDo) Assign(attrs ...field.AssignExpr) IProjectVariableDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectVariableDo) Joins(fields ...field.RelationField) IProjectVariableDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectVariableDo) Preload(fields ...field.RelationField) IProjectVariableDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectVariableDo) FirstOrInit() (*model.ProjectVariable, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectVariable), nil
	}
}

func (p projectVariableDo) FirstOrCreate() (*model.ProjectVariable, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectVariable), nil
	}
}

func (p projectVariableDo) FindByPage(offset int, limit int) (result []*model.ProjectVariable, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectVariableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectVariableDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectVariableDo) Delete(models ...*model.ProjectVariable) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectVariableDo) withDO(do gen.Dao) *projectVariableDo {
	p.DO = *do.(*gen.DO)
	return p
}
