// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-studio/backend/infra/impl/telemetry/clickhouse/internal/model"
)

func newSpansData(db *gorm.DB, opts ...gen.DOOption) spansData {
	_spansData := spansData{}

	_spansData.spansDataDo.UseDB(db, opts...)
	_spansData.spansDataDo.UseModel(&model.SpansData{})

	tableName := _spansData.spansDataDo.TableName()
	_spansData.ALL = field.NewAsterisk(tableName)
	_spansData.SpanID = field.NewString(tableName, "span_id")
	_spansData.TraceID = field.NewString(tableName, "trace_id")
	_spansData.ParentSpanID = field.NewString(tableName, "parent_span_id")
	_spansData.Name = field.NewString(tableName, "name")
	_spansData.Kind = field.NewInt8(tableName, "kind")
	_spansData.StatusCode = field.NewInt64(tableName, "status_code")
	_spansData.StatusMsg = field.NewString(tableName, "status_msg")
	_spansData.ResourceAttributes = field.NewField(tableName, "resource_attributes")
	_spansData.StartTimeMs = field.NewUint64(tableName, "start_time_ms")
	_spansData.EndTimeMs = field.NewUint64(tableName, "end_time_ms")
	_spansData.LogID = field.NewString(tableName, "log_id")
	_spansData.AttrKeys = field.NewField(tableName, "attr_keys")
	_spansData.AttrValues = field.NewField(tableName, "attr_values")

	_spansData.fillFieldMap()

	return _spansData
}

type spansData struct {
	spansDataDo

	ALL                field.Asterisk
	SpanID             field.String
	TraceID            field.String
	ParentSpanID       field.String
	Name               field.String
	Kind               field.Int8
	StatusCode         field.Int64
	StatusMsg          field.String
	ResourceAttributes field.Field
	StartTimeMs        field.Uint64
	EndTimeMs          field.Uint64
	LogID              field.String
	AttrKeys           field.Field
	AttrValues         field.Field

	fieldMap map[string]field.Expr
}

func (s spansData) Table(newTableName string) *spansData {
	s.spansDataDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spansData) As(alias string) *spansData {
	s.spansDataDo.DO = *(s.spansDataDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spansData) updateTableName(table string) *spansData {
	s.ALL = field.NewAsterisk(table)
	s.SpanID = field.NewString(table, "span_id")
	s.TraceID = field.NewString(table, "trace_id")
	s.ParentSpanID = field.NewString(table, "parent_span_id")
	s.Name = field.NewString(table, "name")
	s.Kind = field.NewInt8(table, "kind")
	s.StatusCode = field.NewInt64(table, "status_code")
	s.StatusMsg = field.NewString(table, "status_msg")
	s.ResourceAttributes = field.NewField(table, "resource_attributes")
	s.StartTimeMs = field.NewUint64(table, "start_time_ms")
	s.EndTimeMs = field.NewUint64(table, "end_time_ms")
	s.LogID = field.NewString(table, "log_id")
	s.AttrKeys = field.NewField(table, "attr_keys")
	s.AttrValues = field.NewField(table, "attr_values")

	s.fillFieldMap()

	return s
}

func (s *spansData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spansData) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["span_id"] = s.SpanID
	s.fieldMap["trace_id"] = s.TraceID
	s.fieldMap["parent_span_id"] = s.ParentSpanID
	s.fieldMap["name"] = s.Name
	s.fieldMap["kind"] = s.Kind
	s.fieldMap["status_code"] = s.StatusCode
	s.fieldMap["status_msg"] = s.StatusMsg
	s.fieldMap["resource_attributes"] = s.ResourceAttributes
	s.fieldMap["start_time_ms"] = s.StartTimeMs
	s.fieldMap["end_time_ms"] = s.EndTimeMs
	s.fieldMap["log_id"] = s.LogID
	s.fieldMap["attr_keys"] = s.AttrKeys
	s.fieldMap["attr_values"] = s.AttrValues
}

func (s spansData) clone(db *gorm.DB) spansData {
	s.spansDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spansData) replaceDB(db *gorm.DB) spansData {
	s.spansDataDo.ReplaceDB(db)
	return s
}

type spansDataDo struct{ gen.DO }

type ISpansDataDo interface {
	gen.SubQuery
	Debug() ISpansDataDo
	WithContext(ctx context.Context) ISpansDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpansDataDo
	WriteDB() ISpansDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpansDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpansDataDo
	Not(conds ...gen.Condition) ISpansDataDo
	Or(conds ...gen.Condition) ISpansDataDo
	Select(conds ...field.Expr) ISpansDataDo
	Where(conds ...gen.Condition) ISpansDataDo
	Order(conds ...field.Expr) ISpansDataDo
	Distinct(cols ...field.Expr) ISpansDataDo
	Omit(cols ...field.Expr) ISpansDataDo
	Join(table schema.Tabler, on ...field.Expr) ISpansDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpansDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpansDataDo
	Group(cols ...field.Expr) ISpansDataDo
	Having(conds ...gen.Condition) ISpansDataDo
	Limit(limit int) ISpansDataDo
	Offset(offset int) ISpansDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpansDataDo
	Unscoped() ISpansDataDo
	Create(values ...*model.SpansData) error
	CreateInBatches(values []*model.SpansData, batchSize int) error
	Save(values ...*model.SpansData) error
	First() (*model.SpansData, error)
	Take() (*model.SpansData, error)
	Last() (*model.SpansData, error)
	Find() ([]*model.SpansData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpansData, err error)
	FindInBatches(result *[]*model.SpansData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpansData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpansDataDo
	Assign(attrs ...field.AssignExpr) ISpansDataDo
	Joins(fields ...field.RelationField) ISpansDataDo
	Preload(fields ...field.RelationField) ISpansDataDo
	FirstOrInit() (*model.SpansData, error)
	FirstOrCreate() (*model.SpansData, error)
	FindByPage(offset int, limit int) (result []*model.SpansData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpansDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spansDataDo) Debug() ISpansDataDo {
	return s.withDO(s.DO.Debug())
}

func (s spansDataDo) WithContext(ctx context.Context) ISpansDataDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spansDataDo) ReadDB() ISpansDataDo {
	return s.Clauses(dbresolver.Read)
}

func (s spansDataDo) WriteDB() ISpansDataDo {
	return s.Clauses(dbresolver.Write)
}

func (s spansDataDo) Session(config *gorm.Session) ISpansDataDo {
	return s.withDO(s.DO.Session(config))
}

func (s spansDataDo) Clauses(conds ...clause.Expression) ISpansDataDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spansDataDo) Returning(value interface{}, columns ...string) ISpansDataDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spansDataDo) Not(conds ...gen.Condition) ISpansDataDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spansDataDo) Or(conds ...gen.Condition) ISpansDataDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spansDataDo) Select(conds ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spansDataDo) Where(conds ...gen.Condition) ISpansDataDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spansDataDo) Order(conds ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spansDataDo) Distinct(cols ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spansDataDo) Omit(cols ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spansDataDo) Join(table schema.Tabler, on ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spansDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spansDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spansDataDo) Group(cols ...field.Expr) ISpansDataDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spansDataDo) Having(conds ...gen.Condition) ISpansDataDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spansDataDo) Limit(limit int) ISpansDataDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spansDataDo) Offset(offset int) ISpansDataDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spansDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpansDataDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spansDataDo) Unscoped() ISpansDataDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spansDataDo) Create(values ...*model.SpansData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spansDataDo) CreateInBatches(values []*model.SpansData, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spansDataDo) Save(values ...*model.SpansData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spansDataDo) First() (*model.SpansData, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpansData), nil
	}
}

func (s spansDataDo) Take() (*model.SpansData, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpansData), nil
	}
}

func (s spansDataDo) Last() (*model.SpansData, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpansData), nil
	}
}

func (s spansDataDo) Find() ([]*model.SpansData, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpansData), err
}

func (s spansDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpansData, err error) {
	buf := make([]*model.SpansData, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spansDataDo) FindInBatches(result *[]*model.SpansData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spansDataDo) Attrs(attrs ...field.AssignExpr) ISpansDataDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spansDataDo) Assign(attrs ...field.AssignExpr) ISpansDataDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spansDataDo) Joins(fields ...field.RelationField) ISpansDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spansDataDo) Preload(fields ...field.RelationField) ISpansDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spansDataDo) FirstOrInit() (*model.SpansData, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpansData), nil
	}
}

func (s spansDataDo) FirstOrCreate() (*model.SpansData, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpansData), nil
	}
}

func (s spansDataDo) FindByPage(offset int, limit int) (result []*model.SpansData, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spansDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spansDataDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spansDataDo) Delete(models ...*model.SpansData) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spansDataDo) withDO(do gen.Dao) *spansDataDo {
	s.DO = *do.(*gen.DO)
	return s
}
