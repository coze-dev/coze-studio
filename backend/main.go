// Code generated by hertz generator.

package main

import (
	"context"
	"log"
	"os"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/joho/godotenv"

	"code.byted.org/flow/opencoze/backend/api/middleware"
	"code.byted.org/flow/opencoze/backend/api/router"
	"code.byted.org/flow/opencoze/backend/application"
	"code.byted.org/flow/opencoze/backend/pkg/lang/conv"
	"code.byted.org/flow/opencoze/backend/pkg/logs"
)

func main() {
	logs.SetLevel(logs.LevelDebug)

	var err error
	env := os.Getenv("APP_ENV")
	logs.Infof("APP_ENV: %s", env)
	if env == "" {
		err = godotenv.Load()
	} else {
		fileName := ".env." + env
		err = godotenv.Load(fileName)
	}

	if err != nil {
		log.Fatalf("Error loading .env file , err = %v ", err)
	}

	ctx := context.Background()

	if err := application.Init(ctx); err != nil {
		panic("InitializeInfra failed, err=" + err.Error())
	}

	hostPorts := os.Getenv("HOST_PORTS")
	if hostPorts == "" {
		hostPorts = ":8888"
	}
	maxRequestBodySize := os.Getenv("MAX_REQUEST_BODY_SIZE")
	maxSize, err := conv.StrToInt64(maxRequestBodySize)
	if err != nil {
		maxSize = 1024 * 1024 * 200
	}

	s := server.Default(server.WithHostPorts(hostPorts), server.WithMaxRequestBodySize(int(maxSize)))
	s.Use(middleware.ContextCacheMW())
	s.Use(middleware.OpenapiAuthMW())
	s.Use(middleware.SessionAuthMW())
	s.Use(middleware.AccessLogMW())
	router.GeneratedRegister(s)
	s.Spin()
}
