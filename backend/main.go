// Code generated by hertz generator.

package main

import (
	"context"
	"log"
	"os"
	"runtime/debug"
	"strings"

	"github.com/joho/godotenv"

	"github.com/cloudwego/hertz/pkg/app/server"

	"code.byted.org/flow/opencoze/backend/api/middleware"
	"code.byted.org/flow/opencoze/backend/api/router"
	"code.byted.org/flow/opencoze/backend/application"
	"code.byted.org/flow/opencoze/backend/pkg/lang/conv"
	"code.byted.org/flow/opencoze/backend/pkg/logs"
)

func main() {
	ctx := context.Background()

	if err := loadEnv(); err != nil {
		panic("loadEnv failed, err=" + err.Error())
	}

	setLogLevel()

	if err := application.Init(ctx); err != nil {
		panic("InitializeInfra failed, err=" + err.Error())
	}

	addr := os.Getenv("LISTEN_ADDR")
	if addr == "" {
		addr = ":8888"
	}

	maxRequestBodySize := os.Getenv("MAX_REQUEST_BODY_SIZE")
	maxSize := conv.StrToInt64D(maxRequestBodySize, 1024*1024*200)

	s := server.Default(server.WithHostPorts(addr),
		server.WithMaxRequestBodySize(int(maxSize)))

	// ContextCacheMW -> RequestInspectorMW -> AccessLogMW -> OtherMiddleware
	s.Use(middleware.ContextCacheMW())
	s.Use(middleware.RequestInspectorMW())
	s.Use(middleware.AccessLogMW())
	s.Use(middleware.OpenapiAuthMW())
	s.Use(middleware.SessionAuthMW())
	router.GeneratedRegister(s)
	s.Spin()
}

func loadEnv() (err error) {
	env := os.Getenv("APP_ENV")
	logs.Infof("APP_ENV: %s", env)

	if env == "" {
		err = godotenv.Load()
	} else {
		fileName := ".env." + env
		err = godotenv.Load(fileName)
	}

	if err != nil {
		log.Fatalf("Error loading .env file, err = %v ", err)
	}

	return err
}

func setLogLevel() {
	level := strings.ToLower(os.Getenv("LOG_LEVEL"))

	switch level {
	case "trace":
		logs.SetLevel(logs.LevelTrace)
	case "debug":
		logs.SetLevel(logs.LevelDebug)
	case "info":
		logs.SetLevel(logs.LevelInfo)
	case "notice":
		logs.SetLevel(logs.LevelNotice)
	case "warn":
		logs.SetLevel(logs.LevelWarn)
	case "error":
		logs.SetLevel(logs.LevelError)
	case "fatal":
		logs.SetLevel(logs.LevelFatal)
	default:
		logs.SetLevel(logs.LevelInfo)
	}

	crashFile, _ := os.Create("crash.log")
	debug.SetCrashOutput(crashFile, debug.CrashOptions{})
}
