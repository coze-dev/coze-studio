// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination ../../internal/mock/domain/workflow/interface.go --package mockWorkflow -source interface.go
//

// Package mockWorkflow is a generated GoMock package.
package mockWorkflow

import (
	context "context"
	reflect "reflect"

	tool "github.com/cloudwego/eino/components/tool"
	gomock "go.uber.org/mock/gomock"

	workflow "code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/workflow"
	entity "code.byted.org/flow/opencoze/backend/domain/workflow/entity"
	vo "code.byted.org/flow/opencoze/backend/domain/workflow/entity/vo"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AsyncExecuteWorkflow mocks base method.
func (m *MockService) AsyncExecuteWorkflow(ctx context.Context, id *entity.WorkflowIdentity, input map[string]string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncExecuteWorkflow", ctx, id, input)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncExecuteWorkflow indicates an expected call of AsyncExecuteWorkflow.
func (mr *MockServiceMockRecorder) AsyncExecuteWorkflow(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncExecuteWorkflow", reflect.TypeOf((*MockService)(nil).AsyncExecuteWorkflow), ctx, id, input)
}

// CreateWorkflow mocks base method.
func (m *MockService) CreateWorkflow(ctx context.Context, wf *entity.Workflow, ref *entity.WorkflowReference) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", ctx, wf, ref)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockServiceMockRecorder) CreateWorkflow(ctx, wf, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockService)(nil).CreateWorkflow), ctx, wf, ref)
}

// DeleteWorkflow mocks base method.
func (m *MockService) DeleteWorkflow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockServiceMockRecorder) DeleteWorkflow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockService)(nil).DeleteWorkflow), ctx, id)
}

// GetExecution mocks base method.
func (m *MockService) GetExecution(ctx context.Context, wfExe *entity.WorkflowExecution) (*entity.WorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecution", ctx, wfExe)
	ret0, _ := ret[0].(*entity.WorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution.
func (mr *MockServiceMockRecorder) GetExecution(ctx, wfExe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockService)(nil).GetExecution), ctx, wfExe)
}

// GetWorkflow mocks base method.
func (m *MockService) GetWorkflow(ctx context.Context, id *entity.WorkflowIdentity) (*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", ctx, id)
	ret0, _ := ret[0].(*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockServiceMockRecorder) GetWorkflow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockService)(nil).GetWorkflow), ctx, id)
}

// GetWorkflowReference mocks base method.
func (m *MockService) GetWorkflowReference(ctx context.Context, id int64) ([]*entity.WorkflowReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowReference", ctx, id)
	ret0, _ := ret[0].([]*entity.WorkflowReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowReference indicates an expected call of GetWorkflowReference.
func (mr *MockServiceMockRecorder) GetWorkflowReference(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowReference", reflect.TypeOf((*MockService)(nil).GetWorkflowReference), ctx, id)
}

// ListNodeMeta mocks base method.
func (m *MockService) ListNodeMeta(ctx context.Context, nodeTypes map[entity.NodeType]bool) (map[string][]*entity.NodeTypeMeta, map[string][]*entity.PluginNodeMeta, map[string][]*entity.PluginCategoryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodeMeta", ctx, nodeTypes)
	ret0, _ := ret[0].(map[string][]*entity.NodeTypeMeta)
	ret1, _ := ret[1].(map[string][]*entity.PluginNodeMeta)
	ret2, _ := ret[2].(map[string][]*entity.PluginCategoryMeta)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListNodeMeta indicates an expected call of ListNodeMeta.
func (mr *MockServiceMockRecorder) ListNodeMeta(ctx, nodeTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeMeta", reflect.TypeOf((*MockService)(nil).ListNodeMeta), ctx, nodeTypes)
}

// MGetWorkflows mocks base method.
func (m *MockService) MGetWorkflows(ctx context.Context, ids []*entity.WorkflowIdentity) ([]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWorkflows", ctx, ids)
	ret0, _ := ret[0].([]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflows indicates an expected call of MGetWorkflows.
func (mr *MockServiceMockRecorder) MGetWorkflows(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflows", reflect.TypeOf((*MockService)(nil).MGetWorkflows), ctx, ids)
}

// ResumeWorkflow mocks base method.
func (m *MockService) ResumeWorkflow(ctx context.Context, wfExeID, eventID int64, resumeData string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeWorkflow", ctx, wfExeID, eventID, resumeData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeWorkflow indicates an expected call of ResumeWorkflow.
func (mr *MockServiceMockRecorder) ResumeWorkflow(ctx, wfExeID, eventID, resumeData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeWorkflow", reflect.TypeOf((*MockService)(nil).ResumeWorkflow), ctx, wfExeID, eventID, resumeData)
}

// SaveWorkflow mocks base method.
func (m *MockService) SaveWorkflow(ctx context.Context, draft *entity.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWorkflow", ctx, draft)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWorkflow indicates an expected call of SaveWorkflow.
func (mr *MockServiceMockRecorder) SaveWorkflow(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWorkflow", reflect.TypeOf((*MockService)(nil).SaveWorkflow), ctx, draft)
}

// ValidateTree mocks base method.
func (m *MockService) ValidateTree(ctx context.Context, id int64, canvasSchema string) ([]*workflow.ValidateTreeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTree", ctx, id, canvasSchema)
	ret0, _ := ret[0].([]*workflow.ValidateTreeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTree indicates an expected call of ValidateTree.
func (mr *MockServiceMockRecorder) ValidateTree(ctx, id, canvasSchema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTree", reflect.TypeOf((*MockService)(nil).ValidateTree), ctx, id, canvasSchema)
}

// WorkflowAsModelTool mocks base method.
func (m *MockService) WorkflowAsModelTool(ctx context.Context, ids []*entity.WorkflowIdentity) ([]tool.BaseTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsModelTool", ctx, ids)
	ret0, _ := ret[0].([]tool.BaseTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsModelTool indicates an expected call of WorkflowAsModelTool.
func (mr *MockServiceMockRecorder) WorkflowAsModelTool(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsModelTool", reflect.TypeOf((*MockService)(nil).WorkflowAsModelTool), ctx, ids)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BatchGetSubWorkflowCanvas mocks base method.
func (m *MockRepository) BatchGetSubWorkflowCanvas(ctx context.Context, parents []*vo.Node) (map[string]*vo.Canvas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSubWorkflowCanvas", ctx, parents)
	ret0, _ := ret[0].(map[string]*vo.Canvas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSubWorkflowCanvas indicates an expected call of BatchGetSubWorkflowCanvas.
func (mr *MockRepositoryMockRecorder) BatchGetSubWorkflowCanvas(ctx, parents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSubWorkflowCanvas", reflect.TypeOf((*MockRepository)(nil).BatchGetSubWorkflowCanvas), ctx, parents)
}

// CreateNodeExecution mocks base method.
func (m *MockRepository) CreateNodeExecution(ctx context.Context, execution *entity.NodeExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNodeExecution indicates an expected call of CreateNodeExecution.
func (mr *MockRepositoryMockRecorder) CreateNodeExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeExecution", reflect.TypeOf((*MockRepository)(nil).CreateNodeExecution), ctx, execution)
}

// CreateOrUpdateDraft mocks base method.
func (m *MockRepository) CreateOrUpdateDraft(ctx context.Context, id int64, canvas, inputParams, outputParams string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDraft", ctx, id, canvas, inputParams, outputParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateDraft indicates an expected call of CreateOrUpdateDraft.
func (mr *MockRepositoryMockRecorder) CreateOrUpdateDraft(ctx, id, canvas, inputParams, outputParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDraft", reflect.TypeOf((*MockRepository)(nil).CreateOrUpdateDraft), ctx, id, canvas, inputParams, outputParams)
}

// CreateWorkflowExecution mocks base method.
func (m *MockRepository) CreateWorkflowExecution(ctx context.Context, execution *entity.WorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflowExecution indicates an expected call of CreateWorkflowExecution.
func (mr *MockRepositoryMockRecorder) CreateWorkflowExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).CreateWorkflowExecution), ctx, execution)
}

// CreateWorkflowMeta mocks base method.
func (m *MockRepository) CreateWorkflowMeta(ctx context.Context, wf *entity.Workflow, ref *entity.WorkflowReference) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowMeta", ctx, wf, ref)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowMeta indicates an expected call of CreateWorkflowMeta.
func (mr *MockRepositoryMockRecorder) CreateWorkflowMeta(ctx, wf, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).CreateWorkflowMeta), ctx, wf, ref)
}

// DeleteInterruptEvent mocks base method.
func (m *MockRepository) DeleteInterruptEvent(ctx context.Context, wfExeID, eventID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInterruptEvent", ctx, wfExeID, eventID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInterruptEvent indicates an expected call of DeleteInterruptEvent.
func (mr *MockRepositoryMockRecorder) DeleteInterruptEvent(ctx, wfExeID, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInterruptEvent", reflect.TypeOf((*MockRepository)(nil).DeleteInterruptEvent), ctx, wfExeID, eventID)
}

// DeleteWorkflow mocks base method.
func (m *MockRepository) DeleteWorkflow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockRepositoryMockRecorder) DeleteWorkflow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockRepository)(nil).DeleteWorkflow), ctx, id)
}

// GenID mocks base method.
func (m *MockRepository) GenID(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenID", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenID indicates an expected call of GenID.
func (mr *MockRepositoryMockRecorder) GenID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenID", reflect.TypeOf((*MockRepository)(nil).GenID), ctx)
}

// GetInterruptEvent mocks base method.
func (m *MockRepository) GetInterruptEvent(ctx context.Context, wfExeID, eventID int64) (*entity.InterruptEvent, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterruptEvent", ctx, wfExeID, eventID)
	ret0, _ := ret[0].(*entity.InterruptEvent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInterruptEvent indicates an expected call of GetInterruptEvent.
func (mr *MockRepositoryMockRecorder) GetInterruptEvent(ctx, wfExeID, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterruptEvent", reflect.TypeOf((*MockRepository)(nil).GetInterruptEvent), ctx, wfExeID, eventID)
}

// GetNodeExecutionsByWfExeID mocks base method.
func (m *MockRepository) GetNodeExecutionsByWfExeID(ctx context.Context, wfExeID int64) ([]*entity.NodeExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeExecutionsByWfExeID", ctx, wfExeID)
	ret0, _ := ret[0].([]*entity.NodeExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeExecutionsByWfExeID indicates an expected call of GetNodeExecutionsByWfExeID.
func (mr *MockRepositoryMockRecorder) GetNodeExecutionsByWfExeID(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExecutionsByWfExeID", reflect.TypeOf((*MockRepository)(nil).GetNodeExecutionsByWfExeID), ctx, wfExeID)
}

// GetSubWorkflowCanvas mocks base method.
func (m *MockRepository) GetSubWorkflowCanvas(ctx context.Context, parent *vo.Node) (*vo.Canvas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubWorkflowCanvas", ctx, parent)
	ret0, _ := ret[0].(*vo.Canvas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubWorkflowCanvas indicates an expected call of GetSubWorkflowCanvas.
func (mr *MockRepositoryMockRecorder) GetSubWorkflowCanvas(ctx, parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubWorkflowCanvas", reflect.TypeOf((*MockRepository)(nil).GetSubWorkflowCanvas), ctx, parent)
}

// GetWorkflowDraft mocks base method.
func (m *MockRepository) GetWorkflowDraft(ctx context.Context, id int64) (*vo.DraftInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowDraft", ctx, id)
	ret0, _ := ret[0].(*vo.DraftInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowDraft indicates an expected call of GetWorkflowDraft.
func (mr *MockRepositoryMockRecorder) GetWorkflowDraft(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowDraft", reflect.TypeOf((*MockRepository)(nil).GetWorkflowDraft), ctx, id)
}

// GetWorkflowExecution mocks base method.
func (m *MockRepository) GetWorkflowExecution(ctx context.Context, id int64) (*entity.WorkflowExecution, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowExecution", ctx, id)
	ret0, _ := ret[0].(*entity.WorkflowExecution)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowExecution indicates an expected call of GetWorkflowExecution.
func (mr *MockRepositoryMockRecorder) GetWorkflowExecution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).GetWorkflowExecution), ctx, id)
}

// GetWorkflowMeta mocks base method.
func (m *MockRepository) GetWorkflowMeta(ctx context.Context, id int64) (*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowMeta", ctx, id)
	ret0, _ := ret[0].(*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowMeta indicates an expected call of GetWorkflowMeta.
func (mr *MockRepositoryMockRecorder) GetWorkflowMeta(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).GetWorkflowMeta), ctx, id)
}

// GetWorkflowReference mocks base method.
func (m *MockRepository) GetWorkflowReference(ctx context.Context, id int64) ([]*entity.WorkflowReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowReference", ctx, id)
	ret0, _ := ret[0].([]*entity.WorkflowReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowReference indicates an expected call of GetWorkflowReference.
func (mr *MockRepositoryMockRecorder) GetWorkflowReference(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowReference", reflect.TypeOf((*MockRepository)(nil).GetWorkflowReference), ctx, id)
}

// GetWorkflowVersion mocks base method.
func (m *MockRepository) GetWorkflowVersion(ctx context.Context, id int64, version string) (*vo.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowVersion", ctx, id, version)
	ret0, _ := ret[0].(*vo.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowVersion indicates an expected call of GetWorkflowVersion.
func (mr *MockRepositoryMockRecorder) GetWorkflowVersion(ctx, id, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowVersion", reflect.TypeOf((*MockRepository)(nil).GetWorkflowVersion), ctx, id, version)
}

// ListInterruptEvents mocks base method.
func (m *MockRepository) ListInterruptEvents(ctx context.Context, wfExeID int64) ([]*entity.InterruptEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInterruptEvents", ctx, wfExeID)
	ret0, _ := ret[0].([]*entity.InterruptEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInterruptEvents indicates an expected call of ListInterruptEvents.
func (mr *MockRepositoryMockRecorder) ListInterruptEvents(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInterruptEvents", reflect.TypeOf((*MockRepository)(nil).ListInterruptEvents), ctx, wfExeID)
}

// SaveInterruptEvents mocks base method.
func (m *MockRepository) SaveInterruptEvents(ctx context.Context, wfExeID int64, events []*entity.InterruptEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInterruptEvents", ctx, wfExeID, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInterruptEvents indicates an expected call of SaveInterruptEvents.
func (mr *MockRepositoryMockRecorder) SaveInterruptEvents(ctx, wfExeID, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInterruptEvents", reflect.TypeOf((*MockRepository)(nil).SaveInterruptEvents), ctx, wfExeID, events)
}

// UpdateNodeExecution mocks base method.
func (m *MockRepository) UpdateNodeExecution(ctx context.Context, execution *entity.NodeExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodeExecution indicates an expected call of UpdateNodeExecution.
func (mr *MockRepositoryMockRecorder) UpdateNodeExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeExecution", reflect.TypeOf((*MockRepository)(nil).UpdateNodeExecution), ctx, execution)
}

// UpdateWorkflowExecution mocks base method.
func (m *MockRepository) UpdateWorkflowExecution(ctx context.Context, execution *entity.WorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowExecution indicates an expected call of UpdateWorkflowExecution.
func (mr *MockRepositoryMockRecorder) UpdateWorkflowExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).UpdateWorkflowExecution), ctx, execution)
}
