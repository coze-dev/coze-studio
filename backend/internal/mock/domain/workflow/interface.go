// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination ../../internal/mock/domain/workflow/interface.go --package mockWorkflow -source interface.go
//

// Package mockWorkflow is a generated GoMock package.
package mockWorkflow

import (
	context "context"
	reflect "reflect"

	workflow "code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/workflow"
	workflow0 "code.byted.org/flow/opencoze/backend/domain/workflow"
	entity "code.byted.org/flow/opencoze/backend/domain/workflow/entity"
	vo "code.byted.org/flow/opencoze/backend/domain/workflow/entity/vo"
	tool "github.com/cloudwego/eino/components/tool"
	compose "github.com/cloudwego/eino/compose"
	schema "github.com/cloudwego/eino/schema"
	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AsyncExecuteNode mocks base method.
func (m *MockService) AsyncExecuteNode(ctx context.Context, id *entity.WorkflowIdentity, nodeID string, input map[string]string, config vo.ExecuteConfig) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncExecuteNode", ctx, id, nodeID, input, config)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncExecuteNode indicates an expected call of AsyncExecuteNode.
func (mr *MockServiceMockRecorder) AsyncExecuteNode(ctx, id, nodeID, input, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncExecuteNode", reflect.TypeOf((*MockService)(nil).AsyncExecuteNode), ctx, id, nodeID, input, config)
}

// AsyncExecuteWorkflow mocks base method.
func (m *MockService) AsyncExecuteWorkflow(ctx context.Context, id *entity.WorkflowIdentity, input map[string]string, config vo.ExecuteConfig) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncExecuteWorkflow", ctx, id, input, config)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncExecuteWorkflow indicates an expected call of AsyncExecuteWorkflow.
func (mr *MockServiceMockRecorder) AsyncExecuteWorkflow(ctx, id, input, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncExecuteWorkflow", reflect.TypeOf((*MockService)(nil).AsyncExecuteWorkflow), ctx, id, input, config)
}

// AsyncResumeWorkflow mocks base method.
func (m *MockService) AsyncResumeWorkflow(ctx context.Context, req *entity.ResumeRequest, config vo.ExecuteConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncResumeWorkflow", ctx, req, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncResumeWorkflow indicates an expected call of AsyncResumeWorkflow.
func (mr *MockServiceMockRecorder) AsyncResumeWorkflow(ctx, req, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncResumeWorkflow", reflect.TypeOf((*MockService)(nil).AsyncResumeWorkflow), ctx, req, config)
}

// CancelWorkflow mocks base method.
func (m *MockService) CancelWorkflow(ctx context.Context, wfExeID, wfID, spaceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorkflow", ctx, wfExeID, wfID, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelWorkflow indicates an expected call of CancelWorkflow.
func (mr *MockServiceMockRecorder) CancelWorkflow(ctx, wfExeID, wfID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorkflow", reflect.TypeOf((*MockService)(nil).CancelWorkflow), ctx, wfExeID, wfID, spaceID)
}

// CopyWorkflow mocks base method.
func (m *MockService) CopyWorkflow(ctx context.Context, spaceID, workflowID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyWorkflow", ctx, spaceID, workflowID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyWorkflow indicates an expected call of CopyWorkflow.
func (mr *MockServiceMockRecorder) CopyWorkflow(ctx, spaceID, workflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWorkflow", reflect.TypeOf((*MockService)(nil).CopyWorkflow), ctx, spaceID, workflowID)
}

// CreateWorkflow mocks base method.
func (m *MockService) CreateWorkflow(ctx context.Context, wf *entity.Workflow, ref *entity.WorkflowReference) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", ctx, wf, ref)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockServiceMockRecorder) CreateWorkflow(ctx, wf, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockService)(nil).CreateWorkflow), ctx, wf, ref)
}

// DeleteWorkflow mocks base method.
func (m *MockService) DeleteWorkflow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockServiceMockRecorder) DeleteWorkflow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockService)(nil).DeleteWorkflow), ctx, id)
}

// GetExecution mocks base method.
func (m *MockService) GetExecution(ctx context.Context, wfExe *entity.WorkflowExecution) (*entity.WorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecution", ctx, wfExe)
	ret0, _ := ret[0].(*entity.WorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution.
func (mr *MockServiceMockRecorder) GetExecution(ctx, wfExe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockService)(nil).GetExecution), ctx, wfExe)
}

// GetLastestNodeDebugInput mocks base method.
func (m *MockService) GetLastestNodeDebugInput(ctx context.Context, wfID int64, nodeID string, userID int64) (*entity.NodeExecution, *entity.NodeExecution, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastestNodeDebugInput", ctx, wfID, nodeID, userID)
	ret0, _ := ret[0].(*entity.NodeExecution)
	ret1, _ := ret[1].(*entity.NodeExecution)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetLastestNodeDebugInput indicates an expected call of GetLastestNodeDebugInput.
func (mr *MockServiceMockRecorder) GetLastestNodeDebugInput(ctx, wfID, nodeID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastestNodeDebugInput", reflect.TypeOf((*MockService)(nil).GetLastestNodeDebugInput), ctx, wfID, nodeID, userID)
}

// GetLatestTestRunInput mocks base method.
func (m *MockService) GetLatestTestRunInput(ctx context.Context, wfID, userID int64) (*entity.NodeExecution, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTestRunInput", ctx, wfID, userID)
	ret0, _ := ret[0].(*entity.NodeExecution)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestTestRunInput indicates an expected call of GetLatestTestRunInput.
func (mr *MockServiceMockRecorder) GetLatestTestRunInput(ctx, wfID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTestRunInput", reflect.TypeOf((*MockService)(nil).GetLatestTestRunInput), ctx, wfID, userID)
}

// GetNodeExecution mocks base method.
func (m *MockService) GetNodeExecution(ctx context.Context, exeID int64, nodeID string) (*entity.NodeExecution, *entity.NodeExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeExecution", ctx, exeID, nodeID)
	ret0, _ := ret[0].(*entity.NodeExecution)
	ret1, _ := ret[1].(*entity.NodeExecution)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodeExecution indicates an expected call of GetNodeExecution.
func (mr *MockServiceMockRecorder) GetNodeExecution(ctx, exeID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExecution", reflect.TypeOf((*MockService)(nil).GetNodeExecution), ctx, exeID, nodeID)
}

// GetReleasedWorkflows mocks base method.
func (m *MockService) GetReleasedWorkflows(ctx context.Context, ids []*entity.WorkflowIdentity) (map[int64]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleasedWorkflows", ctx, ids)
	ret0, _ := ret[0].(map[int64]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleasedWorkflows indicates an expected call of GetReleasedWorkflows.
func (mr *MockServiceMockRecorder) GetReleasedWorkflows(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleasedWorkflows", reflect.TypeOf((*MockService)(nil).GetReleasedWorkflows), ctx, ids)
}

// GetWorkflowDraft mocks base method.
func (m *MockService) GetWorkflowDraft(ctx context.Context, id int64) (*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowDraft", ctx, id)
	ret0, _ := ret[0].(*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowDraft indicates an expected call of GetWorkflowDraft.
func (mr *MockServiceMockRecorder) GetWorkflowDraft(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowDraft", reflect.TypeOf((*MockService)(nil).GetWorkflowDraft), ctx, id)
}

// GetWorkflowReference mocks base method.
func (m *MockService) GetWorkflowReference(ctx context.Context, id int64) (map[int64]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowReference", ctx, id)
	ret0, _ := ret[0].(map[int64]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowReference indicates an expected call of GetWorkflowReference.
func (mr *MockServiceMockRecorder) GetWorkflowReference(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowReference", reflect.TypeOf((*MockService)(nil).GetWorkflowReference), ctx, id)
}

// GetWorkflowVersion mocks base method.
func (m *MockService) GetWorkflowVersion(ctx context.Context, wfe *entity.WorkflowIdentity) (*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowVersion", ctx, wfe)
	ret0, _ := ret[0].(*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowVersion indicates an expected call of GetWorkflowVersion.
func (mr *MockServiceMockRecorder) GetWorkflowVersion(ctx, wfe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowVersion", reflect.TypeOf((*MockService)(nil).GetWorkflowVersion), ctx, wfe)
}

// ListNodeMeta mocks base method.
func (m *MockService) ListNodeMeta(ctx context.Context, nodeTypes map[entity.NodeType]bool) (map[string][]*entity.NodeTypeMeta, map[string][]*entity.PluginNodeMeta, map[string][]*entity.PluginCategoryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodeMeta", ctx, nodeTypes)
	ret0, _ := ret[0].(map[string][]*entity.NodeTypeMeta)
	ret1, _ := ret[1].(map[string][]*entity.PluginNodeMeta)
	ret2, _ := ret[2].(map[string][]*entity.PluginCategoryMeta)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListNodeMeta indicates an expected call of ListNodeMeta.
func (mr *MockServiceMockRecorder) ListNodeMeta(ctx, nodeTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeMeta", reflect.TypeOf((*MockService)(nil).ListNodeMeta), ctx, nodeTypes)
}

// ListWorkflow mocks base method.
func (m *MockService) ListWorkflow(ctx context.Context, spaceID int64, page *vo.Page, queryOption *vo.QueryOption) ([]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflow", ctx, spaceID, page, queryOption)
	ret0, _ := ret[0].([]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflow indicates an expected call of ListWorkflow.
func (mr *MockServiceMockRecorder) ListWorkflow(ctx, spaceID, page, queryOption any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflow", reflect.TypeOf((*MockService)(nil).ListWorkflow), ctx, spaceID, page, queryOption)
}

// ListWorkflowAsToolData mocks base method.
func (m *MockService) ListWorkflowAsToolData(ctx context.Context, spaceID int64, queryInfo *vo.QueryToolInfoOption) ([]*vo.WorkFlowAsToolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowAsToolData", ctx, spaceID, queryInfo)
	ret0, _ := ret[0].([]*vo.WorkFlowAsToolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowAsToolData indicates an expected call of ListWorkflowAsToolData.
func (mr *MockServiceMockRecorder) ListWorkflowAsToolData(ctx, spaceID, queryInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowAsToolData", reflect.TypeOf((*MockService)(nil).ListWorkflowAsToolData), ctx, spaceID, queryInfo)
}

// MGetWorkflowDetailInfo mocks base method.
func (m *MockService) MGetWorkflowDetailInfo(ctx context.Context, ids []*entity.WorkflowIdentity) ([]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWorkflowDetailInfo", ctx, ids)
	ret0, _ := ret[0].([]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflowDetailInfo indicates an expected call of MGetWorkflowDetailInfo.
func (mr *MockServiceMockRecorder) MGetWorkflowDetailInfo(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflowDetailInfo", reflect.TypeOf((*MockService)(nil).MGetWorkflowDetailInfo), ctx, ids)
}

// MGetWorkflows mocks base method.
func (m *MockService) MGetWorkflows(ctx context.Context, ids []*entity.WorkflowIdentity) ([]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWorkflows", ctx, ids)
	ret0, _ := ret[0].([]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflows indicates an expected call of MGetWorkflows.
func (mr *MockServiceMockRecorder) MGetWorkflows(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflows", reflect.TypeOf((*MockService)(nil).MGetWorkflows), ctx, ids)
}

// PublishWorkflow mocks base method.
func (m *MockService) PublishWorkflow(ctx context.Context, wfID int64, version, desc string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWorkflow", ctx, wfID, version, desc, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWorkflow indicates an expected call of PublishWorkflow.
func (mr *MockServiceMockRecorder) PublishWorkflow(ctx, wfID, version, desc, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWorkflow", reflect.TypeOf((*MockService)(nil).PublishWorkflow), ctx, wfID, version, desc, force)
}

// QueryWorkflowNodeTypes mocks base method.
func (m *MockService) QueryWorkflowNodeTypes(ctx context.Context, wfID int64) (map[string]*vo.NodeProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWorkflowNodeTypes", ctx, wfID)
	ret0, _ := ret[0].(map[string]*vo.NodeProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWorkflowNodeTypes indicates an expected call of QueryWorkflowNodeTypes.
func (mr *MockServiceMockRecorder) QueryWorkflowNodeTypes(ctx, wfID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWorkflowNodeTypes", reflect.TypeOf((*MockService)(nil).QueryWorkflowNodeTypes), ctx, wfID)
}

// SaveWorkflow mocks base method.
func (m *MockService) SaveWorkflow(ctx context.Context, draft *entity.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWorkflow", ctx, draft)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWorkflow indicates an expected call of SaveWorkflow.
func (mr *MockServiceMockRecorder) SaveWorkflow(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWorkflow", reflect.TypeOf((*MockService)(nil).SaveWorkflow), ctx, draft)
}

// StreamExecuteWorkflow mocks base method.
func (m *MockService) StreamExecuteWorkflow(ctx context.Context, id *entity.WorkflowIdentity, input map[string]any, config vo.ExecuteConfig) (*schema.StreamReader[*entity.Message], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamExecuteWorkflow", ctx, id, input, config)
	ret0, _ := ret[0].(*schema.StreamReader[*entity.Message])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamExecuteWorkflow indicates an expected call of StreamExecuteWorkflow.
func (mr *MockServiceMockRecorder) StreamExecuteWorkflow(ctx, id, input, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecuteWorkflow", reflect.TypeOf((*MockService)(nil).StreamExecuteWorkflow), ctx, id, input, config)
}

// StreamResumeWorkflow mocks base method.
func (m *MockService) StreamResumeWorkflow(ctx context.Context, req *entity.ResumeRequest, config vo.ExecuteConfig) (*schema.StreamReader[*entity.Message], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamResumeWorkflow", ctx, req, config)
	ret0, _ := ret[0].(*schema.StreamReader[*entity.Message])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamResumeWorkflow indicates an expected call of StreamResumeWorkflow.
func (mr *MockServiceMockRecorder) StreamResumeWorkflow(ctx, req, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamResumeWorkflow", reflect.TypeOf((*MockService)(nil).StreamResumeWorkflow), ctx, req, config)
}

// UpdateWorkflowMeta mocks base method.
func (m *MockService) UpdateWorkflowMeta(ctx context.Context, wf *entity.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowMeta", ctx, wf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowMeta indicates an expected call of UpdateWorkflowMeta.
func (mr *MockServiceMockRecorder) UpdateWorkflowMeta(ctx, wf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowMeta", reflect.TypeOf((*MockService)(nil).UpdateWorkflowMeta), ctx, wf)
}

// ValidateTree mocks base method.
func (m *MockService) ValidateTree(ctx context.Context, id int64, validateConfig vo.ValidateTreeConfig) ([]*workflow.ValidateTreeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTree", ctx, id, validateConfig)
	ret0, _ := ret[0].([]*workflow.ValidateTreeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTree indicates an expected call of ValidateTree.
func (mr *MockServiceMockRecorder) ValidateTree(ctx, id, validateConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTree", reflect.TypeOf((*MockService)(nil).ValidateTree), ctx, id, validateConfig)
}

// WithExecuteConfig mocks base method.
func (m *MockService) WithExecuteConfig(cfg vo.ExecuteConfig) compose.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithExecuteConfig", cfg)
	ret0, _ := ret[0].(compose.Option)
	return ret0
}

// WithExecuteConfig indicates an expected call of WithExecuteConfig.
func (mr *MockServiceMockRecorder) WithExecuteConfig(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithExecuteConfig", reflect.TypeOf((*MockService)(nil).WithExecuteConfig), cfg)
}

// WithMessagePipe mocks base method.
func (m *MockService) WithMessagePipe() (compose.Option, *schema.StreamReader[*entity.Message]) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMessagePipe")
	ret0, _ := ret[0].(compose.Option)
	ret1, _ := ret[1].(*schema.StreamReader[*entity.Message])
	return ret0, ret1
}

// WithMessagePipe indicates an expected call of WithMessagePipe.
func (mr *MockServiceMockRecorder) WithMessagePipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMessagePipe", reflect.TypeOf((*MockService)(nil).WithMessagePipe))
}

// WorkflowAsModelTool mocks base method.
func (m *MockService) WorkflowAsModelTool(ctx context.Context, ids []*entity.WorkflowIdentity) ([]tool.BaseTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsModelTool", ctx, ids)
	ret0, _ := ret[0].([]tool.BaseTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsModelTool indicates an expected call of WorkflowAsModelTool.
func (mr *MockServiceMockRecorder) WorkflowAsModelTool(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsModelTool", reflect.TypeOf((*MockService)(nil).WorkflowAsModelTool), ctx, ids)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CopyWorkflow mocks base method.
func (m *MockRepository) CopyWorkflow(ctx context.Context, spaceID, workflowID int64) (*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyWorkflow", ctx, spaceID, workflowID)
	ret0, _ := ret[0].(*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyWorkflow indicates an expected call of CopyWorkflow.
func (mr *MockRepositoryMockRecorder) CopyWorkflow(ctx, spaceID, workflowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWorkflow", reflect.TypeOf((*MockRepository)(nil).CopyWorkflow), ctx, spaceID, workflowID)
}

// CreateNodeExecution mocks base method.
func (m *MockRepository) CreateNodeExecution(ctx context.Context, execution *entity.NodeExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNodeExecution indicates an expected call of CreateNodeExecution.
func (mr *MockRepositoryMockRecorder) CreateNodeExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeExecution", reflect.TypeOf((*MockRepository)(nil).CreateNodeExecution), ctx, execution)
}

// CreateOrUpdateDraft mocks base method.
func (m *MockRepository) CreateOrUpdateDraft(ctx context.Context, id int64, canvas, inputParams, outputParams string, resetTestRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDraft", ctx, id, canvas, inputParams, outputParams, resetTestRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateDraft indicates an expected call of CreateOrUpdateDraft.
func (mr *MockRepositoryMockRecorder) CreateOrUpdateDraft(ctx, id, canvas, inputParams, outputParams, resetTestRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDraft", reflect.TypeOf((*MockRepository)(nil).CreateOrUpdateDraft), ctx, id, canvas, inputParams, outputParams, resetTestRun)
}

// CreateWorkflowExecution mocks base method.
func (m *MockRepository) CreateWorkflowExecution(ctx context.Context, execution *entity.WorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflowExecution indicates an expected call of CreateWorkflowExecution.
func (mr *MockRepositoryMockRecorder) CreateWorkflowExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).CreateWorkflowExecution), ctx, execution)
}

// CreateWorkflowMeta mocks base method.
func (m *MockRepository) CreateWorkflowMeta(ctx context.Context, wf *entity.Workflow, ref *entity.WorkflowReference) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowMeta", ctx, wf, ref)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowMeta indicates an expected call of CreateWorkflowMeta.
func (mr *MockRepositoryMockRecorder) CreateWorkflowMeta(ctx, wf, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).CreateWorkflowMeta), ctx, wf, ref)
}

// CreateWorkflowVersion mocks base method.
func (m *MockRepository) CreateWorkflowVersion(ctx context.Context, wid int64, v *vo.VersionInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowVersion", ctx, wid, v)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowVersion indicates an expected call of CreateWorkflowVersion.
func (mr *MockRepositoryMockRecorder) CreateWorkflowVersion(ctx, wid, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowVersion", reflect.TypeOf((*MockRepository)(nil).CreateWorkflowVersion), ctx, wid, v)
}

// DeleteWorkflow mocks base method.
func (m *MockRepository) DeleteWorkflow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockRepositoryMockRecorder) DeleteWorkflow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockRepository)(nil).DeleteWorkflow), ctx, id)
}

// EmitWorkflowCancelSignal mocks base method.
func (m *MockRepository) EmitWorkflowCancelSignal(ctx context.Context, wfExeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmitWorkflowCancelSignal", ctx, wfExeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmitWorkflowCancelSignal indicates an expected call of EmitWorkflowCancelSignal.
func (mr *MockRepositoryMockRecorder) EmitWorkflowCancelSignal(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitWorkflowCancelSignal", reflect.TypeOf((*MockRepository)(nil).EmitWorkflowCancelSignal), ctx, wfExeID)
}

// GenID mocks base method.
func (m *MockRepository) GenID(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenID", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenID indicates an expected call of GenID.
func (mr *MockRepositoryMockRecorder) GenID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenID", reflect.TypeOf((*MockRepository)(nil).GenID), ctx)
}

// GetFirstInterruptEvent mocks base method.
func (m *MockRepository) GetFirstInterruptEvent(ctx context.Context, wfExeID int64) (*entity.InterruptEvent, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstInterruptEvent", ctx, wfExeID)
	ret0, _ := ret[0].(*entity.InterruptEvent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFirstInterruptEvent indicates an expected call of GetFirstInterruptEvent.
func (mr *MockRepositoryMockRecorder) GetFirstInterruptEvent(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstInterruptEvent", reflect.TypeOf((*MockRepository)(nil).GetFirstInterruptEvent), ctx, wfExeID)
}

// GetLatestWorkflowVersion mocks base method.
func (m *MockRepository) GetLatestWorkflowVersion(ctx context.Context, id int64) (*vo.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestWorkflowVersion", ctx, id)
	ret0, _ := ret[0].(*vo.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestWorkflowVersion indicates an expected call of GetLatestWorkflowVersion.
func (mr *MockRepositoryMockRecorder) GetLatestWorkflowVersion(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestWorkflowVersion", reflect.TypeOf((*MockRepository)(nil).GetLatestWorkflowVersion), ctx, id)
}

// GetNodeDebugLatestExeID mocks base method.
func (m *MockRepository) GetNodeDebugLatestExeID(ctx context.Context, wfID int64, nodeID string, uID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeDebugLatestExeID", ctx, wfID, nodeID, uID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeDebugLatestExeID indicates an expected call of GetNodeDebugLatestExeID.
func (mr *MockRepositoryMockRecorder) GetNodeDebugLatestExeID(ctx, wfID, nodeID, uID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeDebugLatestExeID", reflect.TypeOf((*MockRepository)(nil).GetNodeDebugLatestExeID), ctx, wfID, nodeID, uID)
}

// GetNodeExecution mocks base method.
func (m *MockRepository) GetNodeExecution(ctx context.Context, wfExeID int64, nodeID string) (*entity.NodeExecution, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeExecution", ctx, wfExeID, nodeID)
	ret0, _ := ret[0].(*entity.NodeExecution)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodeExecution indicates an expected call of GetNodeExecution.
func (mr *MockRepositoryMockRecorder) GetNodeExecution(ctx, wfExeID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExecution", reflect.TypeOf((*MockRepository)(nil).GetNodeExecution), ctx, wfExeID, nodeID)
}

// GetNodeExecutionByParent mocks base method.
func (m *MockRepository) GetNodeExecutionByParent(ctx context.Context, wfExeID int64, parentNodeID string) ([]*entity.NodeExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeExecutionByParent", ctx, wfExeID, parentNodeID)
	ret0, _ := ret[0].([]*entity.NodeExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeExecutionByParent indicates an expected call of GetNodeExecutionByParent.
func (mr *MockRepositoryMockRecorder) GetNodeExecutionByParent(ctx, wfExeID, parentNodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExecutionByParent", reflect.TypeOf((*MockRepository)(nil).GetNodeExecutionByParent), ctx, wfExeID, parentNodeID)
}

// GetNodeExecutionsByWfExeID mocks base method.
func (m *MockRepository) GetNodeExecutionsByWfExeID(ctx context.Context, wfExeID int64) ([]*entity.NodeExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeExecutionsByWfExeID", ctx, wfExeID)
	ret0, _ := ret[0].([]*entity.NodeExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeExecutionsByWfExeID indicates an expected call of GetNodeExecutionsByWfExeID.
func (mr *MockRepositoryMockRecorder) GetNodeExecutionsByWfExeID(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExecutionsByWfExeID", reflect.TypeOf((*MockRepository)(nil).GetNodeExecutionsByWfExeID), ctx, wfExeID)
}

// GetParentWorkflowsBySubWorkflowID mocks base method.
func (m *MockRepository) GetParentWorkflowsBySubWorkflowID(ctx context.Context, id int64) ([]*entity.WorkflowReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentWorkflowsBySubWorkflowID", ctx, id)
	ret0, _ := ret[0].([]*entity.WorkflowReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentWorkflowsBySubWorkflowID indicates an expected call of GetParentWorkflowsBySubWorkflowID.
func (mr *MockRepositoryMockRecorder) GetParentWorkflowsBySubWorkflowID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentWorkflowsBySubWorkflowID", reflect.TypeOf((*MockRepository)(nil).GetParentWorkflowsBySubWorkflowID), ctx, id)
}

// GetSubWorkflowCanvas mocks base method.
func (m *MockRepository) GetSubWorkflowCanvas(ctx context.Context, parent *vo.Node) (*vo.Canvas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubWorkflowCanvas", ctx, parent)
	ret0, _ := ret[0].(*vo.Canvas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubWorkflowCanvas indicates an expected call of GetSubWorkflowCanvas.
func (mr *MockRepositoryMockRecorder) GetSubWorkflowCanvas(ctx, parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubWorkflowCanvas", reflect.TypeOf((*MockRepository)(nil).GetSubWorkflowCanvas), ctx, parent)
}

// GetTestRunLatestExeID mocks base method.
func (m *MockRepository) GetTestRunLatestExeID(ctx context.Context, wfID, uID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestRunLatestExeID", ctx, wfID, uID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestRunLatestExeID indicates an expected call of GetTestRunLatestExeID.
func (mr *MockRepositoryMockRecorder) GetTestRunLatestExeID(ctx, wfID, uID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestRunLatestExeID", reflect.TypeOf((*MockRepository)(nil).GetTestRunLatestExeID), ctx, wfID, uID)
}

// GetWorkflowCancelFlag mocks base method.
func (m *MockRepository) GetWorkflowCancelFlag(ctx context.Context, wfExeID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowCancelFlag", ctx, wfExeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowCancelFlag indicates an expected call of GetWorkflowCancelFlag.
func (mr *MockRepositoryMockRecorder) GetWorkflowCancelFlag(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowCancelFlag", reflect.TypeOf((*MockRepository)(nil).GetWorkflowCancelFlag), ctx, wfExeID)
}

// GetWorkflowDraft mocks base method.
func (m *MockRepository) GetWorkflowDraft(ctx context.Context, id int64) (*vo.DraftInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowDraft", ctx, id)
	ret0, _ := ret[0].(*vo.DraftInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowDraft indicates an expected call of GetWorkflowDraft.
func (mr *MockRepositoryMockRecorder) GetWorkflowDraft(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowDraft", reflect.TypeOf((*MockRepository)(nil).GetWorkflowDraft), ctx, id)
}

// GetWorkflowExecution mocks base method.
func (m *MockRepository) GetWorkflowExecution(ctx context.Context, id int64) (*entity.WorkflowExecution, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowExecution", ctx, id)
	ret0, _ := ret[0].(*entity.WorkflowExecution)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWorkflowExecution indicates an expected call of GetWorkflowExecution.
func (mr *MockRepositoryMockRecorder) GetWorkflowExecution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).GetWorkflowExecution), ctx, id)
}

// GetWorkflowMeta mocks base method.
func (m *MockRepository) GetWorkflowMeta(ctx context.Context, id int64) (*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowMeta", ctx, id)
	ret0, _ := ret[0].(*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowMeta indicates an expected call of GetWorkflowMeta.
func (mr *MockRepositoryMockRecorder) GetWorkflowMeta(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).GetWorkflowMeta), ctx, id)
}

// GetWorkflowReference mocks base method.
func (m *MockRepository) GetWorkflowReference(ctx context.Context, id int64) ([]*entity.WorkflowReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowReference", ctx, id)
	ret0, _ := ret[0].([]*entity.WorkflowReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowReference indicates an expected call of GetWorkflowReference.
func (mr *MockRepositoryMockRecorder) GetWorkflowReference(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowReference", reflect.TypeOf((*MockRepository)(nil).GetWorkflowReference), ctx, id)
}

// GetWorkflowVersion mocks base method.
func (m *MockRepository) GetWorkflowVersion(ctx context.Context, id int64, version string) (*vo.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowVersion", ctx, id, version)
	ret0, _ := ret[0].(*vo.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowVersion indicates an expected call of GetWorkflowVersion.
func (mr *MockRepositoryMockRecorder) GetWorkflowVersion(ctx, id, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowVersion", reflect.TypeOf((*MockRepository)(nil).GetWorkflowVersion), ctx, id, version)
}

// ListInterruptEvents mocks base method.
func (m *MockRepository) ListInterruptEvents(ctx context.Context, wfExeID int64) ([]*entity.InterruptEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInterruptEvents", ctx, wfExeID)
	ret0, _ := ret[0].([]*entity.InterruptEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInterruptEvents indicates an expected call of ListInterruptEvents.
func (mr *MockRepositoryMockRecorder) ListInterruptEvents(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInterruptEvents", reflect.TypeOf((*MockRepository)(nil).ListInterruptEvents), ctx, wfExeID)
}

// ListWorkflowMeta mocks base method.
func (m *MockRepository) ListWorkflowMeta(ctx context.Context, spaceID int64, page *vo.Page, queryOption *vo.QueryOption) ([]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowMeta", ctx, spaceID, page, queryOption)
	ret0, _ := ret[0].([]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowMeta indicates an expected call of ListWorkflowMeta.
func (mr *MockRepositoryMockRecorder) ListWorkflowMeta(ctx, spaceID, page, queryOption any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).ListWorkflowMeta), ctx, spaceID, page, queryOption)
}

// MGetSubWorkflowReferences mocks base method.
func (m *MockRepository) MGetSubWorkflowReferences(ctx context.Context, id ...int64) (map[int64][]*entity.WorkflowReference, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetSubWorkflowReferences", varargs...)
	ret0, _ := ret[0].(map[int64][]*entity.WorkflowReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetSubWorkflowReferences indicates an expected call of MGetSubWorkflowReferences.
func (mr *MockRepositoryMockRecorder) MGetSubWorkflowReferences(ctx any, id ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetSubWorkflowReferences", reflect.TypeOf((*MockRepository)(nil).MGetSubWorkflowReferences), varargs...)
}

// MGetWorkflowCanvas mocks base method.
func (m *MockRepository) MGetWorkflowCanvas(ctx context.Context, entities []*entity.WorkflowIdentity) (map[int64]*vo.Canvas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWorkflowCanvas", ctx, entities)
	ret0, _ := ret[0].(map[int64]*vo.Canvas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflowCanvas indicates an expected call of MGetWorkflowCanvas.
func (mr *MockRepositoryMockRecorder) MGetWorkflowCanvas(ctx, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflowCanvas", reflect.TypeOf((*MockRepository)(nil).MGetWorkflowCanvas), ctx, entities)
}

// MGetWorkflowDraft mocks base method.
func (m *MockRepository) MGetWorkflowDraft(ctx context.Context, ids []int64) (map[int64]*vo.DraftInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWorkflowDraft", ctx, ids)
	ret0, _ := ret[0].(map[int64]*vo.DraftInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflowDraft indicates an expected call of MGetWorkflowDraft.
func (mr *MockRepositoryMockRecorder) MGetWorkflowDraft(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflowDraft", reflect.TypeOf((*MockRepository)(nil).MGetWorkflowDraft), ctx, ids)
}

// MGetWorkflowMeta mocks base method.
func (m *MockRepository) MGetWorkflowMeta(ctx context.Context, ids ...int64) (map[int64]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetWorkflowMeta", varargs...)
	ret0, _ := ret[0].(map[int64]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflowMeta indicates an expected call of MGetWorkflowMeta.
func (mr *MockRepositoryMockRecorder) MGetWorkflowMeta(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).MGetWorkflowMeta), varargs...)
}

// PopFirstInterruptEvent mocks base method.
func (m *MockRepository) PopFirstInterruptEvent(ctx context.Context, wfExeID int64) (*entity.InterruptEvent, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopFirstInterruptEvent", ctx, wfExeID)
	ret0, _ := ret[0].(*entity.InterruptEvent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PopFirstInterruptEvent indicates an expected call of PopFirstInterruptEvent.
func (mr *MockRepositoryMockRecorder) PopFirstInterruptEvent(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopFirstInterruptEvent", reflect.TypeOf((*MockRepository)(nil).PopFirstInterruptEvent), ctx, wfExeID)
}

// SaveInterruptEvents mocks base method.
func (m *MockRepository) SaveInterruptEvents(ctx context.Context, wfExeID int64, events []*entity.InterruptEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInterruptEvents", ctx, wfExeID, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInterruptEvents indicates an expected call of SaveInterruptEvents.
func (mr *MockRepositoryMockRecorder) SaveInterruptEvents(ctx, wfExeID, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInterruptEvents", reflect.TypeOf((*MockRepository)(nil).SaveInterruptEvents), ctx, wfExeID, events)
}

// SetNodeDebugLatestExeID mocks base method.
func (m *MockRepository) SetNodeDebugLatestExeID(ctx context.Context, wfID int64, nodeID string, uID, exeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeDebugLatestExeID", ctx, wfID, nodeID, uID, exeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeDebugLatestExeID indicates an expected call of SetNodeDebugLatestExeID.
func (mr *MockRepositoryMockRecorder) SetNodeDebugLatestExeID(ctx, wfID, nodeID, uID, exeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeDebugLatestExeID", reflect.TypeOf((*MockRepository)(nil).SetNodeDebugLatestExeID), ctx, wfID, nodeID, uID, exeID)
}

// SetTestRunLatestExeID mocks base method.
func (m *MockRepository) SetTestRunLatestExeID(ctx context.Context, wfID, uID, exeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTestRunLatestExeID", ctx, wfID, uID, exeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTestRunLatestExeID indicates an expected call of SetTestRunLatestExeID.
func (mr *MockRepositoryMockRecorder) SetTestRunLatestExeID(ctx, wfID, uID, exeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTestRunLatestExeID", reflect.TypeOf((*MockRepository)(nil).SetTestRunLatestExeID), ctx, wfID, uID, exeID)
}

// SubscribeWorkflowCancelSignal mocks base method.
func (m *MockRepository) SubscribeWorkflowCancelSignal(ctx context.Context, wfExeID int64) (<-chan *redis.Message, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeWorkflowCancelSignal", ctx, wfExeID)
	ret0, _ := ret[0].(<-chan *redis.Message)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeWorkflowCancelSignal indicates an expected call of SubscribeWorkflowCancelSignal.
func (mr *MockRepositoryMockRecorder) SubscribeWorkflowCancelSignal(ctx, wfExeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWorkflowCancelSignal", reflect.TypeOf((*MockRepository)(nil).SubscribeWorkflowCancelSignal), ctx, wfExeID)
}

// TryLockWorkflowExecution mocks base method.
func (m *MockRepository) TryLockWorkflowExecution(ctx context.Context, wfExeID, resumingEventID int64) (bool, entity.WorkflowExecuteStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLockWorkflowExecution", ctx, wfExeID, resumingEventID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(entity.WorkflowExecuteStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TryLockWorkflowExecution indicates an expected call of TryLockWorkflowExecution.
func (mr *MockRepositoryMockRecorder) TryLockWorkflowExecution(ctx, wfExeID, resumingEventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLockWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).TryLockWorkflowExecution), ctx, wfExeID, resumingEventID)
}

// UpdateNodeExecution mocks base method.
func (m *MockRepository) UpdateNodeExecution(ctx context.Context, execution *entity.NodeExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodeExecution indicates an expected call of UpdateNodeExecution.
func (mr *MockRepositoryMockRecorder) UpdateNodeExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeExecution", reflect.TypeOf((*MockRepository)(nil).UpdateNodeExecution), ctx, execution)
}

// UpdateWorkflowDraftTestRunSuccess mocks base method.
func (m *MockRepository) UpdateWorkflowDraftTestRunSuccess(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowDraftTestRunSuccess", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowDraftTestRunSuccess indicates an expected call of UpdateWorkflowDraftTestRunSuccess.
func (mr *MockRepositoryMockRecorder) UpdateWorkflowDraftTestRunSuccess(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowDraftTestRunSuccess", reflect.TypeOf((*MockRepository)(nil).UpdateWorkflowDraftTestRunSuccess), ctx, id)
}

// UpdateWorkflowExecution mocks base method.
func (m *MockRepository) UpdateWorkflowExecution(ctx context.Context, execution *entity.WorkflowExecution, allowedStatus []entity.WorkflowExecuteStatus) (int64, entity.WorkflowExecuteStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowExecution", ctx, execution, allowedStatus)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(entity.WorkflowExecuteStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateWorkflowExecution indicates an expected call of UpdateWorkflowExecution.
func (mr *MockRepositoryMockRecorder) UpdateWorkflowExecution(ctx, execution, allowedStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowExecution", reflect.TypeOf((*MockRepository)(nil).UpdateWorkflowExecution), ctx, execution, allowedStatus)
}

// UpdateWorkflowMeta mocks base method.
func (m *MockRepository) UpdateWorkflowMeta(ctx context.Context, wf *entity.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowMeta", ctx, wf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowMeta indicates an expected call of UpdateWorkflowMeta.
func (mr *MockRepositoryMockRecorder) UpdateWorkflowMeta(ctx, wf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowMeta", reflect.TypeOf((*MockRepository)(nil).UpdateWorkflowMeta), ctx, wf)
}

// WorkflowAsTool mocks base method.
func (m *MockRepository) WorkflowAsTool(ctx context.Context, wfID entity.WorkflowIdentity, wfToolConfig vo.WorkflowToolConfig) (workflow0.ToolFromWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsTool", ctx, wfID, wfToolConfig)
	ret0, _ := ret[0].(workflow0.ToolFromWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsTool indicates an expected call of WorkflowAsTool.
func (mr *MockRepositoryMockRecorder) WorkflowAsTool(ctx, wfID, wfToolConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsTool", reflect.TypeOf((*MockRepository)(nil).WorkflowAsTool), ctx, wfID, wfToolConfig)
}

// MockToolFromWorkflow is a mock of ToolFromWorkflow interface.
type MockToolFromWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockToolFromWorkflowMockRecorder
	isgomock struct{}
}

// MockToolFromWorkflowMockRecorder is the mock recorder for MockToolFromWorkflow.
type MockToolFromWorkflowMockRecorder struct {
	mock *MockToolFromWorkflow
}

// NewMockToolFromWorkflow creates a new mock instance.
func NewMockToolFromWorkflow(ctrl *gomock.Controller) *MockToolFromWorkflow {
	mock := &MockToolFromWorkflow{ctrl: ctrl}
	mock.recorder = &MockToolFromWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolFromWorkflow) EXPECT() *MockToolFromWorkflowMockRecorder {
	return m.recorder
}

// GetWorkflow mocks base method.
func (m *MockToolFromWorkflow) GetWorkflow() *entity.Workflow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow")
	ret0, _ := ret[0].(*entity.Workflow)
	return ret0
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockToolFromWorkflowMockRecorder) GetWorkflow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockToolFromWorkflow)(nil).GetWorkflow))
}

// Info mocks base method.
func (m *MockToolFromWorkflow) Info(ctx context.Context) (*schema.ToolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(*schema.ToolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockToolFromWorkflowMockRecorder) Info(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockToolFromWorkflow)(nil).Info), ctx)
}

// TerminatePlan mocks base method.
func (m *MockToolFromWorkflow) TerminatePlan() vo.TerminatePlan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminatePlan")
	ret0, _ := ret[0].(vo.TerminatePlan)
	return ret0
}

// TerminatePlan indicates an expected call of TerminatePlan.
func (mr *MockToolFromWorkflowMockRecorder) TerminatePlan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminatePlan", reflect.TypeOf((*MockToolFromWorkflow)(nil).TerminatePlan))
}
