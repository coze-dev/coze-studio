// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination ../../../internal/mock/domain/plugin/interface.go --package mockPlugin -source service.go
//

// Package mockPlugin is a generated GoMock package.
package mockPlugin

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "code.byted.org/flow/opencoze/backend/domain/plugin/entity"
	service "code.byted.org/flow/opencoze/backend/domain/plugin/service"
)

// MockPluginService is a mock of PluginService interface.
type MockPluginService struct {
	ctrl     *gomock.Controller
	recorder *MockPluginServiceMockRecorder
}

// MockPluginServiceMockRecorder is the mock recorder for MockPluginService.
type MockPluginServiceMockRecorder struct {
	mock *MockPluginService
}

// NewMockPluginService creates a new mock instance.
func NewMockPluginService(ctrl *gomock.Controller) *MockPluginService {
	mock := &MockPluginService{ctrl: ctrl}
	mock.recorder = &MockPluginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginService) EXPECT() *MockPluginServiceMockRecorder {
	return m.recorder
}

// BindAgentTools mocks base method.
func (m *MockPluginService) BindAgentTools(ctx context.Context, req *service.BindAgentToolsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindAgentTools", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindAgentTools indicates an expected call of BindAgentTools.
func (mr *MockPluginServiceMockRecorder) BindAgentTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindAgentTools", reflect.TypeOf((*MockPluginService)(nil).BindAgentTools), ctx, req)
}

// CreateDraftPlugin mocks base method.
func (m *MockPluginService) CreateDraftPlugin(ctx context.Context, req *service.CreateDraftPluginRequest) (*service.CreateDraftPluginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraftPlugin", ctx, req)
	ret0, _ := ret[0].(*service.CreateDraftPluginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraftPlugin indicates an expected call of CreateDraftPlugin.
func (mr *MockPluginServiceMockRecorder) CreateDraftPlugin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraftPlugin", reflect.TypeOf((*MockPluginService)(nil).CreateDraftPlugin), ctx, req)
}

// CreateDraftPluginWithCode mocks base method.
func (m *MockPluginService) CreateDraftPluginWithCode(ctx context.Context, req *service.CreateDraftPluginWithCodeRequest) (*service.CreateDraftPluginWithCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraftPluginWithCode", ctx, req)
	ret0, _ := ret[0].(*service.CreateDraftPluginWithCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraftPluginWithCode indicates an expected call of CreateDraftPluginWithCode.
func (mr *MockPluginServiceMockRecorder) CreateDraftPluginWithCode(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraftPluginWithCode", reflect.TypeOf((*MockPluginService)(nil).CreateDraftPluginWithCode), ctx, req)
}

// DeleteDraftPlugin mocks base method.
func (m *MockPluginService) DeleteDraftPlugin(ctx context.Context, req *service.DeleteDraftPluginRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDraftPlugin", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDraftPlugin indicates an expected call of DeleteDraftPlugin.
func (mr *MockPluginServiceMockRecorder) DeleteDraftPlugin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDraftPlugin", reflect.TypeOf((*MockPluginService)(nil).DeleteDraftPlugin), ctx, req)
}

// ExecuteTool mocks base method.
func (m *MockPluginService) ExecuteTool(ctx context.Context, req *service.ExecuteToolRequest, opts ...entity.ExecuteToolOpts) (*service.ExecuteToolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteTool", varargs...)
	ret0, _ := ret[0].(*service.ExecuteToolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTool indicates an expected call of ExecuteTool.
func (mr *MockPluginServiceMockRecorder) ExecuteTool(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTool", reflect.TypeOf((*MockPluginService)(nil).ExecuteTool), varargs...)
}

// GetDraftAgentTool mocks base method.
func (m *MockPluginService) GetDraftAgentTool(ctx context.Context, req *service.GetDraftAgentToolRequest) (*service.GetAgentToolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraftAgentTool", ctx, req)
	ret0, _ := ret[0].(*service.GetAgentToolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraftAgentTool indicates an expected call of GetDraftAgentTool.
func (mr *MockPluginServiceMockRecorder) GetDraftAgentTool(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraftAgentTool", reflect.TypeOf((*MockPluginService)(nil).GetDraftAgentTool), ctx, req)
}

// GetDraftPlugin mocks base method.
func (m *MockPluginService) GetDraftPlugin(ctx context.Context, req *service.GetDraftPluginRequest) (*service.GetDraftPluginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraftPlugin", ctx, req)
	ret0, _ := ret[0].(*service.GetDraftPluginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraftPlugin indicates an expected call of GetDraftPlugin.
func (mr *MockPluginServiceMockRecorder) GetDraftPlugin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraftPlugin", reflect.TypeOf((*MockPluginService)(nil).GetDraftPlugin), ctx, req)
}

// GetOnlinePlugin mocks base method.
func (m *MockPluginService) GetOnlinePlugin(ctx context.Context, req *service.GetOnlinePluginRequest) (*service.GetOnlinePluginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlinePlugin", ctx, req)
	ret0, _ := ret[0].(*service.GetOnlinePluginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlinePlugin indicates an expected call of GetOnlinePlugin.
func (mr *MockPluginServiceMockRecorder) GetOnlinePlugin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlinePlugin", reflect.TypeOf((*MockPluginService)(nil).GetOnlinePlugin), ctx, req)
}

// GetOnlineTool mocks base method.
func (m *MockPluginService) GetOnlineTool(ctx context.Context, req *service.GetOnlineToolsRequest) (*service.GetOnlineToolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineTool", ctx, req)
	ret0, _ := ret[0].(*service.GetOnlineToolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineTool indicates an expected call of GetOnlineTool.
func (mr *MockPluginServiceMockRecorder) GetOnlineTool(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineTool", reflect.TypeOf((*MockPluginService)(nil).GetOnlineTool), ctx, req)
}

// GetPluginNextVersion mocks base method.
func (m *MockPluginService) GetPluginNextVersion(ctx context.Context, pluginID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginNextVersion", ctx, pluginID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginNextVersion indicates an expected call of GetPluginNextVersion.
func (mr *MockPluginServiceMockRecorder) GetPluginNextVersion(ctx, pluginID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginNextVersion", reflect.TypeOf((*MockPluginService)(nil).GetPluginNextVersion), ctx, pluginID)
}

// GetPluginProductAllTools mocks base method.
func (m *MockPluginService) GetPluginProductAllTools(ctx context.Context, pluginID int64) ([]*entity.ToolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginProductAllTools", ctx, pluginID)
	ret0, _ := ret[0].([]*entity.ToolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginProductAllTools indicates an expected call of GetPluginProductAllTools.
func (mr *MockPluginServiceMockRecorder) GetPluginProductAllTools(ctx, pluginID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginProductAllTools", reflect.TypeOf((*MockPluginService)(nil).GetPluginProductAllTools), ctx, pluginID)
}

// ListDraftPlugins mocks base method.
func (m *MockPluginService) ListDraftPlugins(ctx context.Context, req *service.ListDraftPluginsRequest) (*service.ListDraftPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDraftPlugins", ctx, req)
	ret0, _ := ret[0].(*service.ListDraftPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDraftPlugins indicates an expected call of ListDraftPlugins.
func (mr *MockPluginServiceMockRecorder) ListDraftPlugins(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDraftPlugins", reflect.TypeOf((*MockPluginService)(nil).ListDraftPlugins), ctx, req)
}

// ListPluginProducts mocks base method.
func (m *MockPluginService) ListPluginProducts(ctx context.Context, req *service.ListPluginProductsRequest) (*service.ListPluginProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPluginProducts", ctx, req)
	ret0, _ := ret[0].(*service.ListPluginProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPluginProducts indicates an expected call of ListPluginProducts.
func (mr *MockPluginServiceMockRecorder) ListPluginProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPluginProducts", reflect.TypeOf((*MockPluginService)(nil).ListPluginProducts), ctx, req)
}

// MGetAgentTools mocks base method.
func (m *MockPluginService) MGetAgentTools(ctx context.Context, req *service.MGetAgentToolsRequest) (*service.MGetAgentToolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetAgentTools", ctx, req)
	ret0, _ := ret[0].(*service.MGetAgentToolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetAgentTools indicates an expected call of MGetAgentTools.
func (mr *MockPluginServiceMockRecorder) MGetAgentTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetAgentTools", reflect.TypeOf((*MockPluginService)(nil).MGetAgentTools), ctx, req)
}

// MGetDraftPlugins mocks base method.
func (m *MockPluginService) MGetDraftPlugins(ctx context.Context, req *service.MGetDraftPluginsRequest) (*service.MGetDraftPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetDraftPlugins", ctx, req)
	ret0, _ := ret[0].(*service.MGetDraftPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetDraftPlugins indicates an expected call of MGetDraftPlugins.
func (mr *MockPluginServiceMockRecorder) MGetDraftPlugins(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetDraftPlugins", reflect.TypeOf((*MockPluginService)(nil).MGetDraftPlugins), ctx, req)
}

// MGetDraftTools mocks base method.
func (m *MockPluginService) MGetDraftTools(ctx context.Context, req *service.MGetDraftToolsRequest) (*service.MGetDraftToolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetDraftTools", ctx, req)
	ret0, _ := ret[0].(*service.MGetDraftToolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetDraftTools indicates an expected call of MGetDraftTools.
func (mr *MockPluginServiceMockRecorder) MGetDraftTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetDraftTools", reflect.TypeOf((*MockPluginService)(nil).MGetDraftTools), ctx, req)
}

// MGetOnlinePlugins mocks base method.
func (m *MockPluginService) MGetOnlinePlugins(ctx context.Context, req *service.MGetOnlinePluginsRequest) (*service.MGetOnlinePluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetOnlinePlugins", ctx, req)
	ret0, _ := ret[0].(*service.MGetOnlinePluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetOnlinePlugins indicates an expected call of MGetOnlinePlugins.
func (mr *MockPluginServiceMockRecorder) MGetOnlinePlugins(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetOnlinePlugins", reflect.TypeOf((*MockPluginService)(nil).MGetOnlinePlugins), ctx, req)
}

// MGetOnlineTools mocks base method.
func (m *MockPluginService) MGetOnlineTools(ctx context.Context, req *service.MGetOnlineToolsRequest) (*service.MGetOnlineToolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetOnlineTools", ctx, req)
	ret0, _ := ret[0].(*service.MGetOnlineToolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetOnlineTools indicates an expected call of MGetOnlineTools.
func (mr *MockPluginServiceMockRecorder) MGetOnlineTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetOnlineTools", reflect.TypeOf((*MockPluginService)(nil).MGetOnlineTools), ctx, req)
}

// MGetPluginLatestVersion mocks base method.
func (m *MockPluginService) MGetPluginLatestVersion(ctx context.Context, pluginIDs []int64) (*service.MGetPluginLatestVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetPluginLatestVersion", ctx, pluginIDs)
	ret0, _ := ret[0].(*service.MGetPluginLatestVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetPluginLatestVersion indicates an expected call of MGetPluginLatestVersion.
func (mr *MockPluginServiceMockRecorder) MGetPluginLatestVersion(ctx, pluginIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetPluginLatestVersion", reflect.TypeOf((*MockPluginService)(nil).MGetPluginLatestVersion), ctx, pluginIDs)
}

// MGetVersionPlugins mocks base method.
func (m *MockPluginService) MGetVersionPlugins(ctx context.Context, req *service.MGetVersionPluginsRequest) (*service.MGetVersionPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetVersionPlugins", ctx, req)
	ret0, _ := ret[0].(*service.MGetVersionPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetVersionPlugins indicates an expected call of MGetVersionPlugins.
func (mr *MockPluginServiceMockRecorder) MGetVersionPlugins(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetVersionPlugins", reflect.TypeOf((*MockPluginService)(nil).MGetVersionPlugins), ctx, req)
}

// PublishAPPPlugins mocks base method.
func (m *MockPluginService) PublishAPPPlugins(ctx context.Context, req *service.PublishAPPPluginsRequest) (*service.PublishAPPPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAPPPlugins", ctx, req)
	ret0, _ := ret[0].(*service.PublishAPPPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAPPPlugins indicates an expected call of PublishAPPPlugins.
func (mr *MockPluginServiceMockRecorder) PublishAPPPlugins(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAPPPlugins", reflect.TypeOf((*MockPluginService)(nil).PublishAPPPlugins), ctx, req)
}

// PublishAgentTools mocks base method.
func (m *MockPluginService) PublishAgentTools(ctx context.Context, req *service.PublishAgentToolsRequest) (*service.PublishAgentToolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAgentTools", ctx, req)
	ret0, _ := ret[0].(*service.PublishAgentToolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAgentTools indicates an expected call of PublishAgentTools.
func (mr *MockPluginServiceMockRecorder) PublishAgentTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAgentTools", reflect.TypeOf((*MockPluginService)(nil).PublishAgentTools), ctx, req)
}

// PublishPlugin mocks base method.
func (m *MockPluginService) PublishPlugin(ctx context.Context, req *service.PublishPluginRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPlugin", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPlugin indicates an expected call of PublishPlugin.
func (mr *MockPluginServiceMockRecorder) PublishPlugin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPlugin", reflect.TypeOf((*MockPluginService)(nil).PublishPlugin), ctx, req)
}

// UpdateBotDefaultParams mocks base method.
func (m *MockPluginService) UpdateBotDefaultParams(ctx context.Context, req *service.UpdateBotDefaultParamsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotDefaultParams", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBotDefaultParams indicates an expected call of UpdateBotDefaultParams.
func (mr *MockPluginServiceMockRecorder) UpdateBotDefaultParams(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotDefaultParams", reflect.TypeOf((*MockPluginService)(nil).UpdateBotDefaultParams), ctx, req)
}

// UpdateDraftPlugin mocks base method.
func (m *MockPluginService) UpdateDraftPlugin(ctx context.Context, plugin *service.UpdateDraftPluginRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraftPlugin", ctx, plugin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDraftPlugin indicates an expected call of UpdateDraftPlugin.
func (mr *MockPluginServiceMockRecorder) UpdateDraftPlugin(ctx, plugin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraftPlugin", reflect.TypeOf((*MockPluginService)(nil).UpdateDraftPlugin), ctx, plugin)
}

// UpdateDraftPluginWithCode mocks base method.
func (m *MockPluginService) UpdateDraftPluginWithCode(ctx context.Context, req *service.UpdateDraftPluginWithCodeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraftPluginWithCode", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDraftPluginWithCode indicates an expected call of UpdateDraftPluginWithCode.
func (mr *MockPluginServiceMockRecorder) UpdateDraftPluginWithCode(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraftPluginWithCode", reflect.TypeOf((*MockPluginService)(nil).UpdateDraftPluginWithCode), ctx, req)
}

// UpdateDraftTool mocks base method.
func (m *MockPluginService) UpdateDraftTool(ctx context.Context, req *service.UpdateToolDraftRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraftTool", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDraftTool indicates an expected call of UpdateDraftTool.
func (mr *MockPluginServiceMockRecorder) UpdateDraftTool(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraftTool", reflect.TypeOf((*MockPluginService)(nil).UpdateDraftTool), ctx, req)
}
