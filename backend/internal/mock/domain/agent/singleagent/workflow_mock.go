// Code generated by MockGen. DO NOT EDIT.
// Source: workflow.go
//
// Generated by this command:
//
//	mockgen -destination ../../../../internal/mock/domain/agent/singleagent/workflow_mock.go --package mock -source workflow.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "code.byted.org/flow/opencoze/backend/domain/workflow/entity"
	tool "github.com/cloudwego/eino/components/tool"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkflow is a mock of Workflow interface.
type MockWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowMockRecorder
	isgomock struct{}
}

// MockWorkflowMockRecorder is the mock recorder for MockWorkflow.
type MockWorkflowMockRecorder struct {
	mock *MockWorkflow
}

// NewMockWorkflow creates a new mock instance.
func NewMockWorkflow(ctrl *gomock.Controller) *MockWorkflow {
	mock := &MockWorkflow{ctrl: ctrl}
	mock.recorder = &MockWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflow) EXPECT() *MockWorkflowMockRecorder {
	return m.recorder
}

// MGetWorkflows mocks base method.
func (m *MockWorkflow) MGetWorkflows(ctx context.Context, ids []*entity.WorkflowIdentity) ([]*entity.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetWorkflows", ctx, ids)
	ret0, _ := ret[0].([]*entity.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetWorkflows indicates an expected call of MGetWorkflows.
func (mr *MockWorkflowMockRecorder) MGetWorkflows(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetWorkflows", reflect.TypeOf((*MockWorkflow)(nil).MGetWorkflows), ctx, ids)
}

// WorkflowAsModelTool mocks base method.
func (m *MockWorkflow) WorkflowAsModelTool(ctx context.Context, ids []*entity.WorkflowIdentity) ([]tool.BaseTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowAsModelTool", ctx, ids)
	ret0, _ := ret[0].([]tool.BaseTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowAsModelTool indicates an expected call of WorkflowAsModelTool.
func (mr *MockWorkflowMockRecorder) WorkflowAsModelTool(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowAsModelTool", reflect.TypeOf((*MockWorkflow)(nil).WorkflowAsModelTool), ctx, ids)
}
