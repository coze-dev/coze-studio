// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go
//
// Generated by this command:
//
//	mockgen -destination ../../../../internal/mock/domain/agent/singleagent/tool_service_mock.go --package mock -source plugin.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	plugin "code.byted.org/flow/opencoze/backend/domain/plugin"
	entity "code.byted.org/flow/opencoze/backend/domain/plugin/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockToolService is a mock of ToolService interface.
type MockToolService struct {
	ctrl     *gomock.Controller
	recorder *MockToolServiceMockRecorder
	isgomock struct{}
}

// MockToolServiceMockRecorder is the mock recorder for MockToolService.
type MockToolServiceMockRecorder struct {
	mock *MockToolService
}

// NewMockToolService creates a new mock instance.
func NewMockToolService(ctrl *gomock.Controller) *MockToolService {
	mock := &MockToolService{ctrl: ctrl}
	mock.recorder = &MockToolServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolService) EXPECT() *MockToolServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockToolService) Execute(ctx context.Context, req *plugin.ExecuteRequest, opts ...entity.ExecuteOpts) (*plugin.ExecuteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(*plugin.ExecuteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockToolServiceMockRecorder) Execute(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockToolService)(nil).Execute), varargs...)
}

// MGetAgentTools mocks base method.
func (m *MockToolService) MGetAgentTools(ctx context.Context, req *plugin.MGetAgentToolsRequest) (*plugin.MGetAgentToolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetAgentTools", ctx, req)
	ret0, _ := ret[0].(*plugin.MGetAgentToolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetAgentTools indicates an expected call of MGetAgentTools.
func (mr *MockToolServiceMockRecorder) MGetAgentTools(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetAgentTools", reflect.TypeOf((*MockToolService)(nil).MGetAgentTools), ctx, req)
}
