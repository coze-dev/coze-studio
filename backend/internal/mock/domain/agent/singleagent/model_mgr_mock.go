// Code generated by MockGen. DO NOT EDIT.
// Source: model_manager.go
//
// Generated by this command:
//
//	mockgen -destination ../../../../internal/mock/domain/agent/singleagent/model_mgr_mock.go --package mock -source model_manager.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	modelmgr "code.byted.org/flow/opencoze/backend/domain/modelmgr"
	entity "code.byted.org/flow/opencoze/backend/domain/modelmgr/entity"
)

// MockModelMgr is a mock of ModelMgr interface.
type MockModelMgr struct {
	ctrl     *gomock.Controller
	recorder *MockModelMgrMockRecorder
	isgomock struct{}
}

// MockModelMgrMockRecorder is the mock recorder for MockModelMgr.
type MockModelMgrMockRecorder struct {
	mock *MockModelMgr
}

// NewMockModelMgr creates a new mock instance.
func NewMockModelMgr(ctrl *gomock.Controller) *MockModelMgr {
	mock := &MockModelMgr{ctrl: ctrl}
	mock.recorder = &MockModelMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMgr) EXPECT() *MockModelMgrMockRecorder {
	return m.recorder
}

// MGetModelByID mocks base method.
func (m *MockModelMgr) MGetModelByID(ctx context.Context, req *modelmgr.MGetModelRequest) ([]*entity.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetModelByID", ctx, req)
	ret0, _ := ret[0].([]*entity.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetModelByID indicates an expected call of MGetModelByID.
func (mr *MockModelMgrMockRecorder) MGetModelByID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetModelByID", reflect.TypeOf((*MockModelMgr)(nil).MGetModelByID), ctx, req)
}
