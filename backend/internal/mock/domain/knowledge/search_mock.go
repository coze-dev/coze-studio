// Code generated by MockGen. DO NOT EDIT.
// Source: search.go
//
// Generated by this command:
//
//	mockgen -destination ../../../internal/mock/domain/knowledge/search_mock.go --package mock -source search.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "code.byted.org/flow/opencoze/backend/domain/search/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainNotifier is a mock of DomainNotifier interface.
type MockDomainNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockDomainNotifierMockRecorder
	isgomock struct{}
}

// MockDomainNotifierMockRecorder is the mock recorder for MockDomainNotifier.
type MockDomainNotifierMockRecorder struct {
	mock *MockDomainNotifier
}

// NewMockDomainNotifier creates a new mock instance.
func NewMockDomainNotifier(ctrl *gomock.Controller) *MockDomainNotifier {
	mock := &MockDomainNotifier{ctrl: ctrl}
	mock.recorder = &MockDomainNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainNotifier) EXPECT() *MockDomainNotifierMockRecorder {
	return m.recorder
}

// PublishResources mocks base method.
func (m *MockDomainNotifier) PublishResources(ctx context.Context, event *entity.ResourceDomainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishResources", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishResources indicates an expected call of PublishResources.
func (mr *MockDomainNotifierMockRecorder) PublishResources(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishResources", reflect.TypeOf((*MockDomainNotifier)(nil).PublishResources), ctx, event)
}
