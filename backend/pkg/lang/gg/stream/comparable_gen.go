// code generated by go run gen.go; DO NOT EDIT.

package stream

import (
	"context"

	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter"
)

// Comparable is a comparable variant of Stream.
type Comparable[T comparable] struct {
	Stream[T]
}

// FromIter wraps an [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Iter] to [Stream].
func FromComparableIter[T comparable](i iter.Iter[T]) Comparable[T] {
	return Comparable[T]{FromIter(i)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromSlice].
func FromComparableSlice[T comparable](s []T) Comparable[T] {
	return Comparable[T]{FromSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.StealSlice].
func StealComparableSlice[T comparable](s []T) Comparable[T] {
	return Comparable[T]{StealSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromMapValues].
func FromComparableMapValues[I comparable, T comparable](m map[I]T) Comparable[T] {
	return Comparable[T]{FromMapValues(m)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromChan].
func FromComparableChan[T comparable](ctx context.Context, ch <-chan T) Comparable[T] {
	return Comparable[T]{FromChan(ctx, ch)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Repeat].
func RepeatComparable[T comparable](v T) Comparable[T] {
	return Comparable[T]{Repeat(v)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.MapInplace].
func (s Comparable[T]) Map(f func(T) T) Comparable[T] {
	return Comparable[T]{s.Stream.Map(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FlatMap].
func (s Comparable[T]) FlatMap(f func(T) []T) Comparable[T] {
	return Comparable[T]{s.Stream.FlatMap(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Filter].
func (s Comparable[T]) Filter(f func(T) bool) Comparable[T] {
	return Comparable[T]{s.Stream.Filter(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Reverse].
func (s Comparable[T]) Reverse() Comparable[T] {
	return Comparable[T]{s.Stream.Reverse()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Take].
func (s Comparable[T]) Take(n int) Comparable[T] {
	return Comparable[T]{s.Stream.Take(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Drop].
func (s Comparable[T]) Drop(n int) Comparable[T] {
	return Comparable[T]{s.Stream.Drop(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Concat].
//
// BUG: This function is marked as "//go:noinline" bacause a community bug is
// triggered in [Tango Beast Mode], see https://code.byted.org/lang/go/issues/255
//
// [Tango Beast Mode]: https://bytedance.feishu.cn/wiki/wikcnoMjJbw3D9bV8aU8sDsJBNc
//
//go:noinline
func (s Comparable[T]) Concat(ss ...Comparable[T]) Comparable[T] {
	conv := func(c Comparable[T]) Stream[T] {
		return c.Stream
	}
	tmp := iter.ToSlice(iter.Map(conv, iter.FromSlice(ss)))
	return Comparable[T]{s.Stream.Concat(tmp...)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Zip].
func (s Comparable[T]) Zip(f func(T, T) T, another Comparable[T]) Comparable[T] {
	return Comparable[T]{s.Stream.Zip(f, another.Stream)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Intersperse].
func (s Comparable[T]) Intersperse(sep T) Comparable[T] {
	return Comparable[T]{s.Stream.Intersperse(sep)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Append].
func (s Comparable[T]) Append(tail T) Comparable[T] {
	return Comparable[T]{s.Stream.Append(tail)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Prepend].
func (s Comparable[T]) Prepend(head T) Comparable[T] {
	return Comparable[T]{s.Stream.Prepend(head)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.TakeWhile].
func (s Comparable[T]) TakeWhile(f func(T) bool) Comparable[T] {
	return Comparable[T]{s.Stream.TakeWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.DropWhile].
func (s Comparable[T]) DropWhile(f func(T) bool) Comparable[T] {
	return Comparable[T]{s.Stream.DropWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.SortBy].
func (s Comparable[T]) SortBy(less func(T, T) bool) Comparable[T] {
	return Comparable[T]{s.Stream.SortBy(less)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.UniqBy].
func (s Comparable[T]) UniqBy(f func(T) any) Comparable[T] {
	return Comparable[T]{s.Stream.UniqBy(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Shuffle].
func (s Comparable[T]) Shuffle() Comparable[T] {
	return Comparable[T]{s.Stream.Shuffle()}
}
