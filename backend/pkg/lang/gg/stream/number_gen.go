// code generated by go run gen.go; DO NOT EDIT.

package stream

import (
	"context"

	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/internal/constraints"
	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter"
)

// Number is a constraints.Number variant of Orderable.
type Number[T constraints.Number] struct {
	Orderable[T]
}

// FromIter wraps an [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Iter] to [Stream].
func FromNumberIter[T constraints.Number](i iter.Iter[T]) Number[T] {
	return Number[T]{FromOrderableIter(i)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromSlice].
func FromNumberSlice[T constraints.Number](s []T) Number[T] {
	return Number[T]{FromOrderableSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.StealSlice].
func StealNumberSlice[T constraints.Number](s []T) Number[T] {
	return Number[T]{StealOrderableSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromMapValues].
func FromNumberMapValues[I comparable, T constraints.Number](m map[I]T) Number[T] {
	return Number[T]{FromOrderableMapValues(m)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromChan].
func FromNumberChan[T constraints.Number](ctx context.Context, ch <-chan T) Number[T] {
	return Number[T]{FromOrderableChan(ctx, ch)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Repeat].
func RepeatNumber[T constraints.Number](v T) Number[T] {
	return Number[T]{RepeatOrderable(v)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.MapInplace].
func (s Number[T]) Map(f func(T) T) Number[T] {
	return Number[T]{s.Orderable.Map(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FlatMap].
func (s Number[T]) FlatMap(f func(T) []T) Number[T] {
	return Number[T]{s.Orderable.FlatMap(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Filter].
func (s Number[T]) Filter(f func(T) bool) Number[T] {
	return Number[T]{s.Orderable.Filter(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Reverse].
func (s Number[T]) Reverse() Number[T] {
	return Number[T]{s.Orderable.Reverse()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Take].
func (s Number[T]) Take(n int) Number[T] {
	return Number[T]{s.Orderable.Take(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Drop].
func (s Number[T]) Drop(n int) Number[T] {
	return Number[T]{s.Orderable.Drop(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Concat].
//
// BUG: This function is marked as "//go:noinline" bacause a community bug is
// triggered in [Tango Beast Mode], see https://code.byted.org/lang/go/issues/255
//
// [Tango Beast Mode]: https://bytedance.feishu.cn/wiki/wikcnoMjJbw3D9bV8aU8sDsJBNc
//
//go:noinline
func (s Number[T]) Concat(ss ...Number[T]) Number[T] {
	conv := func(c Number[T]) Orderable[T] {
		return c.Orderable
	}
	tmp := iter.ToSlice(iter.Map(conv, iter.FromSlice(ss)))
	return Number[T]{s.Orderable.Concat(tmp...)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Zip].
func (s Number[T]) Zip(f func(T, T) T, another Number[T]) Number[T] {
	return Number[T]{s.Orderable.Zip(f, another.Orderable)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Intersperse].
func (s Number[T]) Intersperse(sep T) Number[T] {
	return Number[T]{s.Orderable.Intersperse(sep)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Append].
func (s Number[T]) Append(tail T) Number[T] {
	return Number[T]{s.Orderable.Append(tail)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Prepend].
func (s Number[T]) Prepend(head T) Number[T] {
	return Number[T]{s.Orderable.Prepend(head)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.TakeWhile].
func (s Number[T]) TakeWhile(f func(T) bool) Number[T] {
	return Number[T]{s.Orderable.TakeWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.DropWhile].
func (s Number[T]) DropWhile(f func(T) bool) Number[T] {
	return Number[T]{s.Orderable.DropWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.SortBy].
func (s Number[T]) SortBy(less func(T, T) bool) Number[T] {
	return Number[T]{s.Orderable.SortBy(less)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.UniqBy].
func (s Number[T]) UniqBy(f func(T) any) Number[T] {
	return Number[T]{s.Orderable.UniqBy(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Shuffle].
func (s Number[T]) Shuffle() Number[T] {
	return Number[T]{s.Orderable.Shuffle()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromMapKeys].
func FromNumberMapKeys[T constraints.Number, I any](m map[T]I) Number[T] {
	return Number[T]{FromOrderableMapKeys(m)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Uniq].
func (s Number[T]) Uniq() Number[T] {
	return Number[T]{s.Orderable.Uniq()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Remove].
func (s Number[T]) Remove(v T) Number[T] {
	return Number[T]{s.Orderable.Remove(v)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.RemoveN].
func (s Number[T]) RemoveN(v T, n int) Number[T] {
	return Number[T]{s.Orderable.RemoveN(v, n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Sort].
func (s Number[T]) Sort() Number[T] {
	return Number[T]{s.Orderable.Sort()}
}
