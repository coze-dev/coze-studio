// code generated by go run gen.go; DO NOT EDIT.

package stream

import (
	"context"

	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter"
)

// Bool is a ~bool variant of Comparable.
type Bool[T ~bool] struct {
	Comparable[T]
}

// FromIter wraps an [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Iter] to [Stream].
func FromBoolIter[T ~bool](i iter.Iter[T]) Bool[T] {
	return Bool[T]{FromComparableIter(i)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromSlice].
func FromBoolSlice[T ~bool](s []T) Bool[T] {
	return Bool[T]{FromComparableSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.StealSlice].
func StealBoolSlice[T ~bool](s []T) Bool[T] {
	return Bool[T]{StealComparableSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromMapValues].
func FromBoolMapValues[I comparable, T ~bool](m map[I]T) Bool[T] {
	return Bool[T]{FromComparableMapValues(m)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromChan].
func FromBoolChan[T ~bool](ctx context.Context, ch <-chan T) Bool[T] {
	return Bool[T]{FromComparableChan(ctx, ch)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Repeat].
func RepeatBool[T ~bool](v T) Bool[T] {
	return Bool[T]{RepeatComparable(v)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.MapInplace].
func (s Bool[T]) Map(f func(T) T) Bool[T] {
	return Bool[T]{s.Comparable.Map(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FlatMap].
func (s Bool[T]) FlatMap(f func(T) []T) Bool[T] {
	return Bool[T]{s.Comparable.FlatMap(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Filter].
func (s Bool[T]) Filter(f func(T) bool) Bool[T] {
	return Bool[T]{s.Comparable.Filter(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Reverse].
func (s Bool[T]) Reverse() Bool[T] {
	return Bool[T]{s.Comparable.Reverse()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Take].
func (s Bool[T]) Take(n int) Bool[T] {
	return Bool[T]{s.Comparable.Take(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Drop].
func (s Bool[T]) Drop(n int) Bool[T] {
	return Bool[T]{s.Comparable.Drop(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Concat].
//
// BUG: This function is marked as "//go:noinline" bacause a community bug is
// triggered in [Tango Beast Mode], see https://code.byted.org/lang/go/issues/255
//
// [Tango Beast Mode]: https://bytedance.feishu.cn/wiki/wikcnoMjJbw3D9bV8aU8sDsJBNc
//
//go:noinline
func (s Bool[T]) Concat(ss ...Bool[T]) Bool[T] {
	conv := func(c Bool[T]) Comparable[T] {
		return c.Comparable
	}
	tmp := iter.ToSlice(iter.Map(conv, iter.FromSlice(ss)))
	return Bool[T]{s.Comparable.Concat(tmp...)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Zip].
func (s Bool[T]) Zip(f func(T, T) T, another Bool[T]) Bool[T] {
	return Bool[T]{s.Comparable.Zip(f, another.Comparable)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Intersperse].
func (s Bool[T]) Intersperse(sep T) Bool[T] {
	return Bool[T]{s.Comparable.Intersperse(sep)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Append].
func (s Bool[T]) Append(tail T) Bool[T] {
	return Bool[T]{s.Comparable.Append(tail)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Prepend].
func (s Bool[T]) Prepend(head T) Bool[T] {
	return Bool[T]{s.Comparable.Prepend(head)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.TakeWhile].
func (s Bool[T]) TakeWhile(f func(T) bool) Bool[T] {
	return Bool[T]{s.Comparable.TakeWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.DropWhile].
func (s Bool[T]) DropWhile(f func(T) bool) Bool[T] {
	return Bool[T]{s.Comparable.DropWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.SortBy].
func (s Bool[T]) SortBy(less func(T, T) bool) Bool[T] {
	return Bool[T]{s.Comparable.SortBy(less)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Shuffle].
func (s Bool[T]) Shuffle() Bool[T] {
	return Bool[T]{s.Comparable.Shuffle()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromMapKeys].
func FromBoolMapKeys[T ~bool, I any](m map[T]I) Bool[T] {
	return Bool[T]{FromMapKeys(m)}
}
