// code generated by go run gen.go; DO NOT EDIT.

package stream

import (
	"context"

	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/collection/tuple"
	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter"
)

// KV is a tuple.T2[K, V] variant of Stream.
type KV[K comparable, V any] struct {
	Stream[tuple.T2[K, V]]
}

// FromIter wraps an [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Iter] to [Stream].
func FromKVIter[K comparable, V any](i iter.Iter[tuple.T2[K, V]]) KV[K, V] {
	return KV[K, V]{FromIter(i)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromSlice].
func FromKVSlice[K comparable, V any](s []tuple.T2[K, V]) KV[K, V] {
	return KV[K, V]{FromSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.StealSlice].
func StealKVSlice[K comparable, V any](s []tuple.T2[K, V]) KV[K, V] {
	return KV[K, V]{StealSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromChan].
func FromKVChan[K comparable, V any](ctx context.Context, ch <-chan tuple.T2[K, V]) KV[K, V] {
	return KV[K, V]{FromChan(ctx, ch)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FlatMap].
func (s KV[K, V]) FlatMap(f func(tuple.T2[K, V]) []tuple.T2[K, V]) KV[K, V] {
	return KV[K, V]{s.Stream.FlatMap(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Reverse].
func (s KV[K, V]) Reverse() KV[K, V] {
	return KV[K, V]{s.Stream.Reverse()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Take].
func (s KV[K, V]) Take(n int) KV[K, V] {
	return KV[K, V]{s.Stream.Take(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Drop].
func (s KV[K, V]) Drop(n int) KV[K, V] {
	return KV[K, V]{s.Stream.Drop(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Concat].
//
// BUG: This function is marked as "//go:noinline" bacause a community bug is
// triggered in [Tango Beast Mode], see https://code.byted.org/lang/go/issues/255
//
// [Tango Beast Mode]: https://bytedance.feishu.cn/wiki/wikcnoMjJbw3D9bV8aU8sDsJBNc
//
//go:noinline
func (s KV[K, V]) Concat(ss ...KV[K, V]) KV[K, V] {
	conv := func(c KV[K, V]) Stream[tuple.T2[K, V]] {
		return c.Stream
	}
	tmp := iter.ToSlice(iter.Map(conv, iter.FromSlice(ss)))
	return KV[K, V]{s.Stream.Concat(tmp...)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Shuffle].
func (s KV[K, V]) Shuffle() KV[K, V] {
	return KV[K, V]{s.Stream.Shuffle()}
}
