// code generated by go run gen.go; DO NOT EDIT.

package stream

import (
	"context"

	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/collection/tuple"
	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/internal/constraints"
	"code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter"
)

// OrderableKV is a tuple.T2[K, V] variant of KV.
type OrderableKV[K constraints.Ordered, V any] struct {
	KV[K, V]
}

// FromIter wraps an [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Iter] to [Stream].
func FromOrderableKVIter[K constraints.Ordered, V any](i iter.Iter[tuple.T2[K, V]]) OrderableKV[K, V] {
	return OrderableKV[K, V]{FromKVIter(i)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromSlice].
func FromOrderableKVSlice[K constraints.Ordered, V any](s []tuple.T2[K, V]) OrderableKV[K, V] {
	return OrderableKV[K, V]{FromKVSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.StealSlice].
func StealOrderableKVSlice[K constraints.Ordered, V any](s []tuple.T2[K, V]) OrderableKV[K, V] {
	return OrderableKV[K, V]{StealKVSlice(s)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FromChan].
func FromOrderableKVChan[K constraints.Ordered, V any](ctx context.Context, ch <-chan tuple.T2[K, V]) OrderableKV[K, V] {
	return OrderableKV[K, V]{FromKVChan(ctx, ch)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.FlatMap].
func (s OrderableKV[K, V]) FlatMap(f func(tuple.T2[K, V]) []tuple.T2[K, V]) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.FlatMap(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Reverse].
func (s OrderableKV[K, V]) Reverse() OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Reverse()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Take].
func (s OrderableKV[K, V]) Take(n int) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Take(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Drop].
func (s OrderableKV[K, V]) Drop(n int) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Drop(n)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Concat].
//
// BUG: This function is marked as "//go:noinline" bacause a community bug is
// triggered in [Tango Beast Mode], see https://code.byted.org/lang/go/issues/255
//
// [Tango Beast Mode]: https://bytedance.feishu.cn/wiki/wikcnoMjJbw3D9bV8aU8sDsJBNc
//
//go:noinline
func (s OrderableKV[K, V]) Concat(ss ...OrderableKV[K, V]) OrderableKV[K, V] {
	conv := func(c OrderableKV[K, V]) KV[K, V] {
		return c.KV
	}
	tmp := iter.ToSlice(iter.Map(conv, iter.FromSlice(ss)))
	return OrderableKV[K, V]{s.KV.Concat(tmp...)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Shuffle].
func (s OrderableKV[K, V]) Shuffle() OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Shuffle()}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Repeat].
func RepeatOrderableKV[K constraints.Ordered, V any](k K, v V) OrderableKV[K, V] {
	return OrderableKV[K, V]{RepeatKV(k, v)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.MapInplace].
func (s OrderableKV[K, V]) Map(f func(k K, v V) (K, V)) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Map(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Filter].
func (s OrderableKV[K, V]) Filter(f func(K, V) bool) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Filter(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Zip].
func (s OrderableKV[K, V]) Zip(f func(K, V, K, V) (K, V), another OrderableKV[K, V]) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Zip(f, another.KV)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Intersperse].
func (s OrderableKV[K, V]) Intersperse(sepK K, sepV V) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Intersperse(sepK, sepV)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Append].
func (s OrderableKV[K, V]) Append(tailK K, tailV V) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Append(tailK, tailV)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.Prepend].
func (s OrderableKV[K, V]) Prepend(tailK K, tailV V) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.Prepend(tailK, tailV)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.TakeWhile].
func (s OrderableKV[K, V]) TakeWhile(f func(K, V) bool) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.TakeWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.DropWhile].
func (s OrderableKV[K, V]) DropWhile(f func(K, V) bool) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.DropWhile(f)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.SortBy].
func (s OrderableKV[K, V]) SortBy(less func(K, V, K, V) bool) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.SortBy(less)}
}

// See function [pkg/code.byted.org/flow/opencoze/backend/pkg/lang/gg/iter.UniqBy].
func (s OrderableKV[K, V]) UniqBy(f func(K, V) any) OrderableKV[K, V] {
	return OrderableKV[K, V]{s.KV.UniqBy(f)}
}
