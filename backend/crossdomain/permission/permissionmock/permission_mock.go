// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -destination permissionmock/permission_mock.go --package permissionmock -source contract.go
//

// Package permissionmock is a generated GoMock package.
package permissionmock

import (
	context "context"
	reflect "reflect"

	model "github.com/coze-dev/coze-studio/backend/crossdomain/permission/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPermission is a mock of Permission interface.
type MockPermission struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionMockRecorder
	isgomock struct{}
}

// MockPermissionMockRecorder is the mock recorder for MockPermission.
type MockPermissionMockRecorder struct {
	mock *MockPermission
}

// NewMockPermission creates a new mock instance.
func NewMockPermission(ctrl *gomock.Controller) *MockPermission {
	mock := &MockPermission{ctrl: ctrl}
	mock.recorder = &MockPermissionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermission) EXPECT() *MockPermissionMockRecorder {
	return m.recorder
}

// CheckAuthz mocks base method.
func (m *MockPermission) CheckAuthz(ctx context.Context, req *model.CheckAuthzData) (*model.CheckAuthzResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthz", ctx, req)
	ret0, _ := ret[0].(*model.CheckAuthzResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthz indicates an expected call of CheckAuthz.
func (mr *MockPermissionMockRecorder) CheckAuthz(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthz", reflect.TypeOf((*MockPermission)(nil).CheckAuthz), ctx, req)
}
