// Code generated by hertz generator. DO NOT EDIT.

package router

import (
	"context"
	"os"
	"path"
	"strings"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"

	coze "code.byted.org/flow/opencoze/backend/api/router/coze"
	"code.byted.org/flow/opencoze/backend/pkg/logs"
)

// GeneratedRegister registers routers generated by IDL.
func GeneratedRegister(r *server.Hertz) {
	// INSERT_POINT: DO NOT DELETE THIS LINE!
	coze.Register(r)
	staticFileRegister(r)


	// TODO: remove me later
	// 不需要的接口，但是阻塞了测试，开源场景后续要下掉。

	// TODO This interface needs to be implemented on the workflow side in the later stage
	r.POST("/api/devops/debugger/v1/coze/testcase/casedata/mget", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(200, map[string]interface{}{
			"code":      0,
			"hasNext":   false,
			"msg":       "",
			"nextToken": "",
		})
	})
}


// staticFileRegister registers web page router.
func staticFileRegister(r *server.Hertz) {
	cwd, err := os.Getwd()
	if err != nil {
		logs.Warnf("[staticFileRegister] Failed to get current working directory: %v", err)
		cwd = os.Getenv("PWD")
	}

	staticFile := path.Join(cwd, "resources/static/index.html")

	r.Static("/static",path.Join(cwd,"/resources/static"))
	r.StaticFile("/favicon.png","./resources/static/favicon.png")
	r.StaticFile("/",staticFile)
	r.StaticFile("/sign",staticFile)

	type data struct {
		Code int32  `json:"code"`
		Msg  string `json:"msg"`
	}

	r.NoRoute(func(c context.Context, ctx *app.RequestContext) {
		path := string(ctx.GetRequest().URI().Path())
		if strings.HasPrefix(path, "/api/")||
		strings.HasPrefix(path, "/v1/")||
		strings.HasPrefix(path, "/v3/") { 
			ctx.JSON(404, data{
				Code: 404,
				Msg:  "not found",
			})
			return
		}

		// index page will show 404 error
		ctx.File(staticFile)
	})

}