// Code generated by hertz generator. DO NOT EDIT.

package router

import (
	"context"
	"github.com/bytedance/sonic"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"

	coze "code.byted.org/flow/opencoze/backend/api/router/coze"
)

// mock chat mode config for self-test, if publish should remove
var mockChatModelObject = `{
                "name": "豆包·1.5·Pro·32k",
                "model_type": 1, 
                "model_class": 2,
                "model_icon": "https://lf-coze-web-cdn.coze.cn/obj/coze-web-cn/MODEL_ICON/doubao_v2.png",
                "model_input_price": 0,
                "model_output_price": 0,
                "model_quota": {
                    "token_limit": 32768,
                    "token_resp": 4096,
                    "token_system": 0,
                    "token_user_in": 32768,
                    "token_tools_in": 0,
                    "token_tools_out": 0,
                    "token_data": 0,
                    "token_history": 0,
                    "token_cut_switch": false,
                    "price_in": 0,
                    "price_out": 0
                },
                "model_name": "ep-20250122125445-ck9wp",
                "model_class_name": "豆包系列模型",
                "is_offline": false,
                "model_params": [
                    {
                        "name": "temperature",
                        "label": "生成随机性",
                        "desc": "- **temperature**: 调高温度会使得模型的输出更多样性和创新性，反之，降低温度会使输出内容更加遵循指令要求但减少多样性。建议不要与“Top p”同时调整。",
                        "type": 1,
                        "min": "0",
                        "max": "1",
                        "precision": 1,
                        "default_val": {
                            "default_val": "1",
                            "creative": "1",
                            "balance": "0.8",
                            "precise": "0.3"
                        },
                        "options": [],
                        "param_class": {
                            "class_id": 1,
                            "label": "生成多样性"
                        }
                    },
                    {
                        "name": "max_tokens",
                        "label": "最大回复长度",
                        "desc": "控制模型输出的Tokens 长度上限。通常 100 Tokens 约等于 150 个中文汉字。",
                        "type": 2,
                        "min": "1",
                        "max": "12288",
                        "precision": 0,
                        "default_val": {
                            "default_val": "4096"
                        },
                        "options": [],
                        "param_class": {
                            "class_id": 2,
                            "label": "输入及输出设置"
                        }
                    }
                ],
                "model_desc": [
                    {
                        "group_name": "### 功能特点：",
                        "desc": [
                            "- 支持Function calling能力（提供更准确、稳定的工具调用能力）",
                            "- 输入的长度支持最长32768个Tokens（约49152个中文字符）",
                            "- 节点ID：ep-20250122125445-ck9wp"
                        ]
                    }
                ],
                "model_tag_list": [
                    {
                        "tag_name": "文本模型",
                        "tag_class": 1,
                        "tag_icon": "",
                        "tag_descriptions": ""
                    },
                    {
                        "tag_name": "旗舰",
                        "tag_class": 3,
                        "tag_icon": "",
                        "tag_descriptions": ""
                    }
                ],
                "is_up_required": false,
                "model_brief_desc": "Doubao-1.5-pro-32k，全新一代主力模型，性能全面升级，在知识、代码、推理、等方面表现卓越。支持32k上下文窗口，输出长度支持最大12k tokens。",
                "model_series": {
                    "series_name": "热门模型",
                    "icon_url": "https://lf-coze-web-cdn.coze.cn/obj/coze-web-cn/MODEL_ICON/doubao_v2.png",
                    "model_vendor": "扣子"
                },
                "model_status_details": {
                    "is_new_model": false,
                    "is_advanced_model": false,
                    "is_free_model": false,
                    "is_upcoming_deprecated": false,
                    "deprecated_date": "",
                    "replace_model_name": "",
                    "update_info": "",
                    "model_feature": 1
                },
                "model_ability": {
                    "function_call": true,
                    "image_understanding": false,
                    "video_understanding": false
                }
            }`

// GeneratedRegister registers routers generated by IDL.
func GeneratedRegister(r *server.Hertz) {
	//INSERT_POINT: DO NOT DELETE THIS LINE!
	coze.Register(r)
	type data struct {
		Code int32  `json:"code"`
		Msg  string `json:"msg"`
	}
	// TODO: remove me later
	// 不需要的接口，但是阻塞了测试，开源场景后续要下掉。
	r.POST("/api/playground_api/audit/bot_info", func(c context.Context, ctx *app.RequestContext) {
		ctx.String(200, `{"code":0,"data":{"check_not_pass":false,"not_pass_reason":[]},"msg":""}`)
		ctx.Response.Header.SetContentType("application/json")
	})

	r.POST("/api/playground_api/check/bot_info_check", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(200, data{Code: 0, Msg: "success"})
	})

	// TODO This interface needs to be implemented on the workflow side in the later stage
	r.POST("/api/devops/debugger/v1/coze/testcase/casedata/mget", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(200, map[string]interface{}{
			"code":      0,
			"hasNext":   false,
			"msg":       "",
			"nextToken": "",
		})
	})

	// r.POST("/api/playground/user/launch", func(c context.Context, ctx *app.RequestContext) {
	// 	ctx.JSON(200, data{Code: 0, Msg: "success"})
	// })

	r.POST("/api/bot/get_type_list", func(c context.Context, ctx *app.RequestContext) {
		modelObj := map[string]interface{}{}
		err := sonic.UnmarshalString(mockChatModelObject, &modelObj)
		if err != nil {
			ctx.JSON(500, map[string]interface{}{
				"code": -1,
				"msg":  err.Error(),
			})
			return
		}
		response := make(map[string]interface{})
		response["code"] = 0
		response["msg"] = "success"
		response["data"] = map[string]interface{}{"model_list": []interface{}{modelObj}}
		ctx.JSON(200, response)

	})

	// r.POST("/api/playground_api/report_user_behavior", func(c context.Context, ctx *app.RequestContext) {
	// 	ctx.JSON(200, data{Code: 0, Msg: "success"})
	// })
	r.POST("/api/playground_api/report_user_behavior", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(200, data{Code: 0, Msg: "success"})
	})
	// 	r.POST("/api/playground/user/launch", func(c context.Context, ctx *app.RequestContext) {
	// 		ctx.String(200, `{
	//     "code": 0,
	//     "msg": "",
	//     "data": {
	//         "config": {
	//             "frontier_app_key": "fb63e21f7c8f1622f27e95b6609fe1d8",
	//             "frontier_access_key": "f4ce4bb04988e3c296e0f463a1fa000d",
	//             "frontier_app_id": "510049",
	//             "frontier_product_id": "1289",
	//             "frontier_domain": "wss://frontier100-normal.zijieapi.com",
	//             "message_service_id": "33554636",
	//             "event_frontier": {
	//                 "product_id": "1289",
	//                 "app_id": "578287",
	//                 "access_key": "f4ce4bb04988e3c296e0f463a1fa000d",
	//                 "domain": "wss://frontier.coze.cn",
	//                 "message_service_id": "33554636",
	//                 "timeout_interval": 3000,
	//                 "max_retries": 10,
	//                 "ack_delay_threshold": 10000
	//             },
	//             "biz_config": "{\"bot_editor\":{\"heartbeat\":3000}}"
	//         },
	//         "type": 1
	//     }
	// }`)
	// 		ctx.Response.Header.SetContentType("application/json")
	// 	})
	// 	})

	// r.POST("/api/memory/connector_gray", func(c context.Context, ctx *app.RequestContext) {
	// 	ctx.String(200, `{"code":0,"connector_info_list":[109,1,103],"msg":""}`)
	// 	ctx.Response.Header.SetContentType("application/json")
	// })

	// r.POST("/api/task/bot_task_list", func(c context.Context, ctx *app.RequestContext) {
	// 	ctx.String(200, `{"code":0,"msg":"","bot_task_list":[]}`)
	// 	ctx.Response.Header.SetContentType("application/json")
	// })

	//r.POST("/api/bot/get_type_list", func(c context.Context, ctx *app.RequestContext) {
	//	ctx.String(200, get_type_list_resp)
	//	ctx.Response.Header.SetContentType("application/json")
	//})

}
