// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package intelligence

import (
	"context"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

type IntelligenceService interface {
	GetDraftIntelligenceList(ctx context.Context, req *GetDraftIntelligenceListRequest) (r *GetDraftIntelligenceListResponse, err error)

	GetDraftIntelligenceInfo(ctx context.Context, req *GetDraftIntelligenceInfoRequest) (r *GetDraftIntelligenceInfoResponse, err error)

	GetUserRecentlyEditIntelligence(ctx context.Context, req *GetUserRecentlyEditIntelligenceRequest) (r *GetUserRecentlyEditIntelligenceResponse, err error)

	PublishIntelligenceList(ctx context.Context, req *PublishIntelligenceListRequest) (r *PublishIntelligenceListResponse, err error)

	GetProjectPublishSummary(ctx context.Context, req *GetProjectPublishSummaryRequest) (r *GetProjectPublishSummaryResponse, err error)
}

type IntelligenceServiceClient struct {
	c thrift.TClient
}

func NewIntelligenceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IntelligenceServiceClient {
	return &IntelligenceServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewIntelligenceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IntelligenceServiceClient {
	return &IntelligenceServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewIntelligenceServiceClient(c thrift.TClient) *IntelligenceServiceClient {
	return &IntelligenceServiceClient{
		c: c,
	}
}

func (p *IntelligenceServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *IntelligenceServiceClient) GetDraftIntelligenceList(ctx context.Context, req *GetDraftIntelligenceListRequest) (r *GetDraftIntelligenceListResponse, err error) {
	var _args IntelligenceServiceGetDraftIntelligenceListArgs
	_args.Req = req
	var _result IntelligenceServiceGetDraftIntelligenceListResult
	if err = p.Client_().Call(ctx, "GetDraftIntelligenceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *IntelligenceServiceClient) GetDraftIntelligenceInfo(ctx context.Context, req *GetDraftIntelligenceInfoRequest) (r *GetDraftIntelligenceInfoResponse, err error) {
	var _args IntelligenceServiceGetDraftIntelligenceInfoArgs
	_args.Req = req
	var _result IntelligenceServiceGetDraftIntelligenceInfoResult
	if err = p.Client_().Call(ctx, "GetDraftIntelligenceInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *IntelligenceServiceClient) GetUserRecentlyEditIntelligence(ctx context.Context, req *GetUserRecentlyEditIntelligenceRequest) (r *GetUserRecentlyEditIntelligenceResponse, err error) {
	var _args IntelligenceServiceGetUserRecentlyEditIntelligenceArgs
	_args.Req = req
	var _result IntelligenceServiceGetUserRecentlyEditIntelligenceResult
	if err = p.Client_().Call(ctx, "GetUserRecentlyEditIntelligence", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *IntelligenceServiceClient) PublishIntelligenceList(ctx context.Context, req *PublishIntelligenceListRequest) (r *PublishIntelligenceListResponse, err error) {
	var _args IntelligenceServicePublishIntelligenceListArgs
	_args.Req = req
	var _result IntelligenceServicePublishIntelligenceListResult
	if err = p.Client_().Call(ctx, "PublishIntelligenceList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *IntelligenceServiceClient) GetProjectPublishSummary(ctx context.Context, req *GetProjectPublishSummaryRequest) (r *GetProjectPublishSummaryResponse, err error) {
	var _args IntelligenceServiceGetProjectPublishSummaryArgs
	_args.Req = req
	var _result IntelligenceServiceGetProjectPublishSummaryResult
	if err = p.Client_().Call(ctx, "GetProjectPublishSummary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type IntelligenceServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IntelligenceService
}

func (p *IntelligenceServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IntelligenceServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IntelligenceServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIntelligenceServiceProcessor(handler IntelligenceService) *IntelligenceServiceProcessor {
	self := &IntelligenceServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetDraftIntelligenceList", &intelligenceServiceProcessorGetDraftIntelligenceList{handler: handler})
	self.AddToProcessorMap("GetDraftIntelligenceInfo", &intelligenceServiceProcessorGetDraftIntelligenceInfo{handler: handler})
	self.AddToProcessorMap("GetUserRecentlyEditIntelligence", &intelligenceServiceProcessorGetUserRecentlyEditIntelligence{handler: handler})
	self.AddToProcessorMap("PublishIntelligenceList", &intelligenceServiceProcessorPublishIntelligenceList{handler: handler})
	self.AddToProcessorMap("GetProjectPublishSummary", &intelligenceServiceProcessorGetProjectPublishSummary{handler: handler})
	return self
}
func (p *IntelligenceServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type intelligenceServiceProcessorGetDraftIntelligenceList struct {
	handler IntelligenceService
}

func (p *intelligenceServiceProcessorGetDraftIntelligenceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IntelligenceServiceGetDraftIntelligenceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDraftIntelligenceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := IntelligenceServiceGetDraftIntelligenceListResult{}
	var retval *GetDraftIntelligenceListResponse
	if retval, err2 = p.handler.GetDraftIntelligenceList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDraftIntelligenceList: "+err2.Error())
		oprot.WriteMessageBegin("GetDraftIntelligenceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDraftIntelligenceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type intelligenceServiceProcessorGetDraftIntelligenceInfo struct {
	handler IntelligenceService
}

func (p *intelligenceServiceProcessorGetDraftIntelligenceInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IntelligenceServiceGetDraftIntelligenceInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDraftIntelligenceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := IntelligenceServiceGetDraftIntelligenceInfoResult{}
	var retval *GetDraftIntelligenceInfoResponse
	if retval, err2 = p.handler.GetDraftIntelligenceInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDraftIntelligenceInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetDraftIntelligenceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDraftIntelligenceInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type intelligenceServiceProcessorGetUserRecentlyEditIntelligence struct {
	handler IntelligenceService
}

func (p *intelligenceServiceProcessorGetUserRecentlyEditIntelligence) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IntelligenceServiceGetUserRecentlyEditIntelligenceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserRecentlyEditIntelligence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := IntelligenceServiceGetUserRecentlyEditIntelligenceResult{}
	var retval *GetUserRecentlyEditIntelligenceResponse
	if retval, err2 = p.handler.GetUserRecentlyEditIntelligence(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserRecentlyEditIntelligence: "+err2.Error())
		oprot.WriteMessageBegin("GetUserRecentlyEditIntelligence", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserRecentlyEditIntelligence", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type intelligenceServiceProcessorPublishIntelligenceList struct {
	handler IntelligenceService
}

func (p *intelligenceServiceProcessorPublishIntelligenceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IntelligenceServicePublishIntelligenceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PublishIntelligenceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := IntelligenceServicePublishIntelligenceListResult{}
	var retval *PublishIntelligenceListResponse
	if retval, err2 = p.handler.PublishIntelligenceList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PublishIntelligenceList: "+err2.Error())
		oprot.WriteMessageBegin("PublishIntelligenceList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PublishIntelligenceList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type intelligenceServiceProcessorGetProjectPublishSummary struct {
	handler IntelligenceService
}

func (p *intelligenceServiceProcessorGetProjectPublishSummary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IntelligenceServiceGetProjectPublishSummaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProjectPublishSummary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := IntelligenceServiceGetProjectPublishSummaryResult{}
	var retval *GetProjectPublishSummaryResponse
	if retval, err2 = p.handler.GetProjectPublishSummary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProjectPublishSummary: "+err2.Error())
		oprot.WriteMessageBegin("GetProjectPublishSummary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProjectPublishSummary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type IntelligenceServiceGetDraftIntelligenceListArgs struct {
	Req *GetDraftIntelligenceListRequest `thrift:"req,1"`
}

func NewIntelligenceServiceGetDraftIntelligenceListArgs() *IntelligenceServiceGetDraftIntelligenceListArgs {
	return &IntelligenceServiceGetDraftIntelligenceListArgs{}
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) InitDefault() {
}

var IntelligenceServiceGetDraftIntelligenceListArgs_Req_DEFAULT *GetDraftIntelligenceListRequest

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) GetReq() (v *GetDraftIntelligenceListRequest) {
	if !p.IsSetReq() {
		return IntelligenceServiceGetDraftIntelligenceListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_IntelligenceServiceGetDraftIntelligenceListArgs = map[int16]string{
	1: "req",
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetDraftIntelligenceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDraftIntelligenceListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDraftIntelligenceList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetDraftIntelligenceListArgs(%+v)", *p)

}

type IntelligenceServiceGetDraftIntelligenceListResult struct {
	Success *GetDraftIntelligenceListResponse `thrift:"success,0,optional"`
}

func NewIntelligenceServiceGetDraftIntelligenceListResult() *IntelligenceServiceGetDraftIntelligenceListResult {
	return &IntelligenceServiceGetDraftIntelligenceListResult{}
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) InitDefault() {
}

var IntelligenceServiceGetDraftIntelligenceListResult_Success_DEFAULT *GetDraftIntelligenceListResponse

func (p *IntelligenceServiceGetDraftIntelligenceListResult) GetSuccess() (v *GetDraftIntelligenceListResponse) {
	if !p.IsSetSuccess() {
		return IntelligenceServiceGetDraftIntelligenceListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_IntelligenceServiceGetDraftIntelligenceListResult = map[int16]string{
	0: "success",
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetDraftIntelligenceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDraftIntelligenceListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDraftIntelligenceList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetDraftIntelligenceListResult(%+v)", *p)

}

type IntelligenceServiceGetDraftIntelligenceInfoArgs struct {
	Req *GetDraftIntelligenceInfoRequest `thrift:"req,1"`
}

func NewIntelligenceServiceGetDraftIntelligenceInfoArgs() *IntelligenceServiceGetDraftIntelligenceInfoArgs {
	return &IntelligenceServiceGetDraftIntelligenceInfoArgs{}
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) InitDefault() {
}

var IntelligenceServiceGetDraftIntelligenceInfoArgs_Req_DEFAULT *GetDraftIntelligenceInfoRequest

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) GetReq() (v *GetDraftIntelligenceInfoRequest) {
	if !p.IsSetReq() {
		return IntelligenceServiceGetDraftIntelligenceInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_IntelligenceServiceGetDraftIntelligenceInfoArgs = map[int16]string{
	1: "req",
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetDraftIntelligenceInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDraftIntelligenceInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDraftIntelligenceInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetDraftIntelligenceInfoArgs(%+v)", *p)

}

type IntelligenceServiceGetDraftIntelligenceInfoResult struct {
	Success *GetDraftIntelligenceInfoResponse `thrift:"success,0,optional"`
}

func NewIntelligenceServiceGetDraftIntelligenceInfoResult() *IntelligenceServiceGetDraftIntelligenceInfoResult {
	return &IntelligenceServiceGetDraftIntelligenceInfoResult{}
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) InitDefault() {
}

var IntelligenceServiceGetDraftIntelligenceInfoResult_Success_DEFAULT *GetDraftIntelligenceInfoResponse

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) GetSuccess() (v *GetDraftIntelligenceInfoResponse) {
	if !p.IsSetSuccess() {
		return IntelligenceServiceGetDraftIntelligenceInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_IntelligenceServiceGetDraftIntelligenceInfoResult = map[int16]string{
	0: "success",
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetDraftIntelligenceInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDraftIntelligenceInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDraftIntelligenceInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *IntelligenceServiceGetDraftIntelligenceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetDraftIntelligenceInfoResult(%+v)", *p)

}

type IntelligenceServiceGetUserRecentlyEditIntelligenceArgs struct {
	Req *GetUserRecentlyEditIntelligenceRequest `thrift:"req,1"`
}

func NewIntelligenceServiceGetUserRecentlyEditIntelligenceArgs() *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs {
	return &IntelligenceServiceGetUserRecentlyEditIntelligenceArgs{}
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) InitDefault() {
}

var IntelligenceServiceGetUserRecentlyEditIntelligenceArgs_Req_DEFAULT *GetUserRecentlyEditIntelligenceRequest

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) GetReq() (v *GetUserRecentlyEditIntelligenceRequest) {
	if !p.IsSetReq() {
		return IntelligenceServiceGetUserRecentlyEditIntelligenceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_IntelligenceServiceGetUserRecentlyEditIntelligenceArgs = map[int16]string{
	1: "req",
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetUserRecentlyEditIntelligenceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetUserRecentlyEditIntelligenceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserRecentlyEditIntelligence_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetUserRecentlyEditIntelligenceArgs(%+v)", *p)

}

type IntelligenceServiceGetUserRecentlyEditIntelligenceResult struct {
	Success *GetUserRecentlyEditIntelligenceResponse `thrift:"success,0,optional"`
}

func NewIntelligenceServiceGetUserRecentlyEditIntelligenceResult() *IntelligenceServiceGetUserRecentlyEditIntelligenceResult {
	return &IntelligenceServiceGetUserRecentlyEditIntelligenceResult{}
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) InitDefault() {
}

var IntelligenceServiceGetUserRecentlyEditIntelligenceResult_Success_DEFAULT *GetUserRecentlyEditIntelligenceResponse

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) GetSuccess() (v *GetUserRecentlyEditIntelligenceResponse) {
	if !p.IsSetSuccess() {
		return IntelligenceServiceGetUserRecentlyEditIntelligenceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_IntelligenceServiceGetUserRecentlyEditIntelligenceResult = map[int16]string{
	0: "success",
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetUserRecentlyEditIntelligenceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetUserRecentlyEditIntelligenceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserRecentlyEditIntelligence_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *IntelligenceServiceGetUserRecentlyEditIntelligenceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetUserRecentlyEditIntelligenceResult(%+v)", *p)

}

type IntelligenceServicePublishIntelligenceListArgs struct {
	Req *PublishIntelligenceListRequest `thrift:"req,1"`
}

func NewIntelligenceServicePublishIntelligenceListArgs() *IntelligenceServicePublishIntelligenceListArgs {
	return &IntelligenceServicePublishIntelligenceListArgs{}
}

func (p *IntelligenceServicePublishIntelligenceListArgs) InitDefault() {
}

var IntelligenceServicePublishIntelligenceListArgs_Req_DEFAULT *PublishIntelligenceListRequest

func (p *IntelligenceServicePublishIntelligenceListArgs) GetReq() (v *PublishIntelligenceListRequest) {
	if !p.IsSetReq() {
		return IntelligenceServicePublishIntelligenceListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_IntelligenceServicePublishIntelligenceListArgs = map[int16]string{
	1: "req",
}

func (p *IntelligenceServicePublishIntelligenceListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IntelligenceServicePublishIntelligenceListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServicePublishIntelligenceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServicePublishIntelligenceListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPublishIntelligenceListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *IntelligenceServicePublishIntelligenceListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishIntelligenceList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServicePublishIntelligenceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IntelligenceServicePublishIntelligenceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServicePublishIntelligenceListArgs(%+v)", *p)

}

type IntelligenceServicePublishIntelligenceListResult struct {
	Success *PublishIntelligenceListResponse `thrift:"success,0,optional"`
}

func NewIntelligenceServicePublishIntelligenceListResult() *IntelligenceServicePublishIntelligenceListResult {
	return &IntelligenceServicePublishIntelligenceListResult{}
}

func (p *IntelligenceServicePublishIntelligenceListResult) InitDefault() {
}

var IntelligenceServicePublishIntelligenceListResult_Success_DEFAULT *PublishIntelligenceListResponse

func (p *IntelligenceServicePublishIntelligenceListResult) GetSuccess() (v *PublishIntelligenceListResponse) {
	if !p.IsSetSuccess() {
		return IntelligenceServicePublishIntelligenceListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_IntelligenceServicePublishIntelligenceListResult = map[int16]string{
	0: "success",
}

func (p *IntelligenceServicePublishIntelligenceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IntelligenceServicePublishIntelligenceListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServicePublishIntelligenceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServicePublishIntelligenceListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPublishIntelligenceListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *IntelligenceServicePublishIntelligenceListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishIntelligenceList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServicePublishIntelligenceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *IntelligenceServicePublishIntelligenceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServicePublishIntelligenceListResult(%+v)", *p)

}

type IntelligenceServiceGetProjectPublishSummaryArgs struct {
	Req *GetProjectPublishSummaryRequest `thrift:"req,1"`
}

func NewIntelligenceServiceGetProjectPublishSummaryArgs() *IntelligenceServiceGetProjectPublishSummaryArgs {
	return &IntelligenceServiceGetProjectPublishSummaryArgs{}
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) InitDefault() {
}

var IntelligenceServiceGetProjectPublishSummaryArgs_Req_DEFAULT *GetProjectPublishSummaryRequest

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) GetReq() (v *GetProjectPublishSummaryRequest) {
	if !p.IsSetReq() {
		return IntelligenceServiceGetProjectPublishSummaryArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_IntelligenceServiceGetProjectPublishSummaryArgs = map[int16]string{
	1: "req",
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetProjectPublishSummaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetProjectPublishSummaryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjectPublishSummary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IntelligenceServiceGetProjectPublishSummaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetProjectPublishSummaryArgs(%+v)", *p)

}

type IntelligenceServiceGetProjectPublishSummaryResult struct {
	Success *GetProjectPublishSummaryResponse `thrift:"success,0,optional"`
}

func NewIntelligenceServiceGetProjectPublishSummaryResult() *IntelligenceServiceGetProjectPublishSummaryResult {
	return &IntelligenceServiceGetProjectPublishSummaryResult{}
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) InitDefault() {
}

var IntelligenceServiceGetProjectPublishSummaryResult_Success_DEFAULT *GetProjectPublishSummaryResponse

func (p *IntelligenceServiceGetProjectPublishSummaryResult) GetSuccess() (v *GetProjectPublishSummaryResponse) {
	if !p.IsSetSuccess() {
		return IntelligenceServiceGetProjectPublishSummaryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_IntelligenceServiceGetProjectPublishSummaryResult = map[int16]string{
	0: "success",
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IntelligenceServiceGetProjectPublishSummaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetProjectPublishSummaryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjectPublishSummary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *IntelligenceServiceGetProjectPublishSummaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IntelligenceServiceGetProjectPublishSummaryResult(%+v)", *p)

}
