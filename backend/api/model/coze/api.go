// Code generated by thriftgo (0.3.19). DO NOT EDIT.

package coze

import (
	"code.byted.org/flow/opencoze/backend/api/model/playground"
	"code.byted.org/flow/opencoze/backend/api/model/prompt"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type CozeService interface {
	UpsertPromptResource(ctx context.Context, request *prompt.UpsertPromptResourceRequest) (r *prompt.UpsertPromptResourceResponse, err error)

	UpdateDraftBotInfo(ctx context.Context, request *playground.UpdateDraftBotInfoRequest) (r *playground.UpdateDraftBotInfoResponse, err error)
}

type CozeServiceClient struct {
	c thrift.TClient
}

func NewCozeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CozeServiceClient {
	return &CozeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCozeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CozeServiceClient {
	return &CozeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCozeServiceClient(c thrift.TClient) *CozeServiceClient {
	return &CozeServiceClient{
		c: c,
	}
}

func (p *CozeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CozeServiceClient) UpsertPromptResource(ctx context.Context, request *prompt.UpsertPromptResourceRequest) (r *prompt.UpsertPromptResourceResponse, err error) {
	var _args CozeServiceUpsertPromptResourceArgs
	_args.Request = request
	var _result CozeServiceUpsertPromptResourceResult
	if err = p.Client_().Call(ctx, "UpsertPromptResource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateDraftBotInfo(ctx context.Context, request *playground.UpdateDraftBotInfoRequest) (r *playground.UpdateDraftBotInfoResponse, err error) {
	var _args CozeServiceUpdateDraftBotInfoArgs
	_args.Request = request
	var _result CozeServiceUpdateDraftBotInfoResult
	if err = p.Client_().Call(ctx, "UpdateDraftBotInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CozeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CozeService
}

func (p *CozeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CozeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CozeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCozeServiceProcessor(handler CozeService) *CozeServiceProcessor {
	self := &CozeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("UpsertPromptResource", &cozeServiceProcessorUpsertPromptResource{handler: handler})
	self.AddToProcessorMap("UpdateDraftBotInfo", &cozeServiceProcessorUpdateDraftBotInfo{handler: handler})
	return self
}
func (p *CozeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type cozeServiceProcessorUpsertPromptResource struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpsertPromptResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpsertPromptResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpsertPromptResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpsertPromptResourceResult{}
	var retval *prompt.UpsertPromptResourceResponse
	if retval, err2 = p.handler.UpsertPromptResource(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpsertPromptResource: "+err2.Error())
		oprot.WriteMessageBegin("UpsertPromptResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpsertPromptResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateDraftBotInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateDraftBotInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateDraftBotInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDraftBotInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateDraftBotInfoResult{}
	var retval *playground.UpdateDraftBotInfoResponse
	if retval, err2 = p.handler.UpdateDraftBotInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDraftBotInfo: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDraftBotInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDraftBotInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CozeServiceUpsertPromptResourceArgs struct {
	Request *prompt.UpsertPromptResourceRequest `thrift:"request,1"`
}

func NewCozeServiceUpsertPromptResourceArgs() *CozeServiceUpsertPromptResourceArgs {
	return &CozeServiceUpsertPromptResourceArgs{}
}

func (p *CozeServiceUpsertPromptResourceArgs) InitDefault() {
}

var CozeServiceUpsertPromptResourceArgs_Request_DEFAULT *prompt.UpsertPromptResourceRequest

func (p *CozeServiceUpsertPromptResourceArgs) GetRequest() (v *prompt.UpsertPromptResourceRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpsertPromptResourceArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpsertPromptResourceArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpsertPromptResourceArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpsertPromptResourceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpsertPromptResourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewUpsertPromptResourceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpsertPromptResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertPromptResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpsertPromptResourceArgs(%+v)", *p)

}

type CozeServiceUpsertPromptResourceResult struct {
	Success *prompt.UpsertPromptResourceResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpsertPromptResourceResult() *CozeServiceUpsertPromptResourceResult {
	return &CozeServiceUpsertPromptResourceResult{}
}

func (p *CozeServiceUpsertPromptResourceResult) InitDefault() {
}

var CozeServiceUpsertPromptResourceResult_Success_DEFAULT *prompt.UpsertPromptResourceResponse

func (p *CozeServiceUpsertPromptResourceResult) GetSuccess() (v *prompt.UpsertPromptResourceResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpsertPromptResourceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpsertPromptResourceResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpsertPromptResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpsertPromptResourceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpsertPromptResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := prompt.NewUpsertPromptResourceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpsertPromptResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertPromptResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpsertPromptResourceResult(%+v)", *p)

}

type CozeServiceUpdateDraftBotInfoArgs struct {
	Request *playground.UpdateDraftBotInfoRequest `thrift:"request,1"`
}

func NewCozeServiceUpdateDraftBotInfoArgs() *CozeServiceUpdateDraftBotInfoArgs {
	return &CozeServiceUpdateDraftBotInfoArgs{}
}

func (p *CozeServiceUpdateDraftBotInfoArgs) InitDefault() {
}

var CozeServiceUpdateDraftBotInfoArgs_Request_DEFAULT *playground.UpdateDraftBotInfoRequest

func (p *CozeServiceUpdateDraftBotInfoArgs) GetRequest() (v *playground.UpdateDraftBotInfoRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdateDraftBotInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdateDraftBotInfoArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdateDraftBotInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdateDraftBotInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDraftBotInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := playground.NewUpdateDraftBotInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdateDraftBotInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDraftBotInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDraftBotInfoArgs(%+v)", *p)

}

type CozeServiceUpdateDraftBotInfoResult struct {
	Success *playground.UpdateDraftBotInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateDraftBotInfoResult() *CozeServiceUpdateDraftBotInfoResult {
	return &CozeServiceUpdateDraftBotInfoResult{}
}

func (p *CozeServiceUpdateDraftBotInfoResult) InitDefault() {
}

var CozeServiceUpdateDraftBotInfoResult_Success_DEFAULT *playground.UpdateDraftBotInfoResponse

func (p *CozeServiceUpdateDraftBotInfoResult) GetSuccess() (v *playground.UpdateDraftBotInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateDraftBotInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateDraftBotInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateDraftBotInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateDraftBotInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDraftBotInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := playground.NewUpdateDraftBotInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateDraftBotInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDraftBotInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDraftBotInfoResult(%+v)", *p)

}
