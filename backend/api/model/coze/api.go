// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package coze

import (
	"code.byted.org/flow/opencoze/backend/api/model/agent"
	"code.byted.org/flow/opencoze/backend/api/model/conversation_conversation"
	"code.byted.org/flow/opencoze/backend/api/model/conversation_message"
	"code.byted.org/flow/opencoze/backend/api/model/conversation_run"
	"code.byted.org/flow/opencoze/backend/api/model/document2"
	"code.byted.org/flow/opencoze/backend/api/model/flow/dataengine/dataset"
	"code.byted.org/flow/opencoze/backend/api/model/intelligence"
	"code.byted.org/flow/opencoze/backend/api/model/kvmemory"
	"code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/workflow"
	"code.byted.org/flow/opencoze/backend/api/model/plugin"
	"code.byted.org/flow/opencoze/backend/api/model/project_memory"
	"code.byted.org/flow/opencoze/backend/api/model/prompt"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type IntelligenceService interface {
	intelligence.IntelligenceService
}

type IntelligenceServiceClient struct {
	*intelligence.IntelligenceServiceClient
}

func NewIntelligenceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IntelligenceServiceClient {
	return &IntelligenceServiceClient{
		IntelligenceServiceClient: intelligence.NewIntelligenceServiceClientFactory(t, f),
	}
}

func NewIntelligenceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IntelligenceServiceClient {
	return &IntelligenceServiceClient{
		IntelligenceServiceClient: intelligence.NewIntelligenceServiceClientProtocol(t, iprot, oprot),
	}
}

func NewIntelligenceServiceClient(c thrift.TClient) *IntelligenceServiceClient {
	return &IntelligenceServiceClient{
		IntelligenceServiceClient: intelligence.NewIntelligenceServiceClient(c),
	}
}

type CozeService interface {
	UpsertPromptResource(ctx context.Context, request *prompt.UpsertPromptResourceRequest) (r *prompt.UpsertPromptResourceResponse, err error)

	UpdateDraftBotInfo(ctx context.Context, request *agent.UpdateDraftBotInfoRequest) (r *agent.UpdateDraftBotInfoResponse, err error)

	DraftBotCreate(ctx context.Context, request *agent.DraftBotCreateRequest) (r *agent.DraftBotCreateResponse, err error)

	GetDraftBotInfo(ctx context.Context, request *agent.GetDraftBotInfoRequest) (r *agent.GetDraftBotInfoResponse, err error)

	DelProfileMemory(ctx context.Context, req *kvmemory.DelProfileMemoryRequest) (r *kvmemory.DelProfileMemoryResponse, err error)

	GetPlayGroundMemory(ctx context.Context, req *kvmemory.GetProfileMemoryRequest) (r *kvmemory.GetProfileMemoryResponse, err error)

	GetSysVariableConf(ctx context.Context, req *kvmemory.GetSysVariableConfRequest) (r *kvmemory.GetSysVariableConfResponse, err error)

	SetKvMemory(ctx context.Context, req *kvmemory.SetKvMemoryReq) (r *kvmemory.SetKvMemoryResp, err error)

	GetProjectVariableList(ctx context.Context, req *project_memory.GetProjectVariableListReq) (r *project_memory.GetProjectVariableListResp, err error)

	UpdateProjectVariable(ctx context.Context, req *project_memory.UpdateProjectVariableReq) (r *project_memory.UpdateProjectVariableResp, err error)

	GetMemoryVariableMeta(ctx context.Context, req *project_memory.GetMemoryVariableMetaReq) (r *project_memory.GetMemoryVariableMetaResp, err error)

	AgentRun(ctx context.Context, request *conversation_run.AgentRunRequest) (r *conversation_run.AgentRunResponse, err error)

	GetMessageList(ctx context.Context, request *conversation_message.GetMessageListRequest) (r *conversation_message.GetMessageListResponse, err error)

	DeleteMessage(ctx context.Context, request *conversation_message.DeleteMessageRequest) (r *conversation_message.DeleteMessageResponse, err error)

	BreakMessage(ctx context.Context, request *conversation_message.BreakMessageRequest) (r *conversation_message.BreakMessageResponse, err error)

	ClearConversationCtx(ctx context.Context, request *conversation_conversation.ClearConversationCtxRequest) (r *conversation_conversation.ClearConversationCtxResponse, err error)

	ClearConversationHistory(ctx context.Context, request *conversation_conversation.ClearConversationHistoryRequest) (r *conversation_conversation.ClearConversationHistoryResponse, err error)

	RegisterPluginMeta(ctx context.Context, request *plugin.RegisterPluginMetaRequest) (r *plugin.RegisterPluginMetaResponse, err error)

	UpdatePluginMeta(ctx context.Context, request *plugin.UpdatePluginMetaRequest) (r *plugin.UpdatePluginMetaResponse, err error)

	UpdatePlugin(ctx context.Context, request *plugin.UpdatePluginRequest) (r *plugin.UpdatePluginResponse, err error)

	DelPlugin(ctx context.Context, request *plugin.DelPluginRequest) (r *plugin.DelPluginResponse, err error)

	GetPlaygroundPluginList(ctx context.Context, request *plugin.GetPlaygroundPluginListRequest) (r *plugin.GetPlaygroundPluginListResponse, err error)

	GetPluginAPIs(ctx context.Context, request *plugin.GetPluginAPIsRequest) (r *plugin.GetPluginAPIsResponse, err error)

	GetPluginInfo(ctx context.Context, request *plugin.GetPluginInfoRequest) (r *plugin.GetPluginInfoResponse, err error)

	GetUpdatedAPIs(ctx context.Context, request *plugin.GetUpdatedAPIsRequest) (r *plugin.GetUpdatedAPIsResponse, err error)

	PublishPlugin(ctx context.Context, request *plugin.PublishPluginRequest) (r *plugin.PublishPluginResponse, err error)

	GetBotDefaultParams(ctx context.Context, request *plugin.GetBotDefaultParamsRequest) (r *plugin.GetBotDefaultParamsResponse, err error)

	UpdateBotDefaultParams(ctx context.Context, request *plugin.UpdateBotDefaultParamsRequest) (r *plugin.UpdateBotDefaultParamsResponse, err error)

	DeleteBotDefaultParams(ctx context.Context, request *plugin.DeleteBotDefaultParamsRequest) (r *plugin.DeleteBotDefaultParamsResponse, err error)

	CreateAPI(ctx context.Context, request *plugin.CreateAPIRequest) (r *plugin.CreateAPIResponse, err error)

	UpdateAPI(ctx context.Context, request *plugin.UpdateAPIRequest) (r *plugin.UpdateAPIResponse, err error)

	DeleteAPI(ctx context.Context, request *plugin.DeleteAPIRequest) (r *plugin.DeleteAPIResponse, err error)
	/***** workflow begin *****/
	// 创建流程
	CreateWorkflow(ctx context.Context, request *workflow.CreateWorkflowRequest) (r *workflow.CreateWorkflowResponse, err error)
	// 获取流程编辑态详情
	GetCanvasInfo(ctx context.Context, request *workflow.GetCanvasInfoRequest) (r *workflow.GetCanvasInfoResponse, err error)
	// 保存流程
	SaveWorkflow(ctx context.Context, request *workflow.SaveWorkflowRequest) (r *workflow.SaveWorkflowResponse, err error)

	UpdateWorkflowMeta(ctx context.Context, request *workflow.UpdateWorkflowMetaRequest) (r *workflow.UpdateWorkflowMetaResponse, err error)

	DeleteWorkflow(ctx context.Context, request *workflow.DeleteWorkflowRequest) (r *workflow.DeleteWorkflowResponse, err error)

	BatchDeleteWorkflow(ctx context.Context, request *workflow.BatchDeleteWorkflowRequest) (r *workflow.BatchDeleteWorkflowResponse, err error)

	GetDeleteStrategy(ctx context.Context, request *workflow.GetDeleteStrategyRequest) (r *workflow.GetDeleteStrategyResponse, err error)
	// 发布流程。该接口的用途是发布非 project 内部的流程。
	PublishWorkflow(ctx context.Context, request *workflow.PublishWorkflowRequest) (r *workflow.PublishWorkflowResponse, err error)

	CopyWorkflow(ctx context.Context, request *workflow.CopyWorkflowRequest) (r *workflow.CopyWorkflowResponse, err error)

	CopyWkTemplateApi(ctx context.Context, request *workflow.CopyWkTemplateApiRequest) (r *workflow.CopyWkTemplateApiResponse, err error)

	GetReleasedWorkflows(ctx context.Context, request *workflow.GetReleasedWorkflowsRequest) (r *workflow.GetReleasedWorkflowsResponse, err error)

	GetWorkflowReferences(ctx context.Context, request *workflow.GetWorkflowReferencesRequest) (r *workflow.GetWorkflowReferencesResponse, err error)
	// 获取流程列表。
	GetWorkFlowList(ctx context.Context, request *workflow.GetWorkFlowListRequest) (r *workflow.GetWorkFlowListResponse, err error)

	QueryWorkflowNodeTypes(ctx context.Context, request *workflow.QueryWorkflowNodeTypeRequest) (r *workflow.QueryWorkflowNodeTypeResponse, err error)
	// 画布
	NodeTemplateList(ctx context.Context, request *workflow.NodeTemplateListRequest) (r *workflow.NodeTemplateListResponse, err error)

	NodePanelSearch(ctx context.Context, request *workflow.NodePanelSearchRequest) (r *workflow.NodePanelSearchResponse, err error)

	GetLLMNodeFCSettingsMerged(ctx context.Context, req *workflow.GetLLMNodeFCSettingsMergedRequest) (r *workflow.GetLLMNodeFCSettingsMergedResponse, err error)

	GetLLMNodeFCSettingDetail(ctx context.Context, req *workflow.GetLLMNodeFCSettingDetailRequest) (r *workflow.GetLLMNodeFCSettingDetailResponse, err error)
	// 试运行流程（test run）
	WorkFlowTestRun(ctx context.Context, request *workflow.WorkFlowTestRunRequest) (r *workflow.WorkFlowTestRunResponse, err error)

	WorkFlowTestResume(ctx context.Context, request *workflow.WorkflowTestResumeRequest) (r *workflow.WorkflowTestResumeResponse, err error)

	CancelWorkFlow(ctx context.Context, request *workflow.CancelWorkFlowRequest) (r *workflow.CancelWorkFlowResponse, err error)
	// 查看试运行执行历史。
	GetWorkFlowProcess(ctx context.Context, request *workflow.GetWorkflowProcessRequest) (r *workflow.GetWorkflowProcessResponse, err error)

	GetNodeExecuteHistory(ctx context.Context, request *workflow.GetNodeExecuteHistoryRequest) (r *workflow.GetNodeExecuteHistoryResponse, err error)

	GetApiDetail(ctx context.Context, request *workflow.GetApiDetailRequest) (r *workflow.GetApiDetailResponse, err error)

	WorkflowNodeDebugV2(ctx context.Context, request *workflow.WorkflowNodeDebugV2Request) (r *workflow.WorkflowNodeDebugV2Response, err error)
	// 文件上传
	SignImageURL(ctx context.Context, request *workflow.SignImageURLRequest) (r *workflow.SignImageURLResponse, err error)
	// conversation
	CreateProjectConversationDef(ctx context.Context, request *workflow.CreateProjectConversationDefRequest) (r *workflow.CreateProjectConversationDefResponse, err error)

	UpdateProjectConversationDef(ctx context.Context, request *workflow.UpdateProjectConversationDefRequest) (r *workflow.UpdateProjectConversationDefResponse, err error)

	DeleteProjectConversationDef(ctx context.Context, request *workflow.DeleteProjectConversationDefRequest) (r *workflow.DeleteProjectConversationDefResponse, err error)

	ListProjectConversationDef(ctx context.Context, request *workflow.ListProjectConversationRequest) (r *workflow.ListProjectConversationResponse, err error)
	// Trace
	// 列出历史执行的trace
	ListRootSpans(ctx context.Context, req *workflow.ListRootSpansRequest) (r *workflow.ListRootSpansResponse, err error)

	GetTraceSDK(ctx context.Context, req *workflow.GetTraceSDKRequest) (r *workflow.GetTraceSDKResponse, err error)
	// Project
	GetWorkflowDetail(ctx context.Context, request *workflow.GetWorkflowDetailRequest) (r *workflow.GetWorkflowDetailResponse, err error)

	GetWorkflowDetailInfo(ctx context.Context, request *workflow.GetWorkflowDetailInfoRequest) (r *workflow.GetWorkflowDetailInfoResponse, err error)

	ValidateTree(ctx context.Context, request *workflow.ValidateTreeRequest) (r *workflow.ValidateTreeResponse, err error)
	// chat flow role config
	GetChatFlowRole(ctx context.Context, request *workflow.GetChatFlowRoleRequest) (r *workflow.GetChatFlowRoleResponse, err error)

	CreateChatFlowRole(ctx context.Context, request *workflow.CreateChatFlowRoleRequest) (r *workflow.CreateChatFlowRoleResponse, err error)

	DeleteChatFlowRole(ctx context.Context, request *workflow.DeleteChatFlowRoleRequest) (r *workflow.DeleteChatFlowRoleResponse, err error)
	// project 发布管理
	ListPublishWorkflow(ctx context.Context, request *workflow.ListPublishWorkflowRequest) (r *workflow.ListPublishWorkflowResponse, err error)
	// 测试集 TODO 代码生成报错，后面再看
	//case manage
	//flow.devops.debugger.coze.SaveCaseDataResp SaveCaseData(1: flow.devops.debugger.coze.SaveCaseDataReq req) (api.post="/api/devops/debugger/v1/coze/testcase/casedata/save")
	//flow.devops.debugger.coze.DeleteCaseDataResp DeleteCaseData(1: flow.devops.debugger.coze.DeleteCaseDataReq req) (api.post="/api/devops/debugger/v1/coze/testcase/casedata/delete")
	//flow.devops.debugger.coze.CheckCaseDuplicateResp CheckCaseDuplicate(1: flow.devops.debugger.coze.CheckCaseDuplicateReq req) (api.post="/api/devops/debugger/v1/coze/testcase/casedata/check")
	//case schema
	//flow.devops.debugger.coze.GetSchemaByIDResp GetSchemaByID(1: flow.devops.debugger.coze.GetSchemaByIDReq req)(api.post="/api/devops/debugger/v1/coze/testcase/casedata/schema")
	/**** workflow end ****/
	// 知识库相关
	CreateDataset(ctx context.Context, req *dataset.CreateDatasetRequest) (r *dataset.CreateDatasetResponse, err error)

	DatasetDetail(ctx context.Context, req *dataset.DatasetDetailRequest) (r *dataset.DatasetDetailResponse, err error)

	ListDataset(ctx context.Context, req *dataset.ListDatasetRequest) (r *dataset.ListDatasetResponse, err error)

	DeleteDataset(ctx context.Context, req *dataset.DeleteDatasetRequest) (r *dataset.DeleteDatasetResponse, err error)

	UpdateDataset(ctx context.Context, req *dataset.UpdateDatasetRequest) (r *dataset.UpdateDatasetResponse, err error)
	// Document相关
	CreateDocument(ctx context.Context, req *dataset.CreateDocumentRequest) (r *dataset.CreateDocumentResponse, err error)

	ListDocument(ctx context.Context, req *dataset.ListDocumentRequest) (r *dataset.ListDocumentResponse, err error)

	DeleteDocument(ctx context.Context, req *dataset.DeleteDocumentRequest) (r *dataset.DeleteDocumentResponse, err error)

	UpdateDocument(ctx context.Context, req *dataset.UpdateDocumentRequest) (r *dataset.UpdateDocumentResponse, err error)

	GetDocumentProgress(ctx context.Context, req *dataset.GetDocumentProgressRequest) (r *dataset.GetDocumentProgressResponse, err error)

	Resegment(ctx context.Context, req *dataset.ResegmentRequest) (r *dataset.ResegmentResponse, err error)

	UpdatePhotoCaption(ctx context.Context, req *dataset.UpdatePhotoCaptionRequest) (r *dataset.UpdatePhotoCaptionResponse, err error)

	ListPhoto(ctx context.Context, req *dataset.ListPhotoRequest) (r *dataset.ListPhotoResponse, err error)

	PhotoDetail(ctx context.Context, req *dataset.PhotoDetailRequest) (r *dataset.PhotoDetailResponse, err error)

	GetTableSchema(ctx context.Context, req *dataset.GetTableSchemaRequest) (r *dataset.GetTableSchemaResponse, err error)

	ValidateTableSchema(ctx context.Context, req *dataset.ValidateTableSchemaRequest) (r *dataset.ValidateTableSchemaResponse, err error)

	GetDocumentTableInfo(ctx context.Context, req *document2.GetDocumentTableInfoRequest) (r *document2.GetDocumentTableInfoResponse, err error)
	// slice相关
	DeleteSlice(ctx context.Context, req *dataset.DeleteSliceRequest) (r *dataset.DeleteSliceResponse, err error)

	CreateSlice(ctx context.Context, req *dataset.CreateSliceRequest) (r *dataset.CreateSliceResponse, err error)

	UpdateSlice(ctx context.Context, req *dataset.UpdateSliceRequest) (r *dataset.UpdateSliceResponse, err error)

	ListSlice(ctx context.Context, req *dataset.ListSliceRequest) (r *dataset.ListSliceResponse, err error)
}

type CozeServiceClient struct {
	c thrift.TClient
}

func NewCozeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CozeServiceClient {
	return &CozeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCozeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CozeServiceClient {
	return &CozeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCozeServiceClient(c thrift.TClient) *CozeServiceClient {
	return &CozeServiceClient{
		c: c,
	}
}

func (p *CozeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CozeServiceClient) UpsertPromptResource(ctx context.Context, request *prompt.UpsertPromptResourceRequest) (r *prompt.UpsertPromptResourceResponse, err error) {
	var _args CozeServiceUpsertPromptResourceArgs
	_args.Request = request
	var _result CozeServiceUpsertPromptResourceResult
	if err = p.Client_().Call(ctx, "UpsertPromptResource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateDraftBotInfo(ctx context.Context, request *agent.UpdateDraftBotInfoRequest) (r *agent.UpdateDraftBotInfoResponse, err error) {
	var _args CozeServiceUpdateDraftBotInfoArgs
	_args.Request = request
	var _result CozeServiceUpdateDraftBotInfoResult
	if err = p.Client_().Call(ctx, "UpdateDraftBotInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DraftBotCreate(ctx context.Context, request *agent.DraftBotCreateRequest) (r *agent.DraftBotCreateResponse, err error) {
	var _args CozeServiceDraftBotCreateArgs
	_args.Request = request
	var _result CozeServiceDraftBotCreateResult
	if err = p.Client_().Call(ctx, "DraftBotCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetDraftBotInfo(ctx context.Context, request *agent.GetDraftBotInfoRequest) (r *agent.GetDraftBotInfoResponse, err error) {
	var _args CozeServiceGetDraftBotInfoArgs
	_args.Request = request
	var _result CozeServiceGetDraftBotInfoResult
	if err = p.Client_().Call(ctx, "GetDraftBotInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DelProfileMemory(ctx context.Context, req *kvmemory.DelProfileMemoryRequest) (r *kvmemory.DelProfileMemoryResponse, err error) {
	var _args CozeServiceDelProfileMemoryArgs
	_args.Req = req
	var _result CozeServiceDelProfileMemoryResult
	if err = p.Client_().Call(ctx, "DelProfileMemory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetPlayGroundMemory(ctx context.Context, req *kvmemory.GetProfileMemoryRequest) (r *kvmemory.GetProfileMemoryResponse, err error) {
	var _args CozeServiceGetPlayGroundMemoryArgs
	_args.Req = req
	var _result CozeServiceGetPlayGroundMemoryResult
	if err = p.Client_().Call(ctx, "GetPlayGroundMemory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetSysVariableConf(ctx context.Context, req *kvmemory.GetSysVariableConfRequest) (r *kvmemory.GetSysVariableConfResponse, err error) {
	var _args CozeServiceGetSysVariableConfArgs
	_args.Req = req
	var _result CozeServiceGetSysVariableConfResult
	if err = p.Client_().Call(ctx, "GetSysVariableConf", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) SetKvMemory(ctx context.Context, req *kvmemory.SetKvMemoryReq) (r *kvmemory.SetKvMemoryResp, err error) {
	var _args CozeServiceSetKvMemoryArgs
	_args.Req = req
	var _result CozeServiceSetKvMemoryResult
	if err = p.Client_().Call(ctx, "SetKvMemory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetProjectVariableList(ctx context.Context, req *project_memory.GetProjectVariableListReq) (r *project_memory.GetProjectVariableListResp, err error) {
	var _args CozeServiceGetProjectVariableListArgs
	_args.Req = req
	var _result CozeServiceGetProjectVariableListResult
	if err = p.Client_().Call(ctx, "GetProjectVariableList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateProjectVariable(ctx context.Context, req *project_memory.UpdateProjectVariableReq) (r *project_memory.UpdateProjectVariableResp, err error) {
	var _args CozeServiceUpdateProjectVariableArgs
	_args.Req = req
	var _result CozeServiceUpdateProjectVariableResult
	if err = p.Client_().Call(ctx, "UpdateProjectVariable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetMemoryVariableMeta(ctx context.Context, req *project_memory.GetMemoryVariableMetaReq) (r *project_memory.GetMemoryVariableMetaResp, err error) {
	var _args CozeServiceGetMemoryVariableMetaArgs
	_args.Req = req
	var _result CozeServiceGetMemoryVariableMetaResult
	if err = p.Client_().Call(ctx, "GetMemoryVariableMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) AgentRun(ctx context.Context, request *conversation_run.AgentRunRequest) (r *conversation_run.AgentRunResponse, err error) {
	var _args CozeServiceAgentRunArgs
	_args.Request = request
	var _result CozeServiceAgentRunResult
	if err = p.Client_().Call(ctx, "AgentRun", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetMessageList(ctx context.Context, request *conversation_message.GetMessageListRequest) (r *conversation_message.GetMessageListResponse, err error) {
	var _args CozeServiceGetMessageListArgs
	_args.Request = request
	var _result CozeServiceGetMessageListResult
	if err = p.Client_().Call(ctx, "GetMessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteMessage(ctx context.Context, request *conversation_message.DeleteMessageRequest) (r *conversation_message.DeleteMessageResponse, err error) {
	var _args CozeServiceDeleteMessageArgs
	_args.Request = request
	var _result CozeServiceDeleteMessageResult
	if err = p.Client_().Call(ctx, "DeleteMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) BreakMessage(ctx context.Context, request *conversation_message.BreakMessageRequest) (r *conversation_message.BreakMessageResponse, err error) {
	var _args CozeServiceBreakMessageArgs
	_args.Request = request
	var _result CozeServiceBreakMessageResult
	if err = p.Client_().Call(ctx, "BreakMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ClearConversationCtx(ctx context.Context, request *conversation_conversation.ClearConversationCtxRequest) (r *conversation_conversation.ClearConversationCtxResponse, err error) {
	var _args CozeServiceClearConversationCtxArgs
	_args.Request = request
	var _result CozeServiceClearConversationCtxResult
	if err = p.Client_().Call(ctx, "ClearConversationCtx", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ClearConversationHistory(ctx context.Context, request *conversation_conversation.ClearConversationHistoryRequest) (r *conversation_conversation.ClearConversationHistoryResponse, err error) {
	var _args CozeServiceClearConversationHistoryArgs
	_args.Request = request
	var _result CozeServiceClearConversationHistoryResult
	if err = p.Client_().Call(ctx, "ClearConversationHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) RegisterPluginMeta(ctx context.Context, request *plugin.RegisterPluginMetaRequest) (r *plugin.RegisterPluginMetaResponse, err error) {
	var _args CozeServiceRegisterPluginMetaArgs
	_args.Request = request
	var _result CozeServiceRegisterPluginMetaResult
	if err = p.Client_().Call(ctx, "RegisterPluginMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdatePluginMeta(ctx context.Context, request *plugin.UpdatePluginMetaRequest) (r *plugin.UpdatePluginMetaResponse, err error) {
	var _args CozeServiceUpdatePluginMetaArgs
	_args.Request = request
	var _result CozeServiceUpdatePluginMetaResult
	if err = p.Client_().Call(ctx, "UpdatePluginMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdatePlugin(ctx context.Context, request *plugin.UpdatePluginRequest) (r *plugin.UpdatePluginResponse, err error) {
	var _args CozeServiceUpdatePluginArgs
	_args.Request = request
	var _result CozeServiceUpdatePluginResult
	if err = p.Client_().Call(ctx, "UpdatePlugin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DelPlugin(ctx context.Context, request *plugin.DelPluginRequest) (r *plugin.DelPluginResponse, err error) {
	var _args CozeServiceDelPluginArgs
	_args.Request = request
	var _result CozeServiceDelPluginResult
	if err = p.Client_().Call(ctx, "DelPlugin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetPlaygroundPluginList(ctx context.Context, request *plugin.GetPlaygroundPluginListRequest) (r *plugin.GetPlaygroundPluginListResponse, err error) {
	var _args CozeServiceGetPlaygroundPluginListArgs
	_args.Request = request
	var _result CozeServiceGetPlaygroundPluginListResult
	if err = p.Client_().Call(ctx, "GetPlaygroundPluginList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetPluginAPIs(ctx context.Context, request *plugin.GetPluginAPIsRequest) (r *plugin.GetPluginAPIsResponse, err error) {
	var _args CozeServiceGetPluginAPIsArgs
	_args.Request = request
	var _result CozeServiceGetPluginAPIsResult
	if err = p.Client_().Call(ctx, "GetPluginAPIs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetPluginInfo(ctx context.Context, request *plugin.GetPluginInfoRequest) (r *plugin.GetPluginInfoResponse, err error) {
	var _args CozeServiceGetPluginInfoArgs
	_args.Request = request
	var _result CozeServiceGetPluginInfoResult
	if err = p.Client_().Call(ctx, "GetPluginInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetUpdatedAPIs(ctx context.Context, request *plugin.GetUpdatedAPIsRequest) (r *plugin.GetUpdatedAPIsResponse, err error) {
	var _args CozeServiceGetUpdatedAPIsArgs
	_args.Request = request
	var _result CozeServiceGetUpdatedAPIsResult
	if err = p.Client_().Call(ctx, "GetUpdatedAPIs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) PublishPlugin(ctx context.Context, request *plugin.PublishPluginRequest) (r *plugin.PublishPluginResponse, err error) {
	var _args CozeServicePublishPluginArgs
	_args.Request = request
	var _result CozeServicePublishPluginResult
	if err = p.Client_().Call(ctx, "PublishPlugin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetBotDefaultParams(ctx context.Context, request *plugin.GetBotDefaultParamsRequest) (r *plugin.GetBotDefaultParamsResponse, err error) {
	var _args CozeServiceGetBotDefaultParamsArgs
	_args.Request = request
	var _result CozeServiceGetBotDefaultParamsResult
	if err = p.Client_().Call(ctx, "GetBotDefaultParams", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateBotDefaultParams(ctx context.Context, request *plugin.UpdateBotDefaultParamsRequest) (r *plugin.UpdateBotDefaultParamsResponse, err error) {
	var _args CozeServiceUpdateBotDefaultParamsArgs
	_args.Request = request
	var _result CozeServiceUpdateBotDefaultParamsResult
	if err = p.Client_().Call(ctx, "UpdateBotDefaultParams", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteBotDefaultParams(ctx context.Context, request *plugin.DeleteBotDefaultParamsRequest) (r *plugin.DeleteBotDefaultParamsResponse, err error) {
	var _args CozeServiceDeleteBotDefaultParamsArgs
	_args.Request = request
	var _result CozeServiceDeleteBotDefaultParamsResult
	if err = p.Client_().Call(ctx, "DeleteBotDefaultParams", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateAPI(ctx context.Context, request *plugin.CreateAPIRequest) (r *plugin.CreateAPIResponse, err error) {
	var _args CozeServiceCreateAPIArgs
	_args.Request = request
	var _result CozeServiceCreateAPIResult
	if err = p.Client_().Call(ctx, "CreateAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateAPI(ctx context.Context, request *plugin.UpdateAPIRequest) (r *plugin.UpdateAPIResponse, err error) {
	var _args CozeServiceUpdateAPIArgs
	_args.Request = request
	var _result CozeServiceUpdateAPIResult
	if err = p.Client_().Call(ctx, "UpdateAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteAPI(ctx context.Context, request *plugin.DeleteAPIRequest) (r *plugin.DeleteAPIResponse, err error) {
	var _args CozeServiceDeleteAPIArgs
	_args.Request = request
	var _result CozeServiceDeleteAPIResult
	if err = p.Client_().Call(ctx, "DeleteAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateWorkflow(ctx context.Context, request *workflow.CreateWorkflowRequest) (r *workflow.CreateWorkflowResponse, err error) {
	var _args CozeServiceCreateWorkflowArgs
	_args.Request = request
	var _result CozeServiceCreateWorkflowResult
	if err = p.Client_().Call(ctx, "CreateWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetCanvasInfo(ctx context.Context, request *workflow.GetCanvasInfoRequest) (r *workflow.GetCanvasInfoResponse, err error) {
	var _args CozeServiceGetCanvasInfoArgs
	_args.Request = request
	var _result CozeServiceGetCanvasInfoResult
	if err = p.Client_().Call(ctx, "GetCanvasInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) SaveWorkflow(ctx context.Context, request *workflow.SaveWorkflowRequest) (r *workflow.SaveWorkflowResponse, err error) {
	var _args CozeServiceSaveWorkflowArgs
	_args.Request = request
	var _result CozeServiceSaveWorkflowResult
	if err = p.Client_().Call(ctx, "SaveWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateWorkflowMeta(ctx context.Context, request *workflow.UpdateWorkflowMetaRequest) (r *workflow.UpdateWorkflowMetaResponse, err error) {
	var _args CozeServiceUpdateWorkflowMetaArgs
	_args.Request = request
	var _result CozeServiceUpdateWorkflowMetaResult
	if err = p.Client_().Call(ctx, "UpdateWorkflowMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteWorkflow(ctx context.Context, request *workflow.DeleteWorkflowRequest) (r *workflow.DeleteWorkflowResponse, err error) {
	var _args CozeServiceDeleteWorkflowArgs
	_args.Request = request
	var _result CozeServiceDeleteWorkflowResult
	if err = p.Client_().Call(ctx, "DeleteWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) BatchDeleteWorkflow(ctx context.Context, request *workflow.BatchDeleteWorkflowRequest) (r *workflow.BatchDeleteWorkflowResponse, err error) {
	var _args CozeServiceBatchDeleteWorkflowArgs
	_args.Request = request
	var _result CozeServiceBatchDeleteWorkflowResult
	if err = p.Client_().Call(ctx, "BatchDeleteWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetDeleteStrategy(ctx context.Context, request *workflow.GetDeleteStrategyRequest) (r *workflow.GetDeleteStrategyResponse, err error) {
	var _args CozeServiceGetDeleteStrategyArgs
	_args.Request = request
	var _result CozeServiceGetDeleteStrategyResult
	if err = p.Client_().Call(ctx, "GetDeleteStrategy", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) PublishWorkflow(ctx context.Context, request *workflow.PublishWorkflowRequest) (r *workflow.PublishWorkflowResponse, err error) {
	var _args CozeServicePublishWorkflowArgs
	_args.Request = request
	var _result CozeServicePublishWorkflowResult
	if err = p.Client_().Call(ctx, "PublishWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CopyWorkflow(ctx context.Context, request *workflow.CopyWorkflowRequest) (r *workflow.CopyWorkflowResponse, err error) {
	var _args CozeServiceCopyWorkflowArgs
	_args.Request = request
	var _result CozeServiceCopyWorkflowResult
	if err = p.Client_().Call(ctx, "CopyWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CopyWkTemplateApi(ctx context.Context, request *workflow.CopyWkTemplateApiRequest) (r *workflow.CopyWkTemplateApiResponse, err error) {
	var _args CozeServiceCopyWkTemplateApiArgs
	_args.Request = request
	var _result CozeServiceCopyWkTemplateApiResult
	if err = p.Client_().Call(ctx, "CopyWkTemplateApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetReleasedWorkflows(ctx context.Context, request *workflow.GetReleasedWorkflowsRequest) (r *workflow.GetReleasedWorkflowsResponse, err error) {
	var _args CozeServiceGetReleasedWorkflowsArgs
	_args.Request = request
	var _result CozeServiceGetReleasedWorkflowsResult
	if err = p.Client_().Call(ctx, "GetReleasedWorkflows", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetWorkflowReferences(ctx context.Context, request *workflow.GetWorkflowReferencesRequest) (r *workflow.GetWorkflowReferencesResponse, err error) {
	var _args CozeServiceGetWorkflowReferencesArgs
	_args.Request = request
	var _result CozeServiceGetWorkflowReferencesResult
	if err = p.Client_().Call(ctx, "GetWorkflowReferences", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetWorkFlowList(ctx context.Context, request *workflow.GetWorkFlowListRequest) (r *workflow.GetWorkFlowListResponse, err error) {
	var _args CozeServiceGetWorkFlowListArgs
	_args.Request = request
	var _result CozeServiceGetWorkFlowListResult
	if err = p.Client_().Call(ctx, "GetWorkFlowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) QueryWorkflowNodeTypes(ctx context.Context, request *workflow.QueryWorkflowNodeTypeRequest) (r *workflow.QueryWorkflowNodeTypeResponse, err error) {
	var _args CozeServiceQueryWorkflowNodeTypesArgs
	_args.Request = request
	var _result CozeServiceQueryWorkflowNodeTypesResult
	if err = p.Client_().Call(ctx, "QueryWorkflowNodeTypes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) NodeTemplateList(ctx context.Context, request *workflow.NodeTemplateListRequest) (r *workflow.NodeTemplateListResponse, err error) {
	var _args CozeServiceNodeTemplateListArgs
	_args.Request = request
	var _result CozeServiceNodeTemplateListResult
	if err = p.Client_().Call(ctx, "NodeTemplateList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) NodePanelSearch(ctx context.Context, request *workflow.NodePanelSearchRequest) (r *workflow.NodePanelSearchResponse, err error) {
	var _args CozeServiceNodePanelSearchArgs
	_args.Request = request
	var _result CozeServiceNodePanelSearchResult
	if err = p.Client_().Call(ctx, "NodePanelSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetLLMNodeFCSettingsMerged(ctx context.Context, req *workflow.GetLLMNodeFCSettingsMergedRequest) (r *workflow.GetLLMNodeFCSettingsMergedResponse, err error) {
	var _args CozeServiceGetLLMNodeFCSettingsMergedArgs
	_args.Req = req
	var _result CozeServiceGetLLMNodeFCSettingsMergedResult
	if err = p.Client_().Call(ctx, "GetLLMNodeFCSettingsMerged", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetLLMNodeFCSettingDetail(ctx context.Context, req *workflow.GetLLMNodeFCSettingDetailRequest) (r *workflow.GetLLMNodeFCSettingDetailResponse, err error) {
	var _args CozeServiceGetLLMNodeFCSettingDetailArgs
	_args.Req = req
	var _result CozeServiceGetLLMNodeFCSettingDetailResult
	if err = p.Client_().Call(ctx, "GetLLMNodeFCSettingDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) WorkFlowTestRun(ctx context.Context, request *workflow.WorkFlowTestRunRequest) (r *workflow.WorkFlowTestRunResponse, err error) {
	var _args CozeServiceWorkFlowTestRunArgs
	_args.Request = request
	var _result CozeServiceWorkFlowTestRunResult
	if err = p.Client_().Call(ctx, "WorkFlowTestRun", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) WorkFlowTestResume(ctx context.Context, request *workflow.WorkflowTestResumeRequest) (r *workflow.WorkflowTestResumeResponse, err error) {
	var _args CozeServiceWorkFlowTestResumeArgs
	_args.Request = request
	var _result CozeServiceWorkFlowTestResumeResult
	if err = p.Client_().Call(ctx, "WorkFlowTestResume", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CancelWorkFlow(ctx context.Context, request *workflow.CancelWorkFlowRequest) (r *workflow.CancelWorkFlowResponse, err error) {
	var _args CozeServiceCancelWorkFlowArgs
	_args.Request = request
	var _result CozeServiceCancelWorkFlowResult
	if err = p.Client_().Call(ctx, "CancelWorkFlow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetWorkFlowProcess(ctx context.Context, request *workflow.GetWorkflowProcessRequest) (r *workflow.GetWorkflowProcessResponse, err error) {
	var _args CozeServiceGetWorkFlowProcessArgs
	_args.Request = request
	var _result CozeServiceGetWorkFlowProcessResult
	if err = p.Client_().Call(ctx, "GetWorkFlowProcess", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetNodeExecuteHistory(ctx context.Context, request *workflow.GetNodeExecuteHistoryRequest) (r *workflow.GetNodeExecuteHistoryResponse, err error) {
	var _args CozeServiceGetNodeExecuteHistoryArgs
	_args.Request = request
	var _result CozeServiceGetNodeExecuteHistoryResult
	if err = p.Client_().Call(ctx, "GetNodeExecuteHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetApiDetail(ctx context.Context, request *workflow.GetApiDetailRequest) (r *workflow.GetApiDetailResponse, err error) {
	var _args CozeServiceGetApiDetailArgs
	_args.Request = request
	var _result CozeServiceGetApiDetailResult
	if err = p.Client_().Call(ctx, "GetApiDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) WorkflowNodeDebugV2(ctx context.Context, request *workflow.WorkflowNodeDebugV2Request) (r *workflow.WorkflowNodeDebugV2Response, err error) {
	var _args CozeServiceWorkflowNodeDebugV2Args
	_args.Request = request
	var _result CozeServiceWorkflowNodeDebugV2Result
	if err = p.Client_().Call(ctx, "WorkflowNodeDebugV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) SignImageURL(ctx context.Context, request *workflow.SignImageURLRequest) (r *workflow.SignImageURLResponse, err error) {
	var _args CozeServiceSignImageURLArgs
	_args.Request = request
	var _result CozeServiceSignImageURLResult
	if err = p.Client_().Call(ctx, "SignImageURL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateProjectConversationDef(ctx context.Context, request *workflow.CreateProjectConversationDefRequest) (r *workflow.CreateProjectConversationDefResponse, err error) {
	var _args CozeServiceCreateProjectConversationDefArgs
	_args.Request = request
	var _result CozeServiceCreateProjectConversationDefResult
	if err = p.Client_().Call(ctx, "CreateProjectConversationDef", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateProjectConversationDef(ctx context.Context, request *workflow.UpdateProjectConversationDefRequest) (r *workflow.UpdateProjectConversationDefResponse, err error) {
	var _args CozeServiceUpdateProjectConversationDefArgs
	_args.Request = request
	var _result CozeServiceUpdateProjectConversationDefResult
	if err = p.Client_().Call(ctx, "UpdateProjectConversationDef", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteProjectConversationDef(ctx context.Context, request *workflow.DeleteProjectConversationDefRequest) (r *workflow.DeleteProjectConversationDefResponse, err error) {
	var _args CozeServiceDeleteProjectConversationDefArgs
	_args.Request = request
	var _result CozeServiceDeleteProjectConversationDefResult
	if err = p.Client_().Call(ctx, "DeleteProjectConversationDef", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListProjectConversationDef(ctx context.Context, request *workflow.ListProjectConversationRequest) (r *workflow.ListProjectConversationResponse, err error) {
	var _args CozeServiceListProjectConversationDefArgs
	_args.Request = request
	var _result CozeServiceListProjectConversationDefResult
	if err = p.Client_().Call(ctx, "ListProjectConversationDef", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListRootSpans(ctx context.Context, req *workflow.ListRootSpansRequest) (r *workflow.ListRootSpansResponse, err error) {
	var _args CozeServiceListRootSpansArgs
	_args.Req = req
	var _result CozeServiceListRootSpansResult
	if err = p.Client_().Call(ctx, "ListRootSpans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetTraceSDK(ctx context.Context, req *workflow.GetTraceSDKRequest) (r *workflow.GetTraceSDKResponse, err error) {
	var _args CozeServiceGetTraceSDKArgs
	_args.Req = req
	var _result CozeServiceGetTraceSDKResult
	if err = p.Client_().Call(ctx, "GetTraceSDK", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetWorkflowDetail(ctx context.Context, request *workflow.GetWorkflowDetailRequest) (r *workflow.GetWorkflowDetailResponse, err error) {
	var _args CozeServiceGetWorkflowDetailArgs
	_args.Request = request
	var _result CozeServiceGetWorkflowDetailResult
	if err = p.Client_().Call(ctx, "GetWorkflowDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetWorkflowDetailInfo(ctx context.Context, request *workflow.GetWorkflowDetailInfoRequest) (r *workflow.GetWorkflowDetailInfoResponse, err error) {
	var _args CozeServiceGetWorkflowDetailInfoArgs
	_args.Request = request
	var _result CozeServiceGetWorkflowDetailInfoResult
	if err = p.Client_().Call(ctx, "GetWorkflowDetailInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ValidateTree(ctx context.Context, request *workflow.ValidateTreeRequest) (r *workflow.ValidateTreeResponse, err error) {
	var _args CozeServiceValidateTreeArgs
	_args.Request = request
	var _result CozeServiceValidateTreeResult
	if err = p.Client_().Call(ctx, "ValidateTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetChatFlowRole(ctx context.Context, request *workflow.GetChatFlowRoleRequest) (r *workflow.GetChatFlowRoleResponse, err error) {
	var _args CozeServiceGetChatFlowRoleArgs
	_args.Request = request
	var _result CozeServiceGetChatFlowRoleResult
	if err = p.Client_().Call(ctx, "GetChatFlowRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateChatFlowRole(ctx context.Context, request *workflow.CreateChatFlowRoleRequest) (r *workflow.CreateChatFlowRoleResponse, err error) {
	var _args CozeServiceCreateChatFlowRoleArgs
	_args.Request = request
	var _result CozeServiceCreateChatFlowRoleResult
	if err = p.Client_().Call(ctx, "CreateChatFlowRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteChatFlowRole(ctx context.Context, request *workflow.DeleteChatFlowRoleRequest) (r *workflow.DeleteChatFlowRoleResponse, err error) {
	var _args CozeServiceDeleteChatFlowRoleArgs
	_args.Request = request
	var _result CozeServiceDeleteChatFlowRoleResult
	if err = p.Client_().Call(ctx, "DeleteChatFlowRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListPublishWorkflow(ctx context.Context, request *workflow.ListPublishWorkflowRequest) (r *workflow.ListPublishWorkflowResponse, err error) {
	var _args CozeServiceListPublishWorkflowArgs
	_args.Request = request
	var _result CozeServiceListPublishWorkflowResult
	if err = p.Client_().Call(ctx, "ListPublishWorkflow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateDataset(ctx context.Context, req *dataset.CreateDatasetRequest) (r *dataset.CreateDatasetResponse, err error) {
	var _args CozeServiceCreateDatasetArgs
	_args.Req = req
	var _result CozeServiceCreateDatasetResult
	if err = p.Client_().Call(ctx, "CreateDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DatasetDetail(ctx context.Context, req *dataset.DatasetDetailRequest) (r *dataset.DatasetDetailResponse, err error) {
	var _args CozeServiceDatasetDetailArgs
	_args.Req = req
	var _result CozeServiceDatasetDetailResult
	if err = p.Client_().Call(ctx, "DatasetDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListDataset(ctx context.Context, req *dataset.ListDatasetRequest) (r *dataset.ListDatasetResponse, err error) {
	var _args CozeServiceListDatasetArgs
	_args.Req = req
	var _result CozeServiceListDatasetResult
	if err = p.Client_().Call(ctx, "ListDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteDataset(ctx context.Context, req *dataset.DeleteDatasetRequest) (r *dataset.DeleteDatasetResponse, err error) {
	var _args CozeServiceDeleteDatasetArgs
	_args.Req = req
	var _result CozeServiceDeleteDatasetResult
	if err = p.Client_().Call(ctx, "DeleteDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateDataset(ctx context.Context, req *dataset.UpdateDatasetRequest) (r *dataset.UpdateDatasetResponse, err error) {
	var _args CozeServiceUpdateDatasetArgs
	_args.Req = req
	var _result CozeServiceUpdateDatasetResult
	if err = p.Client_().Call(ctx, "UpdateDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateDocument(ctx context.Context, req *dataset.CreateDocumentRequest) (r *dataset.CreateDocumentResponse, err error) {
	var _args CozeServiceCreateDocumentArgs
	_args.Req = req
	var _result CozeServiceCreateDocumentResult
	if err = p.Client_().Call(ctx, "CreateDocument", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListDocument(ctx context.Context, req *dataset.ListDocumentRequest) (r *dataset.ListDocumentResponse, err error) {
	var _args CozeServiceListDocumentArgs
	_args.Req = req
	var _result CozeServiceListDocumentResult
	if err = p.Client_().Call(ctx, "ListDocument", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteDocument(ctx context.Context, req *dataset.DeleteDocumentRequest) (r *dataset.DeleteDocumentResponse, err error) {
	var _args CozeServiceDeleteDocumentArgs
	_args.Req = req
	var _result CozeServiceDeleteDocumentResult
	if err = p.Client_().Call(ctx, "DeleteDocument", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateDocument(ctx context.Context, req *dataset.UpdateDocumentRequest) (r *dataset.UpdateDocumentResponse, err error) {
	var _args CozeServiceUpdateDocumentArgs
	_args.Req = req
	var _result CozeServiceUpdateDocumentResult
	if err = p.Client_().Call(ctx, "UpdateDocument", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetDocumentProgress(ctx context.Context, req *dataset.GetDocumentProgressRequest) (r *dataset.GetDocumentProgressResponse, err error) {
	var _args CozeServiceGetDocumentProgressArgs
	_args.Req = req
	var _result CozeServiceGetDocumentProgressResult
	if err = p.Client_().Call(ctx, "GetDocumentProgress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) Resegment(ctx context.Context, req *dataset.ResegmentRequest) (r *dataset.ResegmentResponse, err error) {
	var _args CozeServiceResegmentArgs
	_args.Req = req
	var _result CozeServiceResegmentResult
	if err = p.Client_().Call(ctx, "Resegment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdatePhotoCaption(ctx context.Context, req *dataset.UpdatePhotoCaptionRequest) (r *dataset.UpdatePhotoCaptionResponse, err error) {
	var _args CozeServiceUpdatePhotoCaptionArgs
	_args.Req = req
	var _result CozeServiceUpdatePhotoCaptionResult
	if err = p.Client_().Call(ctx, "UpdatePhotoCaption", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListPhoto(ctx context.Context, req *dataset.ListPhotoRequest) (r *dataset.ListPhotoResponse, err error) {
	var _args CozeServiceListPhotoArgs
	_args.Req = req
	var _result CozeServiceListPhotoResult
	if err = p.Client_().Call(ctx, "ListPhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) PhotoDetail(ctx context.Context, req *dataset.PhotoDetailRequest) (r *dataset.PhotoDetailResponse, err error) {
	var _args CozeServicePhotoDetailArgs
	_args.Req = req
	var _result CozeServicePhotoDetailResult
	if err = p.Client_().Call(ctx, "PhotoDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetTableSchema(ctx context.Context, req *dataset.GetTableSchemaRequest) (r *dataset.GetTableSchemaResponse, err error) {
	var _args CozeServiceGetTableSchemaArgs
	_args.Req = req
	var _result CozeServiceGetTableSchemaResult
	if err = p.Client_().Call(ctx, "GetTableSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ValidateTableSchema(ctx context.Context, req *dataset.ValidateTableSchemaRequest) (r *dataset.ValidateTableSchemaResponse, err error) {
	var _args CozeServiceValidateTableSchemaArgs
	_args.Req = req
	var _result CozeServiceValidateTableSchemaResult
	if err = p.Client_().Call(ctx, "ValidateTableSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) GetDocumentTableInfo(ctx context.Context, req *document2.GetDocumentTableInfoRequest) (r *document2.GetDocumentTableInfoResponse, err error) {
	var _args CozeServiceGetDocumentTableInfoArgs
	_args.Req = req
	var _result CozeServiceGetDocumentTableInfoResult
	if err = p.Client_().Call(ctx, "GetDocumentTableInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) DeleteSlice(ctx context.Context, req *dataset.DeleteSliceRequest) (r *dataset.DeleteSliceResponse, err error) {
	var _args CozeServiceDeleteSliceArgs
	_args.Req = req
	var _result CozeServiceDeleteSliceResult
	if err = p.Client_().Call(ctx, "DeleteSlice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) CreateSlice(ctx context.Context, req *dataset.CreateSliceRequest) (r *dataset.CreateSliceResponse, err error) {
	var _args CozeServiceCreateSliceArgs
	_args.Req = req
	var _result CozeServiceCreateSliceResult
	if err = p.Client_().Call(ctx, "CreateSlice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) UpdateSlice(ctx context.Context, req *dataset.UpdateSliceRequest) (r *dataset.UpdateSliceResponse, err error) {
	var _args CozeServiceUpdateSliceArgs
	_args.Req = req
	var _result CozeServiceUpdateSliceResult
	if err = p.Client_().Call(ctx, "UpdateSlice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CozeServiceClient) ListSlice(ctx context.Context, req *dataset.ListSliceRequest) (r *dataset.ListSliceResponse, err error) {
	var _args CozeServiceListSliceArgs
	_args.Req = req
	var _result CozeServiceListSliceResult
	if err = p.Client_().Call(ctx, "ListSlice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type IntelligenceServiceProcessor struct {
	*intelligence.IntelligenceServiceProcessor
}

func NewIntelligenceServiceProcessor(handler IntelligenceService) *IntelligenceServiceProcessor {
	self := &IntelligenceServiceProcessor{intelligence.NewIntelligenceServiceProcessor(handler)}
	return self
}

type CozeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CozeService
}

func (p *CozeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CozeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CozeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCozeServiceProcessor(handler CozeService) *CozeServiceProcessor {
	self := &CozeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("UpsertPromptResource", &cozeServiceProcessorUpsertPromptResource{handler: handler})
	self.AddToProcessorMap("UpdateDraftBotInfo", &cozeServiceProcessorUpdateDraftBotInfo{handler: handler})
	self.AddToProcessorMap("DraftBotCreate", &cozeServiceProcessorDraftBotCreate{handler: handler})
	self.AddToProcessorMap("GetDraftBotInfo", &cozeServiceProcessorGetDraftBotInfo{handler: handler})
	self.AddToProcessorMap("DelProfileMemory", &cozeServiceProcessorDelProfileMemory{handler: handler})
	self.AddToProcessorMap("GetPlayGroundMemory", &cozeServiceProcessorGetPlayGroundMemory{handler: handler})
	self.AddToProcessorMap("GetSysVariableConf", &cozeServiceProcessorGetSysVariableConf{handler: handler})
	self.AddToProcessorMap("SetKvMemory", &cozeServiceProcessorSetKvMemory{handler: handler})
	self.AddToProcessorMap("GetProjectVariableList", &cozeServiceProcessorGetProjectVariableList{handler: handler})
	self.AddToProcessorMap("UpdateProjectVariable", &cozeServiceProcessorUpdateProjectVariable{handler: handler})
	self.AddToProcessorMap("GetMemoryVariableMeta", &cozeServiceProcessorGetMemoryVariableMeta{handler: handler})
	self.AddToProcessorMap("AgentRun", &cozeServiceProcessorAgentRun{handler: handler})
	self.AddToProcessorMap("GetMessageList", &cozeServiceProcessorGetMessageList{handler: handler})
	self.AddToProcessorMap("DeleteMessage", &cozeServiceProcessorDeleteMessage{handler: handler})
	self.AddToProcessorMap("BreakMessage", &cozeServiceProcessorBreakMessage{handler: handler})
	self.AddToProcessorMap("ClearConversationCtx", &cozeServiceProcessorClearConversationCtx{handler: handler})
	self.AddToProcessorMap("ClearConversationHistory", &cozeServiceProcessorClearConversationHistory{handler: handler})
	self.AddToProcessorMap("RegisterPluginMeta", &cozeServiceProcessorRegisterPluginMeta{handler: handler})
	self.AddToProcessorMap("UpdatePluginMeta", &cozeServiceProcessorUpdatePluginMeta{handler: handler})
	self.AddToProcessorMap("UpdatePlugin", &cozeServiceProcessorUpdatePlugin{handler: handler})
	self.AddToProcessorMap("DelPlugin", &cozeServiceProcessorDelPlugin{handler: handler})
	self.AddToProcessorMap("GetPlaygroundPluginList", &cozeServiceProcessorGetPlaygroundPluginList{handler: handler})
	self.AddToProcessorMap("GetPluginAPIs", &cozeServiceProcessorGetPluginAPIs{handler: handler})
	self.AddToProcessorMap("GetPluginInfo", &cozeServiceProcessorGetPluginInfo{handler: handler})
	self.AddToProcessorMap("GetUpdatedAPIs", &cozeServiceProcessorGetUpdatedAPIs{handler: handler})
	self.AddToProcessorMap("PublishPlugin", &cozeServiceProcessorPublishPlugin{handler: handler})
	self.AddToProcessorMap("GetBotDefaultParams", &cozeServiceProcessorGetBotDefaultParams{handler: handler})
	self.AddToProcessorMap("UpdateBotDefaultParams", &cozeServiceProcessorUpdateBotDefaultParams{handler: handler})
	self.AddToProcessorMap("DeleteBotDefaultParams", &cozeServiceProcessorDeleteBotDefaultParams{handler: handler})
	self.AddToProcessorMap("CreateAPI", &cozeServiceProcessorCreateAPI{handler: handler})
	self.AddToProcessorMap("UpdateAPI", &cozeServiceProcessorUpdateAPI{handler: handler})
	self.AddToProcessorMap("DeleteAPI", &cozeServiceProcessorDeleteAPI{handler: handler})
	self.AddToProcessorMap("CreateWorkflow", &cozeServiceProcessorCreateWorkflow{handler: handler})
	self.AddToProcessorMap("GetCanvasInfo", &cozeServiceProcessorGetCanvasInfo{handler: handler})
	self.AddToProcessorMap("SaveWorkflow", &cozeServiceProcessorSaveWorkflow{handler: handler})
	self.AddToProcessorMap("UpdateWorkflowMeta", &cozeServiceProcessorUpdateWorkflowMeta{handler: handler})
	self.AddToProcessorMap("DeleteWorkflow", &cozeServiceProcessorDeleteWorkflow{handler: handler})
	self.AddToProcessorMap("BatchDeleteWorkflow", &cozeServiceProcessorBatchDeleteWorkflow{handler: handler})
	self.AddToProcessorMap("GetDeleteStrategy", &cozeServiceProcessorGetDeleteStrategy{handler: handler})
	self.AddToProcessorMap("PublishWorkflow", &cozeServiceProcessorPublishWorkflow{handler: handler})
	self.AddToProcessorMap("CopyWorkflow", &cozeServiceProcessorCopyWorkflow{handler: handler})
	self.AddToProcessorMap("CopyWkTemplateApi", &cozeServiceProcessorCopyWkTemplateApi{handler: handler})
	self.AddToProcessorMap("GetReleasedWorkflows", &cozeServiceProcessorGetReleasedWorkflows{handler: handler})
	self.AddToProcessorMap("GetWorkflowReferences", &cozeServiceProcessorGetWorkflowReferences{handler: handler})
	self.AddToProcessorMap("GetWorkFlowList", &cozeServiceProcessorGetWorkFlowList{handler: handler})
	self.AddToProcessorMap("QueryWorkflowNodeTypes", &cozeServiceProcessorQueryWorkflowNodeTypes{handler: handler})
	self.AddToProcessorMap("NodeTemplateList", &cozeServiceProcessorNodeTemplateList{handler: handler})
	self.AddToProcessorMap("NodePanelSearch", &cozeServiceProcessorNodePanelSearch{handler: handler})
	self.AddToProcessorMap("GetLLMNodeFCSettingsMerged", &cozeServiceProcessorGetLLMNodeFCSettingsMerged{handler: handler})
	self.AddToProcessorMap("GetLLMNodeFCSettingDetail", &cozeServiceProcessorGetLLMNodeFCSettingDetail{handler: handler})
	self.AddToProcessorMap("WorkFlowTestRun", &cozeServiceProcessorWorkFlowTestRun{handler: handler})
	self.AddToProcessorMap("WorkFlowTestResume", &cozeServiceProcessorWorkFlowTestResume{handler: handler})
	self.AddToProcessorMap("CancelWorkFlow", &cozeServiceProcessorCancelWorkFlow{handler: handler})
	self.AddToProcessorMap("GetWorkFlowProcess", &cozeServiceProcessorGetWorkFlowProcess{handler: handler})
	self.AddToProcessorMap("GetNodeExecuteHistory", &cozeServiceProcessorGetNodeExecuteHistory{handler: handler})
	self.AddToProcessorMap("GetApiDetail", &cozeServiceProcessorGetApiDetail{handler: handler})
	self.AddToProcessorMap("WorkflowNodeDebugV2", &cozeServiceProcessorWorkflowNodeDebugV2{handler: handler})
	self.AddToProcessorMap("SignImageURL", &cozeServiceProcessorSignImageURL{handler: handler})
	self.AddToProcessorMap("CreateProjectConversationDef", &cozeServiceProcessorCreateProjectConversationDef{handler: handler})
	self.AddToProcessorMap("UpdateProjectConversationDef", &cozeServiceProcessorUpdateProjectConversationDef{handler: handler})
	self.AddToProcessorMap("DeleteProjectConversationDef", &cozeServiceProcessorDeleteProjectConversationDef{handler: handler})
	self.AddToProcessorMap("ListProjectConversationDef", &cozeServiceProcessorListProjectConversationDef{handler: handler})
	self.AddToProcessorMap("ListRootSpans", &cozeServiceProcessorListRootSpans{handler: handler})
	self.AddToProcessorMap("GetTraceSDK", &cozeServiceProcessorGetTraceSDK{handler: handler})
	self.AddToProcessorMap("GetWorkflowDetail", &cozeServiceProcessorGetWorkflowDetail{handler: handler})
	self.AddToProcessorMap("GetWorkflowDetailInfo", &cozeServiceProcessorGetWorkflowDetailInfo{handler: handler})
	self.AddToProcessorMap("ValidateTree", &cozeServiceProcessorValidateTree{handler: handler})
	self.AddToProcessorMap("GetChatFlowRole", &cozeServiceProcessorGetChatFlowRole{handler: handler})
	self.AddToProcessorMap("CreateChatFlowRole", &cozeServiceProcessorCreateChatFlowRole{handler: handler})
	self.AddToProcessorMap("DeleteChatFlowRole", &cozeServiceProcessorDeleteChatFlowRole{handler: handler})
	self.AddToProcessorMap("ListPublishWorkflow", &cozeServiceProcessorListPublishWorkflow{handler: handler})
	self.AddToProcessorMap("CreateDataset", &cozeServiceProcessorCreateDataset{handler: handler})
	self.AddToProcessorMap("DatasetDetail", &cozeServiceProcessorDatasetDetail{handler: handler})
	self.AddToProcessorMap("ListDataset", &cozeServiceProcessorListDataset{handler: handler})
	self.AddToProcessorMap("DeleteDataset", &cozeServiceProcessorDeleteDataset{handler: handler})
	self.AddToProcessorMap("UpdateDataset", &cozeServiceProcessorUpdateDataset{handler: handler})
	self.AddToProcessorMap("CreateDocument", &cozeServiceProcessorCreateDocument{handler: handler})
	self.AddToProcessorMap("ListDocument", &cozeServiceProcessorListDocument{handler: handler})
	self.AddToProcessorMap("DeleteDocument", &cozeServiceProcessorDeleteDocument{handler: handler})
	self.AddToProcessorMap("UpdateDocument", &cozeServiceProcessorUpdateDocument{handler: handler})
	self.AddToProcessorMap("GetDocumentProgress", &cozeServiceProcessorGetDocumentProgress{handler: handler})
	self.AddToProcessorMap("Resegment", &cozeServiceProcessorResegment{handler: handler})
	self.AddToProcessorMap("UpdatePhotoCaption", &cozeServiceProcessorUpdatePhotoCaption{handler: handler})
	self.AddToProcessorMap("ListPhoto", &cozeServiceProcessorListPhoto{handler: handler})
	self.AddToProcessorMap("PhotoDetail", &cozeServiceProcessorPhotoDetail{handler: handler})
	self.AddToProcessorMap("GetTableSchema", &cozeServiceProcessorGetTableSchema{handler: handler})
	self.AddToProcessorMap("ValidateTableSchema", &cozeServiceProcessorValidateTableSchema{handler: handler})
	self.AddToProcessorMap("GetDocumentTableInfo", &cozeServiceProcessorGetDocumentTableInfo{handler: handler})
	self.AddToProcessorMap("DeleteSlice", &cozeServiceProcessorDeleteSlice{handler: handler})
	self.AddToProcessorMap("CreateSlice", &cozeServiceProcessorCreateSlice{handler: handler})
	self.AddToProcessorMap("UpdateSlice", &cozeServiceProcessorUpdateSlice{handler: handler})
	self.AddToProcessorMap("ListSlice", &cozeServiceProcessorListSlice{handler: handler})
	return self
}
func (p *CozeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type cozeServiceProcessorUpsertPromptResource struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpsertPromptResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpsertPromptResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpsertPromptResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpsertPromptResourceResult{}
	var retval *prompt.UpsertPromptResourceResponse
	if retval, err2 = p.handler.UpsertPromptResource(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpsertPromptResource: "+err2.Error())
		oprot.WriteMessageBegin("UpsertPromptResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpsertPromptResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateDraftBotInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateDraftBotInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateDraftBotInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDraftBotInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateDraftBotInfoResult{}
	var retval *agent.UpdateDraftBotInfoResponse
	if retval, err2 = p.handler.UpdateDraftBotInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDraftBotInfo: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDraftBotInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDraftBotInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDraftBotCreate struct {
	handler CozeService
}

func (p *cozeServiceProcessorDraftBotCreate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDraftBotCreateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DraftBotCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDraftBotCreateResult{}
	var retval *agent.DraftBotCreateResponse
	if retval, err2 = p.handler.DraftBotCreate(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DraftBotCreate: "+err2.Error())
		oprot.WriteMessageBegin("DraftBotCreate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DraftBotCreate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetDraftBotInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetDraftBotInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetDraftBotInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDraftBotInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetDraftBotInfoResult{}
	var retval *agent.GetDraftBotInfoResponse
	if retval, err2 = p.handler.GetDraftBotInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDraftBotInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetDraftBotInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDraftBotInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDelProfileMemory struct {
	handler CozeService
}

func (p *cozeServiceProcessorDelProfileMemory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDelProfileMemoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DelProfileMemory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDelProfileMemoryResult{}
	var retval *kvmemory.DelProfileMemoryResponse
	if retval, err2 = p.handler.DelProfileMemory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelProfileMemory: "+err2.Error())
		oprot.WriteMessageBegin("DelProfileMemory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DelProfileMemory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetPlayGroundMemory struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetPlayGroundMemory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetPlayGroundMemoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPlayGroundMemory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetPlayGroundMemoryResult{}
	var retval *kvmemory.GetProfileMemoryResponse
	if retval, err2 = p.handler.GetPlayGroundMemory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPlayGroundMemory: "+err2.Error())
		oprot.WriteMessageBegin("GetPlayGroundMemory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPlayGroundMemory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetSysVariableConf struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetSysVariableConf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetSysVariableConfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSysVariableConf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetSysVariableConfResult{}
	var retval *kvmemory.GetSysVariableConfResponse
	if retval, err2 = p.handler.GetSysVariableConf(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSysVariableConf: "+err2.Error())
		oprot.WriteMessageBegin("GetSysVariableConf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSysVariableConf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorSetKvMemory struct {
	handler CozeService
}

func (p *cozeServiceProcessorSetKvMemory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceSetKvMemoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetKvMemory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceSetKvMemoryResult{}
	var retval *kvmemory.SetKvMemoryResp
	if retval, err2 = p.handler.SetKvMemory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetKvMemory: "+err2.Error())
		oprot.WriteMessageBegin("SetKvMemory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SetKvMemory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetProjectVariableList struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetProjectVariableList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetProjectVariableListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProjectVariableList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetProjectVariableListResult{}
	var retval *project_memory.GetProjectVariableListResp
	if retval, err2 = p.handler.GetProjectVariableList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProjectVariableList: "+err2.Error())
		oprot.WriteMessageBegin("GetProjectVariableList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetProjectVariableList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateProjectVariable struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateProjectVariable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateProjectVariableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateProjectVariable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateProjectVariableResult{}
	var retval *project_memory.UpdateProjectVariableResp
	if retval, err2 = p.handler.UpdateProjectVariable(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateProjectVariable: "+err2.Error())
		oprot.WriteMessageBegin("UpdateProjectVariable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateProjectVariable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetMemoryVariableMeta struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetMemoryVariableMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetMemoryVariableMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMemoryVariableMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetMemoryVariableMetaResult{}
	var retval *project_memory.GetMemoryVariableMetaResp
	if retval, err2 = p.handler.GetMemoryVariableMeta(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMemoryVariableMeta: "+err2.Error())
		oprot.WriteMessageBegin("GetMemoryVariableMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMemoryVariableMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorAgentRun struct {
	handler CozeService
}

func (p *cozeServiceProcessorAgentRun) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceAgentRunArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AgentRun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceAgentRunResult{}
	var retval *conversation_run.AgentRunResponse
	if retval, err2 = p.handler.AgentRun(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AgentRun: "+err2.Error())
		oprot.WriteMessageBegin("AgentRun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AgentRun", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetMessageList struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetMessageList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetMessageListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMessageList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetMessageListResult{}
	var retval *conversation_message.GetMessageListResponse
	if retval, err2 = p.handler.GetMessageList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMessageList: "+err2.Error())
		oprot.WriteMessageBegin("GetMessageList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMessageList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteMessage struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteMessageResult{}
	var retval *conversation_message.DeleteMessageResponse
	if retval, err2 = p.handler.DeleteMessage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteMessage: "+err2.Error())
		oprot.WriteMessageBegin("DeleteMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorBreakMessage struct {
	handler CozeService
}

func (p *cozeServiceProcessorBreakMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceBreakMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BreakMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceBreakMessageResult{}
	var retval *conversation_message.BreakMessageResponse
	if retval, err2 = p.handler.BreakMessage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BreakMessage: "+err2.Error())
		oprot.WriteMessageBegin("BreakMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BreakMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorClearConversationCtx struct {
	handler CozeService
}

func (p *cozeServiceProcessorClearConversationCtx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceClearConversationCtxArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearConversationCtx", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceClearConversationCtxResult{}
	var retval *conversation_conversation.ClearConversationCtxResponse
	if retval, err2 = p.handler.ClearConversationCtx(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearConversationCtx: "+err2.Error())
		oprot.WriteMessageBegin("ClearConversationCtx", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearConversationCtx", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorClearConversationHistory struct {
	handler CozeService
}

func (p *cozeServiceProcessorClearConversationHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceClearConversationHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearConversationHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceClearConversationHistoryResult{}
	var retval *conversation_conversation.ClearConversationHistoryResponse
	if retval, err2 = p.handler.ClearConversationHistory(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearConversationHistory: "+err2.Error())
		oprot.WriteMessageBegin("ClearConversationHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearConversationHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorRegisterPluginMeta struct {
	handler CozeService
}

func (p *cozeServiceProcessorRegisterPluginMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceRegisterPluginMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RegisterPluginMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceRegisterPluginMetaResult{}
	var retval *plugin.RegisterPluginMetaResponse
	if retval, err2 = p.handler.RegisterPluginMeta(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterPluginMeta: "+err2.Error())
		oprot.WriteMessageBegin("RegisterPluginMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RegisterPluginMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdatePluginMeta struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdatePluginMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdatePluginMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePluginMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdatePluginMetaResult{}
	var retval *plugin.UpdatePluginMetaResponse
	if retval, err2 = p.handler.UpdatePluginMeta(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePluginMeta: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePluginMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePluginMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdatePlugin struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdatePlugin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdatePluginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePlugin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdatePluginResult{}
	var retval *plugin.UpdatePluginResponse
	if retval, err2 = p.handler.UpdatePlugin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePlugin: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePlugin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePlugin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDelPlugin struct {
	handler CozeService
}

func (p *cozeServiceProcessorDelPlugin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDelPluginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DelPlugin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDelPluginResult{}
	var retval *plugin.DelPluginResponse
	if retval, err2 = p.handler.DelPlugin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelPlugin: "+err2.Error())
		oprot.WriteMessageBegin("DelPlugin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DelPlugin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetPlaygroundPluginList struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetPlaygroundPluginList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetPlaygroundPluginListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPlaygroundPluginList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetPlaygroundPluginListResult{}
	var retval *plugin.GetPlaygroundPluginListResponse
	if retval, err2 = p.handler.GetPlaygroundPluginList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPlaygroundPluginList: "+err2.Error())
		oprot.WriteMessageBegin("GetPlaygroundPluginList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPlaygroundPluginList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetPluginAPIs struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetPluginAPIs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetPluginAPIsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPluginAPIs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetPluginAPIsResult{}
	var retval *plugin.GetPluginAPIsResponse
	if retval, err2 = p.handler.GetPluginAPIs(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPluginAPIs: "+err2.Error())
		oprot.WriteMessageBegin("GetPluginAPIs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPluginAPIs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetPluginInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetPluginInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetPluginInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPluginInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetPluginInfoResult{}
	var retval *plugin.GetPluginInfoResponse
	if retval, err2 = p.handler.GetPluginInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPluginInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetPluginInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPluginInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetUpdatedAPIs struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetUpdatedAPIs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetUpdatedAPIsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUpdatedAPIs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetUpdatedAPIsResult{}
	var retval *plugin.GetUpdatedAPIsResponse
	if retval, err2 = p.handler.GetUpdatedAPIs(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUpdatedAPIs: "+err2.Error())
		oprot.WriteMessageBegin("GetUpdatedAPIs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUpdatedAPIs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorPublishPlugin struct {
	handler CozeService
}

func (p *cozeServiceProcessorPublishPlugin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServicePublishPluginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PublishPlugin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServicePublishPluginResult{}
	var retval *plugin.PublishPluginResponse
	if retval, err2 = p.handler.PublishPlugin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PublishPlugin: "+err2.Error())
		oprot.WriteMessageBegin("PublishPlugin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PublishPlugin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetBotDefaultParams struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetBotDefaultParams) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetBotDefaultParamsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBotDefaultParams", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetBotDefaultParamsResult{}
	var retval *plugin.GetBotDefaultParamsResponse
	if retval, err2 = p.handler.GetBotDefaultParams(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBotDefaultParams: "+err2.Error())
		oprot.WriteMessageBegin("GetBotDefaultParams", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBotDefaultParams", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateBotDefaultParams struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateBotDefaultParams) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateBotDefaultParamsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateBotDefaultParams", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateBotDefaultParamsResult{}
	var retval *plugin.UpdateBotDefaultParamsResponse
	if retval, err2 = p.handler.UpdateBotDefaultParams(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBotDefaultParams: "+err2.Error())
		oprot.WriteMessageBegin("UpdateBotDefaultParams", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateBotDefaultParams", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteBotDefaultParams struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteBotDefaultParams) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteBotDefaultParamsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBotDefaultParams", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteBotDefaultParamsResult{}
	var retval *plugin.DeleteBotDefaultParamsResponse
	if retval, err2 = p.handler.DeleteBotDefaultParams(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBotDefaultParams: "+err2.Error())
		oprot.WriteMessageBegin("DeleteBotDefaultParams", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteBotDefaultParams", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateAPI struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateAPIResult{}
	var retval *plugin.CreateAPIResponse
	if retval, err2 = p.handler.CreateAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateAPI: "+err2.Error())
		oprot.WriteMessageBegin("CreateAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateAPI struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateAPIResult{}
	var retval *plugin.UpdateAPIResponse
	if retval, err2 = p.handler.UpdateAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdateAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteAPI struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteAPIResult{}
	var retval *plugin.DeleteAPIResponse
	if retval, err2 = p.handler.DeleteAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteAPI: "+err2.Error())
		oprot.WriteMessageBegin("DeleteAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateWorkflowResult{}
	var retval *workflow.CreateWorkflowResponse
	if retval, err2 = p.handler.CreateWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("CreateWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetCanvasInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetCanvasInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetCanvasInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCanvasInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetCanvasInfoResult{}
	var retval *workflow.GetCanvasInfoResponse
	if retval, err2 = p.handler.GetCanvasInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCanvasInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetCanvasInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCanvasInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorSaveWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorSaveWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceSaveWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SaveWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceSaveWorkflowResult{}
	var retval *workflow.SaveWorkflowResponse
	if retval, err2 = p.handler.SaveWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("SaveWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SaveWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateWorkflowMeta struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateWorkflowMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateWorkflowMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateWorkflowMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateWorkflowMetaResult{}
	var retval *workflow.UpdateWorkflowMetaResponse
	if retval, err2 = p.handler.UpdateWorkflowMeta(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateWorkflowMeta: "+err2.Error())
		oprot.WriteMessageBegin("UpdateWorkflowMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateWorkflowMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteWorkflowResult{}
	var retval *workflow.DeleteWorkflowResponse
	if retval, err2 = p.handler.DeleteWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("DeleteWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorBatchDeleteWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorBatchDeleteWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceBatchDeleteWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceBatchDeleteWorkflowResult{}
	var retval *workflow.BatchDeleteWorkflowResponse
	if retval, err2 = p.handler.BatchDeleteWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetDeleteStrategy struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetDeleteStrategy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetDeleteStrategyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeleteStrategy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetDeleteStrategyResult{}
	var retval *workflow.GetDeleteStrategyResponse
	if retval, err2 = p.handler.GetDeleteStrategy(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeleteStrategy: "+err2.Error())
		oprot.WriteMessageBegin("GetDeleteStrategy", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeleteStrategy", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorPublishWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorPublishWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServicePublishWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PublishWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServicePublishWorkflowResult{}
	var retval *workflow.PublishWorkflowResponse
	if retval, err2 = p.handler.PublishWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PublishWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("PublishWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PublishWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCopyWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorCopyWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCopyWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CopyWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCopyWorkflowResult{}
	var retval *workflow.CopyWorkflowResponse
	if retval, err2 = p.handler.CopyWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CopyWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("CopyWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CopyWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCopyWkTemplateApi struct {
	handler CozeService
}

func (p *cozeServiceProcessorCopyWkTemplateApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCopyWkTemplateApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CopyWkTemplateApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCopyWkTemplateApiResult{}
	var retval *workflow.CopyWkTemplateApiResponse
	if retval, err2 = p.handler.CopyWkTemplateApi(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CopyWkTemplateApi: "+err2.Error())
		oprot.WriteMessageBegin("CopyWkTemplateApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CopyWkTemplateApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetReleasedWorkflows struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetReleasedWorkflows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetReleasedWorkflowsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetReleasedWorkflows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetReleasedWorkflowsResult{}
	var retval *workflow.GetReleasedWorkflowsResponse
	if retval, err2 = p.handler.GetReleasedWorkflows(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetReleasedWorkflows: "+err2.Error())
		oprot.WriteMessageBegin("GetReleasedWorkflows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetReleasedWorkflows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetWorkflowReferences struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetWorkflowReferences) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetWorkflowReferencesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWorkflowReferences", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetWorkflowReferencesResult{}
	var retval *workflow.GetWorkflowReferencesResponse
	if retval, err2 = p.handler.GetWorkflowReferences(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkflowReferences: "+err2.Error())
		oprot.WriteMessageBegin("GetWorkflowReferences", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWorkflowReferences", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetWorkFlowList struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetWorkFlowList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetWorkFlowListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWorkFlowList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetWorkFlowListResult{}
	var retval *workflow.GetWorkFlowListResponse
	if retval, err2 = p.handler.GetWorkFlowList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkFlowList: "+err2.Error())
		oprot.WriteMessageBegin("GetWorkFlowList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWorkFlowList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorQueryWorkflowNodeTypes struct {
	handler CozeService
}

func (p *cozeServiceProcessorQueryWorkflowNodeTypes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceQueryWorkflowNodeTypesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryWorkflowNodeTypes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceQueryWorkflowNodeTypesResult{}
	var retval *workflow.QueryWorkflowNodeTypeResponse
	if retval, err2 = p.handler.QueryWorkflowNodeTypes(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryWorkflowNodeTypes: "+err2.Error())
		oprot.WriteMessageBegin("QueryWorkflowNodeTypes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryWorkflowNodeTypes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorNodeTemplateList struct {
	handler CozeService
}

func (p *cozeServiceProcessorNodeTemplateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceNodeTemplateListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("NodeTemplateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceNodeTemplateListResult{}
	var retval *workflow.NodeTemplateListResponse
	if retval, err2 = p.handler.NodeTemplateList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing NodeTemplateList: "+err2.Error())
		oprot.WriteMessageBegin("NodeTemplateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("NodeTemplateList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorNodePanelSearch struct {
	handler CozeService
}

func (p *cozeServiceProcessorNodePanelSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceNodePanelSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("NodePanelSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceNodePanelSearchResult{}
	var retval *workflow.NodePanelSearchResponse
	if retval, err2 = p.handler.NodePanelSearch(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing NodePanelSearch: "+err2.Error())
		oprot.WriteMessageBegin("NodePanelSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("NodePanelSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetLLMNodeFCSettingsMerged struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetLLMNodeFCSettingsMerged) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetLLMNodeFCSettingsMergedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLLMNodeFCSettingsMerged", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetLLMNodeFCSettingsMergedResult{}
	var retval *workflow.GetLLMNodeFCSettingsMergedResponse
	if retval, err2 = p.handler.GetLLMNodeFCSettingsMerged(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLLMNodeFCSettingsMerged: "+err2.Error())
		oprot.WriteMessageBegin("GetLLMNodeFCSettingsMerged", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLLMNodeFCSettingsMerged", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetLLMNodeFCSettingDetail struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetLLMNodeFCSettingDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetLLMNodeFCSettingDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLLMNodeFCSettingDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetLLMNodeFCSettingDetailResult{}
	var retval *workflow.GetLLMNodeFCSettingDetailResponse
	if retval, err2 = p.handler.GetLLMNodeFCSettingDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLLMNodeFCSettingDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetLLMNodeFCSettingDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLLMNodeFCSettingDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorWorkFlowTestRun struct {
	handler CozeService
}

func (p *cozeServiceProcessorWorkFlowTestRun) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceWorkFlowTestRunArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("WorkFlowTestRun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceWorkFlowTestRunResult{}
	var retval *workflow.WorkFlowTestRunResponse
	if retval, err2 = p.handler.WorkFlowTestRun(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WorkFlowTestRun: "+err2.Error())
		oprot.WriteMessageBegin("WorkFlowTestRun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("WorkFlowTestRun", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorWorkFlowTestResume struct {
	handler CozeService
}

func (p *cozeServiceProcessorWorkFlowTestResume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceWorkFlowTestResumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("WorkFlowTestResume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceWorkFlowTestResumeResult{}
	var retval *workflow.WorkflowTestResumeResponse
	if retval, err2 = p.handler.WorkFlowTestResume(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WorkFlowTestResume: "+err2.Error())
		oprot.WriteMessageBegin("WorkFlowTestResume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("WorkFlowTestResume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCancelWorkFlow struct {
	handler CozeService
}

func (p *cozeServiceProcessorCancelWorkFlow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCancelWorkFlowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CancelWorkFlow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCancelWorkFlowResult{}
	var retval *workflow.CancelWorkFlowResponse
	if retval, err2 = p.handler.CancelWorkFlow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelWorkFlow: "+err2.Error())
		oprot.WriteMessageBegin("CancelWorkFlow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CancelWorkFlow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetWorkFlowProcess struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetWorkFlowProcess) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetWorkFlowProcessArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWorkFlowProcess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetWorkFlowProcessResult{}
	var retval *workflow.GetWorkflowProcessResponse
	if retval, err2 = p.handler.GetWorkFlowProcess(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkFlowProcess: "+err2.Error())
		oprot.WriteMessageBegin("GetWorkFlowProcess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWorkFlowProcess", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetNodeExecuteHistory struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetNodeExecuteHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetNodeExecuteHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNodeExecuteHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetNodeExecuteHistoryResult{}
	var retval *workflow.GetNodeExecuteHistoryResponse
	if retval, err2 = p.handler.GetNodeExecuteHistory(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodeExecuteHistory: "+err2.Error())
		oprot.WriteMessageBegin("GetNodeExecuteHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNodeExecuteHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetApiDetail struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetApiDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetApiDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetApiDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetApiDetailResult{}
	var retval *workflow.GetApiDetailResponse
	if retval, err2 = p.handler.GetApiDetail(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetApiDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetApiDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetApiDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorWorkflowNodeDebugV2 struct {
	handler CozeService
}

func (p *cozeServiceProcessorWorkflowNodeDebugV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceWorkflowNodeDebugV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("WorkflowNodeDebugV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceWorkflowNodeDebugV2Result{}
	var retval *workflow.WorkflowNodeDebugV2Response
	if retval, err2 = p.handler.WorkflowNodeDebugV2(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WorkflowNodeDebugV2: "+err2.Error())
		oprot.WriteMessageBegin("WorkflowNodeDebugV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("WorkflowNodeDebugV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorSignImageURL struct {
	handler CozeService
}

func (p *cozeServiceProcessorSignImageURL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceSignImageURLArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SignImageURL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceSignImageURLResult{}
	var retval *workflow.SignImageURLResponse
	if retval, err2 = p.handler.SignImageURL(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SignImageURL: "+err2.Error())
		oprot.WriteMessageBegin("SignImageURL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SignImageURL", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateProjectConversationDef struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateProjectConversationDef) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateProjectConversationDefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateProjectConversationDefResult{}
	var retval *workflow.CreateProjectConversationDefResponse
	if retval, err2 = p.handler.CreateProjectConversationDef(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateProjectConversationDef: "+err2.Error())
		oprot.WriteMessageBegin("CreateProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateProjectConversationDef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateProjectConversationDef struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateProjectConversationDef) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateProjectConversationDefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateProjectConversationDefResult{}
	var retval *workflow.UpdateProjectConversationDefResponse
	if retval, err2 = p.handler.UpdateProjectConversationDef(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateProjectConversationDef: "+err2.Error())
		oprot.WriteMessageBegin("UpdateProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateProjectConversationDef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteProjectConversationDef struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteProjectConversationDef) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteProjectConversationDefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteProjectConversationDefResult{}
	var retval *workflow.DeleteProjectConversationDefResponse
	if retval, err2 = p.handler.DeleteProjectConversationDef(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteProjectConversationDef: "+err2.Error())
		oprot.WriteMessageBegin("DeleteProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteProjectConversationDef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListProjectConversationDef struct {
	handler CozeService
}

func (p *cozeServiceProcessorListProjectConversationDef) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListProjectConversationDefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListProjectConversationDefResult{}
	var retval *workflow.ListProjectConversationResponse
	if retval, err2 = p.handler.ListProjectConversationDef(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListProjectConversationDef: "+err2.Error())
		oprot.WriteMessageBegin("ListProjectConversationDef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListProjectConversationDef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListRootSpans struct {
	handler CozeService
}

func (p *cozeServiceProcessorListRootSpans) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListRootSpansArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListRootSpans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListRootSpansResult{}
	var retval *workflow.ListRootSpansResponse
	if retval, err2 = p.handler.ListRootSpans(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListRootSpans: "+err2.Error())
		oprot.WriteMessageBegin("ListRootSpans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListRootSpans", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetTraceSDK struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetTraceSDK) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetTraceSDKArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTraceSDK", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetTraceSDKResult{}
	var retval *workflow.GetTraceSDKResponse
	if retval, err2 = p.handler.GetTraceSDK(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTraceSDK: "+err2.Error())
		oprot.WriteMessageBegin("GetTraceSDK", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTraceSDK", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetWorkflowDetail struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetWorkflowDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetWorkflowDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWorkflowDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetWorkflowDetailResult{}
	var retval *workflow.GetWorkflowDetailResponse
	if retval, err2 = p.handler.GetWorkflowDetail(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkflowDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetWorkflowDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWorkflowDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetWorkflowDetailInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetWorkflowDetailInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetWorkflowDetailInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWorkflowDetailInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetWorkflowDetailInfoResult{}
	var retval *workflow.GetWorkflowDetailInfoResponse
	if retval, err2 = p.handler.GetWorkflowDetailInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkflowDetailInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetWorkflowDetailInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWorkflowDetailInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorValidateTree struct {
	handler CozeService
}

func (p *cozeServiceProcessorValidateTree) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceValidateTreeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ValidateTree", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceValidateTreeResult{}
	var retval *workflow.ValidateTreeResponse
	if retval, err2 = p.handler.ValidateTree(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateTree: "+err2.Error())
		oprot.WriteMessageBegin("ValidateTree", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ValidateTree", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetChatFlowRole struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetChatFlowRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetChatFlowRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetChatFlowRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetChatFlowRoleResult{}
	var retval *workflow.GetChatFlowRoleResponse
	if retval, err2 = p.handler.GetChatFlowRole(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChatFlowRole: "+err2.Error())
		oprot.WriteMessageBegin("GetChatFlowRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetChatFlowRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateChatFlowRole struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateChatFlowRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateChatFlowRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateChatFlowRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateChatFlowRoleResult{}
	var retval *workflow.CreateChatFlowRoleResponse
	if retval, err2 = p.handler.CreateChatFlowRole(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateChatFlowRole: "+err2.Error())
		oprot.WriteMessageBegin("CreateChatFlowRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateChatFlowRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteChatFlowRole struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteChatFlowRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteChatFlowRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteChatFlowRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteChatFlowRoleResult{}
	var retval *workflow.DeleteChatFlowRoleResponse
	if retval, err2 = p.handler.DeleteChatFlowRole(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteChatFlowRole: "+err2.Error())
		oprot.WriteMessageBegin("DeleteChatFlowRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteChatFlowRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListPublishWorkflow struct {
	handler CozeService
}

func (p *cozeServiceProcessorListPublishWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListPublishWorkflowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPublishWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListPublishWorkflowResult{}
	var retval *workflow.ListPublishWorkflowResponse
	if retval, err2 = p.handler.ListPublishWorkflow(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPublishWorkflow: "+err2.Error())
		oprot.WriteMessageBegin("ListPublishWorkflow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPublishWorkflow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateDataset struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateDatasetResult{}
	var retval *dataset.CreateDatasetResponse
	if retval, err2 = p.handler.CreateDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDataset: "+err2.Error())
		oprot.WriteMessageBegin("CreateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDatasetDetail struct {
	handler CozeService
}

func (p *cozeServiceProcessorDatasetDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDatasetDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DatasetDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDatasetDetailResult{}
	var retval *dataset.DatasetDetailResponse
	if retval, err2 = p.handler.DatasetDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DatasetDetail: "+err2.Error())
		oprot.WriteMessageBegin("DatasetDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DatasetDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListDataset struct {
	handler CozeService
}

func (p *cozeServiceProcessorListDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListDatasetResult{}
	var retval *dataset.ListDatasetResponse
	if retval, err2 = p.handler.ListDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDataset: "+err2.Error())
		oprot.WriteMessageBegin("ListDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteDataset struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteDatasetResult{}
	var retval *dataset.DeleteDatasetResponse
	if retval, err2 = p.handler.DeleteDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDataset: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateDataset struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateDatasetResult{}
	var retval *dataset.UpdateDatasetResponse
	if retval, err2 = p.handler.UpdateDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDataset: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateDocument struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateDocument) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateDocumentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateDocumentResult{}
	var retval *dataset.CreateDocumentResponse
	if retval, err2 = p.handler.CreateDocument(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDocument: "+err2.Error())
		oprot.WriteMessageBegin("CreateDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDocument", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListDocument struct {
	handler CozeService
}

func (p *cozeServiceProcessorListDocument) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListDocumentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListDocumentResult{}
	var retval *dataset.ListDocumentResponse
	if retval, err2 = p.handler.ListDocument(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDocument: "+err2.Error())
		oprot.WriteMessageBegin("ListDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDocument", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteDocument struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteDocument) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteDocumentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteDocumentResult{}
	var retval *dataset.DeleteDocumentResponse
	if retval, err2 = p.handler.DeleteDocument(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDocument: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDocument", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateDocument struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateDocument) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateDocumentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateDocumentResult{}
	var retval *dataset.UpdateDocumentResponse
	if retval, err2 = p.handler.UpdateDocument(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDocument: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDocument", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDocument", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetDocumentProgress struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetDocumentProgress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetDocumentProgressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDocumentProgress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetDocumentProgressResult{}
	var retval *dataset.GetDocumentProgressResponse
	if retval, err2 = p.handler.GetDocumentProgress(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDocumentProgress: "+err2.Error())
		oprot.WriteMessageBegin("GetDocumentProgress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDocumentProgress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorResegment struct {
	handler CozeService
}

func (p *cozeServiceProcessorResegment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceResegmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Resegment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceResegmentResult{}
	var retval *dataset.ResegmentResponse
	if retval, err2 = p.handler.Resegment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Resegment: "+err2.Error())
		oprot.WriteMessageBegin("Resegment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Resegment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdatePhotoCaption struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdatePhotoCaption) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdatePhotoCaptionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePhotoCaption", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdatePhotoCaptionResult{}
	var retval *dataset.UpdatePhotoCaptionResponse
	if retval, err2 = p.handler.UpdatePhotoCaption(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePhotoCaption: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePhotoCaption", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePhotoCaption", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListPhoto struct {
	handler CozeService
}

func (p *cozeServiceProcessorListPhoto) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListPhotoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListPhotoResult{}
	var retval *dataset.ListPhotoResponse
	if retval, err2 = p.handler.ListPhoto(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPhoto: "+err2.Error())
		oprot.WriteMessageBegin("ListPhoto", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPhoto", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorPhotoDetail struct {
	handler CozeService
}

func (p *cozeServiceProcessorPhotoDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServicePhotoDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PhotoDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServicePhotoDetailResult{}
	var retval *dataset.PhotoDetailResponse
	if retval, err2 = p.handler.PhotoDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PhotoDetail: "+err2.Error())
		oprot.WriteMessageBegin("PhotoDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PhotoDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetTableSchema struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetTableSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetTableSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTableSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetTableSchemaResult{}
	var retval *dataset.GetTableSchemaResponse
	if retval, err2 = p.handler.GetTableSchema(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTableSchema: "+err2.Error())
		oprot.WriteMessageBegin("GetTableSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTableSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorValidateTableSchema struct {
	handler CozeService
}

func (p *cozeServiceProcessorValidateTableSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceValidateTableSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ValidateTableSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceValidateTableSchemaResult{}
	var retval *dataset.ValidateTableSchemaResponse
	if retval, err2 = p.handler.ValidateTableSchema(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateTableSchema: "+err2.Error())
		oprot.WriteMessageBegin("ValidateTableSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ValidateTableSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorGetDocumentTableInfo struct {
	handler CozeService
}

func (p *cozeServiceProcessorGetDocumentTableInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceGetDocumentTableInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDocumentTableInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceGetDocumentTableInfoResult{}
	var retval *document2.GetDocumentTableInfoResponse
	if retval, err2 = p.handler.GetDocumentTableInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDocumentTableInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetDocumentTableInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDocumentTableInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorDeleteSlice struct {
	handler CozeService
}

func (p *cozeServiceProcessorDeleteSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceDeleteSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceDeleteSliceResult{}
	var retval *dataset.DeleteSliceResponse
	if retval, err2 = p.handler.DeleteSlice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteSlice: "+err2.Error())
		oprot.WriteMessageBegin("DeleteSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorCreateSlice struct {
	handler CozeService
}

func (p *cozeServiceProcessorCreateSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceCreateSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceCreateSliceResult{}
	var retval *dataset.CreateSliceResponse
	if retval, err2 = p.handler.CreateSlice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSlice: "+err2.Error())
		oprot.WriteMessageBegin("CreateSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorUpdateSlice struct {
	handler CozeService
}

func (p *cozeServiceProcessorUpdateSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceUpdateSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceUpdateSliceResult{}
	var retval *dataset.UpdateSliceResponse
	if retval, err2 = p.handler.UpdateSlice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateSlice: "+err2.Error())
		oprot.WriteMessageBegin("UpdateSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cozeServiceProcessorListSlice struct {
	handler CozeService
}

func (p *cozeServiceProcessorListSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CozeServiceListSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CozeServiceListSliceResult{}
	var retval *dataset.ListSliceResponse
	if retval, err2 = p.handler.ListSlice(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSlice: "+err2.Error())
		oprot.WriteMessageBegin("ListSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CozeServiceUpsertPromptResourceArgs struct {
	Request *prompt.UpsertPromptResourceRequest `thrift:"request,1"`
}

func NewCozeServiceUpsertPromptResourceArgs() *CozeServiceUpsertPromptResourceArgs {
	return &CozeServiceUpsertPromptResourceArgs{}
}

func (p *CozeServiceUpsertPromptResourceArgs) InitDefault() {
}

var CozeServiceUpsertPromptResourceArgs_Request_DEFAULT *prompt.UpsertPromptResourceRequest

func (p *CozeServiceUpsertPromptResourceArgs) GetRequest() (v *prompt.UpsertPromptResourceRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpsertPromptResourceArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpsertPromptResourceArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpsertPromptResourceArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpsertPromptResourceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpsertPromptResourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewUpsertPromptResourceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpsertPromptResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertPromptResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpsertPromptResourceArgs(%+v)", *p)

}

type CozeServiceUpsertPromptResourceResult struct {
	Success *prompt.UpsertPromptResourceResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpsertPromptResourceResult() *CozeServiceUpsertPromptResourceResult {
	return &CozeServiceUpsertPromptResourceResult{}
}

func (p *CozeServiceUpsertPromptResourceResult) InitDefault() {
}

var CozeServiceUpsertPromptResourceResult_Success_DEFAULT *prompt.UpsertPromptResourceResponse

func (p *CozeServiceUpsertPromptResourceResult) GetSuccess() (v *prompt.UpsertPromptResourceResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpsertPromptResourceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpsertPromptResourceResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpsertPromptResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpsertPromptResourceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpsertPromptResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := prompt.NewUpsertPromptResourceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpsertPromptResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpsertPromptResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpsertPromptResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpsertPromptResourceResult(%+v)", *p)

}

type CozeServiceUpdateDraftBotInfoArgs struct {
	Request *agent.UpdateDraftBotInfoRequest `thrift:"request,1"`
}

func NewCozeServiceUpdateDraftBotInfoArgs() *CozeServiceUpdateDraftBotInfoArgs {
	return &CozeServiceUpdateDraftBotInfoArgs{}
}

func (p *CozeServiceUpdateDraftBotInfoArgs) InitDefault() {
}

var CozeServiceUpdateDraftBotInfoArgs_Request_DEFAULT *agent.UpdateDraftBotInfoRequest

func (p *CozeServiceUpdateDraftBotInfoArgs) GetRequest() (v *agent.UpdateDraftBotInfoRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdateDraftBotInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdateDraftBotInfoArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdateDraftBotInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdateDraftBotInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDraftBotInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := agent.NewUpdateDraftBotInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdateDraftBotInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDraftBotInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDraftBotInfoArgs(%+v)", *p)

}

type CozeServiceUpdateDraftBotInfoResult struct {
	Success *agent.UpdateDraftBotInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateDraftBotInfoResult() *CozeServiceUpdateDraftBotInfoResult {
	return &CozeServiceUpdateDraftBotInfoResult{}
}

func (p *CozeServiceUpdateDraftBotInfoResult) InitDefault() {
}

var CozeServiceUpdateDraftBotInfoResult_Success_DEFAULT *agent.UpdateDraftBotInfoResponse

func (p *CozeServiceUpdateDraftBotInfoResult) GetSuccess() (v *agent.UpdateDraftBotInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateDraftBotInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateDraftBotInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateDraftBotInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateDraftBotInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDraftBotInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := agent.NewUpdateDraftBotInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateDraftBotInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDraftBotInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateDraftBotInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDraftBotInfoResult(%+v)", *p)

}

type CozeServiceDraftBotCreateArgs struct {
	Request *agent.DraftBotCreateRequest `thrift:"request,1"`
}

func NewCozeServiceDraftBotCreateArgs() *CozeServiceDraftBotCreateArgs {
	return &CozeServiceDraftBotCreateArgs{}
}

func (p *CozeServiceDraftBotCreateArgs) InitDefault() {
}

var CozeServiceDraftBotCreateArgs_Request_DEFAULT *agent.DraftBotCreateRequest

func (p *CozeServiceDraftBotCreateArgs) GetRequest() (v *agent.DraftBotCreateRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDraftBotCreateArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDraftBotCreateArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDraftBotCreateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDraftBotCreateArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDraftBotCreateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDraftBotCreateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := agent.NewDraftBotCreateRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDraftBotCreateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DraftBotCreate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDraftBotCreateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDraftBotCreateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDraftBotCreateArgs(%+v)", *p)

}

type CozeServiceDraftBotCreateResult struct {
	Success *agent.DraftBotCreateResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDraftBotCreateResult() *CozeServiceDraftBotCreateResult {
	return &CozeServiceDraftBotCreateResult{}
}

func (p *CozeServiceDraftBotCreateResult) InitDefault() {
}

var CozeServiceDraftBotCreateResult_Success_DEFAULT *agent.DraftBotCreateResponse

func (p *CozeServiceDraftBotCreateResult) GetSuccess() (v *agent.DraftBotCreateResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDraftBotCreateResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDraftBotCreateResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDraftBotCreateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDraftBotCreateResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDraftBotCreateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDraftBotCreateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := agent.NewDraftBotCreateResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDraftBotCreateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DraftBotCreate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDraftBotCreateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDraftBotCreateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDraftBotCreateResult(%+v)", *p)

}

type CozeServiceGetDraftBotInfoArgs struct {
	Request *agent.GetDraftBotInfoRequest `thrift:"request,1"`
}

func NewCozeServiceGetDraftBotInfoArgs() *CozeServiceGetDraftBotInfoArgs {
	return &CozeServiceGetDraftBotInfoArgs{}
}

func (p *CozeServiceGetDraftBotInfoArgs) InitDefault() {
}

var CozeServiceGetDraftBotInfoArgs_Request_DEFAULT *agent.GetDraftBotInfoRequest

func (p *CozeServiceGetDraftBotInfoArgs) GetRequest() (v *agent.GetDraftBotInfoRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetDraftBotInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetDraftBotInfoArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetDraftBotInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetDraftBotInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDraftBotInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDraftBotInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := agent.NewGetDraftBotInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetDraftBotInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDraftBotInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDraftBotInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetDraftBotInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDraftBotInfoArgs(%+v)", *p)

}

type CozeServiceGetDraftBotInfoResult struct {
	Success *agent.GetDraftBotInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetDraftBotInfoResult() *CozeServiceGetDraftBotInfoResult {
	return &CozeServiceGetDraftBotInfoResult{}
}

func (p *CozeServiceGetDraftBotInfoResult) InitDefault() {
}

var CozeServiceGetDraftBotInfoResult_Success_DEFAULT *agent.GetDraftBotInfoResponse

func (p *CozeServiceGetDraftBotInfoResult) GetSuccess() (v *agent.GetDraftBotInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetDraftBotInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetDraftBotInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetDraftBotInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetDraftBotInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDraftBotInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDraftBotInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := agent.NewGetDraftBotInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetDraftBotInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDraftBotInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDraftBotInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetDraftBotInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDraftBotInfoResult(%+v)", *p)

}

type CozeServiceDelProfileMemoryArgs struct {
	Req *kvmemory.DelProfileMemoryRequest `thrift:"req,1"`
}

func NewCozeServiceDelProfileMemoryArgs() *CozeServiceDelProfileMemoryArgs {
	return &CozeServiceDelProfileMemoryArgs{}
}

func (p *CozeServiceDelProfileMemoryArgs) InitDefault() {
}

var CozeServiceDelProfileMemoryArgs_Req_DEFAULT *kvmemory.DelProfileMemoryRequest

func (p *CozeServiceDelProfileMemoryArgs) GetReq() (v *kvmemory.DelProfileMemoryRequest) {
	if !p.IsSetReq() {
		return CozeServiceDelProfileMemoryArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceDelProfileMemoryArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceDelProfileMemoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceDelProfileMemoryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDelProfileMemoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDelProfileMemoryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := kvmemory.NewDelProfileMemoryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceDelProfileMemoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelProfileMemory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDelProfileMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDelProfileMemoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDelProfileMemoryArgs(%+v)", *p)

}

type CozeServiceDelProfileMemoryResult struct {
	Success *kvmemory.DelProfileMemoryResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDelProfileMemoryResult() *CozeServiceDelProfileMemoryResult {
	return &CozeServiceDelProfileMemoryResult{}
}

func (p *CozeServiceDelProfileMemoryResult) InitDefault() {
}

var CozeServiceDelProfileMemoryResult_Success_DEFAULT *kvmemory.DelProfileMemoryResponse

func (p *CozeServiceDelProfileMemoryResult) GetSuccess() (v *kvmemory.DelProfileMemoryResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDelProfileMemoryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDelProfileMemoryResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDelProfileMemoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDelProfileMemoryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDelProfileMemoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDelProfileMemoryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := kvmemory.NewDelProfileMemoryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDelProfileMemoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelProfileMemory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDelProfileMemoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDelProfileMemoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDelProfileMemoryResult(%+v)", *p)

}

type CozeServiceGetPlayGroundMemoryArgs struct {
	Req *kvmemory.GetProfileMemoryRequest `thrift:"req,1"`
}

func NewCozeServiceGetPlayGroundMemoryArgs() *CozeServiceGetPlayGroundMemoryArgs {
	return &CozeServiceGetPlayGroundMemoryArgs{}
}

func (p *CozeServiceGetPlayGroundMemoryArgs) InitDefault() {
}

var CozeServiceGetPlayGroundMemoryArgs_Req_DEFAULT *kvmemory.GetProfileMemoryRequest

func (p *CozeServiceGetPlayGroundMemoryArgs) GetReq() (v *kvmemory.GetProfileMemoryRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetPlayGroundMemoryArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetPlayGroundMemoryArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetPlayGroundMemoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetPlayGroundMemoryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPlayGroundMemoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPlayGroundMemoryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := kvmemory.NewGetProfileMemoryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetPlayGroundMemoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPlayGroundMemory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPlayGroundMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetPlayGroundMemoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPlayGroundMemoryArgs(%+v)", *p)

}

type CozeServiceGetPlayGroundMemoryResult struct {
	Success *kvmemory.GetProfileMemoryResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetPlayGroundMemoryResult() *CozeServiceGetPlayGroundMemoryResult {
	return &CozeServiceGetPlayGroundMemoryResult{}
}

func (p *CozeServiceGetPlayGroundMemoryResult) InitDefault() {
}

var CozeServiceGetPlayGroundMemoryResult_Success_DEFAULT *kvmemory.GetProfileMemoryResponse

func (p *CozeServiceGetPlayGroundMemoryResult) GetSuccess() (v *kvmemory.GetProfileMemoryResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetPlayGroundMemoryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetPlayGroundMemoryResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetPlayGroundMemoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetPlayGroundMemoryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPlayGroundMemoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPlayGroundMemoryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := kvmemory.NewGetProfileMemoryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetPlayGroundMemoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPlayGroundMemory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPlayGroundMemoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetPlayGroundMemoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPlayGroundMemoryResult(%+v)", *p)

}

type CozeServiceGetSysVariableConfArgs struct {
	Req *kvmemory.GetSysVariableConfRequest `thrift:"req,1"`
}

func NewCozeServiceGetSysVariableConfArgs() *CozeServiceGetSysVariableConfArgs {
	return &CozeServiceGetSysVariableConfArgs{}
}

func (p *CozeServiceGetSysVariableConfArgs) InitDefault() {
}

var CozeServiceGetSysVariableConfArgs_Req_DEFAULT *kvmemory.GetSysVariableConfRequest

func (p *CozeServiceGetSysVariableConfArgs) GetReq() (v *kvmemory.GetSysVariableConfRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetSysVariableConfArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetSysVariableConfArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetSysVariableConfArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetSysVariableConfArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetSysVariableConfArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetSysVariableConfArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := kvmemory.NewGetSysVariableConfRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetSysVariableConfArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSysVariableConf_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetSysVariableConfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetSysVariableConfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetSysVariableConfArgs(%+v)", *p)

}

type CozeServiceGetSysVariableConfResult struct {
	Success *kvmemory.GetSysVariableConfResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetSysVariableConfResult() *CozeServiceGetSysVariableConfResult {
	return &CozeServiceGetSysVariableConfResult{}
}

func (p *CozeServiceGetSysVariableConfResult) InitDefault() {
}

var CozeServiceGetSysVariableConfResult_Success_DEFAULT *kvmemory.GetSysVariableConfResponse

func (p *CozeServiceGetSysVariableConfResult) GetSuccess() (v *kvmemory.GetSysVariableConfResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetSysVariableConfResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetSysVariableConfResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetSysVariableConfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetSysVariableConfResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetSysVariableConfResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetSysVariableConfResult) ReadField0(iprot thrift.TProtocol) error {
	_field := kvmemory.NewGetSysVariableConfResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetSysVariableConfResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSysVariableConf_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetSysVariableConfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetSysVariableConfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetSysVariableConfResult(%+v)", *p)

}

type CozeServiceSetKvMemoryArgs struct {
	Req *kvmemory.SetKvMemoryReq `thrift:"req,1"`
}

func NewCozeServiceSetKvMemoryArgs() *CozeServiceSetKvMemoryArgs {
	return &CozeServiceSetKvMemoryArgs{}
}

func (p *CozeServiceSetKvMemoryArgs) InitDefault() {
}

var CozeServiceSetKvMemoryArgs_Req_DEFAULT *kvmemory.SetKvMemoryReq

func (p *CozeServiceSetKvMemoryArgs) GetReq() (v *kvmemory.SetKvMemoryReq) {
	if !p.IsSetReq() {
		return CozeServiceSetKvMemoryArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceSetKvMemoryArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceSetKvMemoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceSetKvMemoryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceSetKvMemoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceSetKvMemoryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := kvmemory.NewSetKvMemoryReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceSetKvMemoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetKvMemory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceSetKvMemoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceSetKvMemoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceSetKvMemoryArgs(%+v)", *p)

}

type CozeServiceSetKvMemoryResult struct {
	Success *kvmemory.SetKvMemoryResp `thrift:"success,0,optional"`
}

func NewCozeServiceSetKvMemoryResult() *CozeServiceSetKvMemoryResult {
	return &CozeServiceSetKvMemoryResult{}
}

func (p *CozeServiceSetKvMemoryResult) InitDefault() {
}

var CozeServiceSetKvMemoryResult_Success_DEFAULT *kvmemory.SetKvMemoryResp

func (p *CozeServiceSetKvMemoryResult) GetSuccess() (v *kvmemory.SetKvMemoryResp) {
	if !p.IsSetSuccess() {
		return CozeServiceSetKvMemoryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceSetKvMemoryResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceSetKvMemoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceSetKvMemoryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceSetKvMemoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceSetKvMemoryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := kvmemory.NewSetKvMemoryResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceSetKvMemoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetKvMemory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceSetKvMemoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceSetKvMemoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceSetKvMemoryResult(%+v)", *p)

}

type CozeServiceGetProjectVariableListArgs struct {
	Req *project_memory.GetProjectVariableListReq `thrift:"req,1"`
}

func NewCozeServiceGetProjectVariableListArgs() *CozeServiceGetProjectVariableListArgs {
	return &CozeServiceGetProjectVariableListArgs{}
}

func (p *CozeServiceGetProjectVariableListArgs) InitDefault() {
}

var CozeServiceGetProjectVariableListArgs_Req_DEFAULT *project_memory.GetProjectVariableListReq

func (p *CozeServiceGetProjectVariableListArgs) GetReq() (v *project_memory.GetProjectVariableListReq) {
	if !p.IsSetReq() {
		return CozeServiceGetProjectVariableListArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetProjectVariableListArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetProjectVariableListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetProjectVariableListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetProjectVariableListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetProjectVariableListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := project_memory.NewGetProjectVariableListReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetProjectVariableListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjectVariableList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetProjectVariableListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetProjectVariableListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetProjectVariableListArgs(%+v)", *p)

}

type CozeServiceGetProjectVariableListResult struct {
	Success *project_memory.GetProjectVariableListResp `thrift:"success,0,optional"`
}

func NewCozeServiceGetProjectVariableListResult() *CozeServiceGetProjectVariableListResult {
	return &CozeServiceGetProjectVariableListResult{}
}

func (p *CozeServiceGetProjectVariableListResult) InitDefault() {
}

var CozeServiceGetProjectVariableListResult_Success_DEFAULT *project_memory.GetProjectVariableListResp

func (p *CozeServiceGetProjectVariableListResult) GetSuccess() (v *project_memory.GetProjectVariableListResp) {
	if !p.IsSetSuccess() {
		return CozeServiceGetProjectVariableListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetProjectVariableListResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetProjectVariableListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetProjectVariableListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetProjectVariableListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetProjectVariableListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := project_memory.NewGetProjectVariableListResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetProjectVariableListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetProjectVariableList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetProjectVariableListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetProjectVariableListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetProjectVariableListResult(%+v)", *p)

}

type CozeServiceUpdateProjectVariableArgs struct {
	Req *project_memory.UpdateProjectVariableReq `thrift:"req,1"`
}

func NewCozeServiceUpdateProjectVariableArgs() *CozeServiceUpdateProjectVariableArgs {
	return &CozeServiceUpdateProjectVariableArgs{}
}

func (p *CozeServiceUpdateProjectVariableArgs) InitDefault() {
}

var CozeServiceUpdateProjectVariableArgs_Req_DEFAULT *project_memory.UpdateProjectVariableReq

func (p *CozeServiceUpdateProjectVariableArgs) GetReq() (v *project_memory.UpdateProjectVariableReq) {
	if !p.IsSetReq() {
		return CozeServiceUpdateProjectVariableArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceUpdateProjectVariableArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceUpdateProjectVariableArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceUpdateProjectVariableArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateProjectVariableArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectVariableArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := project_memory.NewUpdateProjectVariableReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceUpdateProjectVariableArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateProjectVariable_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectVariableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateProjectVariableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateProjectVariableArgs(%+v)", *p)

}

type CozeServiceUpdateProjectVariableResult struct {
	Success *project_memory.UpdateProjectVariableResp `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateProjectVariableResult() *CozeServiceUpdateProjectVariableResult {
	return &CozeServiceUpdateProjectVariableResult{}
}

func (p *CozeServiceUpdateProjectVariableResult) InitDefault() {
}

var CozeServiceUpdateProjectVariableResult_Success_DEFAULT *project_memory.UpdateProjectVariableResp

func (p *CozeServiceUpdateProjectVariableResult) GetSuccess() (v *project_memory.UpdateProjectVariableResp) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateProjectVariableResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateProjectVariableResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateProjectVariableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateProjectVariableResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateProjectVariableResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectVariableResult) ReadField0(iprot thrift.TProtocol) error {
	_field := project_memory.NewUpdateProjectVariableResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateProjectVariableResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateProjectVariable_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectVariableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateProjectVariableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateProjectVariableResult(%+v)", *p)

}

type CozeServiceGetMemoryVariableMetaArgs struct {
	Req *project_memory.GetMemoryVariableMetaReq `thrift:"req,1"`
}

func NewCozeServiceGetMemoryVariableMetaArgs() *CozeServiceGetMemoryVariableMetaArgs {
	return &CozeServiceGetMemoryVariableMetaArgs{}
}

func (p *CozeServiceGetMemoryVariableMetaArgs) InitDefault() {
}

var CozeServiceGetMemoryVariableMetaArgs_Req_DEFAULT *project_memory.GetMemoryVariableMetaReq

func (p *CozeServiceGetMemoryVariableMetaArgs) GetReq() (v *project_memory.GetMemoryVariableMetaReq) {
	if !p.IsSetReq() {
		return CozeServiceGetMemoryVariableMetaArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetMemoryVariableMetaArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetMemoryVariableMetaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetMemoryVariableMetaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetMemoryVariableMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetMemoryVariableMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := project_memory.NewGetMemoryVariableMetaReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetMemoryVariableMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMemoryVariableMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetMemoryVariableMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetMemoryVariableMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetMemoryVariableMetaArgs(%+v)", *p)

}

type CozeServiceGetMemoryVariableMetaResult struct {
	Success *project_memory.GetMemoryVariableMetaResp `thrift:"success,0,optional"`
}

func NewCozeServiceGetMemoryVariableMetaResult() *CozeServiceGetMemoryVariableMetaResult {
	return &CozeServiceGetMemoryVariableMetaResult{}
}

func (p *CozeServiceGetMemoryVariableMetaResult) InitDefault() {
}

var CozeServiceGetMemoryVariableMetaResult_Success_DEFAULT *project_memory.GetMemoryVariableMetaResp

func (p *CozeServiceGetMemoryVariableMetaResult) GetSuccess() (v *project_memory.GetMemoryVariableMetaResp) {
	if !p.IsSetSuccess() {
		return CozeServiceGetMemoryVariableMetaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetMemoryVariableMetaResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetMemoryVariableMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetMemoryVariableMetaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetMemoryVariableMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetMemoryVariableMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := project_memory.NewGetMemoryVariableMetaResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetMemoryVariableMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMemoryVariableMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetMemoryVariableMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetMemoryVariableMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetMemoryVariableMetaResult(%+v)", *p)

}

type CozeServiceAgentRunArgs struct {
	Request *conversation_run.AgentRunRequest `thrift:"request,1"`
}

func NewCozeServiceAgentRunArgs() *CozeServiceAgentRunArgs {
	return &CozeServiceAgentRunArgs{}
}

func (p *CozeServiceAgentRunArgs) InitDefault() {
}

var CozeServiceAgentRunArgs_Request_DEFAULT *conversation_run.AgentRunRequest

func (p *CozeServiceAgentRunArgs) GetRequest() (v *conversation_run.AgentRunRequest) {
	if !p.IsSetRequest() {
		return CozeServiceAgentRunArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceAgentRunArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceAgentRunArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceAgentRunArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceAgentRunArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceAgentRunArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := conversation_run.NewAgentRunRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceAgentRunArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AgentRun_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceAgentRunArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceAgentRunArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceAgentRunArgs(%+v)", *p)

}

type CozeServiceAgentRunResult struct {
	Success *conversation_run.AgentRunResponse `thrift:"success,0,optional"`
}

func NewCozeServiceAgentRunResult() *CozeServiceAgentRunResult {
	return &CozeServiceAgentRunResult{}
}

func (p *CozeServiceAgentRunResult) InitDefault() {
}

var CozeServiceAgentRunResult_Success_DEFAULT *conversation_run.AgentRunResponse

func (p *CozeServiceAgentRunResult) GetSuccess() (v *conversation_run.AgentRunResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceAgentRunResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceAgentRunResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceAgentRunResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceAgentRunResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceAgentRunResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceAgentRunResult) ReadField0(iprot thrift.TProtocol) error {
	_field := conversation_run.NewAgentRunResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceAgentRunResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AgentRun_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceAgentRunResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceAgentRunResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceAgentRunResult(%+v)", *p)

}

type CozeServiceGetMessageListArgs struct {
	Request *conversation_message.GetMessageListRequest `thrift:"request,1"`
}

func NewCozeServiceGetMessageListArgs() *CozeServiceGetMessageListArgs {
	return &CozeServiceGetMessageListArgs{}
}

func (p *CozeServiceGetMessageListArgs) InitDefault() {
}

var CozeServiceGetMessageListArgs_Request_DEFAULT *conversation_message.GetMessageListRequest

func (p *CozeServiceGetMessageListArgs) GetRequest() (v *conversation_message.GetMessageListRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetMessageListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetMessageListArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetMessageListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetMessageListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetMessageListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetMessageListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := conversation_message.NewGetMessageListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetMessageListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMessageList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetMessageListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetMessageListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetMessageListArgs(%+v)", *p)

}

type CozeServiceGetMessageListResult struct {
	Success *conversation_message.GetMessageListResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetMessageListResult() *CozeServiceGetMessageListResult {
	return &CozeServiceGetMessageListResult{}
}

func (p *CozeServiceGetMessageListResult) InitDefault() {
}

var CozeServiceGetMessageListResult_Success_DEFAULT *conversation_message.GetMessageListResponse

func (p *CozeServiceGetMessageListResult) GetSuccess() (v *conversation_message.GetMessageListResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetMessageListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetMessageListResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetMessageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetMessageListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetMessageListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetMessageListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := conversation_message.NewGetMessageListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetMessageListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMessageList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetMessageListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetMessageListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetMessageListResult(%+v)", *p)

}

type CozeServiceDeleteMessageArgs struct {
	Request *conversation_message.DeleteMessageRequest `thrift:"request,1"`
}

func NewCozeServiceDeleteMessageArgs() *CozeServiceDeleteMessageArgs {
	return &CozeServiceDeleteMessageArgs{}
}

func (p *CozeServiceDeleteMessageArgs) InitDefault() {
}

var CozeServiceDeleteMessageArgs_Request_DEFAULT *conversation_message.DeleteMessageRequest

func (p *CozeServiceDeleteMessageArgs) GetRequest() (v *conversation_message.DeleteMessageRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDeleteMessageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDeleteMessageArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDeleteMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDeleteMessageArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := conversation_message.NewDeleteMessageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDeleteMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteMessageArgs(%+v)", *p)

}

type CozeServiceDeleteMessageResult struct {
	Success *conversation_message.DeleteMessageResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteMessageResult() *CozeServiceDeleteMessageResult {
	return &CozeServiceDeleteMessageResult{}
}

func (p *CozeServiceDeleteMessageResult) InitDefault() {
}

var CozeServiceDeleteMessageResult_Success_DEFAULT *conversation_message.DeleteMessageResponse

func (p *CozeServiceDeleteMessageResult) GetSuccess() (v *conversation_message.DeleteMessageResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteMessageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteMessageResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteMessageResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := conversation_message.NewDeleteMessageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteMessageResult(%+v)", *p)

}

type CozeServiceBreakMessageArgs struct {
	Request *conversation_message.BreakMessageRequest `thrift:"request,1"`
}

func NewCozeServiceBreakMessageArgs() *CozeServiceBreakMessageArgs {
	return &CozeServiceBreakMessageArgs{}
}

func (p *CozeServiceBreakMessageArgs) InitDefault() {
}

var CozeServiceBreakMessageArgs_Request_DEFAULT *conversation_message.BreakMessageRequest

func (p *CozeServiceBreakMessageArgs) GetRequest() (v *conversation_message.BreakMessageRequest) {
	if !p.IsSetRequest() {
		return CozeServiceBreakMessageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceBreakMessageArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceBreakMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceBreakMessageArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceBreakMessageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceBreakMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := conversation_message.NewBreakMessageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceBreakMessageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BreakMessage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceBreakMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceBreakMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceBreakMessageArgs(%+v)", *p)

}

type CozeServiceBreakMessageResult struct {
	Success *conversation_message.BreakMessageResponse `thrift:"success,0,optional"`
}

func NewCozeServiceBreakMessageResult() *CozeServiceBreakMessageResult {
	return &CozeServiceBreakMessageResult{}
}

func (p *CozeServiceBreakMessageResult) InitDefault() {
}

var CozeServiceBreakMessageResult_Success_DEFAULT *conversation_message.BreakMessageResponse

func (p *CozeServiceBreakMessageResult) GetSuccess() (v *conversation_message.BreakMessageResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceBreakMessageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceBreakMessageResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceBreakMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceBreakMessageResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceBreakMessageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceBreakMessageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := conversation_message.NewBreakMessageResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceBreakMessageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BreakMessage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceBreakMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceBreakMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceBreakMessageResult(%+v)", *p)

}

type CozeServiceClearConversationCtxArgs struct {
	Request *conversation_conversation.ClearConversationCtxRequest `thrift:"request,1"`
}

func NewCozeServiceClearConversationCtxArgs() *CozeServiceClearConversationCtxArgs {
	return &CozeServiceClearConversationCtxArgs{}
}

func (p *CozeServiceClearConversationCtxArgs) InitDefault() {
}

var CozeServiceClearConversationCtxArgs_Request_DEFAULT *conversation_conversation.ClearConversationCtxRequest

func (p *CozeServiceClearConversationCtxArgs) GetRequest() (v *conversation_conversation.ClearConversationCtxRequest) {
	if !p.IsSetRequest() {
		return CozeServiceClearConversationCtxArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceClearConversationCtxArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceClearConversationCtxArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceClearConversationCtxArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceClearConversationCtxArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceClearConversationCtxArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := conversation_conversation.NewClearConversationCtxRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceClearConversationCtxArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearConversationCtx_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceClearConversationCtxArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceClearConversationCtxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceClearConversationCtxArgs(%+v)", *p)

}

type CozeServiceClearConversationCtxResult struct {
	Success *conversation_conversation.ClearConversationCtxResponse `thrift:"success,0,optional"`
}

func NewCozeServiceClearConversationCtxResult() *CozeServiceClearConversationCtxResult {
	return &CozeServiceClearConversationCtxResult{}
}

func (p *CozeServiceClearConversationCtxResult) InitDefault() {
}

var CozeServiceClearConversationCtxResult_Success_DEFAULT *conversation_conversation.ClearConversationCtxResponse

func (p *CozeServiceClearConversationCtxResult) GetSuccess() (v *conversation_conversation.ClearConversationCtxResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceClearConversationCtxResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceClearConversationCtxResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceClearConversationCtxResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceClearConversationCtxResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceClearConversationCtxResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceClearConversationCtxResult) ReadField0(iprot thrift.TProtocol) error {
	_field := conversation_conversation.NewClearConversationCtxResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceClearConversationCtxResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearConversationCtx_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceClearConversationCtxResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceClearConversationCtxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceClearConversationCtxResult(%+v)", *p)

}

type CozeServiceClearConversationHistoryArgs struct {
	Request *conversation_conversation.ClearConversationHistoryRequest `thrift:"request,1"`
}

func NewCozeServiceClearConversationHistoryArgs() *CozeServiceClearConversationHistoryArgs {
	return &CozeServiceClearConversationHistoryArgs{}
}

func (p *CozeServiceClearConversationHistoryArgs) InitDefault() {
}

var CozeServiceClearConversationHistoryArgs_Request_DEFAULT *conversation_conversation.ClearConversationHistoryRequest

func (p *CozeServiceClearConversationHistoryArgs) GetRequest() (v *conversation_conversation.ClearConversationHistoryRequest) {
	if !p.IsSetRequest() {
		return CozeServiceClearConversationHistoryArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceClearConversationHistoryArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceClearConversationHistoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceClearConversationHistoryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceClearConversationHistoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceClearConversationHistoryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := conversation_conversation.NewClearConversationHistoryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceClearConversationHistoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearConversationHistory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceClearConversationHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceClearConversationHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceClearConversationHistoryArgs(%+v)", *p)

}

type CozeServiceClearConversationHistoryResult struct {
	Success *conversation_conversation.ClearConversationHistoryResponse `thrift:"success,0,optional"`
}

func NewCozeServiceClearConversationHistoryResult() *CozeServiceClearConversationHistoryResult {
	return &CozeServiceClearConversationHistoryResult{}
}

func (p *CozeServiceClearConversationHistoryResult) InitDefault() {
}

var CozeServiceClearConversationHistoryResult_Success_DEFAULT *conversation_conversation.ClearConversationHistoryResponse

func (p *CozeServiceClearConversationHistoryResult) GetSuccess() (v *conversation_conversation.ClearConversationHistoryResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceClearConversationHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceClearConversationHistoryResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceClearConversationHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceClearConversationHistoryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceClearConversationHistoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceClearConversationHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := conversation_conversation.NewClearConversationHistoryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceClearConversationHistoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearConversationHistory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceClearConversationHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceClearConversationHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceClearConversationHistoryResult(%+v)", *p)

}

type CozeServiceRegisterPluginMetaArgs struct {
	Request *plugin.RegisterPluginMetaRequest `thrift:"request,1"`
}

func NewCozeServiceRegisterPluginMetaArgs() *CozeServiceRegisterPluginMetaArgs {
	return &CozeServiceRegisterPluginMetaArgs{}
}

func (p *CozeServiceRegisterPluginMetaArgs) InitDefault() {
}

var CozeServiceRegisterPluginMetaArgs_Request_DEFAULT *plugin.RegisterPluginMetaRequest

func (p *CozeServiceRegisterPluginMetaArgs) GetRequest() (v *plugin.RegisterPluginMetaRequest) {
	if !p.IsSetRequest() {
		return CozeServiceRegisterPluginMetaArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceRegisterPluginMetaArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceRegisterPluginMetaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceRegisterPluginMetaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceRegisterPluginMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceRegisterPluginMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewRegisterPluginMetaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceRegisterPluginMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterPluginMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceRegisterPluginMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceRegisterPluginMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceRegisterPluginMetaArgs(%+v)", *p)

}

type CozeServiceRegisterPluginMetaResult struct {
	Success *plugin.RegisterPluginMetaResponse `thrift:"success,0,optional"`
}

func NewCozeServiceRegisterPluginMetaResult() *CozeServiceRegisterPluginMetaResult {
	return &CozeServiceRegisterPluginMetaResult{}
}

func (p *CozeServiceRegisterPluginMetaResult) InitDefault() {
}

var CozeServiceRegisterPluginMetaResult_Success_DEFAULT *plugin.RegisterPluginMetaResponse

func (p *CozeServiceRegisterPluginMetaResult) GetSuccess() (v *plugin.RegisterPluginMetaResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceRegisterPluginMetaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceRegisterPluginMetaResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceRegisterPluginMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceRegisterPluginMetaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceRegisterPluginMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceRegisterPluginMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewRegisterPluginMetaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceRegisterPluginMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterPluginMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceRegisterPluginMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceRegisterPluginMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceRegisterPluginMetaResult(%+v)", *p)

}

type CozeServiceUpdatePluginMetaArgs struct {
	Request *plugin.UpdatePluginMetaRequest `thrift:"request,1"`
}

func NewCozeServiceUpdatePluginMetaArgs() *CozeServiceUpdatePluginMetaArgs {
	return &CozeServiceUpdatePluginMetaArgs{}
}

func (p *CozeServiceUpdatePluginMetaArgs) InitDefault() {
}

var CozeServiceUpdatePluginMetaArgs_Request_DEFAULT *plugin.UpdatePluginMetaRequest

func (p *CozeServiceUpdatePluginMetaArgs) GetRequest() (v *plugin.UpdatePluginMetaRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdatePluginMetaArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdatePluginMetaArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdatePluginMetaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdatePluginMetaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdatePluginMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdatePluginMetaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdatePluginMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePluginMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdatePluginMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdatePluginMetaArgs(%+v)", *p)

}

type CozeServiceUpdatePluginMetaResult struct {
	Success *plugin.UpdatePluginMetaResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdatePluginMetaResult() *CozeServiceUpdatePluginMetaResult {
	return &CozeServiceUpdatePluginMetaResult{}
}

func (p *CozeServiceUpdatePluginMetaResult) InitDefault() {
}

var CozeServiceUpdatePluginMetaResult_Success_DEFAULT *plugin.UpdatePluginMetaResponse

func (p *CozeServiceUpdatePluginMetaResult) GetSuccess() (v *plugin.UpdatePluginMetaResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdatePluginMetaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdatePluginMetaResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdatePluginMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdatePluginMetaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdatePluginMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdatePluginMetaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdatePluginMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePluginMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdatePluginMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdatePluginMetaResult(%+v)", *p)

}

type CozeServiceUpdatePluginArgs struct {
	Request *plugin.UpdatePluginRequest `thrift:"request,1"`
}

func NewCozeServiceUpdatePluginArgs() *CozeServiceUpdatePluginArgs {
	return &CozeServiceUpdatePluginArgs{}
}

func (p *CozeServiceUpdatePluginArgs) InitDefault() {
}

var CozeServiceUpdatePluginArgs_Request_DEFAULT *plugin.UpdatePluginRequest

func (p *CozeServiceUpdatePluginArgs) GetRequest() (v *plugin.UpdatePluginRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdatePluginArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdatePluginArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdatePluginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdatePluginArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdatePluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdatePluginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdatePluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdatePluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdatePluginArgs(%+v)", *p)

}

type CozeServiceUpdatePluginResult struct {
	Success *plugin.UpdatePluginResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdatePluginResult() *CozeServiceUpdatePluginResult {
	return &CozeServiceUpdatePluginResult{}
}

func (p *CozeServiceUpdatePluginResult) InitDefault() {
}

var CozeServiceUpdatePluginResult_Success_DEFAULT *plugin.UpdatePluginResponse

func (p *CozeServiceUpdatePluginResult) GetSuccess() (v *plugin.UpdatePluginResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdatePluginResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdatePluginResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdatePluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdatePluginResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdatePluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdatePluginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdatePluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdatePluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdatePluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdatePluginResult(%+v)", *p)

}

type CozeServiceDelPluginArgs struct {
	Request *plugin.DelPluginRequest `thrift:"request,1"`
}

func NewCozeServiceDelPluginArgs() *CozeServiceDelPluginArgs {
	return &CozeServiceDelPluginArgs{}
}

func (p *CozeServiceDelPluginArgs) InitDefault() {
}

var CozeServiceDelPluginArgs_Request_DEFAULT *plugin.DelPluginRequest

func (p *CozeServiceDelPluginArgs) GetRequest() (v *plugin.DelPluginRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDelPluginArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDelPluginArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDelPluginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDelPluginArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDelPluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDelPluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewDelPluginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDelPluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelPlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDelPluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDelPluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDelPluginArgs(%+v)", *p)

}

type CozeServiceDelPluginResult struct {
	Success *plugin.DelPluginResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDelPluginResult() *CozeServiceDelPluginResult {
	return &CozeServiceDelPluginResult{}
}

func (p *CozeServiceDelPluginResult) InitDefault() {
}

var CozeServiceDelPluginResult_Success_DEFAULT *plugin.DelPluginResponse

func (p *CozeServiceDelPluginResult) GetSuccess() (v *plugin.DelPluginResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDelPluginResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDelPluginResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDelPluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDelPluginResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDelPluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDelPluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewDelPluginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDelPluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DelPlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDelPluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDelPluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDelPluginResult(%+v)", *p)

}

type CozeServiceGetPlaygroundPluginListArgs struct {
	Request *plugin.GetPlaygroundPluginListRequest `thrift:"request,1"`
}

func NewCozeServiceGetPlaygroundPluginListArgs() *CozeServiceGetPlaygroundPluginListArgs {
	return &CozeServiceGetPlaygroundPluginListArgs{}
}

func (p *CozeServiceGetPlaygroundPluginListArgs) InitDefault() {
}

var CozeServiceGetPlaygroundPluginListArgs_Request_DEFAULT *plugin.GetPlaygroundPluginListRequest

func (p *CozeServiceGetPlaygroundPluginListArgs) GetRequest() (v *plugin.GetPlaygroundPluginListRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetPlaygroundPluginListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetPlaygroundPluginListArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetPlaygroundPluginListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetPlaygroundPluginListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPlaygroundPluginListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPlaygroundPluginListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewGetPlaygroundPluginListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetPlaygroundPluginListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPlaygroundPluginList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPlaygroundPluginListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetPlaygroundPluginListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPlaygroundPluginListArgs(%+v)", *p)

}

type CozeServiceGetPlaygroundPluginListResult struct {
	Success *plugin.GetPlaygroundPluginListResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetPlaygroundPluginListResult() *CozeServiceGetPlaygroundPluginListResult {
	return &CozeServiceGetPlaygroundPluginListResult{}
}

func (p *CozeServiceGetPlaygroundPluginListResult) InitDefault() {
}

var CozeServiceGetPlaygroundPluginListResult_Success_DEFAULT *plugin.GetPlaygroundPluginListResponse

func (p *CozeServiceGetPlaygroundPluginListResult) GetSuccess() (v *plugin.GetPlaygroundPluginListResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetPlaygroundPluginListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetPlaygroundPluginListResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetPlaygroundPluginListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetPlaygroundPluginListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPlaygroundPluginListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPlaygroundPluginListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewGetPlaygroundPluginListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetPlaygroundPluginListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPlaygroundPluginList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPlaygroundPluginListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetPlaygroundPluginListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPlaygroundPluginListResult(%+v)", *p)

}

type CozeServiceGetPluginAPIsArgs struct {
	Request *plugin.GetPluginAPIsRequest `thrift:"request,1"`
}

func NewCozeServiceGetPluginAPIsArgs() *CozeServiceGetPluginAPIsArgs {
	return &CozeServiceGetPluginAPIsArgs{}
}

func (p *CozeServiceGetPluginAPIsArgs) InitDefault() {
}

var CozeServiceGetPluginAPIsArgs_Request_DEFAULT *plugin.GetPluginAPIsRequest

func (p *CozeServiceGetPluginAPIsArgs) GetRequest() (v *plugin.GetPluginAPIsRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetPluginAPIsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetPluginAPIsArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetPluginAPIsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetPluginAPIsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPluginAPIsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPluginAPIsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewGetPluginAPIsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetPluginAPIsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPluginAPIs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPluginAPIsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetPluginAPIsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPluginAPIsArgs(%+v)", *p)

}

type CozeServiceGetPluginAPIsResult struct {
	Success *plugin.GetPluginAPIsResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetPluginAPIsResult() *CozeServiceGetPluginAPIsResult {
	return &CozeServiceGetPluginAPIsResult{}
}

func (p *CozeServiceGetPluginAPIsResult) InitDefault() {
}

var CozeServiceGetPluginAPIsResult_Success_DEFAULT *plugin.GetPluginAPIsResponse

func (p *CozeServiceGetPluginAPIsResult) GetSuccess() (v *plugin.GetPluginAPIsResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetPluginAPIsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetPluginAPIsResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetPluginAPIsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetPluginAPIsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPluginAPIsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPluginAPIsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewGetPluginAPIsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetPluginAPIsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPluginAPIs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPluginAPIsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetPluginAPIsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPluginAPIsResult(%+v)", *p)

}

type CozeServiceGetPluginInfoArgs struct {
	Request *plugin.GetPluginInfoRequest `thrift:"request,1"`
}

func NewCozeServiceGetPluginInfoArgs() *CozeServiceGetPluginInfoArgs {
	return &CozeServiceGetPluginInfoArgs{}
}

func (p *CozeServiceGetPluginInfoArgs) InitDefault() {
}

var CozeServiceGetPluginInfoArgs_Request_DEFAULT *plugin.GetPluginInfoRequest

func (p *CozeServiceGetPluginInfoArgs) GetRequest() (v *plugin.GetPluginInfoRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetPluginInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetPluginInfoArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetPluginInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetPluginInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPluginInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPluginInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewGetPluginInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetPluginInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPluginInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPluginInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetPluginInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPluginInfoArgs(%+v)", *p)

}

type CozeServiceGetPluginInfoResult struct {
	Success *plugin.GetPluginInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetPluginInfoResult() *CozeServiceGetPluginInfoResult {
	return &CozeServiceGetPluginInfoResult{}
}

func (p *CozeServiceGetPluginInfoResult) InitDefault() {
}

var CozeServiceGetPluginInfoResult_Success_DEFAULT *plugin.GetPluginInfoResponse

func (p *CozeServiceGetPluginInfoResult) GetSuccess() (v *plugin.GetPluginInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetPluginInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetPluginInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetPluginInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetPluginInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetPluginInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetPluginInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewGetPluginInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetPluginInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPluginInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetPluginInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetPluginInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetPluginInfoResult(%+v)", *p)

}

type CozeServiceGetUpdatedAPIsArgs struct {
	Request *plugin.GetUpdatedAPIsRequest `thrift:"request,1"`
}

func NewCozeServiceGetUpdatedAPIsArgs() *CozeServiceGetUpdatedAPIsArgs {
	return &CozeServiceGetUpdatedAPIsArgs{}
}

func (p *CozeServiceGetUpdatedAPIsArgs) InitDefault() {
}

var CozeServiceGetUpdatedAPIsArgs_Request_DEFAULT *plugin.GetUpdatedAPIsRequest

func (p *CozeServiceGetUpdatedAPIsArgs) GetRequest() (v *plugin.GetUpdatedAPIsRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetUpdatedAPIsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetUpdatedAPIsArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetUpdatedAPIsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetUpdatedAPIsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetUpdatedAPIsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetUpdatedAPIsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewGetUpdatedAPIsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetUpdatedAPIsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUpdatedAPIs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetUpdatedAPIsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetUpdatedAPIsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetUpdatedAPIsArgs(%+v)", *p)

}

type CozeServiceGetUpdatedAPIsResult struct {
	Success *plugin.GetUpdatedAPIsResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetUpdatedAPIsResult() *CozeServiceGetUpdatedAPIsResult {
	return &CozeServiceGetUpdatedAPIsResult{}
}

func (p *CozeServiceGetUpdatedAPIsResult) InitDefault() {
}

var CozeServiceGetUpdatedAPIsResult_Success_DEFAULT *plugin.GetUpdatedAPIsResponse

func (p *CozeServiceGetUpdatedAPIsResult) GetSuccess() (v *plugin.GetUpdatedAPIsResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetUpdatedAPIsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetUpdatedAPIsResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetUpdatedAPIsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetUpdatedAPIsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetUpdatedAPIsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetUpdatedAPIsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewGetUpdatedAPIsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetUpdatedAPIsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUpdatedAPIs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetUpdatedAPIsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetUpdatedAPIsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetUpdatedAPIsResult(%+v)", *p)

}

type CozeServicePublishPluginArgs struct {
	Request *plugin.PublishPluginRequest `thrift:"request,1"`
}

func NewCozeServicePublishPluginArgs() *CozeServicePublishPluginArgs {
	return &CozeServicePublishPluginArgs{}
}

func (p *CozeServicePublishPluginArgs) InitDefault() {
}

var CozeServicePublishPluginArgs_Request_DEFAULT *plugin.PublishPluginRequest

func (p *CozeServicePublishPluginArgs) GetRequest() (v *plugin.PublishPluginRequest) {
	if !p.IsSetRequest() {
		return CozeServicePublishPluginArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServicePublishPluginArgs = map[int16]string{
	1: "request",
}

func (p *CozeServicePublishPluginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServicePublishPluginArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServicePublishPluginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServicePublishPluginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewPublishPluginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServicePublishPluginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishPlugin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServicePublishPluginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServicePublishPluginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServicePublishPluginArgs(%+v)", *p)

}

type CozeServicePublishPluginResult struct {
	Success *plugin.PublishPluginResponse `thrift:"success,0,optional"`
}

func NewCozeServicePublishPluginResult() *CozeServicePublishPluginResult {
	return &CozeServicePublishPluginResult{}
}

func (p *CozeServicePublishPluginResult) InitDefault() {
}

var CozeServicePublishPluginResult_Success_DEFAULT *plugin.PublishPluginResponse

func (p *CozeServicePublishPluginResult) GetSuccess() (v *plugin.PublishPluginResponse) {
	if !p.IsSetSuccess() {
		return CozeServicePublishPluginResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServicePublishPluginResult = map[int16]string{
	0: "success",
}

func (p *CozeServicePublishPluginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServicePublishPluginResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServicePublishPluginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServicePublishPluginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewPublishPluginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServicePublishPluginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishPlugin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServicePublishPluginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServicePublishPluginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServicePublishPluginResult(%+v)", *p)

}

type CozeServiceGetBotDefaultParamsArgs struct {
	Request *plugin.GetBotDefaultParamsRequest `thrift:"request,1"`
}

func NewCozeServiceGetBotDefaultParamsArgs() *CozeServiceGetBotDefaultParamsArgs {
	return &CozeServiceGetBotDefaultParamsArgs{}
}

func (p *CozeServiceGetBotDefaultParamsArgs) InitDefault() {
}

var CozeServiceGetBotDefaultParamsArgs_Request_DEFAULT *plugin.GetBotDefaultParamsRequest

func (p *CozeServiceGetBotDefaultParamsArgs) GetRequest() (v *plugin.GetBotDefaultParamsRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetBotDefaultParamsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetBotDefaultParamsArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetBotDefaultParamsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetBotDefaultParamsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetBotDefaultParamsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetBotDefaultParamsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewGetBotDefaultParamsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetBotDefaultParamsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBotDefaultParams_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetBotDefaultParamsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetBotDefaultParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetBotDefaultParamsArgs(%+v)", *p)

}

type CozeServiceGetBotDefaultParamsResult struct {
	Success *plugin.GetBotDefaultParamsResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetBotDefaultParamsResult() *CozeServiceGetBotDefaultParamsResult {
	return &CozeServiceGetBotDefaultParamsResult{}
}

func (p *CozeServiceGetBotDefaultParamsResult) InitDefault() {
}

var CozeServiceGetBotDefaultParamsResult_Success_DEFAULT *plugin.GetBotDefaultParamsResponse

func (p *CozeServiceGetBotDefaultParamsResult) GetSuccess() (v *plugin.GetBotDefaultParamsResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetBotDefaultParamsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetBotDefaultParamsResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetBotDefaultParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetBotDefaultParamsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetBotDefaultParamsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetBotDefaultParamsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewGetBotDefaultParamsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetBotDefaultParamsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBotDefaultParams_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetBotDefaultParamsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetBotDefaultParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetBotDefaultParamsResult(%+v)", *p)

}

type CozeServiceUpdateBotDefaultParamsArgs struct {
	Request *plugin.UpdateBotDefaultParamsRequest `thrift:"request,1"`
}

func NewCozeServiceUpdateBotDefaultParamsArgs() *CozeServiceUpdateBotDefaultParamsArgs {
	return &CozeServiceUpdateBotDefaultParamsArgs{}
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) InitDefault() {
}

var CozeServiceUpdateBotDefaultParamsArgs_Request_DEFAULT *plugin.UpdateBotDefaultParamsRequest

func (p *CozeServiceUpdateBotDefaultParamsArgs) GetRequest() (v *plugin.UpdateBotDefaultParamsRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdateBotDefaultParamsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdateBotDefaultParamsArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateBotDefaultParamsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdateBotDefaultParamsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBotDefaultParams_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateBotDefaultParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateBotDefaultParamsArgs(%+v)", *p)

}

type CozeServiceUpdateBotDefaultParamsResult struct {
	Success *plugin.UpdateBotDefaultParamsResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateBotDefaultParamsResult() *CozeServiceUpdateBotDefaultParamsResult {
	return &CozeServiceUpdateBotDefaultParamsResult{}
}

func (p *CozeServiceUpdateBotDefaultParamsResult) InitDefault() {
}

var CozeServiceUpdateBotDefaultParamsResult_Success_DEFAULT *plugin.UpdateBotDefaultParamsResponse

func (p *CozeServiceUpdateBotDefaultParamsResult) GetSuccess() (v *plugin.UpdateBotDefaultParamsResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateBotDefaultParamsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateBotDefaultParamsResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateBotDefaultParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateBotDefaultParamsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateBotDefaultParamsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateBotDefaultParamsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdateBotDefaultParamsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateBotDefaultParamsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBotDefaultParams_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateBotDefaultParamsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateBotDefaultParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateBotDefaultParamsResult(%+v)", *p)

}

type CozeServiceDeleteBotDefaultParamsArgs struct {
	Request *plugin.DeleteBotDefaultParamsRequest `thrift:"request,1"`
}

func NewCozeServiceDeleteBotDefaultParamsArgs() *CozeServiceDeleteBotDefaultParamsArgs {
	return &CozeServiceDeleteBotDefaultParamsArgs{}
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) InitDefault() {
}

var CozeServiceDeleteBotDefaultParamsArgs_Request_DEFAULT *plugin.DeleteBotDefaultParamsRequest

func (p *CozeServiceDeleteBotDefaultParamsArgs) GetRequest() (v *plugin.DeleteBotDefaultParamsRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDeleteBotDefaultParamsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDeleteBotDefaultParamsArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteBotDefaultParamsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewDeleteBotDefaultParamsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBotDefaultParams_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteBotDefaultParamsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteBotDefaultParamsArgs(%+v)", *p)

}

type CozeServiceDeleteBotDefaultParamsResult struct {
	Success *plugin.DeleteBotDefaultParamsResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteBotDefaultParamsResult() *CozeServiceDeleteBotDefaultParamsResult {
	return &CozeServiceDeleteBotDefaultParamsResult{}
}

func (p *CozeServiceDeleteBotDefaultParamsResult) InitDefault() {
}

var CozeServiceDeleteBotDefaultParamsResult_Success_DEFAULT *plugin.DeleteBotDefaultParamsResponse

func (p *CozeServiceDeleteBotDefaultParamsResult) GetSuccess() (v *plugin.DeleteBotDefaultParamsResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteBotDefaultParamsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteBotDefaultParamsResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteBotDefaultParamsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteBotDefaultParamsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteBotDefaultParamsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteBotDefaultParamsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewDeleteBotDefaultParamsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteBotDefaultParamsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBotDefaultParams_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteBotDefaultParamsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteBotDefaultParamsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteBotDefaultParamsResult(%+v)", *p)

}

type CozeServiceCreateAPIArgs struct {
	Request *plugin.CreateAPIRequest `thrift:"request,1"`
}

func NewCozeServiceCreateAPIArgs() *CozeServiceCreateAPIArgs {
	return &CozeServiceCreateAPIArgs{}
}

func (p *CozeServiceCreateAPIArgs) InitDefault() {
}

var CozeServiceCreateAPIArgs_Request_DEFAULT *plugin.CreateAPIRequest

func (p *CozeServiceCreateAPIArgs) GetRequest() (v *plugin.CreateAPIRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCreateAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCreateAPIArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCreateAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCreateAPIArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewCreateAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCreateAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateAPIArgs(%+v)", *p)

}

type CozeServiceCreateAPIResult struct {
	Success *plugin.CreateAPIResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateAPIResult() *CozeServiceCreateAPIResult {
	return &CozeServiceCreateAPIResult{}
}

func (p *CozeServiceCreateAPIResult) InitDefault() {
}

var CozeServiceCreateAPIResult_Success_DEFAULT *plugin.CreateAPIResponse

func (p *CozeServiceCreateAPIResult) GetSuccess() (v *plugin.CreateAPIResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateAPIResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateAPIResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateAPIResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewCreateAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateAPIResult(%+v)", *p)

}

type CozeServiceUpdateAPIArgs struct {
	Request *plugin.UpdateAPIRequest `thrift:"request,1"`
}

func NewCozeServiceUpdateAPIArgs() *CozeServiceUpdateAPIArgs {
	return &CozeServiceUpdateAPIArgs{}
}

func (p *CozeServiceUpdateAPIArgs) InitDefault() {
}

var CozeServiceUpdateAPIArgs_Request_DEFAULT *plugin.UpdateAPIRequest

func (p *CozeServiceUpdateAPIArgs) GetRequest() (v *plugin.UpdateAPIRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdateAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdateAPIArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdateAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdateAPIArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdateAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdateAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateAPIArgs(%+v)", *p)

}

type CozeServiceUpdateAPIResult struct {
	Success *plugin.UpdateAPIResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateAPIResult() *CozeServiceUpdateAPIResult {
	return &CozeServiceUpdateAPIResult{}
}

func (p *CozeServiceUpdateAPIResult) InitDefault() {
}

var CozeServiceUpdateAPIResult_Success_DEFAULT *plugin.UpdateAPIResponse

func (p *CozeServiceUpdateAPIResult) GetSuccess() (v *plugin.UpdateAPIResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateAPIResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateAPIResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateAPIResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewUpdateAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateAPIResult(%+v)", *p)

}

type CozeServiceDeleteAPIArgs struct {
	Request *plugin.DeleteAPIRequest `thrift:"request,1"`
}

func NewCozeServiceDeleteAPIArgs() *CozeServiceDeleteAPIArgs {
	return &CozeServiceDeleteAPIArgs{}
}

func (p *CozeServiceDeleteAPIArgs) InitDefault() {
}

var CozeServiceDeleteAPIArgs_Request_DEFAULT *plugin.DeleteAPIRequest

func (p *CozeServiceDeleteAPIArgs) GetRequest() (v *plugin.DeleteAPIRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDeleteAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDeleteAPIArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDeleteAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDeleteAPIArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := plugin.NewDeleteAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDeleteAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteAPIArgs(%+v)", *p)

}

type CozeServiceDeleteAPIResult struct {
	Success *plugin.DeleteAPIResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteAPIResult() *CozeServiceDeleteAPIResult {
	return &CozeServiceDeleteAPIResult{}
}

func (p *CozeServiceDeleteAPIResult) InitDefault() {
}

var CozeServiceDeleteAPIResult_Success_DEFAULT *plugin.DeleteAPIResponse

func (p *CozeServiceDeleteAPIResult) GetSuccess() (v *plugin.DeleteAPIResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteAPIResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteAPIResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteAPIResult) ReadField0(iprot thrift.TProtocol) error {
	_field := plugin.NewDeleteAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteAPIResult(%+v)", *p)

}

type CozeServiceCreateWorkflowArgs struct {
	Request *workflow.CreateWorkflowRequest `thrift:"request,1"`
}

func NewCozeServiceCreateWorkflowArgs() *CozeServiceCreateWorkflowArgs {
	return &CozeServiceCreateWorkflowArgs{}
}

func (p *CozeServiceCreateWorkflowArgs) InitDefault() {
}

var CozeServiceCreateWorkflowArgs_Request_DEFAULT *workflow.CreateWorkflowRequest

func (p *CozeServiceCreateWorkflowArgs) GetRequest() (v *workflow.CreateWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCreateWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCreateWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCreateWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCreateWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewCreateWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCreateWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateWorkflowArgs(%+v)", *p)

}

type CozeServiceCreateWorkflowResult struct {
	Success *workflow.CreateWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateWorkflowResult() *CozeServiceCreateWorkflowResult {
	return &CozeServiceCreateWorkflowResult{}
}

func (p *CozeServiceCreateWorkflowResult) InitDefault() {
}

var CozeServiceCreateWorkflowResult_Success_DEFAULT *workflow.CreateWorkflowResponse

func (p *CozeServiceCreateWorkflowResult) GetSuccess() (v *workflow.CreateWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewCreateWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateWorkflowResult(%+v)", *p)

}

type CozeServiceGetCanvasInfoArgs struct {
	Request *workflow.GetCanvasInfoRequest `thrift:"request,1"`
}

func NewCozeServiceGetCanvasInfoArgs() *CozeServiceGetCanvasInfoArgs {
	return &CozeServiceGetCanvasInfoArgs{}
}

func (p *CozeServiceGetCanvasInfoArgs) InitDefault() {
}

var CozeServiceGetCanvasInfoArgs_Request_DEFAULT *workflow.GetCanvasInfoRequest

func (p *CozeServiceGetCanvasInfoArgs) GetRequest() (v *workflow.GetCanvasInfoRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetCanvasInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetCanvasInfoArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetCanvasInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetCanvasInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetCanvasInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetCanvasInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetCanvasInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetCanvasInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCanvasInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetCanvasInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetCanvasInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetCanvasInfoArgs(%+v)", *p)

}

type CozeServiceGetCanvasInfoResult struct {
	Success *workflow.GetCanvasInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetCanvasInfoResult() *CozeServiceGetCanvasInfoResult {
	return &CozeServiceGetCanvasInfoResult{}
}

func (p *CozeServiceGetCanvasInfoResult) InitDefault() {
}

var CozeServiceGetCanvasInfoResult_Success_DEFAULT *workflow.GetCanvasInfoResponse

func (p *CozeServiceGetCanvasInfoResult) GetSuccess() (v *workflow.GetCanvasInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetCanvasInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetCanvasInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetCanvasInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetCanvasInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetCanvasInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetCanvasInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetCanvasInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetCanvasInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCanvasInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetCanvasInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetCanvasInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetCanvasInfoResult(%+v)", *p)

}

type CozeServiceSaveWorkflowArgs struct {
	Request *workflow.SaveWorkflowRequest `thrift:"request,1"`
}

func NewCozeServiceSaveWorkflowArgs() *CozeServiceSaveWorkflowArgs {
	return &CozeServiceSaveWorkflowArgs{}
}

func (p *CozeServiceSaveWorkflowArgs) InitDefault() {
}

var CozeServiceSaveWorkflowArgs_Request_DEFAULT *workflow.SaveWorkflowRequest

func (p *CozeServiceSaveWorkflowArgs) GetRequest() (v *workflow.SaveWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceSaveWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceSaveWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceSaveWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceSaveWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceSaveWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceSaveWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewSaveWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceSaveWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceSaveWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceSaveWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceSaveWorkflowArgs(%+v)", *p)

}

type CozeServiceSaveWorkflowResult struct {
	Success *workflow.SaveWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceSaveWorkflowResult() *CozeServiceSaveWorkflowResult {
	return &CozeServiceSaveWorkflowResult{}
}

func (p *CozeServiceSaveWorkflowResult) InitDefault() {
}

var CozeServiceSaveWorkflowResult_Success_DEFAULT *workflow.SaveWorkflowResponse

func (p *CozeServiceSaveWorkflowResult) GetSuccess() (v *workflow.SaveWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceSaveWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceSaveWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceSaveWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceSaveWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceSaveWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceSaveWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewSaveWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceSaveWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceSaveWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceSaveWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceSaveWorkflowResult(%+v)", *p)

}

type CozeServiceUpdateWorkflowMetaArgs struct {
	Request *workflow.UpdateWorkflowMetaRequest `thrift:"request,1"`
}

func NewCozeServiceUpdateWorkflowMetaArgs() *CozeServiceUpdateWorkflowMetaArgs {
	return &CozeServiceUpdateWorkflowMetaArgs{}
}

func (p *CozeServiceUpdateWorkflowMetaArgs) InitDefault() {
}

var CozeServiceUpdateWorkflowMetaArgs_Request_DEFAULT *workflow.UpdateWorkflowMetaRequest

func (p *CozeServiceUpdateWorkflowMetaArgs) GetRequest() (v *workflow.UpdateWorkflowMetaRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdateWorkflowMetaArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdateWorkflowMetaArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdateWorkflowMetaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdateWorkflowMetaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateWorkflowMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateWorkflowMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewUpdateWorkflowMetaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdateWorkflowMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateWorkflowMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateWorkflowMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateWorkflowMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateWorkflowMetaArgs(%+v)", *p)

}

type CozeServiceUpdateWorkflowMetaResult struct {
	Success *workflow.UpdateWorkflowMetaResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateWorkflowMetaResult() *CozeServiceUpdateWorkflowMetaResult {
	return &CozeServiceUpdateWorkflowMetaResult{}
}

func (p *CozeServiceUpdateWorkflowMetaResult) InitDefault() {
}

var CozeServiceUpdateWorkflowMetaResult_Success_DEFAULT *workflow.UpdateWorkflowMetaResponse

func (p *CozeServiceUpdateWorkflowMetaResult) GetSuccess() (v *workflow.UpdateWorkflowMetaResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateWorkflowMetaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateWorkflowMetaResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateWorkflowMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateWorkflowMetaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateWorkflowMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateWorkflowMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewUpdateWorkflowMetaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateWorkflowMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateWorkflowMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateWorkflowMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateWorkflowMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateWorkflowMetaResult(%+v)", *p)

}

type CozeServiceDeleteWorkflowArgs struct {
	Request *workflow.DeleteWorkflowRequest `thrift:"request,1"`
}

func NewCozeServiceDeleteWorkflowArgs() *CozeServiceDeleteWorkflowArgs {
	return &CozeServiceDeleteWorkflowArgs{}
}

func (p *CozeServiceDeleteWorkflowArgs) InitDefault() {
}

var CozeServiceDeleteWorkflowArgs_Request_DEFAULT *workflow.DeleteWorkflowRequest

func (p *CozeServiceDeleteWorkflowArgs) GetRequest() (v *workflow.DeleteWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDeleteWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDeleteWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDeleteWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDeleteWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewDeleteWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDeleteWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteWorkflowArgs(%+v)", *p)

}

type CozeServiceDeleteWorkflowResult struct {
	Success *workflow.DeleteWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteWorkflowResult() *CozeServiceDeleteWorkflowResult {
	return &CozeServiceDeleteWorkflowResult{}
}

func (p *CozeServiceDeleteWorkflowResult) InitDefault() {
}

var CozeServiceDeleteWorkflowResult_Success_DEFAULT *workflow.DeleteWorkflowResponse

func (p *CozeServiceDeleteWorkflowResult) GetSuccess() (v *workflow.DeleteWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewDeleteWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteWorkflowResult(%+v)", *p)

}

type CozeServiceBatchDeleteWorkflowArgs struct {
	Request *workflow.BatchDeleteWorkflowRequest `thrift:"request,1"`
}

func NewCozeServiceBatchDeleteWorkflowArgs() *CozeServiceBatchDeleteWorkflowArgs {
	return &CozeServiceBatchDeleteWorkflowArgs{}
}

func (p *CozeServiceBatchDeleteWorkflowArgs) InitDefault() {
}

var CozeServiceBatchDeleteWorkflowArgs_Request_DEFAULT *workflow.BatchDeleteWorkflowRequest

func (p *CozeServiceBatchDeleteWorkflowArgs) GetRequest() (v *workflow.BatchDeleteWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceBatchDeleteWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceBatchDeleteWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceBatchDeleteWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceBatchDeleteWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceBatchDeleteWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceBatchDeleteWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewBatchDeleteWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceBatchDeleteWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceBatchDeleteWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceBatchDeleteWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceBatchDeleteWorkflowArgs(%+v)", *p)

}

type CozeServiceBatchDeleteWorkflowResult struct {
	Success *workflow.BatchDeleteWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceBatchDeleteWorkflowResult() *CozeServiceBatchDeleteWorkflowResult {
	return &CozeServiceBatchDeleteWorkflowResult{}
}

func (p *CozeServiceBatchDeleteWorkflowResult) InitDefault() {
}

var CozeServiceBatchDeleteWorkflowResult_Success_DEFAULT *workflow.BatchDeleteWorkflowResponse

func (p *CozeServiceBatchDeleteWorkflowResult) GetSuccess() (v *workflow.BatchDeleteWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceBatchDeleteWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceBatchDeleteWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceBatchDeleteWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceBatchDeleteWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceBatchDeleteWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceBatchDeleteWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewBatchDeleteWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceBatchDeleteWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceBatchDeleteWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceBatchDeleteWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceBatchDeleteWorkflowResult(%+v)", *p)

}

type CozeServiceGetDeleteStrategyArgs struct {
	Request *workflow.GetDeleteStrategyRequest `thrift:"request,1"`
}

func NewCozeServiceGetDeleteStrategyArgs() *CozeServiceGetDeleteStrategyArgs {
	return &CozeServiceGetDeleteStrategyArgs{}
}

func (p *CozeServiceGetDeleteStrategyArgs) InitDefault() {
}

var CozeServiceGetDeleteStrategyArgs_Request_DEFAULT *workflow.GetDeleteStrategyRequest

func (p *CozeServiceGetDeleteStrategyArgs) GetRequest() (v *workflow.GetDeleteStrategyRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetDeleteStrategyArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetDeleteStrategyArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetDeleteStrategyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetDeleteStrategyArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDeleteStrategyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDeleteStrategyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetDeleteStrategyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetDeleteStrategyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeleteStrategy_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDeleteStrategyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetDeleteStrategyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDeleteStrategyArgs(%+v)", *p)

}

type CozeServiceGetDeleteStrategyResult struct {
	Success *workflow.GetDeleteStrategyResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetDeleteStrategyResult() *CozeServiceGetDeleteStrategyResult {
	return &CozeServiceGetDeleteStrategyResult{}
}

func (p *CozeServiceGetDeleteStrategyResult) InitDefault() {
}

var CozeServiceGetDeleteStrategyResult_Success_DEFAULT *workflow.GetDeleteStrategyResponse

func (p *CozeServiceGetDeleteStrategyResult) GetSuccess() (v *workflow.GetDeleteStrategyResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetDeleteStrategyResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetDeleteStrategyResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetDeleteStrategyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetDeleteStrategyResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDeleteStrategyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDeleteStrategyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetDeleteStrategyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetDeleteStrategyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeleteStrategy_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDeleteStrategyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetDeleteStrategyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDeleteStrategyResult(%+v)", *p)

}

type CozeServicePublishWorkflowArgs struct {
	Request *workflow.PublishWorkflowRequest `thrift:"request,1"`
}

func NewCozeServicePublishWorkflowArgs() *CozeServicePublishWorkflowArgs {
	return &CozeServicePublishWorkflowArgs{}
}

func (p *CozeServicePublishWorkflowArgs) InitDefault() {
}

var CozeServicePublishWorkflowArgs_Request_DEFAULT *workflow.PublishWorkflowRequest

func (p *CozeServicePublishWorkflowArgs) GetRequest() (v *workflow.PublishWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServicePublishWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServicePublishWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServicePublishWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServicePublishWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServicePublishWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServicePublishWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewPublishWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServicePublishWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServicePublishWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServicePublishWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServicePublishWorkflowArgs(%+v)", *p)

}

type CozeServicePublishWorkflowResult struct {
	Success *workflow.PublishWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServicePublishWorkflowResult() *CozeServicePublishWorkflowResult {
	return &CozeServicePublishWorkflowResult{}
}

func (p *CozeServicePublishWorkflowResult) InitDefault() {
}

var CozeServicePublishWorkflowResult_Success_DEFAULT *workflow.PublishWorkflowResponse

func (p *CozeServicePublishWorkflowResult) GetSuccess() (v *workflow.PublishWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServicePublishWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServicePublishWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServicePublishWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServicePublishWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServicePublishWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServicePublishWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewPublishWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServicePublishWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublishWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServicePublishWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServicePublishWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServicePublishWorkflowResult(%+v)", *p)

}

type CozeServiceCopyWorkflowArgs struct {
	Request *workflow.CopyWorkflowRequest `thrift:"request,1"`
}

func NewCozeServiceCopyWorkflowArgs() *CozeServiceCopyWorkflowArgs {
	return &CozeServiceCopyWorkflowArgs{}
}

func (p *CozeServiceCopyWorkflowArgs) InitDefault() {
}

var CozeServiceCopyWorkflowArgs_Request_DEFAULT *workflow.CopyWorkflowRequest

func (p *CozeServiceCopyWorkflowArgs) GetRequest() (v *workflow.CopyWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCopyWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCopyWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCopyWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCopyWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCopyWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCopyWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewCopyWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCopyWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CopyWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCopyWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCopyWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCopyWorkflowArgs(%+v)", *p)

}

type CozeServiceCopyWorkflowResult struct {
	Success *workflow.CopyWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCopyWorkflowResult() *CozeServiceCopyWorkflowResult {
	return &CozeServiceCopyWorkflowResult{}
}

func (p *CozeServiceCopyWorkflowResult) InitDefault() {
}

var CozeServiceCopyWorkflowResult_Success_DEFAULT *workflow.CopyWorkflowResponse

func (p *CozeServiceCopyWorkflowResult) GetSuccess() (v *workflow.CopyWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCopyWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCopyWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCopyWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCopyWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCopyWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCopyWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewCopyWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCopyWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CopyWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCopyWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCopyWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCopyWorkflowResult(%+v)", *p)

}

type CozeServiceCopyWkTemplateApiArgs struct {
	Request *workflow.CopyWkTemplateApiRequest `thrift:"request,1"`
}

func NewCozeServiceCopyWkTemplateApiArgs() *CozeServiceCopyWkTemplateApiArgs {
	return &CozeServiceCopyWkTemplateApiArgs{}
}

func (p *CozeServiceCopyWkTemplateApiArgs) InitDefault() {
}

var CozeServiceCopyWkTemplateApiArgs_Request_DEFAULT *workflow.CopyWkTemplateApiRequest

func (p *CozeServiceCopyWkTemplateApiArgs) GetRequest() (v *workflow.CopyWkTemplateApiRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCopyWkTemplateApiArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCopyWkTemplateApiArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCopyWkTemplateApiArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCopyWkTemplateApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCopyWkTemplateApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCopyWkTemplateApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewCopyWkTemplateApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCopyWkTemplateApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CopyWkTemplateApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCopyWkTemplateApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCopyWkTemplateApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCopyWkTemplateApiArgs(%+v)", *p)

}

type CozeServiceCopyWkTemplateApiResult struct {
	Success *workflow.CopyWkTemplateApiResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCopyWkTemplateApiResult() *CozeServiceCopyWkTemplateApiResult {
	return &CozeServiceCopyWkTemplateApiResult{}
}

func (p *CozeServiceCopyWkTemplateApiResult) InitDefault() {
}

var CozeServiceCopyWkTemplateApiResult_Success_DEFAULT *workflow.CopyWkTemplateApiResponse

func (p *CozeServiceCopyWkTemplateApiResult) GetSuccess() (v *workflow.CopyWkTemplateApiResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCopyWkTemplateApiResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCopyWkTemplateApiResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCopyWkTemplateApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCopyWkTemplateApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCopyWkTemplateApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCopyWkTemplateApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewCopyWkTemplateApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCopyWkTemplateApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CopyWkTemplateApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCopyWkTemplateApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCopyWkTemplateApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCopyWkTemplateApiResult(%+v)", *p)

}

type CozeServiceGetReleasedWorkflowsArgs struct {
	Request *workflow.GetReleasedWorkflowsRequest `thrift:"request,1"`
}

func NewCozeServiceGetReleasedWorkflowsArgs() *CozeServiceGetReleasedWorkflowsArgs {
	return &CozeServiceGetReleasedWorkflowsArgs{}
}

func (p *CozeServiceGetReleasedWorkflowsArgs) InitDefault() {
}

var CozeServiceGetReleasedWorkflowsArgs_Request_DEFAULT *workflow.GetReleasedWorkflowsRequest

func (p *CozeServiceGetReleasedWorkflowsArgs) GetRequest() (v *workflow.GetReleasedWorkflowsRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetReleasedWorkflowsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetReleasedWorkflowsArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetReleasedWorkflowsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetReleasedWorkflowsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetReleasedWorkflowsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetReleasedWorkflowsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetReleasedWorkflowsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetReleasedWorkflowsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleasedWorkflows_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetReleasedWorkflowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetReleasedWorkflowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetReleasedWorkflowsArgs(%+v)", *p)

}

type CozeServiceGetReleasedWorkflowsResult struct {
	Success *workflow.GetReleasedWorkflowsResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetReleasedWorkflowsResult() *CozeServiceGetReleasedWorkflowsResult {
	return &CozeServiceGetReleasedWorkflowsResult{}
}

func (p *CozeServiceGetReleasedWorkflowsResult) InitDefault() {
}

var CozeServiceGetReleasedWorkflowsResult_Success_DEFAULT *workflow.GetReleasedWorkflowsResponse

func (p *CozeServiceGetReleasedWorkflowsResult) GetSuccess() (v *workflow.GetReleasedWorkflowsResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetReleasedWorkflowsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetReleasedWorkflowsResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetReleasedWorkflowsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetReleasedWorkflowsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetReleasedWorkflowsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetReleasedWorkflowsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetReleasedWorkflowsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetReleasedWorkflowsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleasedWorkflows_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetReleasedWorkflowsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetReleasedWorkflowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetReleasedWorkflowsResult(%+v)", *p)

}

type CozeServiceGetWorkflowReferencesArgs struct {
	Request *workflow.GetWorkflowReferencesRequest `thrift:"request,1"`
}

func NewCozeServiceGetWorkflowReferencesArgs() *CozeServiceGetWorkflowReferencesArgs {
	return &CozeServiceGetWorkflowReferencesArgs{}
}

func (p *CozeServiceGetWorkflowReferencesArgs) InitDefault() {
}

var CozeServiceGetWorkflowReferencesArgs_Request_DEFAULT *workflow.GetWorkflowReferencesRequest

func (p *CozeServiceGetWorkflowReferencesArgs) GetRequest() (v *workflow.GetWorkflowReferencesRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetWorkflowReferencesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetWorkflowReferencesArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetWorkflowReferencesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetWorkflowReferencesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkflowReferencesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowReferencesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowReferencesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetWorkflowReferencesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkflowReferences_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowReferencesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetWorkflowReferencesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkflowReferencesArgs(%+v)", *p)

}

type CozeServiceGetWorkflowReferencesResult struct {
	Success *workflow.GetWorkflowReferencesResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetWorkflowReferencesResult() *CozeServiceGetWorkflowReferencesResult {
	return &CozeServiceGetWorkflowReferencesResult{}
}

func (p *CozeServiceGetWorkflowReferencesResult) InitDefault() {
}

var CozeServiceGetWorkflowReferencesResult_Success_DEFAULT *workflow.GetWorkflowReferencesResponse

func (p *CozeServiceGetWorkflowReferencesResult) GetSuccess() (v *workflow.GetWorkflowReferencesResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetWorkflowReferencesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetWorkflowReferencesResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetWorkflowReferencesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetWorkflowReferencesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkflowReferencesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowReferencesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowReferencesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetWorkflowReferencesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkflowReferences_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowReferencesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetWorkflowReferencesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkflowReferencesResult(%+v)", *p)

}

type CozeServiceGetWorkFlowListArgs struct {
	Request *workflow.GetWorkFlowListRequest `thrift:"request,1"`
}

func NewCozeServiceGetWorkFlowListArgs() *CozeServiceGetWorkFlowListArgs {
	return &CozeServiceGetWorkFlowListArgs{}
}

func (p *CozeServiceGetWorkFlowListArgs) InitDefault() {
}

var CozeServiceGetWorkFlowListArgs_Request_DEFAULT *workflow.GetWorkFlowListRequest

func (p *CozeServiceGetWorkFlowListArgs) GetRequest() (v *workflow.GetWorkFlowListRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetWorkFlowListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetWorkFlowListArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetWorkFlowListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetWorkFlowListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkFlowListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkFlowListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetWorkFlowListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkFlowList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkFlowListArgs(%+v)", *p)

}

type CozeServiceGetWorkFlowListResult struct {
	Success *workflow.GetWorkFlowListResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetWorkFlowListResult() *CozeServiceGetWorkFlowListResult {
	return &CozeServiceGetWorkFlowListResult{}
}

func (p *CozeServiceGetWorkFlowListResult) InitDefault() {
}

var CozeServiceGetWorkFlowListResult_Success_DEFAULT *workflow.GetWorkFlowListResponse

func (p *CozeServiceGetWorkFlowListResult) GetSuccess() (v *workflow.GetWorkFlowListResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetWorkFlowListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetWorkFlowListResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetWorkFlowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetWorkFlowListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkFlowListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkFlowListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetWorkFlowListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkFlowList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkFlowListResult(%+v)", *p)

}

type CozeServiceQueryWorkflowNodeTypesArgs struct {
	Request *workflow.QueryWorkflowNodeTypeRequest `thrift:"request,1"`
}

func NewCozeServiceQueryWorkflowNodeTypesArgs() *CozeServiceQueryWorkflowNodeTypesArgs {
	return &CozeServiceQueryWorkflowNodeTypesArgs{}
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) InitDefault() {
}

var CozeServiceQueryWorkflowNodeTypesArgs_Request_DEFAULT *workflow.QueryWorkflowNodeTypeRequest

func (p *CozeServiceQueryWorkflowNodeTypesArgs) GetRequest() (v *workflow.QueryWorkflowNodeTypeRequest) {
	if !p.IsSetRequest() {
		return CozeServiceQueryWorkflowNodeTypesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceQueryWorkflowNodeTypesArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceQueryWorkflowNodeTypesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewQueryWorkflowNodeTypeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryWorkflowNodeTypes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceQueryWorkflowNodeTypesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceQueryWorkflowNodeTypesArgs(%+v)", *p)

}

type CozeServiceQueryWorkflowNodeTypesResult struct {
	Success *workflow.QueryWorkflowNodeTypeResponse `thrift:"success,0,optional"`
}

func NewCozeServiceQueryWorkflowNodeTypesResult() *CozeServiceQueryWorkflowNodeTypesResult {
	return &CozeServiceQueryWorkflowNodeTypesResult{}
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) InitDefault() {
}

var CozeServiceQueryWorkflowNodeTypesResult_Success_DEFAULT *workflow.QueryWorkflowNodeTypeResponse

func (p *CozeServiceQueryWorkflowNodeTypesResult) GetSuccess() (v *workflow.QueryWorkflowNodeTypeResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceQueryWorkflowNodeTypesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceQueryWorkflowNodeTypesResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceQueryWorkflowNodeTypesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewQueryWorkflowNodeTypeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryWorkflowNodeTypes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceQueryWorkflowNodeTypesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceQueryWorkflowNodeTypesResult(%+v)", *p)

}

type CozeServiceNodeTemplateListArgs struct {
	Request *workflow.NodeTemplateListRequest `thrift:"request,1"`
}

func NewCozeServiceNodeTemplateListArgs() *CozeServiceNodeTemplateListArgs {
	return &CozeServiceNodeTemplateListArgs{}
}

func (p *CozeServiceNodeTemplateListArgs) InitDefault() {
}

var CozeServiceNodeTemplateListArgs_Request_DEFAULT *workflow.NodeTemplateListRequest

func (p *CozeServiceNodeTemplateListArgs) GetRequest() (v *workflow.NodeTemplateListRequest) {
	if !p.IsSetRequest() {
		return CozeServiceNodeTemplateListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceNodeTemplateListArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceNodeTemplateListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceNodeTemplateListArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceNodeTemplateListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceNodeTemplateListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewNodeTemplateListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceNodeTemplateListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeTemplateList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceNodeTemplateListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceNodeTemplateListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceNodeTemplateListArgs(%+v)", *p)

}

type CozeServiceNodeTemplateListResult struct {
	Success *workflow.NodeTemplateListResponse `thrift:"success,0,optional"`
}

func NewCozeServiceNodeTemplateListResult() *CozeServiceNodeTemplateListResult {
	return &CozeServiceNodeTemplateListResult{}
}

func (p *CozeServiceNodeTemplateListResult) InitDefault() {
}

var CozeServiceNodeTemplateListResult_Success_DEFAULT *workflow.NodeTemplateListResponse

func (p *CozeServiceNodeTemplateListResult) GetSuccess() (v *workflow.NodeTemplateListResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceNodeTemplateListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceNodeTemplateListResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceNodeTemplateListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceNodeTemplateListResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceNodeTemplateListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceNodeTemplateListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewNodeTemplateListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceNodeTemplateListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeTemplateList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceNodeTemplateListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceNodeTemplateListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceNodeTemplateListResult(%+v)", *p)

}

type CozeServiceNodePanelSearchArgs struct {
	Request *workflow.NodePanelSearchRequest `thrift:"request,1"`
}

func NewCozeServiceNodePanelSearchArgs() *CozeServiceNodePanelSearchArgs {
	return &CozeServiceNodePanelSearchArgs{}
}

func (p *CozeServiceNodePanelSearchArgs) InitDefault() {
}

var CozeServiceNodePanelSearchArgs_Request_DEFAULT *workflow.NodePanelSearchRequest

func (p *CozeServiceNodePanelSearchArgs) GetRequest() (v *workflow.NodePanelSearchRequest) {
	if !p.IsSetRequest() {
		return CozeServiceNodePanelSearchArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceNodePanelSearchArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceNodePanelSearchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceNodePanelSearchArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceNodePanelSearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceNodePanelSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewNodePanelSearchRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceNodePanelSearchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePanelSearch_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceNodePanelSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceNodePanelSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceNodePanelSearchArgs(%+v)", *p)

}

type CozeServiceNodePanelSearchResult struct {
	Success *workflow.NodePanelSearchResponse `thrift:"success,0,optional"`
}

func NewCozeServiceNodePanelSearchResult() *CozeServiceNodePanelSearchResult {
	return &CozeServiceNodePanelSearchResult{}
}

func (p *CozeServiceNodePanelSearchResult) InitDefault() {
}

var CozeServiceNodePanelSearchResult_Success_DEFAULT *workflow.NodePanelSearchResponse

func (p *CozeServiceNodePanelSearchResult) GetSuccess() (v *workflow.NodePanelSearchResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceNodePanelSearchResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceNodePanelSearchResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceNodePanelSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceNodePanelSearchResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceNodePanelSearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceNodePanelSearchResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewNodePanelSearchResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceNodePanelSearchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePanelSearch_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceNodePanelSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceNodePanelSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceNodePanelSearchResult(%+v)", *p)

}

type CozeServiceGetLLMNodeFCSettingsMergedArgs struct {
	Req *workflow.GetLLMNodeFCSettingsMergedRequest `thrift:"req,1"`
}

func NewCozeServiceGetLLMNodeFCSettingsMergedArgs() *CozeServiceGetLLMNodeFCSettingsMergedArgs {
	return &CozeServiceGetLLMNodeFCSettingsMergedArgs{}
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) InitDefault() {
}

var CozeServiceGetLLMNodeFCSettingsMergedArgs_Req_DEFAULT *workflow.GetLLMNodeFCSettingsMergedRequest

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) GetReq() (v *workflow.GetLLMNodeFCSettingsMergedRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetLLMNodeFCSettingsMergedArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetLLMNodeFCSettingsMergedArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetLLMNodeFCSettingsMergedArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetLLMNodeFCSettingsMergedRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLLMNodeFCSettingsMerged_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetLLMNodeFCSettingsMergedArgs(%+v)", *p)

}

type CozeServiceGetLLMNodeFCSettingsMergedResult struct {
	Success *workflow.GetLLMNodeFCSettingsMergedResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetLLMNodeFCSettingsMergedResult() *CozeServiceGetLLMNodeFCSettingsMergedResult {
	return &CozeServiceGetLLMNodeFCSettingsMergedResult{}
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) InitDefault() {
}

var CozeServiceGetLLMNodeFCSettingsMergedResult_Success_DEFAULT *workflow.GetLLMNodeFCSettingsMergedResponse

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) GetSuccess() (v *workflow.GetLLMNodeFCSettingsMergedResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetLLMNodeFCSettingsMergedResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetLLMNodeFCSettingsMergedResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetLLMNodeFCSettingsMergedResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetLLMNodeFCSettingsMergedResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLLMNodeFCSettingsMerged_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingsMergedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetLLMNodeFCSettingsMergedResult(%+v)", *p)

}

type CozeServiceGetLLMNodeFCSettingDetailArgs struct {
	Req *workflow.GetLLMNodeFCSettingDetailRequest `thrift:"req,1"`
}

func NewCozeServiceGetLLMNodeFCSettingDetailArgs() *CozeServiceGetLLMNodeFCSettingDetailArgs {
	return &CozeServiceGetLLMNodeFCSettingDetailArgs{}
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) InitDefault() {
}

var CozeServiceGetLLMNodeFCSettingDetailArgs_Req_DEFAULT *workflow.GetLLMNodeFCSettingDetailRequest

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) GetReq() (v *workflow.GetLLMNodeFCSettingDetailRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetLLMNodeFCSettingDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetLLMNodeFCSettingDetailArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetLLMNodeFCSettingDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetLLMNodeFCSettingDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLLMNodeFCSettingDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetLLMNodeFCSettingDetailArgs(%+v)", *p)

}

type CozeServiceGetLLMNodeFCSettingDetailResult struct {
	Success *workflow.GetLLMNodeFCSettingDetailResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetLLMNodeFCSettingDetailResult() *CozeServiceGetLLMNodeFCSettingDetailResult {
	return &CozeServiceGetLLMNodeFCSettingDetailResult{}
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) InitDefault() {
}

var CozeServiceGetLLMNodeFCSettingDetailResult_Success_DEFAULT *workflow.GetLLMNodeFCSettingDetailResponse

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) GetSuccess() (v *workflow.GetLLMNodeFCSettingDetailResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetLLMNodeFCSettingDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetLLMNodeFCSettingDetailResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetLLMNodeFCSettingDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetLLMNodeFCSettingDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLLMNodeFCSettingDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetLLMNodeFCSettingDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetLLMNodeFCSettingDetailResult(%+v)", *p)

}

type CozeServiceWorkFlowTestRunArgs struct {
	Request *workflow.WorkFlowTestRunRequest `thrift:"request,1"`
}

func NewCozeServiceWorkFlowTestRunArgs() *CozeServiceWorkFlowTestRunArgs {
	return &CozeServiceWorkFlowTestRunArgs{}
}

func (p *CozeServiceWorkFlowTestRunArgs) InitDefault() {
}

var CozeServiceWorkFlowTestRunArgs_Request_DEFAULT *workflow.WorkFlowTestRunRequest

func (p *CozeServiceWorkFlowTestRunArgs) GetRequest() (v *workflow.WorkFlowTestRunRequest) {
	if !p.IsSetRequest() {
		return CozeServiceWorkFlowTestRunArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceWorkFlowTestRunArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceWorkFlowTestRunArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceWorkFlowTestRunArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceWorkFlowTestRunArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestRunArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewWorkFlowTestRunRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceWorkFlowTestRunArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkFlowTestRun_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestRunArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestRunArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceWorkFlowTestRunArgs(%+v)", *p)

}

type CozeServiceWorkFlowTestRunResult struct {
	Success *workflow.WorkFlowTestRunResponse `thrift:"success,0,optional"`
}

func NewCozeServiceWorkFlowTestRunResult() *CozeServiceWorkFlowTestRunResult {
	return &CozeServiceWorkFlowTestRunResult{}
}

func (p *CozeServiceWorkFlowTestRunResult) InitDefault() {
}

var CozeServiceWorkFlowTestRunResult_Success_DEFAULT *workflow.WorkFlowTestRunResponse

func (p *CozeServiceWorkFlowTestRunResult) GetSuccess() (v *workflow.WorkFlowTestRunResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceWorkFlowTestRunResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceWorkFlowTestRunResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceWorkFlowTestRunResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceWorkFlowTestRunResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceWorkFlowTestRunResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestRunResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewWorkFlowTestRunResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceWorkFlowTestRunResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkFlowTestRun_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestRunResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestRunResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceWorkFlowTestRunResult(%+v)", *p)

}

type CozeServiceWorkFlowTestResumeArgs struct {
	Request *workflow.WorkflowTestResumeRequest `thrift:"request,1"`
}

func NewCozeServiceWorkFlowTestResumeArgs() *CozeServiceWorkFlowTestResumeArgs {
	return &CozeServiceWorkFlowTestResumeArgs{}
}

func (p *CozeServiceWorkFlowTestResumeArgs) InitDefault() {
}

var CozeServiceWorkFlowTestResumeArgs_Request_DEFAULT *workflow.WorkflowTestResumeRequest

func (p *CozeServiceWorkFlowTestResumeArgs) GetRequest() (v *workflow.WorkflowTestResumeRequest) {
	if !p.IsSetRequest() {
		return CozeServiceWorkFlowTestResumeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceWorkFlowTestResumeArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceWorkFlowTestResumeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceWorkFlowTestResumeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceWorkFlowTestResumeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestResumeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewWorkflowTestResumeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceWorkFlowTestResumeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkFlowTestResume_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestResumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestResumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceWorkFlowTestResumeArgs(%+v)", *p)

}

type CozeServiceWorkFlowTestResumeResult struct {
	Success *workflow.WorkflowTestResumeResponse `thrift:"success,0,optional"`
}

func NewCozeServiceWorkFlowTestResumeResult() *CozeServiceWorkFlowTestResumeResult {
	return &CozeServiceWorkFlowTestResumeResult{}
}

func (p *CozeServiceWorkFlowTestResumeResult) InitDefault() {
}

var CozeServiceWorkFlowTestResumeResult_Success_DEFAULT *workflow.WorkflowTestResumeResponse

func (p *CozeServiceWorkFlowTestResumeResult) GetSuccess() (v *workflow.WorkflowTestResumeResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceWorkFlowTestResumeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceWorkFlowTestResumeResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceWorkFlowTestResumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceWorkFlowTestResumeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceWorkFlowTestResumeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestResumeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewWorkflowTestResumeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceWorkFlowTestResumeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkFlowTestResume_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestResumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceWorkFlowTestResumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceWorkFlowTestResumeResult(%+v)", *p)

}

type CozeServiceCancelWorkFlowArgs struct {
	Request *workflow.CancelWorkFlowRequest `thrift:"request,1"`
}

func NewCozeServiceCancelWorkFlowArgs() *CozeServiceCancelWorkFlowArgs {
	return &CozeServiceCancelWorkFlowArgs{}
}

func (p *CozeServiceCancelWorkFlowArgs) InitDefault() {
}

var CozeServiceCancelWorkFlowArgs_Request_DEFAULT *workflow.CancelWorkFlowRequest

func (p *CozeServiceCancelWorkFlowArgs) GetRequest() (v *workflow.CancelWorkFlowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCancelWorkFlowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCancelWorkFlowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCancelWorkFlowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCancelWorkFlowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCancelWorkFlowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCancelWorkFlowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewCancelWorkFlowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCancelWorkFlowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CancelWorkFlow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCancelWorkFlowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCancelWorkFlowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCancelWorkFlowArgs(%+v)", *p)

}

type CozeServiceCancelWorkFlowResult struct {
	Success *workflow.CancelWorkFlowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCancelWorkFlowResult() *CozeServiceCancelWorkFlowResult {
	return &CozeServiceCancelWorkFlowResult{}
}

func (p *CozeServiceCancelWorkFlowResult) InitDefault() {
}

var CozeServiceCancelWorkFlowResult_Success_DEFAULT *workflow.CancelWorkFlowResponse

func (p *CozeServiceCancelWorkFlowResult) GetSuccess() (v *workflow.CancelWorkFlowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCancelWorkFlowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCancelWorkFlowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCancelWorkFlowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCancelWorkFlowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCancelWorkFlowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCancelWorkFlowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewCancelWorkFlowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCancelWorkFlowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CancelWorkFlow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCancelWorkFlowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCancelWorkFlowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCancelWorkFlowResult(%+v)", *p)

}

type CozeServiceGetWorkFlowProcessArgs struct {
	Request *workflow.GetWorkflowProcessRequest `thrift:"request,1"`
}

func NewCozeServiceGetWorkFlowProcessArgs() *CozeServiceGetWorkFlowProcessArgs {
	return &CozeServiceGetWorkFlowProcessArgs{}
}

func (p *CozeServiceGetWorkFlowProcessArgs) InitDefault() {
}

var CozeServiceGetWorkFlowProcessArgs_Request_DEFAULT *workflow.GetWorkflowProcessRequest

func (p *CozeServiceGetWorkFlowProcessArgs) GetRequest() (v *workflow.GetWorkflowProcessRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetWorkFlowProcessArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetWorkFlowProcessArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetWorkFlowProcessArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetWorkFlowProcessArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkFlowProcessArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowProcessArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowProcessRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetWorkFlowProcessArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkFlowProcess_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowProcessArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowProcessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkFlowProcessArgs(%+v)", *p)

}

type CozeServiceGetWorkFlowProcessResult struct {
	Success *workflow.GetWorkflowProcessResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetWorkFlowProcessResult() *CozeServiceGetWorkFlowProcessResult {
	return &CozeServiceGetWorkFlowProcessResult{}
}

func (p *CozeServiceGetWorkFlowProcessResult) InitDefault() {
}

var CozeServiceGetWorkFlowProcessResult_Success_DEFAULT *workflow.GetWorkflowProcessResponse

func (p *CozeServiceGetWorkFlowProcessResult) GetSuccess() (v *workflow.GetWorkflowProcessResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetWorkFlowProcessResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetWorkFlowProcessResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetWorkFlowProcessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetWorkFlowProcessResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkFlowProcessResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowProcessResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowProcessResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetWorkFlowProcessResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkFlowProcess_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowProcessResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetWorkFlowProcessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkFlowProcessResult(%+v)", *p)

}

type CozeServiceGetNodeExecuteHistoryArgs struct {
	Request *workflow.GetNodeExecuteHistoryRequest `thrift:"request,1"`
}

func NewCozeServiceGetNodeExecuteHistoryArgs() *CozeServiceGetNodeExecuteHistoryArgs {
	return &CozeServiceGetNodeExecuteHistoryArgs{}
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) InitDefault() {
}

var CozeServiceGetNodeExecuteHistoryArgs_Request_DEFAULT *workflow.GetNodeExecuteHistoryRequest

func (p *CozeServiceGetNodeExecuteHistoryArgs) GetRequest() (v *workflow.GetNodeExecuteHistoryRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetNodeExecuteHistoryArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetNodeExecuteHistoryArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetNodeExecuteHistoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetNodeExecuteHistoryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodeExecuteHistory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetNodeExecuteHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetNodeExecuteHistoryArgs(%+v)", *p)

}

type CozeServiceGetNodeExecuteHistoryResult struct {
	Success *workflow.GetNodeExecuteHistoryResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetNodeExecuteHistoryResult() *CozeServiceGetNodeExecuteHistoryResult {
	return &CozeServiceGetNodeExecuteHistoryResult{}
}

func (p *CozeServiceGetNodeExecuteHistoryResult) InitDefault() {
}

var CozeServiceGetNodeExecuteHistoryResult_Success_DEFAULT *workflow.GetNodeExecuteHistoryResponse

func (p *CozeServiceGetNodeExecuteHistoryResult) GetSuccess() (v *workflow.GetNodeExecuteHistoryResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetNodeExecuteHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetNodeExecuteHistoryResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetNodeExecuteHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetNodeExecuteHistoryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetNodeExecuteHistoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetNodeExecuteHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetNodeExecuteHistoryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetNodeExecuteHistoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodeExecuteHistory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetNodeExecuteHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetNodeExecuteHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetNodeExecuteHistoryResult(%+v)", *p)

}

type CozeServiceGetApiDetailArgs struct {
	Request *workflow.GetApiDetailRequest `thrift:"request,1"`
}

func NewCozeServiceGetApiDetailArgs() *CozeServiceGetApiDetailArgs {
	return &CozeServiceGetApiDetailArgs{}
}

func (p *CozeServiceGetApiDetailArgs) InitDefault() {
}

var CozeServiceGetApiDetailArgs_Request_DEFAULT *workflow.GetApiDetailRequest

func (p *CozeServiceGetApiDetailArgs) GetRequest() (v *workflow.GetApiDetailRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetApiDetailArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetApiDetailArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetApiDetailArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetApiDetailArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetApiDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetApiDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetApiDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetApiDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetApiDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetApiDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetApiDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetApiDetailArgs(%+v)", *p)

}

type CozeServiceGetApiDetailResult struct {
	Success *workflow.GetApiDetailResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetApiDetailResult() *CozeServiceGetApiDetailResult {
	return &CozeServiceGetApiDetailResult{}
}

func (p *CozeServiceGetApiDetailResult) InitDefault() {
}

var CozeServiceGetApiDetailResult_Success_DEFAULT *workflow.GetApiDetailResponse

func (p *CozeServiceGetApiDetailResult) GetSuccess() (v *workflow.GetApiDetailResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetApiDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetApiDetailResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetApiDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetApiDetailResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetApiDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetApiDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetApiDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetApiDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetApiDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetApiDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetApiDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetApiDetailResult(%+v)", *p)

}

type CozeServiceWorkflowNodeDebugV2Args struct {
	Request *workflow.WorkflowNodeDebugV2Request `thrift:"request,1"`
}

func NewCozeServiceWorkflowNodeDebugV2Args() *CozeServiceWorkflowNodeDebugV2Args {
	return &CozeServiceWorkflowNodeDebugV2Args{}
}

func (p *CozeServiceWorkflowNodeDebugV2Args) InitDefault() {
}

var CozeServiceWorkflowNodeDebugV2Args_Request_DEFAULT *workflow.WorkflowNodeDebugV2Request

func (p *CozeServiceWorkflowNodeDebugV2Args) GetRequest() (v *workflow.WorkflowNodeDebugV2Request) {
	if !p.IsSetRequest() {
		return CozeServiceWorkflowNodeDebugV2Args_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceWorkflowNodeDebugV2Args = map[int16]string{
	1: "request",
}

func (p *CozeServiceWorkflowNodeDebugV2Args) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceWorkflowNodeDebugV2Args) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceWorkflowNodeDebugV2Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceWorkflowNodeDebugV2Args) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewWorkflowNodeDebugV2Request()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceWorkflowNodeDebugV2Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkflowNodeDebugV2_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceWorkflowNodeDebugV2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceWorkflowNodeDebugV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceWorkflowNodeDebugV2Args(%+v)", *p)

}

type CozeServiceWorkflowNodeDebugV2Result struct {
	Success *workflow.WorkflowNodeDebugV2Response `thrift:"success,0,optional"`
}

func NewCozeServiceWorkflowNodeDebugV2Result() *CozeServiceWorkflowNodeDebugV2Result {
	return &CozeServiceWorkflowNodeDebugV2Result{}
}

func (p *CozeServiceWorkflowNodeDebugV2Result) InitDefault() {
}

var CozeServiceWorkflowNodeDebugV2Result_Success_DEFAULT *workflow.WorkflowNodeDebugV2Response

func (p *CozeServiceWorkflowNodeDebugV2Result) GetSuccess() (v *workflow.WorkflowNodeDebugV2Response) {
	if !p.IsSetSuccess() {
		return CozeServiceWorkflowNodeDebugV2Result_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceWorkflowNodeDebugV2Result = map[int16]string{
	0: "success",
}

func (p *CozeServiceWorkflowNodeDebugV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceWorkflowNodeDebugV2Result) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceWorkflowNodeDebugV2Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceWorkflowNodeDebugV2Result) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewWorkflowNodeDebugV2Response()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceWorkflowNodeDebugV2Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkflowNodeDebugV2_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceWorkflowNodeDebugV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceWorkflowNodeDebugV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceWorkflowNodeDebugV2Result(%+v)", *p)

}

type CozeServiceSignImageURLArgs struct {
	Request *workflow.SignImageURLRequest `thrift:"request,1"`
}

func NewCozeServiceSignImageURLArgs() *CozeServiceSignImageURLArgs {
	return &CozeServiceSignImageURLArgs{}
}

func (p *CozeServiceSignImageURLArgs) InitDefault() {
}

var CozeServiceSignImageURLArgs_Request_DEFAULT *workflow.SignImageURLRequest

func (p *CozeServiceSignImageURLArgs) GetRequest() (v *workflow.SignImageURLRequest) {
	if !p.IsSetRequest() {
		return CozeServiceSignImageURLArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceSignImageURLArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceSignImageURLArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceSignImageURLArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceSignImageURLArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceSignImageURLArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewSignImageURLRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceSignImageURLArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignImageURL_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceSignImageURLArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceSignImageURLArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceSignImageURLArgs(%+v)", *p)

}

type CozeServiceSignImageURLResult struct {
	Success *workflow.SignImageURLResponse `thrift:"success,0,optional"`
}

func NewCozeServiceSignImageURLResult() *CozeServiceSignImageURLResult {
	return &CozeServiceSignImageURLResult{}
}

func (p *CozeServiceSignImageURLResult) InitDefault() {
}

var CozeServiceSignImageURLResult_Success_DEFAULT *workflow.SignImageURLResponse

func (p *CozeServiceSignImageURLResult) GetSuccess() (v *workflow.SignImageURLResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceSignImageURLResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceSignImageURLResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceSignImageURLResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceSignImageURLResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceSignImageURLResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceSignImageURLResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewSignImageURLResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceSignImageURLResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignImageURL_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceSignImageURLResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceSignImageURLResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceSignImageURLResult(%+v)", *p)

}

type CozeServiceCreateProjectConversationDefArgs struct {
	Request *workflow.CreateProjectConversationDefRequest `thrift:"request,1"`
}

func NewCozeServiceCreateProjectConversationDefArgs() *CozeServiceCreateProjectConversationDefArgs {
	return &CozeServiceCreateProjectConversationDefArgs{}
}

func (p *CozeServiceCreateProjectConversationDefArgs) InitDefault() {
}

var CozeServiceCreateProjectConversationDefArgs_Request_DEFAULT *workflow.CreateProjectConversationDefRequest

func (p *CozeServiceCreateProjectConversationDefArgs) GetRequest() (v *workflow.CreateProjectConversationDefRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCreateProjectConversationDefArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCreateProjectConversationDefArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCreateProjectConversationDefArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCreateProjectConversationDefArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateProjectConversationDefArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateProjectConversationDefArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewCreateProjectConversationDefRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCreateProjectConversationDefArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateProjectConversationDef_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateProjectConversationDefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateProjectConversationDefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateProjectConversationDefArgs(%+v)", *p)

}

type CozeServiceCreateProjectConversationDefResult struct {
	Success *workflow.CreateProjectConversationDefResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateProjectConversationDefResult() *CozeServiceCreateProjectConversationDefResult {
	return &CozeServiceCreateProjectConversationDefResult{}
}

func (p *CozeServiceCreateProjectConversationDefResult) InitDefault() {
}

var CozeServiceCreateProjectConversationDefResult_Success_DEFAULT *workflow.CreateProjectConversationDefResponse

func (p *CozeServiceCreateProjectConversationDefResult) GetSuccess() (v *workflow.CreateProjectConversationDefResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateProjectConversationDefResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateProjectConversationDefResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateProjectConversationDefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateProjectConversationDefResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateProjectConversationDefResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateProjectConversationDefResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewCreateProjectConversationDefResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateProjectConversationDefResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateProjectConversationDef_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateProjectConversationDefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateProjectConversationDefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateProjectConversationDefResult(%+v)", *p)

}

type CozeServiceUpdateProjectConversationDefArgs struct {
	Request *workflow.UpdateProjectConversationDefRequest `thrift:"request,1"`
}

func NewCozeServiceUpdateProjectConversationDefArgs() *CozeServiceUpdateProjectConversationDefArgs {
	return &CozeServiceUpdateProjectConversationDefArgs{}
}

func (p *CozeServiceUpdateProjectConversationDefArgs) InitDefault() {
}

var CozeServiceUpdateProjectConversationDefArgs_Request_DEFAULT *workflow.UpdateProjectConversationDefRequest

func (p *CozeServiceUpdateProjectConversationDefArgs) GetRequest() (v *workflow.UpdateProjectConversationDefRequest) {
	if !p.IsSetRequest() {
		return CozeServiceUpdateProjectConversationDefArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceUpdateProjectConversationDefArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceUpdateProjectConversationDefArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceUpdateProjectConversationDefArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateProjectConversationDefArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectConversationDefArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewUpdateProjectConversationDefRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceUpdateProjectConversationDefArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateProjectConversationDef_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectConversationDefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateProjectConversationDefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateProjectConversationDefArgs(%+v)", *p)

}

type CozeServiceUpdateProjectConversationDefResult struct {
	Success *workflow.UpdateProjectConversationDefResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateProjectConversationDefResult() *CozeServiceUpdateProjectConversationDefResult {
	return &CozeServiceUpdateProjectConversationDefResult{}
}

func (p *CozeServiceUpdateProjectConversationDefResult) InitDefault() {
}

var CozeServiceUpdateProjectConversationDefResult_Success_DEFAULT *workflow.UpdateProjectConversationDefResponse

func (p *CozeServiceUpdateProjectConversationDefResult) GetSuccess() (v *workflow.UpdateProjectConversationDefResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateProjectConversationDefResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateProjectConversationDefResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateProjectConversationDefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateProjectConversationDefResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateProjectConversationDefResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectConversationDefResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewUpdateProjectConversationDefResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateProjectConversationDefResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateProjectConversationDef_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateProjectConversationDefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateProjectConversationDefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateProjectConversationDefResult(%+v)", *p)

}

type CozeServiceDeleteProjectConversationDefArgs struct {
	Request *workflow.DeleteProjectConversationDefRequest `thrift:"request,1"`
}

func NewCozeServiceDeleteProjectConversationDefArgs() *CozeServiceDeleteProjectConversationDefArgs {
	return &CozeServiceDeleteProjectConversationDefArgs{}
}

func (p *CozeServiceDeleteProjectConversationDefArgs) InitDefault() {
}

var CozeServiceDeleteProjectConversationDefArgs_Request_DEFAULT *workflow.DeleteProjectConversationDefRequest

func (p *CozeServiceDeleteProjectConversationDefArgs) GetRequest() (v *workflow.DeleteProjectConversationDefRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDeleteProjectConversationDefArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDeleteProjectConversationDefArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDeleteProjectConversationDefArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDeleteProjectConversationDefArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteProjectConversationDefArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteProjectConversationDefArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewDeleteProjectConversationDefRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDeleteProjectConversationDefArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteProjectConversationDef_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteProjectConversationDefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteProjectConversationDefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteProjectConversationDefArgs(%+v)", *p)

}

type CozeServiceDeleteProjectConversationDefResult struct {
	Success *workflow.DeleteProjectConversationDefResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteProjectConversationDefResult() *CozeServiceDeleteProjectConversationDefResult {
	return &CozeServiceDeleteProjectConversationDefResult{}
}

func (p *CozeServiceDeleteProjectConversationDefResult) InitDefault() {
}

var CozeServiceDeleteProjectConversationDefResult_Success_DEFAULT *workflow.DeleteProjectConversationDefResponse

func (p *CozeServiceDeleteProjectConversationDefResult) GetSuccess() (v *workflow.DeleteProjectConversationDefResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteProjectConversationDefResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteProjectConversationDefResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteProjectConversationDefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteProjectConversationDefResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteProjectConversationDefResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteProjectConversationDefResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewDeleteProjectConversationDefResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteProjectConversationDefResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteProjectConversationDef_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteProjectConversationDefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteProjectConversationDefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteProjectConversationDefResult(%+v)", *p)

}

type CozeServiceListProjectConversationDefArgs struct {
	Request *workflow.ListProjectConversationRequest `thrift:"request,1"`
}

func NewCozeServiceListProjectConversationDefArgs() *CozeServiceListProjectConversationDefArgs {
	return &CozeServiceListProjectConversationDefArgs{}
}

func (p *CozeServiceListProjectConversationDefArgs) InitDefault() {
}

var CozeServiceListProjectConversationDefArgs_Request_DEFAULT *workflow.ListProjectConversationRequest

func (p *CozeServiceListProjectConversationDefArgs) GetRequest() (v *workflow.ListProjectConversationRequest) {
	if !p.IsSetRequest() {
		return CozeServiceListProjectConversationDefArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceListProjectConversationDefArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceListProjectConversationDefArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceListProjectConversationDefArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListProjectConversationDefArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListProjectConversationDefArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewListProjectConversationRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceListProjectConversationDefArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListProjectConversationDef_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListProjectConversationDefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListProjectConversationDefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListProjectConversationDefArgs(%+v)", *p)

}

type CozeServiceListProjectConversationDefResult struct {
	Success *workflow.ListProjectConversationResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListProjectConversationDefResult() *CozeServiceListProjectConversationDefResult {
	return &CozeServiceListProjectConversationDefResult{}
}

func (p *CozeServiceListProjectConversationDefResult) InitDefault() {
}

var CozeServiceListProjectConversationDefResult_Success_DEFAULT *workflow.ListProjectConversationResponse

func (p *CozeServiceListProjectConversationDefResult) GetSuccess() (v *workflow.ListProjectConversationResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListProjectConversationDefResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListProjectConversationDefResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListProjectConversationDefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListProjectConversationDefResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListProjectConversationDefResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListProjectConversationDefResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewListProjectConversationResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListProjectConversationDefResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListProjectConversationDef_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListProjectConversationDefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListProjectConversationDefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListProjectConversationDefResult(%+v)", *p)

}

type CozeServiceListRootSpansArgs struct {
	Req *workflow.ListRootSpansRequest `thrift:"req,1"`
}

func NewCozeServiceListRootSpansArgs() *CozeServiceListRootSpansArgs {
	return &CozeServiceListRootSpansArgs{}
}

func (p *CozeServiceListRootSpansArgs) InitDefault() {
}

var CozeServiceListRootSpansArgs_Req_DEFAULT *workflow.ListRootSpansRequest

func (p *CozeServiceListRootSpansArgs) GetReq() (v *workflow.ListRootSpansRequest) {
	if !p.IsSetReq() {
		return CozeServiceListRootSpansArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceListRootSpansArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceListRootSpansArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceListRootSpansArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListRootSpansArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListRootSpansArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewListRootSpansRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceListRootSpansArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListRootSpans_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListRootSpansArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListRootSpansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListRootSpansArgs(%+v)", *p)

}

type CozeServiceListRootSpansResult struct {
	Success *workflow.ListRootSpansResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListRootSpansResult() *CozeServiceListRootSpansResult {
	return &CozeServiceListRootSpansResult{}
}

func (p *CozeServiceListRootSpansResult) InitDefault() {
}

var CozeServiceListRootSpansResult_Success_DEFAULT *workflow.ListRootSpansResponse

func (p *CozeServiceListRootSpansResult) GetSuccess() (v *workflow.ListRootSpansResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListRootSpansResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListRootSpansResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListRootSpansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListRootSpansResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListRootSpansResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListRootSpansResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewListRootSpansResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListRootSpansResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListRootSpans_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListRootSpansResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListRootSpansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListRootSpansResult(%+v)", *p)

}

type CozeServiceGetTraceSDKArgs struct {
	Req *workflow.GetTraceSDKRequest `thrift:"req,1"`
}

func NewCozeServiceGetTraceSDKArgs() *CozeServiceGetTraceSDKArgs {
	return &CozeServiceGetTraceSDKArgs{}
}

func (p *CozeServiceGetTraceSDKArgs) InitDefault() {
}

var CozeServiceGetTraceSDKArgs_Req_DEFAULT *workflow.GetTraceSDKRequest

func (p *CozeServiceGetTraceSDKArgs) GetReq() (v *workflow.GetTraceSDKRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetTraceSDKArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetTraceSDKArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetTraceSDKArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetTraceSDKArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetTraceSDKArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetTraceSDKArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetTraceSDKRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetTraceSDKArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTraceSDK_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetTraceSDKArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetTraceSDKArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetTraceSDKArgs(%+v)", *p)

}

type CozeServiceGetTraceSDKResult struct {
	Success *workflow.GetTraceSDKResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetTraceSDKResult() *CozeServiceGetTraceSDKResult {
	return &CozeServiceGetTraceSDKResult{}
}

func (p *CozeServiceGetTraceSDKResult) InitDefault() {
}

var CozeServiceGetTraceSDKResult_Success_DEFAULT *workflow.GetTraceSDKResponse

func (p *CozeServiceGetTraceSDKResult) GetSuccess() (v *workflow.GetTraceSDKResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetTraceSDKResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetTraceSDKResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetTraceSDKResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetTraceSDKResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetTraceSDKResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetTraceSDKResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetTraceSDKResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetTraceSDKResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTraceSDK_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetTraceSDKResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetTraceSDKResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetTraceSDKResult(%+v)", *p)

}

type CozeServiceGetWorkflowDetailArgs struct {
	Request *workflow.GetWorkflowDetailRequest `thrift:"request,1"`
}

func NewCozeServiceGetWorkflowDetailArgs() *CozeServiceGetWorkflowDetailArgs {
	return &CozeServiceGetWorkflowDetailArgs{}
}

func (p *CozeServiceGetWorkflowDetailArgs) InitDefault() {
}

var CozeServiceGetWorkflowDetailArgs_Request_DEFAULT *workflow.GetWorkflowDetailRequest

func (p *CozeServiceGetWorkflowDetailArgs) GetRequest() (v *workflow.GetWorkflowDetailRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetWorkflowDetailArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetWorkflowDetailArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetWorkflowDetailArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetWorkflowDetailArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkflowDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetWorkflowDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkflowDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkflowDetailArgs(%+v)", *p)

}

type CozeServiceGetWorkflowDetailResult struct {
	Success *workflow.GetWorkflowDetailResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetWorkflowDetailResult() *CozeServiceGetWorkflowDetailResult {
	return &CozeServiceGetWorkflowDetailResult{}
}

func (p *CozeServiceGetWorkflowDetailResult) InitDefault() {
}

var CozeServiceGetWorkflowDetailResult_Success_DEFAULT *workflow.GetWorkflowDetailResponse

func (p *CozeServiceGetWorkflowDetailResult) GetSuccess() (v *workflow.GetWorkflowDetailResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetWorkflowDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetWorkflowDetailResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetWorkflowDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetWorkflowDetailResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkflowDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetWorkflowDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkflowDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkflowDetailResult(%+v)", *p)

}

type CozeServiceGetWorkflowDetailInfoArgs struct {
	Request *workflow.GetWorkflowDetailInfoRequest `thrift:"request,1"`
}

func NewCozeServiceGetWorkflowDetailInfoArgs() *CozeServiceGetWorkflowDetailInfoArgs {
	return &CozeServiceGetWorkflowDetailInfoArgs{}
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) InitDefault() {
}

var CozeServiceGetWorkflowDetailInfoArgs_Request_DEFAULT *workflow.GetWorkflowDetailInfoRequest

func (p *CozeServiceGetWorkflowDetailInfoArgs) GetRequest() (v *workflow.GetWorkflowDetailInfoRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetWorkflowDetailInfoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetWorkflowDetailInfoArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkflowDetailInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowDetailInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkflowDetailInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkflowDetailInfoArgs(%+v)", *p)

}

type CozeServiceGetWorkflowDetailInfoResult struct {
	Success *workflow.GetWorkflowDetailInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetWorkflowDetailInfoResult() *CozeServiceGetWorkflowDetailInfoResult {
	return &CozeServiceGetWorkflowDetailInfoResult{}
}

func (p *CozeServiceGetWorkflowDetailInfoResult) InitDefault() {
}

var CozeServiceGetWorkflowDetailInfoResult_Success_DEFAULT *workflow.GetWorkflowDetailInfoResponse

func (p *CozeServiceGetWorkflowDetailInfoResult) GetSuccess() (v *workflow.GetWorkflowDetailInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetWorkflowDetailInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetWorkflowDetailInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetWorkflowDetailInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetWorkflowDetailInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetWorkflowDetailInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetWorkflowDetailInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetWorkflowDetailInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetWorkflowDetailInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetWorkflowDetailInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetWorkflowDetailInfoResult(%+v)", *p)

}

type CozeServiceValidateTreeArgs struct {
	Request *workflow.ValidateTreeRequest `thrift:"request,1"`
}

func NewCozeServiceValidateTreeArgs() *CozeServiceValidateTreeArgs {
	return &CozeServiceValidateTreeArgs{}
}

func (p *CozeServiceValidateTreeArgs) InitDefault() {
}

var CozeServiceValidateTreeArgs_Request_DEFAULT *workflow.ValidateTreeRequest

func (p *CozeServiceValidateTreeArgs) GetRequest() (v *workflow.ValidateTreeRequest) {
	if !p.IsSetRequest() {
		return CozeServiceValidateTreeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceValidateTreeArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceValidateTreeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceValidateTreeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceValidateTreeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceValidateTreeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewValidateTreeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceValidateTreeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateTree_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceValidateTreeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceValidateTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceValidateTreeArgs(%+v)", *p)

}

type CozeServiceValidateTreeResult struct {
	Success *workflow.ValidateTreeResponse `thrift:"success,0,optional"`
}

func NewCozeServiceValidateTreeResult() *CozeServiceValidateTreeResult {
	return &CozeServiceValidateTreeResult{}
}

func (p *CozeServiceValidateTreeResult) InitDefault() {
}

var CozeServiceValidateTreeResult_Success_DEFAULT *workflow.ValidateTreeResponse

func (p *CozeServiceValidateTreeResult) GetSuccess() (v *workflow.ValidateTreeResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceValidateTreeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceValidateTreeResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceValidateTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceValidateTreeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceValidateTreeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceValidateTreeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewValidateTreeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceValidateTreeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateTree_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceValidateTreeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceValidateTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceValidateTreeResult(%+v)", *p)

}

type CozeServiceGetChatFlowRoleArgs struct {
	Request *workflow.GetChatFlowRoleRequest `thrift:"request,1"`
}

func NewCozeServiceGetChatFlowRoleArgs() *CozeServiceGetChatFlowRoleArgs {
	return &CozeServiceGetChatFlowRoleArgs{}
}

func (p *CozeServiceGetChatFlowRoleArgs) InitDefault() {
}

var CozeServiceGetChatFlowRoleArgs_Request_DEFAULT *workflow.GetChatFlowRoleRequest

func (p *CozeServiceGetChatFlowRoleArgs) GetRequest() (v *workflow.GetChatFlowRoleRequest) {
	if !p.IsSetRequest() {
		return CozeServiceGetChatFlowRoleArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceGetChatFlowRoleArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceGetChatFlowRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceGetChatFlowRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetChatFlowRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetChatFlowRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewGetChatFlowRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceGetChatFlowRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatFlowRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetChatFlowRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetChatFlowRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetChatFlowRoleArgs(%+v)", *p)

}

type CozeServiceGetChatFlowRoleResult struct {
	Success *workflow.GetChatFlowRoleResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetChatFlowRoleResult() *CozeServiceGetChatFlowRoleResult {
	return &CozeServiceGetChatFlowRoleResult{}
}

func (p *CozeServiceGetChatFlowRoleResult) InitDefault() {
}

var CozeServiceGetChatFlowRoleResult_Success_DEFAULT *workflow.GetChatFlowRoleResponse

func (p *CozeServiceGetChatFlowRoleResult) GetSuccess() (v *workflow.GetChatFlowRoleResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetChatFlowRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetChatFlowRoleResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetChatFlowRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetChatFlowRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetChatFlowRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetChatFlowRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewGetChatFlowRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetChatFlowRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChatFlowRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetChatFlowRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetChatFlowRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetChatFlowRoleResult(%+v)", *p)

}

type CozeServiceCreateChatFlowRoleArgs struct {
	Request *workflow.CreateChatFlowRoleRequest `thrift:"request,1"`
}

func NewCozeServiceCreateChatFlowRoleArgs() *CozeServiceCreateChatFlowRoleArgs {
	return &CozeServiceCreateChatFlowRoleArgs{}
}

func (p *CozeServiceCreateChatFlowRoleArgs) InitDefault() {
}

var CozeServiceCreateChatFlowRoleArgs_Request_DEFAULT *workflow.CreateChatFlowRoleRequest

func (p *CozeServiceCreateChatFlowRoleArgs) GetRequest() (v *workflow.CreateChatFlowRoleRequest) {
	if !p.IsSetRequest() {
		return CozeServiceCreateChatFlowRoleArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceCreateChatFlowRoleArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceCreateChatFlowRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceCreateChatFlowRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateChatFlowRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateChatFlowRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewCreateChatFlowRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceCreateChatFlowRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateChatFlowRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateChatFlowRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateChatFlowRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateChatFlowRoleArgs(%+v)", *p)

}

type CozeServiceCreateChatFlowRoleResult struct {
	Success *workflow.CreateChatFlowRoleResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateChatFlowRoleResult() *CozeServiceCreateChatFlowRoleResult {
	return &CozeServiceCreateChatFlowRoleResult{}
}

func (p *CozeServiceCreateChatFlowRoleResult) InitDefault() {
}

var CozeServiceCreateChatFlowRoleResult_Success_DEFAULT *workflow.CreateChatFlowRoleResponse

func (p *CozeServiceCreateChatFlowRoleResult) GetSuccess() (v *workflow.CreateChatFlowRoleResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateChatFlowRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateChatFlowRoleResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateChatFlowRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateChatFlowRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateChatFlowRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateChatFlowRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewCreateChatFlowRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateChatFlowRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateChatFlowRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateChatFlowRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateChatFlowRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateChatFlowRoleResult(%+v)", *p)

}

type CozeServiceDeleteChatFlowRoleArgs struct {
	Request *workflow.DeleteChatFlowRoleRequest `thrift:"request,1"`
}

func NewCozeServiceDeleteChatFlowRoleArgs() *CozeServiceDeleteChatFlowRoleArgs {
	return &CozeServiceDeleteChatFlowRoleArgs{}
}

func (p *CozeServiceDeleteChatFlowRoleArgs) InitDefault() {
}

var CozeServiceDeleteChatFlowRoleArgs_Request_DEFAULT *workflow.DeleteChatFlowRoleRequest

func (p *CozeServiceDeleteChatFlowRoleArgs) GetRequest() (v *workflow.DeleteChatFlowRoleRequest) {
	if !p.IsSetRequest() {
		return CozeServiceDeleteChatFlowRoleArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceDeleteChatFlowRoleArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceDeleteChatFlowRoleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceDeleteChatFlowRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteChatFlowRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteChatFlowRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewDeleteChatFlowRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceDeleteChatFlowRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteChatFlowRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteChatFlowRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteChatFlowRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteChatFlowRoleArgs(%+v)", *p)

}

type CozeServiceDeleteChatFlowRoleResult struct {
	Success *workflow.DeleteChatFlowRoleResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteChatFlowRoleResult() *CozeServiceDeleteChatFlowRoleResult {
	return &CozeServiceDeleteChatFlowRoleResult{}
}

func (p *CozeServiceDeleteChatFlowRoleResult) InitDefault() {
}

var CozeServiceDeleteChatFlowRoleResult_Success_DEFAULT *workflow.DeleteChatFlowRoleResponse

func (p *CozeServiceDeleteChatFlowRoleResult) GetSuccess() (v *workflow.DeleteChatFlowRoleResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteChatFlowRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteChatFlowRoleResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteChatFlowRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteChatFlowRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteChatFlowRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteChatFlowRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewDeleteChatFlowRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteChatFlowRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteChatFlowRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteChatFlowRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteChatFlowRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteChatFlowRoleResult(%+v)", *p)

}

type CozeServiceListPublishWorkflowArgs struct {
	Request *workflow.ListPublishWorkflowRequest `thrift:"request,1"`
}

func NewCozeServiceListPublishWorkflowArgs() *CozeServiceListPublishWorkflowArgs {
	return &CozeServiceListPublishWorkflowArgs{}
}

func (p *CozeServiceListPublishWorkflowArgs) InitDefault() {
}

var CozeServiceListPublishWorkflowArgs_Request_DEFAULT *workflow.ListPublishWorkflowRequest

func (p *CozeServiceListPublishWorkflowArgs) GetRequest() (v *workflow.ListPublishWorkflowRequest) {
	if !p.IsSetRequest() {
		return CozeServiceListPublishWorkflowArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_CozeServiceListPublishWorkflowArgs = map[int16]string{
	1: "request",
}

func (p *CozeServiceListPublishWorkflowArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CozeServiceListPublishWorkflowArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListPublishWorkflowArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListPublishWorkflowArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := workflow.NewListPublishWorkflowRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *CozeServiceListPublishWorkflowArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPublishWorkflow_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListPublishWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListPublishWorkflowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListPublishWorkflowArgs(%+v)", *p)

}

type CozeServiceListPublishWorkflowResult struct {
	Success *workflow.ListPublishWorkflowResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListPublishWorkflowResult() *CozeServiceListPublishWorkflowResult {
	return &CozeServiceListPublishWorkflowResult{}
}

func (p *CozeServiceListPublishWorkflowResult) InitDefault() {
}

var CozeServiceListPublishWorkflowResult_Success_DEFAULT *workflow.ListPublishWorkflowResponse

func (p *CozeServiceListPublishWorkflowResult) GetSuccess() (v *workflow.ListPublishWorkflowResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListPublishWorkflowResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListPublishWorkflowResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListPublishWorkflowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListPublishWorkflowResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListPublishWorkflowResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListPublishWorkflowResult) ReadField0(iprot thrift.TProtocol) error {
	_field := workflow.NewListPublishWorkflowResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListPublishWorkflowResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPublishWorkflow_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListPublishWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListPublishWorkflowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListPublishWorkflowResult(%+v)", *p)

}

type CozeServiceCreateDatasetArgs struct {
	Req *dataset.CreateDatasetRequest `thrift:"req,1"`
}

func NewCozeServiceCreateDatasetArgs() *CozeServiceCreateDatasetArgs {
	return &CozeServiceCreateDatasetArgs{}
}

func (p *CozeServiceCreateDatasetArgs) InitDefault() {
}

var CozeServiceCreateDatasetArgs_Req_DEFAULT *dataset.CreateDatasetRequest

func (p *CozeServiceCreateDatasetArgs) GetReq() (v *dataset.CreateDatasetRequest) {
	if !p.IsSetReq() {
		return CozeServiceCreateDatasetArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceCreateDatasetArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceCreateDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceCreateDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewCreateDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceCreateDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateDatasetArgs(%+v)", *p)

}

type CozeServiceCreateDatasetResult struct {
	Success *dataset.CreateDatasetResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateDatasetResult() *CozeServiceCreateDatasetResult {
	return &CozeServiceCreateDatasetResult{}
}

func (p *CozeServiceCreateDatasetResult) InitDefault() {
}

var CozeServiceCreateDatasetResult_Success_DEFAULT *dataset.CreateDatasetResponse

func (p *CozeServiceCreateDatasetResult) GetSuccess() (v *dataset.CreateDatasetResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateDatasetResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateDatasetResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewCreateDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateDatasetResult(%+v)", *p)

}

type CozeServiceDatasetDetailArgs struct {
	Req *dataset.DatasetDetailRequest `thrift:"req,1"`
}

func NewCozeServiceDatasetDetailArgs() *CozeServiceDatasetDetailArgs {
	return &CozeServiceDatasetDetailArgs{}
}

func (p *CozeServiceDatasetDetailArgs) InitDefault() {
}

var CozeServiceDatasetDetailArgs_Req_DEFAULT *dataset.DatasetDetailRequest

func (p *CozeServiceDatasetDetailArgs) GetReq() (v *dataset.DatasetDetailRequest) {
	if !p.IsSetReq() {
		return CozeServiceDatasetDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceDatasetDetailArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceDatasetDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceDatasetDetailArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDatasetDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDatasetDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceDatasetDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDatasetDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDatasetDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDatasetDetailArgs(%+v)", *p)

}

type CozeServiceDatasetDetailResult struct {
	Success *dataset.DatasetDetailResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDatasetDetailResult() *CozeServiceDatasetDetailResult {
	return &CozeServiceDatasetDetailResult{}
}

func (p *CozeServiceDatasetDetailResult) InitDefault() {
}

var CozeServiceDatasetDetailResult_Success_DEFAULT *dataset.DatasetDetailResponse

func (p *CozeServiceDatasetDetailResult) GetSuccess() (v *dataset.DatasetDetailResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDatasetDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDatasetDetailResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDatasetDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDatasetDetailResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDatasetDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDatasetDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDatasetDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDatasetDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDatasetDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDatasetDetailResult(%+v)", *p)

}

type CozeServiceListDatasetArgs struct {
	Req *dataset.ListDatasetRequest `thrift:"req,1"`
}

func NewCozeServiceListDatasetArgs() *CozeServiceListDatasetArgs {
	return &CozeServiceListDatasetArgs{}
}

func (p *CozeServiceListDatasetArgs) InitDefault() {
}

var CozeServiceListDatasetArgs_Req_DEFAULT *dataset.ListDatasetRequest

func (p *CozeServiceListDatasetArgs) GetReq() (v *dataset.ListDatasetRequest) {
	if !p.IsSetReq() {
		return CozeServiceListDatasetArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceListDatasetArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceListDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceListDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewListDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceListDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListDatasetArgs(%+v)", *p)

}

type CozeServiceListDatasetResult struct {
	Success *dataset.ListDatasetResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListDatasetResult() *CozeServiceListDatasetResult {
	return &CozeServiceListDatasetResult{}
}

func (p *CozeServiceListDatasetResult) InitDefault() {
}

var CozeServiceListDatasetResult_Success_DEFAULT *dataset.ListDatasetResponse

func (p *CozeServiceListDatasetResult) GetSuccess() (v *dataset.ListDatasetResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListDatasetResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListDatasetResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewListDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListDatasetResult(%+v)", *p)

}

type CozeServiceDeleteDatasetArgs struct {
	Req *dataset.DeleteDatasetRequest `thrift:"req,1"`
}

func NewCozeServiceDeleteDatasetArgs() *CozeServiceDeleteDatasetArgs {
	return &CozeServiceDeleteDatasetArgs{}
}

func (p *CozeServiceDeleteDatasetArgs) InitDefault() {
}

var CozeServiceDeleteDatasetArgs_Req_DEFAULT *dataset.DeleteDatasetRequest

func (p *CozeServiceDeleteDatasetArgs) GetReq() (v *dataset.DeleteDatasetRequest) {
	if !p.IsSetReq() {
		return CozeServiceDeleteDatasetArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceDeleteDatasetArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceDeleteDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceDeleteDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDeleteDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceDeleteDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteDatasetArgs(%+v)", *p)

}

type CozeServiceDeleteDatasetResult struct {
	Success *dataset.DeleteDatasetResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteDatasetResult() *CozeServiceDeleteDatasetResult {
	return &CozeServiceDeleteDatasetResult{}
}

func (p *CozeServiceDeleteDatasetResult) InitDefault() {
}

var CozeServiceDeleteDatasetResult_Success_DEFAULT *dataset.DeleteDatasetResponse

func (p *CozeServiceDeleteDatasetResult) GetSuccess() (v *dataset.DeleteDatasetResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteDatasetResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteDatasetResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewDeleteDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteDatasetResult(%+v)", *p)

}

type CozeServiceUpdateDatasetArgs struct {
	Req *dataset.UpdateDatasetRequest `thrift:"req,1"`
}

func NewCozeServiceUpdateDatasetArgs() *CozeServiceUpdateDatasetArgs {
	return &CozeServiceUpdateDatasetArgs{}
}

func (p *CozeServiceUpdateDatasetArgs) InitDefault() {
}

var CozeServiceUpdateDatasetArgs_Req_DEFAULT *dataset.UpdateDatasetRequest

func (p *CozeServiceUpdateDatasetArgs) GetReq() (v *dataset.UpdateDatasetRequest) {
	if !p.IsSetReq() {
		return CozeServiceUpdateDatasetArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceUpdateDatasetArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceUpdateDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceUpdateDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdateDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceUpdateDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDatasetArgs(%+v)", *p)

}

type CozeServiceUpdateDatasetResult struct {
	Success *dataset.UpdateDatasetResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateDatasetResult() *CozeServiceUpdateDatasetResult {
	return &CozeServiceUpdateDatasetResult{}
}

func (p *CozeServiceUpdateDatasetResult) InitDefault() {
}

var CozeServiceUpdateDatasetResult_Success_DEFAULT *dataset.UpdateDatasetResponse

func (p *CozeServiceUpdateDatasetResult) GetSuccess() (v *dataset.UpdateDatasetResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateDatasetResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateDatasetResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdateDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDatasetResult(%+v)", *p)

}

type CozeServiceCreateDocumentArgs struct {
	Req *dataset.CreateDocumentRequest `thrift:"req,1"`
}

func NewCozeServiceCreateDocumentArgs() *CozeServiceCreateDocumentArgs {
	return &CozeServiceCreateDocumentArgs{}
}

func (p *CozeServiceCreateDocumentArgs) InitDefault() {
}

var CozeServiceCreateDocumentArgs_Req_DEFAULT *dataset.CreateDocumentRequest

func (p *CozeServiceCreateDocumentArgs) GetReq() (v *dataset.CreateDocumentRequest) {
	if !p.IsSetReq() {
		return CozeServiceCreateDocumentArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceCreateDocumentArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceCreateDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceCreateDocumentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateDocumentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateDocumentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewCreateDocumentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceCreateDocumentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDocument_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateDocumentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateDocumentArgs(%+v)", *p)

}

type CozeServiceCreateDocumentResult struct {
	Success *dataset.CreateDocumentResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateDocumentResult() *CozeServiceCreateDocumentResult {
	return &CozeServiceCreateDocumentResult{}
}

func (p *CozeServiceCreateDocumentResult) InitDefault() {
}

var CozeServiceCreateDocumentResult_Success_DEFAULT *dataset.CreateDocumentResponse

func (p *CozeServiceCreateDocumentResult) GetSuccess() (v *dataset.CreateDocumentResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateDocumentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateDocumentResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateDocumentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateDocumentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateDocumentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewCreateDocumentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateDocumentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDocument_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateDocumentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateDocumentResult(%+v)", *p)

}

type CozeServiceListDocumentArgs struct {
	Req *dataset.ListDocumentRequest `thrift:"req,1"`
}

func NewCozeServiceListDocumentArgs() *CozeServiceListDocumentArgs {
	return &CozeServiceListDocumentArgs{}
}

func (p *CozeServiceListDocumentArgs) InitDefault() {
}

var CozeServiceListDocumentArgs_Req_DEFAULT *dataset.ListDocumentRequest

func (p *CozeServiceListDocumentArgs) GetReq() (v *dataset.ListDocumentRequest) {
	if !p.IsSetReq() {
		return CozeServiceListDocumentArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceListDocumentArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceListDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceListDocumentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListDocumentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListDocumentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewListDocumentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceListDocumentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDocument_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListDocumentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListDocumentArgs(%+v)", *p)

}

type CozeServiceListDocumentResult struct {
	Success *dataset.ListDocumentResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListDocumentResult() *CozeServiceListDocumentResult {
	return &CozeServiceListDocumentResult{}
}

func (p *CozeServiceListDocumentResult) InitDefault() {
}

var CozeServiceListDocumentResult_Success_DEFAULT *dataset.ListDocumentResponse

func (p *CozeServiceListDocumentResult) GetSuccess() (v *dataset.ListDocumentResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListDocumentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListDocumentResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListDocumentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListDocumentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListDocumentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewListDocumentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListDocumentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDocument_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListDocumentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListDocumentResult(%+v)", *p)

}

type CozeServiceDeleteDocumentArgs struct {
	Req *dataset.DeleteDocumentRequest `thrift:"req,1"`
}

func NewCozeServiceDeleteDocumentArgs() *CozeServiceDeleteDocumentArgs {
	return &CozeServiceDeleteDocumentArgs{}
}

func (p *CozeServiceDeleteDocumentArgs) InitDefault() {
}

var CozeServiceDeleteDocumentArgs_Req_DEFAULT *dataset.DeleteDocumentRequest

func (p *CozeServiceDeleteDocumentArgs) GetReq() (v *dataset.DeleteDocumentRequest) {
	if !p.IsSetReq() {
		return CozeServiceDeleteDocumentArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceDeleteDocumentArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceDeleteDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceDeleteDocumentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteDocumentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteDocumentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDeleteDocumentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceDeleteDocumentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDocument_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteDocumentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteDocumentArgs(%+v)", *p)

}

type CozeServiceDeleteDocumentResult struct {
	Success *dataset.DeleteDocumentResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteDocumentResult() *CozeServiceDeleteDocumentResult {
	return &CozeServiceDeleteDocumentResult{}
}

func (p *CozeServiceDeleteDocumentResult) InitDefault() {
}

var CozeServiceDeleteDocumentResult_Success_DEFAULT *dataset.DeleteDocumentResponse

func (p *CozeServiceDeleteDocumentResult) GetSuccess() (v *dataset.DeleteDocumentResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteDocumentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteDocumentResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteDocumentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteDocumentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteDocumentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewDeleteDocumentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteDocumentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDocument_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteDocumentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteDocumentResult(%+v)", *p)

}

type CozeServiceUpdateDocumentArgs struct {
	Req *dataset.UpdateDocumentRequest `thrift:"req,1"`
}

func NewCozeServiceUpdateDocumentArgs() *CozeServiceUpdateDocumentArgs {
	return &CozeServiceUpdateDocumentArgs{}
}

func (p *CozeServiceUpdateDocumentArgs) InitDefault() {
}

var CozeServiceUpdateDocumentArgs_Req_DEFAULT *dataset.UpdateDocumentRequest

func (p *CozeServiceUpdateDocumentArgs) GetReq() (v *dataset.UpdateDocumentRequest) {
	if !p.IsSetReq() {
		return CozeServiceUpdateDocumentArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceUpdateDocumentArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceUpdateDocumentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceUpdateDocumentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDocumentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDocumentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdateDocumentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceUpdateDocumentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDocument_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDocumentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateDocumentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDocumentArgs(%+v)", *p)

}

type CozeServiceUpdateDocumentResult struct {
	Success *dataset.UpdateDocumentResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateDocumentResult() *CozeServiceUpdateDocumentResult {
	return &CozeServiceUpdateDocumentResult{}
}

func (p *CozeServiceUpdateDocumentResult) InitDefault() {
}

var CozeServiceUpdateDocumentResult_Success_DEFAULT *dataset.UpdateDocumentResponse

func (p *CozeServiceUpdateDocumentResult) GetSuccess() (v *dataset.UpdateDocumentResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateDocumentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateDocumentResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateDocumentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateDocumentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateDocumentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateDocumentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdateDocumentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateDocumentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDocument_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateDocumentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateDocumentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateDocumentResult(%+v)", *p)

}

type CozeServiceGetDocumentProgressArgs struct {
	Req *dataset.GetDocumentProgressRequest `thrift:"req,1"`
}

func NewCozeServiceGetDocumentProgressArgs() *CozeServiceGetDocumentProgressArgs {
	return &CozeServiceGetDocumentProgressArgs{}
}

func (p *CozeServiceGetDocumentProgressArgs) InitDefault() {
}

var CozeServiceGetDocumentProgressArgs_Req_DEFAULT *dataset.GetDocumentProgressRequest

func (p *CozeServiceGetDocumentProgressArgs) GetReq() (v *dataset.GetDocumentProgressRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetDocumentProgressArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetDocumentProgressArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetDocumentProgressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetDocumentProgressArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDocumentProgressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentProgressArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewGetDocumentProgressRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetDocumentProgressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocumentProgress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentProgressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetDocumentProgressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDocumentProgressArgs(%+v)", *p)

}

type CozeServiceGetDocumentProgressResult struct {
	Success *dataset.GetDocumentProgressResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetDocumentProgressResult() *CozeServiceGetDocumentProgressResult {
	return &CozeServiceGetDocumentProgressResult{}
}

func (p *CozeServiceGetDocumentProgressResult) InitDefault() {
}

var CozeServiceGetDocumentProgressResult_Success_DEFAULT *dataset.GetDocumentProgressResponse

func (p *CozeServiceGetDocumentProgressResult) GetSuccess() (v *dataset.GetDocumentProgressResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetDocumentProgressResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetDocumentProgressResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetDocumentProgressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetDocumentProgressResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDocumentProgressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentProgressResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewGetDocumentProgressResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetDocumentProgressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocumentProgress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentProgressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetDocumentProgressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDocumentProgressResult(%+v)", *p)

}

type CozeServiceResegmentArgs struct {
	Req *dataset.ResegmentRequest `thrift:"req,1"`
}

func NewCozeServiceResegmentArgs() *CozeServiceResegmentArgs {
	return &CozeServiceResegmentArgs{}
}

func (p *CozeServiceResegmentArgs) InitDefault() {
}

var CozeServiceResegmentArgs_Req_DEFAULT *dataset.ResegmentRequest

func (p *CozeServiceResegmentArgs) GetReq() (v *dataset.ResegmentRequest) {
	if !p.IsSetReq() {
		return CozeServiceResegmentArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceResegmentArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceResegmentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceResegmentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceResegmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceResegmentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewResegmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceResegmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Resegment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceResegmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceResegmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceResegmentArgs(%+v)", *p)

}

type CozeServiceResegmentResult struct {
	Success *dataset.ResegmentResponse `thrift:"success,0,optional"`
}

func NewCozeServiceResegmentResult() *CozeServiceResegmentResult {
	return &CozeServiceResegmentResult{}
}

func (p *CozeServiceResegmentResult) InitDefault() {
}

var CozeServiceResegmentResult_Success_DEFAULT *dataset.ResegmentResponse

func (p *CozeServiceResegmentResult) GetSuccess() (v *dataset.ResegmentResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceResegmentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceResegmentResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceResegmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceResegmentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceResegmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceResegmentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewResegmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceResegmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Resegment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceResegmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceResegmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceResegmentResult(%+v)", *p)

}

type CozeServiceUpdatePhotoCaptionArgs struct {
	Req *dataset.UpdatePhotoCaptionRequest `thrift:"req,1"`
}

func NewCozeServiceUpdatePhotoCaptionArgs() *CozeServiceUpdatePhotoCaptionArgs {
	return &CozeServiceUpdatePhotoCaptionArgs{}
}

func (p *CozeServiceUpdatePhotoCaptionArgs) InitDefault() {
}

var CozeServiceUpdatePhotoCaptionArgs_Req_DEFAULT *dataset.UpdatePhotoCaptionRequest

func (p *CozeServiceUpdatePhotoCaptionArgs) GetReq() (v *dataset.UpdatePhotoCaptionRequest) {
	if !p.IsSetReq() {
		return CozeServiceUpdatePhotoCaptionArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceUpdatePhotoCaptionArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceUpdatePhotoCaptionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceUpdatePhotoCaptionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdatePhotoCaptionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdatePhotoCaptionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdatePhotoCaptionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceUpdatePhotoCaptionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePhotoCaption_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdatePhotoCaptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdatePhotoCaptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdatePhotoCaptionArgs(%+v)", *p)

}

type CozeServiceUpdatePhotoCaptionResult struct {
	Success *dataset.UpdatePhotoCaptionResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdatePhotoCaptionResult() *CozeServiceUpdatePhotoCaptionResult {
	return &CozeServiceUpdatePhotoCaptionResult{}
}

func (p *CozeServiceUpdatePhotoCaptionResult) InitDefault() {
}

var CozeServiceUpdatePhotoCaptionResult_Success_DEFAULT *dataset.UpdatePhotoCaptionResponse

func (p *CozeServiceUpdatePhotoCaptionResult) GetSuccess() (v *dataset.UpdatePhotoCaptionResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdatePhotoCaptionResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdatePhotoCaptionResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdatePhotoCaptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdatePhotoCaptionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdatePhotoCaptionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdatePhotoCaptionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdatePhotoCaptionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdatePhotoCaptionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePhotoCaption_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdatePhotoCaptionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdatePhotoCaptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdatePhotoCaptionResult(%+v)", *p)

}

type CozeServiceListPhotoArgs struct {
	Req *dataset.ListPhotoRequest `thrift:"req,1"`
}

func NewCozeServiceListPhotoArgs() *CozeServiceListPhotoArgs {
	return &CozeServiceListPhotoArgs{}
}

func (p *CozeServiceListPhotoArgs) InitDefault() {
}

var CozeServiceListPhotoArgs_Req_DEFAULT *dataset.ListPhotoRequest

func (p *CozeServiceListPhotoArgs) GetReq() (v *dataset.ListPhotoRequest) {
	if !p.IsSetReq() {
		return CozeServiceListPhotoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceListPhotoArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceListPhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceListPhotoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListPhotoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListPhotoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewListPhotoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceListPhotoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPhoto_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListPhotoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListPhotoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListPhotoArgs(%+v)", *p)

}

type CozeServiceListPhotoResult struct {
	Success *dataset.ListPhotoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListPhotoResult() *CozeServiceListPhotoResult {
	return &CozeServiceListPhotoResult{}
}

func (p *CozeServiceListPhotoResult) InitDefault() {
}

var CozeServiceListPhotoResult_Success_DEFAULT *dataset.ListPhotoResponse

func (p *CozeServiceListPhotoResult) GetSuccess() (v *dataset.ListPhotoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListPhotoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListPhotoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListPhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListPhotoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListPhotoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListPhotoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewListPhotoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListPhotoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPhoto_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListPhotoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListPhotoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListPhotoResult(%+v)", *p)

}

type CozeServicePhotoDetailArgs struct {
	Req *dataset.PhotoDetailRequest `thrift:"req,1"`
}

func NewCozeServicePhotoDetailArgs() *CozeServicePhotoDetailArgs {
	return &CozeServicePhotoDetailArgs{}
}

func (p *CozeServicePhotoDetailArgs) InitDefault() {
}

var CozeServicePhotoDetailArgs_Req_DEFAULT *dataset.PhotoDetailRequest

func (p *CozeServicePhotoDetailArgs) GetReq() (v *dataset.PhotoDetailRequest) {
	if !p.IsSetReq() {
		return CozeServicePhotoDetailArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServicePhotoDetailArgs = map[int16]string{
	1: "req",
}

func (p *CozeServicePhotoDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServicePhotoDetailArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServicePhotoDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServicePhotoDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewPhotoDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServicePhotoDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PhotoDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServicePhotoDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServicePhotoDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServicePhotoDetailArgs(%+v)", *p)

}

type CozeServicePhotoDetailResult struct {
	Success *dataset.PhotoDetailResponse `thrift:"success,0,optional"`
}

func NewCozeServicePhotoDetailResult() *CozeServicePhotoDetailResult {
	return &CozeServicePhotoDetailResult{}
}

func (p *CozeServicePhotoDetailResult) InitDefault() {
}

var CozeServicePhotoDetailResult_Success_DEFAULT *dataset.PhotoDetailResponse

func (p *CozeServicePhotoDetailResult) GetSuccess() (v *dataset.PhotoDetailResponse) {
	if !p.IsSetSuccess() {
		return CozeServicePhotoDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServicePhotoDetailResult = map[int16]string{
	0: "success",
}

func (p *CozeServicePhotoDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServicePhotoDetailResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServicePhotoDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServicePhotoDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewPhotoDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServicePhotoDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PhotoDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServicePhotoDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServicePhotoDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServicePhotoDetailResult(%+v)", *p)

}

type CozeServiceGetTableSchemaArgs struct {
	Req *dataset.GetTableSchemaRequest `thrift:"req,1"`
}

func NewCozeServiceGetTableSchemaArgs() *CozeServiceGetTableSchemaArgs {
	return &CozeServiceGetTableSchemaArgs{}
}

func (p *CozeServiceGetTableSchemaArgs) InitDefault() {
}

var CozeServiceGetTableSchemaArgs_Req_DEFAULT *dataset.GetTableSchemaRequest

func (p *CozeServiceGetTableSchemaArgs) GetReq() (v *dataset.GetTableSchemaRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetTableSchemaArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetTableSchemaArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetTableSchemaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetTableSchemaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetTableSchemaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetTableSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewGetTableSchemaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetTableSchemaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTableSchema_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetTableSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetTableSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetTableSchemaArgs(%+v)", *p)

}

type CozeServiceGetTableSchemaResult struct {
	Success *dataset.GetTableSchemaResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetTableSchemaResult() *CozeServiceGetTableSchemaResult {
	return &CozeServiceGetTableSchemaResult{}
}

func (p *CozeServiceGetTableSchemaResult) InitDefault() {
}

var CozeServiceGetTableSchemaResult_Success_DEFAULT *dataset.GetTableSchemaResponse

func (p *CozeServiceGetTableSchemaResult) GetSuccess() (v *dataset.GetTableSchemaResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetTableSchemaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetTableSchemaResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetTableSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetTableSchemaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetTableSchemaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetTableSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewGetTableSchemaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetTableSchemaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTableSchema_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetTableSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetTableSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetTableSchemaResult(%+v)", *p)

}

type CozeServiceValidateTableSchemaArgs struct {
	Req *dataset.ValidateTableSchemaRequest `thrift:"req,1"`
}

func NewCozeServiceValidateTableSchemaArgs() *CozeServiceValidateTableSchemaArgs {
	return &CozeServiceValidateTableSchemaArgs{}
}

func (p *CozeServiceValidateTableSchemaArgs) InitDefault() {
}

var CozeServiceValidateTableSchemaArgs_Req_DEFAULT *dataset.ValidateTableSchemaRequest

func (p *CozeServiceValidateTableSchemaArgs) GetReq() (v *dataset.ValidateTableSchemaRequest) {
	if !p.IsSetReq() {
		return CozeServiceValidateTableSchemaArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceValidateTableSchemaArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceValidateTableSchemaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceValidateTableSchemaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceValidateTableSchemaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceValidateTableSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewValidateTableSchemaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceValidateTableSchemaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateTableSchema_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceValidateTableSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceValidateTableSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceValidateTableSchemaArgs(%+v)", *p)

}

type CozeServiceValidateTableSchemaResult struct {
	Success *dataset.ValidateTableSchemaResponse `thrift:"success,0,optional"`
}

func NewCozeServiceValidateTableSchemaResult() *CozeServiceValidateTableSchemaResult {
	return &CozeServiceValidateTableSchemaResult{}
}

func (p *CozeServiceValidateTableSchemaResult) InitDefault() {
}

var CozeServiceValidateTableSchemaResult_Success_DEFAULT *dataset.ValidateTableSchemaResponse

func (p *CozeServiceValidateTableSchemaResult) GetSuccess() (v *dataset.ValidateTableSchemaResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceValidateTableSchemaResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceValidateTableSchemaResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceValidateTableSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceValidateTableSchemaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceValidateTableSchemaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceValidateTableSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewValidateTableSchemaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceValidateTableSchemaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateTableSchema_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceValidateTableSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceValidateTableSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceValidateTableSchemaResult(%+v)", *p)

}

type CozeServiceGetDocumentTableInfoArgs struct {
	Req *document2.GetDocumentTableInfoRequest `thrift:"req,1"`
}

func NewCozeServiceGetDocumentTableInfoArgs() *CozeServiceGetDocumentTableInfoArgs {
	return &CozeServiceGetDocumentTableInfoArgs{}
}

func (p *CozeServiceGetDocumentTableInfoArgs) InitDefault() {
}

var CozeServiceGetDocumentTableInfoArgs_Req_DEFAULT *document2.GetDocumentTableInfoRequest

func (p *CozeServiceGetDocumentTableInfoArgs) GetReq() (v *document2.GetDocumentTableInfoRequest) {
	if !p.IsSetReq() {
		return CozeServiceGetDocumentTableInfoArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceGetDocumentTableInfoArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceGetDocumentTableInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceGetDocumentTableInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDocumentTableInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentTableInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := document2.NewGetDocumentTableInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceGetDocumentTableInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocumentTableInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentTableInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceGetDocumentTableInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDocumentTableInfoArgs(%+v)", *p)

}

type CozeServiceGetDocumentTableInfoResult struct {
	Success *document2.GetDocumentTableInfoResponse `thrift:"success,0,optional"`
}

func NewCozeServiceGetDocumentTableInfoResult() *CozeServiceGetDocumentTableInfoResult {
	return &CozeServiceGetDocumentTableInfoResult{}
}

func (p *CozeServiceGetDocumentTableInfoResult) InitDefault() {
}

var CozeServiceGetDocumentTableInfoResult_Success_DEFAULT *document2.GetDocumentTableInfoResponse

func (p *CozeServiceGetDocumentTableInfoResult) GetSuccess() (v *document2.GetDocumentTableInfoResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceGetDocumentTableInfoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceGetDocumentTableInfoResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceGetDocumentTableInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceGetDocumentTableInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceGetDocumentTableInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentTableInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := document2.NewGetDocumentTableInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceGetDocumentTableInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDocumentTableInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceGetDocumentTableInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceGetDocumentTableInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceGetDocumentTableInfoResult(%+v)", *p)

}

type CozeServiceDeleteSliceArgs struct {
	Req *dataset.DeleteSliceRequest `thrift:"req,1"`
}

func NewCozeServiceDeleteSliceArgs() *CozeServiceDeleteSliceArgs {
	return &CozeServiceDeleteSliceArgs{}
}

func (p *CozeServiceDeleteSliceArgs) InitDefault() {
}

var CozeServiceDeleteSliceArgs_Req_DEFAULT *dataset.DeleteSliceRequest

func (p *CozeServiceDeleteSliceArgs) GetReq() (v *dataset.DeleteSliceRequest) {
	if !p.IsSetReq() {
		return CozeServiceDeleteSliceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceDeleteSliceArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceDeleteSliceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceDeleteSliceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteSliceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteSliceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDeleteSliceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceDeleteSliceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSlice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceDeleteSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteSliceArgs(%+v)", *p)

}

type CozeServiceDeleteSliceResult struct {
	Success *dataset.DeleteSliceResponse `thrift:"success,0,optional"`
}

func NewCozeServiceDeleteSliceResult() *CozeServiceDeleteSliceResult {
	return &CozeServiceDeleteSliceResult{}
}

func (p *CozeServiceDeleteSliceResult) InitDefault() {
}

var CozeServiceDeleteSliceResult_Success_DEFAULT *dataset.DeleteSliceResponse

func (p *CozeServiceDeleteSliceResult) GetSuccess() (v *dataset.DeleteSliceResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceDeleteSliceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceDeleteSliceResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceDeleteSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceDeleteSliceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceDeleteSliceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceDeleteSliceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewDeleteSliceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceDeleteSliceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSlice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceDeleteSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceDeleteSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceDeleteSliceResult(%+v)", *p)

}

type CozeServiceCreateSliceArgs struct {
	Req *dataset.CreateSliceRequest `thrift:"req,1"`
}

func NewCozeServiceCreateSliceArgs() *CozeServiceCreateSliceArgs {
	return &CozeServiceCreateSliceArgs{}
}

func (p *CozeServiceCreateSliceArgs) InitDefault() {
}

var CozeServiceCreateSliceArgs_Req_DEFAULT *dataset.CreateSliceRequest

func (p *CozeServiceCreateSliceArgs) GetReq() (v *dataset.CreateSliceRequest) {
	if !p.IsSetReq() {
		return CozeServiceCreateSliceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceCreateSliceArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceCreateSliceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceCreateSliceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateSliceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateSliceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewCreateSliceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceCreateSliceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSlice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceCreateSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateSliceArgs(%+v)", *p)

}

type CozeServiceCreateSliceResult struct {
	Success *dataset.CreateSliceResponse `thrift:"success,0,optional"`
}

func NewCozeServiceCreateSliceResult() *CozeServiceCreateSliceResult {
	return &CozeServiceCreateSliceResult{}
}

func (p *CozeServiceCreateSliceResult) InitDefault() {
}

var CozeServiceCreateSliceResult_Success_DEFAULT *dataset.CreateSliceResponse

func (p *CozeServiceCreateSliceResult) GetSuccess() (v *dataset.CreateSliceResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceCreateSliceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceCreateSliceResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceCreateSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceCreateSliceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceCreateSliceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceCreateSliceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewCreateSliceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceCreateSliceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSlice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceCreateSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceCreateSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceCreateSliceResult(%+v)", *p)

}

type CozeServiceUpdateSliceArgs struct {
	Req *dataset.UpdateSliceRequest `thrift:"req,1"`
}

func NewCozeServiceUpdateSliceArgs() *CozeServiceUpdateSliceArgs {
	return &CozeServiceUpdateSliceArgs{}
}

func (p *CozeServiceUpdateSliceArgs) InitDefault() {
}

var CozeServiceUpdateSliceArgs_Req_DEFAULT *dataset.UpdateSliceRequest

func (p *CozeServiceUpdateSliceArgs) GetReq() (v *dataset.UpdateSliceRequest) {
	if !p.IsSetReq() {
		return CozeServiceUpdateSliceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceUpdateSliceArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceUpdateSliceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceUpdateSliceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateSliceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateSliceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdateSliceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceUpdateSliceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSlice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceUpdateSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateSliceArgs(%+v)", *p)

}

type CozeServiceUpdateSliceResult struct {
	Success *dataset.UpdateSliceResponse `thrift:"success,0,optional"`
}

func NewCozeServiceUpdateSliceResult() *CozeServiceUpdateSliceResult {
	return &CozeServiceUpdateSliceResult{}
}

func (p *CozeServiceUpdateSliceResult) InitDefault() {
}

var CozeServiceUpdateSliceResult_Success_DEFAULT *dataset.UpdateSliceResponse

func (p *CozeServiceUpdateSliceResult) GetSuccess() (v *dataset.UpdateSliceResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceUpdateSliceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceUpdateSliceResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceUpdateSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceUpdateSliceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceUpdateSliceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceUpdateSliceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewUpdateSliceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceUpdateSliceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSlice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceUpdateSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceUpdateSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceUpdateSliceResult(%+v)", *p)

}

type CozeServiceListSliceArgs struct {
	Req *dataset.ListSliceRequest `thrift:"req,1"`
}

func NewCozeServiceListSliceArgs() *CozeServiceListSliceArgs {
	return &CozeServiceListSliceArgs{}
}

func (p *CozeServiceListSliceArgs) InitDefault() {
}

var CozeServiceListSliceArgs_Req_DEFAULT *dataset.ListSliceRequest

func (p *CozeServiceListSliceArgs) GetReq() (v *dataset.ListSliceRequest) {
	if !p.IsSetReq() {
		return CozeServiceListSliceArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_CozeServiceListSliceArgs = map[int16]string{
	1: "req",
}

func (p *CozeServiceListSliceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CozeServiceListSliceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListSliceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListSliceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewListSliceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *CozeServiceListSliceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSlice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListSliceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CozeServiceListSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListSliceArgs(%+v)", *p)

}

type CozeServiceListSliceResult struct {
	Success *dataset.ListSliceResponse `thrift:"success,0,optional"`
}

func NewCozeServiceListSliceResult() *CozeServiceListSliceResult {
	return &CozeServiceListSliceResult{}
}

func (p *CozeServiceListSliceResult) InitDefault() {
}

var CozeServiceListSliceResult_Success_DEFAULT *dataset.ListSliceResponse

func (p *CozeServiceListSliceResult) GetSuccess() (v *dataset.ListSliceResponse) {
	if !p.IsSetSuccess() {
		return CozeServiceListSliceResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_CozeServiceListSliceResult = map[int16]string{
	0: "success",
}

func (p *CozeServiceListSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CozeServiceListSliceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeServiceListSliceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeServiceListSliceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := dataset.NewListSliceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *CozeServiceListSliceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSlice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeServiceListSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CozeServiceListSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeServiceListSliceResult(%+v)", *p)

}
