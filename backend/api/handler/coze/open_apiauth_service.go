// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/pkg/errors"

	"code.byted.org/flow/opencoze/backend/api/model/permission/openapiauth"
	"code.byted.org/flow/opencoze/backend/application"
	"code.byted.org/flow/opencoze/backend/pkg/logs"
)

// GetPersonalAccessTokenAndPermission .
// @router /api/permission_api/pat/get_personal_access_token_and_permission [GET]
func GetPersonalAccessTokenAndPermission(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapiauth.GetPersonalAccessTokenAndPermissionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	if req.ID == "" {
		invalidParamRequestResponse(c, "id is required")
		return
	}
	resp := new(openapiauth.GetPersonalAccessTokenAndPermissionResponse)
	apiKeyResp, err := application.OpenApiAuthApplication.GetPersonalAccessTokenAndPermission(ctx, &req)
	if err != nil {
		logs.CtxErrorf(ctx, "OpenApiAuthApplicationService.GetPersonalAccessTokenAndPermission failed, err=%v", err)
		internalServerErrorResponse(ctx, c, err)
		return
	}
	resp.Data = apiKeyResp

	c.JSON(consts.StatusOK, resp)
}

// DeletePersonalAccessTokenAndPermission .
// @router /api/permission_api/pat/delete_personal_access_token_and_permission [POST]
func DeletePersonalAccessTokenAndPermission(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapiauth.DeletePersonalAccessTokenAndPermissionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	if req.ID == "" {
		invalidParamRequestResponse(c, "id is required")
		return
	}

	resp := new(openapiauth.DeletePersonalAccessTokenAndPermissionResponse)
	err = application.OpenApiAuthApplication.DeletePersonalAccessTokenAndPermission(ctx, &req)
	if err != nil {
		logs.CtxErrorf(ctx, "OpenApiAuthApplication.DeletePersonalAccessTokenAndPermission failed, err=%v", err)
		resp.Code = 500 // 错误码后面统一处理
		resp.Msg = err.Error()
	}

	c.JSON(consts.StatusOK, resp)
}

// ListPersonalAccessTokens .
// @router /api/permission_api/pat/list_personal_access_tokens [GET]
func ListPersonalAccessTokens(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapiauth.ListPersonalAccessTokensRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	resp := new(openapiauth.ListPersonalAccessTokensResponse)

	apiKeyResp, hasMore, err := application.OpenApiAuthApplication.ListPersonalAccessTokens(ctx, &req)
	if err != nil {
		logs.CtxErrorf(ctx, "OpenApiAuthApplication.ListPersonalAccessTokens failed, err=%v", err)
		internalServerErrorResponse(ctx, c, err)
		return
	}

	if apiKeyResp != nil {
		resp.Data = &openapiauth.ListPersonalAccessTokensResponseData{
			PersonalAccessTokens: apiKeyResp.PersonalAccessTokens,
			HasMore:              hasMore,
		}
	}

	c.JSON(consts.StatusOK, resp)
}

// CreatePersonalAccessTokenAndPermission .
// @router /api/permission_api/pat/create_personal_access_token_and_permission [POST]
func CreatePersonalAccessTokenAndPermission(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapiauth.CreatePersonalAccessTokenAndPermissionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	if err = checkCPATParams(ctx, &req); err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	apiKeyResp, err := application.OpenApiAuthApplication.CreatePersonalAccessToken(ctx, &req)
	if err != nil {
		logs.CtxErrorf(ctx, "OpenApiAuthApplicationService.CreatePersonalAccessToken failed, err=%v", err)
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp := new(openapiauth.CreatePersonalAccessTokenAndPermissionResponse)
	resp.Data = apiKeyResp

	c.JSON(consts.StatusOK, resp)
}

// checkCPATParams 检查创建个人访问令牌的参数
func checkCPATParams(ctx context.Context, req *openapiauth.CreatePersonalAccessTokenAndPermissionRequest) error {

	if req.Name == "" {
		return errors.New("name is required")
	}
	return nil
}
