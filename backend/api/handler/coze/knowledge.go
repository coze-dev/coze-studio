// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	document2 "code.byted.org/flow/opencoze/backend/api/model/document2"
	dataset "code.byted.org/flow/opencoze/backend/api/model/flow/dataengine/dataset"
)

// CreateDataset .
// @router /api/knowledge/create [POST]
func CreateDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.CreateDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.CreateDatasetResponse)

	c.JSON(consts.StatusOK, resp)
}

// DatasetDetail .
// @router /api/knowledge/detail [POST]
func DatasetDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.DatasetDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.DatasetDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListDataset .
// @router /api/knowledge/list [POST]
func ListDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.ListDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.ListDatasetResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteDataset .
// @router /api/knowledge/delete [POST]
func DeleteDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.DeleteDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.DeleteDatasetResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDataset .
// @router /api/knowledge/update [POST]
func UpdateDataset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.UpdateDatasetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.UpdateDatasetResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateDocument .
// @router /api/knowledge/document/create [POST]
func CreateDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.CreateDocumentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.CreateDocumentResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListDocument .
// @router /api/knowledge/document/list [POST]
func ListDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.ListDocumentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.ListDocumentResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteDocument .
// @router /api/knowledge/document/delete [POST]
func DeleteDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.DeleteDocumentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.DeleteDocumentResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateDocument .
// @router /api/knowledge/document/update [POST]
func UpdateDocument(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.UpdateDocumentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.UpdateDocumentResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetDocumentProgress .
// @router /api/knowledge/document/progress/get [POST]
func GetDocumentProgress(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.GetDocumentProgressRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.GetDocumentProgressResponse)

	c.JSON(consts.StatusOK, resp)
}

// Resegment .
// @router /api/knowledge/document/resegment [POST]
func Resegment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.ResegmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.ResegmentResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdatePhotoCaption .
// @router /api/knowledge/photo/caption [POST]
func UpdatePhotoCaption(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.UpdatePhotoCaptionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.UpdatePhotoCaptionResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListPhoto .
// @router /api/knowledge/photo/list [POST]
func ListPhoto(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.ListPhotoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.ListPhotoResponse)

	c.JSON(consts.StatusOK, resp)
}

// PhotoDetail .
// @router /api/knowledge/photo/detail [POST]
func PhotoDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.PhotoDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.PhotoDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetTableSchema .
// @router /api/knowledge/table_schema/get [POST]
func GetTableSchema(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.GetTableSchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.GetTableSchemaResponse)

	c.JSON(consts.StatusOK, resp)
}

// ValidateTableSchema .
// @router /api/knowledge/table_schema/validate [POST]
func ValidateTableSchema(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.ValidateTableSchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.ValidateTableSchemaResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteSlice .
// @router /api/knowledge/slice/delete [POST]
func DeleteSlice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.DeleteSliceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.DeleteSliceResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateSlice .
// @router /api/knowledge/slice/create [POST]
func CreateSlice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.CreateSliceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.CreateSliceResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateSlice .
// @router /api/knowledge/slice/update [POST]
func UpdateSlice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.UpdateSliceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.UpdateSliceResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListSlice .
// @router /api/knowledge/slice/list [POST]
func ListSlice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dataset.ListSliceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dataset.ListSliceResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetDocumentTableInfo .
// @router /api/memory/doc_table_info [GET]
func GetDocumentTableInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req document2.GetDocumentTableInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(document2.GetDocumentTableInfoResponse)

	c.JSON(consts.StatusOK, resp)
}
