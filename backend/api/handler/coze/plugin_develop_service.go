// Code generated by hertz generator.

package coze

import (
	"context"
	"regexp"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	common "code.byted.org/flow/opencoze/backend/api/model/plugin_develop_common"
	"code.byted.org/flow/opencoze/backend/application"

	"code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/plugin_develop"
)

// GetOAuthSchema .
// @router /api/plugin_api/get_oauth_schema [POST]
func GetOAuthSchema(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthSchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := application.PluginSVC.GetOAuthSchema(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPlaygroundPluginList .
// @router /api/plugin_api/get_playground_plugin_list [POST]
func GetPlaygroundPluginList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPlaygroundPluginListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetSpaceID() <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.GetPage() <= 0 {
		invalidParamRequestResponse(c, "page is invalid")
		return
	}
	if req.GetSize() >= 30 {
		invalidParamRequestResponse(c, "size is invalid")
		return
	}

	resp, err := application.PluginSVC.GetPlaygroundPluginList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RegisterPluginMeta .
// @router /api/plugin_api/register_plugin_meta [POST]
func RegisterPluginMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.RegisterPluginMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.Name == "" || len(req.Name) > 512 {
		invalidParamRequestResponse(c, "plugin name is invalid")
		return
	}
	if req.Desc == "" {
		invalidParamRequestResponse(c, "plugin desc is invalid")
		return
	}
	if req.GetURL() == "" || len(req.GetURL()) > 512 {
		invalidParamRequestResponse(c, "plugin url is invalid")
		return
	}
	if req.Icon == nil || req.Icon.URI == "" || len(req.Icon.URI) > 255 {
		invalidParamRequestResponse(c, "plugin icon is invalid")
		return
	}
	if req.AuthType == nil {
		invalidParamRequestResponse(c, "plugin auth type is invalid")
		return
	}
	// TODO(@maronghong): 补全 auth 类型校验
	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.GetPluginType() != common.PluginType_PLUGIN && req.GetPluginType() != common.PluginType_LOCAL {
		invalidParamRequestResponse(c, "plugin type is invalid")
		return
	}

	resp, err := application.PluginSVC.RegisterPluginMeta(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPluginAPIs .
// @router /api/plugin_api/get_plugin_apis [POST]
func GetPluginAPIs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginAPIsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.Page <= 0 {
		invalidParamRequestResponse(c, "page is invalid")
		return
	}
	if req.Size >= 30 {
		invalidParamRequestResponse(c, "size is invalid")
		return
	}

	resp, err := application.PluginSVC.GetPluginAPIs(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPluginInfo .
// @router /api/plugin_api/get_plugin_info [POST]
func GetPluginInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := application.PluginSVC.GetPluginInfo(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUpdatedAPIs .
// @router /api/plugin_api/get_updated_apis [POST]
func GetUpdatedAPIs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetUpdatedAPIsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := application.PluginSVC.GetUpdatedAPIs(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOAuthStatus .
// @router /api/plugin_api/get_oauth_status [POST]
func GetOAuthStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := application.PluginSVC.GetOAuthStatus(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CheckAndLockPluginEdit .
// @router /api/plugin_api/check_and_lock_plugin_edit [POST]
func CheckAndLockPluginEdit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.CheckAndLockPluginEditRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := application.PluginSVC.CheckAndLockPluginEdit(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdatePlugin .
// @router /api/plugin_api/update [POST]
func UpdatePlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdatePluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.AiPlugin == "" {
		invalidParamRequestResponse(c, "plugin manifest is invalid")
		return
	}
	if req.Openapi == "" {
		invalidParamRequestResponse(c, "plugin openapi doc is invalid")
		return
	}

	resp, err := application.PluginSVC.UpdatePlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteAPI .
// @router /api/plugin_api/delete_api [POST]
func DeleteAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DeleteAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}

	resp, err := application.PluginSVC.DeleteAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DelPlugin .
// @router /api/plugin_api/del_plugin [POST]
func DelPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DelPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := application.PluginSVC.DelPlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishPlugin .
// @router /api/plugin_api/publish_plugin [POST]
func PublishPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.PublishPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.PrivacyStatus && req.PrivacyInfo == "" {
		invalidParamRequestResponse(c, "privacy info is invalid")
		return
	}
	if req.VersionName == "" || len(req.VersionName) > 255 {
		invalidParamRequestResponse(c, "version name is invalid")
		return
	}

	match, _ := regexp.MatchString(`^v\d+\.\d+\.\d+$`, req.VersionName)
	if !match {
		invalidParamRequestResponse(c, "version name is invalid")
		return
	}

	if req.VersionDesc == "" {
		invalidParamRequestResponse(c, "version desc is invalid")
		return
	}

	resp, err := application.PluginSVC.PublishPlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdatePluginMeta .
// @router /api/plugin_api/update_plugin_meta [POST]
func UpdatePluginMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdatePluginMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.GetName() == "" || len(req.GetName()) > 512 {
		invalidParamRequestResponse(c, "plugin name is invalid")
		return
	}
	if req.GetDesc() == "" {
		invalidParamRequestResponse(c, "plugin desc is invalid")
		return
	}
	if req.GetURL() == "" || len(req.GetURL()) > 512 {
		invalidParamRequestResponse(c, "plugin server url is invalid")
		return
	}

	resp, err := application.PluginSVC.UpdatePluginMeta(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetBotDefaultParams .
// @router /api/plugin_api/get_bot_default_params [POST]
func GetBotDefaultParams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetBotDefaultParamsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.BotID <= 0 {
		invalidParamRequestResponse(c, "botID is invalid")
		return
	}
	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}

	resp, err := application.PluginSVC.GetBotDefaultParams(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateBotDefaultParams .
// @router /api/plugin_api/update_bot_default_params [POST]
func UpdateBotDefaultParams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdateBotDefaultParamsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.BotID <= 0 {
		invalidParamRequestResponse(c, "botID is invalid")
		return
	}
	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}

	resp, err := application.PluginSVC.UpdateBotDefaultParams(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CreateAPI .
// @router /api/plugin_api/create_api [POST]
func CreateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.CreateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.Name == "" || len(req.Name) > 255 {
		invalidParamRequestResponse(c, "api name is invalid")
		return
	}
	if req.Desc == "" {
		invalidParamRequestResponse(c, "api desc is invalid")
		return
	}
	if req.GetPath() == "" || len(req.GetPath()) > 512 {
		invalidParamRequestResponse(c, "api path is invalid")
		return
	}

	resp, err := application.PluginSVC.CreateAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateAPI .
// @router /api/plugin_api/update_api [POST]
func UpdateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}
	if req.GetName() == "" || len(req.GetName()) > 255 {
		invalidParamRequestResponse(c, "api name is invalid")
		return
	}
	if req.GetDesc() == "" {
		invalidParamRequestResponse(c, "api desc is invalid")
		return
	}
	if req.GetPath() == "" || len(req.GetPath()) > 512 {
		invalidParamRequestResponse(c, "api path is invalid")
		return
	}

	resp, err := application.PluginSVC.UpdateAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserAuthority .
// @router /api/plugin_api/get_user_authority [POST]
func GetUserAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetUserAuthorityRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.ProjectID <= 0 {
		invalidParamRequestResponse(c, "projectID is invalid")
		return
	}

	resp, err := application.PluginSVC.GetUserAuthority(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DebugAPI .
// @router /api/plugin_api/debug_api [POST]
func DebugAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DebugAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}

	resp, err := application.PluginSVC.DebugAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
