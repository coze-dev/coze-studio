// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	plugin_develop "code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/plugin_develop"
)

// GetOAuthSchema .
// @router /api/plugin_api/get_oauth_schema [POST]
func GetOAuthSchema(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthSchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetOAuthSchemaResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetPlaygroundPluginList .
// @router /api/plugin_api/get_playground_plugin_list [POST]
func GetPlaygroundPluginList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPlaygroundPluginListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetPlaygroundPluginListResponse)

	c.JSON(consts.StatusOK, resp)
}

// RegisterPluginMeta .
// @router /api/plugin_api/register_plugin_meta [POST]
func RegisterPluginMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.RegisterPluginMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.RegisterPluginMetaResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetPluginAPIs .
// @router /api/plugin_api/get_plugin_apis [POST]
func GetPluginAPIs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginAPIsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetPluginAPIsResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetPluginInfo .
// @router /api/plugin_api/get_plugin_info [POST]
func GetPluginInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetPluginInfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetUpdatedAPIs .
// @router /api/plugin_api/get_updated_apis [POST]
func GetUpdatedAPIs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetUpdatedAPIsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetUpdatedAPIsResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetOAuthStatus .
// @router /api/plugin_api/get_oauth_status [POST]
func GetOAuthStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetOAuthStatusResponse)

	c.JSON(consts.StatusOK, resp)
}

// CheckAndLockPluginEdit .
// @router /api/plugin_api/check_and_lock_plugin_edit [POST]
func CheckAndLockPluginEdit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.CheckAndLockPluginEditRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.CheckAndLockPluginEditResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdatePlugin .
// @router /api/plugin_api/update [POST]
func UpdatePlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdatePluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.UpdatePluginResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteAPI .
// @router /api/plugin_api/delete_api [POST]
func DeleteAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DeleteAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.DeleteAPIResponse)

	c.JSON(consts.StatusOK, resp)
}

// DelPlugin .
// @router /api/plugin_api/del_plugin [POST]
func DelPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DelPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.DelPluginResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishPlugin .
// @router /api/plugin_api/publish_plugin [POST]
func PublishPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.PublishPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.PublishPluginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdatePluginMeta .
// @router /api/plugin_api/update_plugin_meta [POST]
func UpdatePluginMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdatePluginMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.UpdatePluginMetaResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetBotDefaultParams .
// @router /api/plugin_api/get_bot_default_params [POST]
func GetBotDefaultParams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetBotDefaultParamsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetBotDefaultParamsResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBotDefaultParams .
// @router /api/plugin_api/update_bot_default_params [POST]
func UpdateBotDefaultParams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdateBotDefaultParamsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.UpdateBotDefaultParamsResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateAPI .
// @router /api/plugin_api/create_api [POST]
func CreateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.CreateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.CreateAPIResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateAPI .
// @router /api/plugin_api/update_api [POST]
func UpdateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.UpdateAPIResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetUserAuthority .
// @router /api/plugin_api/get_user_authority [POST]
func GetUserAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetUserAuthorityRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(plugin_develop.GetUserAuthorityResponse)

	c.JSON(consts.StatusOK, resp)
}
