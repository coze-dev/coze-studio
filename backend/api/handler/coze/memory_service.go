// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"code.byted.org/flow/opencoze/backend/api/model/document2"
	"code.byted.org/flow/opencoze/backend/api/model/kvmemory"
	"code.byted.org/flow/opencoze/backend/api/model/project_memory"
	"code.byted.org/flow/opencoze/backend/application"
)

// GetSysVariableConf .
// @router /api/memory/sys_variable_conf [GET]
func GetSysVariableConf(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kvmemory.GetSysVariableConfRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.VariableSVC.GetSysVariableConf(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetProjectVariableList .
// @router /api/memory/project/variable/meta_list [GET]
func GetProjectVariableList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req project_memory.GetProjectVariableListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if req.ProjectID == "" {
		invalidParamRequestResponse(c, "project_id is empty")
		return
	}

	resp, err := application.VariableSVC.GetProjectVariablesMeta(ctx, &req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateProjectVariable .
// @router /api/memory/project/variable/meta_update [POST]
func UpdateProjectVariable(ctx context.Context, c *app.RequestContext) {
	var err error
	var req project_memory.UpdateProjectVariableReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if req.ProjectID == "" {
		invalidParamRequestResponse(c, "project_id is empty")
		return
	}

	key2Var := make(map[string]*project_memory.Variable)
	for _, v := range req.VariableList {
		if v.Keyword == "" {
			invalidParamRequestResponse(c, "variable name is empty")
			return
		}

		if key2Var[v.Keyword] != nil {
			invalidParamRequestResponse(c, "variable keyword is duplicate")
			return
		}

		key2Var[v.Keyword] = v
	}

	resp, err := application.VariableSVC.UpdateProjectVariable(ctx, req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// SetKvMemory .
// @router /api/memory/variable/upsert [POST]
func SetKvMemory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kvmemory.SetKvMemoryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if req.BotID == 0 && req.GetProjectID() == "" {
		invalidParamRequestResponse(c, "bot_id and project_id are both empty")
		return
	}

	if len(req.Data) == 0 {
		invalidParamRequestResponse(c, "data is empty")
		return
	}

	resp, err := application.VariableSVC.SetVariableInstance(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetMemoryVariableMeta .
// @router /api/memory/variable/get_meta [POST]
func GetMemoryVariableMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req project_memory.GetMemoryVariableMetaReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.VariableSVC.GetVariableMeta(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DelProfileMemory .
// @router /api/memory/variable/delete [POST]
func DelProfileMemory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kvmemory.DelProfileMemoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if req.BotID == 0 && req.GetProjectID() == "" {
		invalidParamRequestResponse(c, "bot_id and project_id are both empty")
		return
	}

	resp, err := application.VariableSVC.DeleteVariableInstance(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPlayGroundMemory .
// @router /api/memory/variable/get [POST]
func GetPlayGroundMemory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req kvmemory.GetProfileMemoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if req.BotID == 0 && req.GetProjectID() == "" {
		invalidParamRequestResponse(c, "bot_id and project_id are both empty")
		return
	}

	resp, err := application.VariableSVC.GetPlayGroundMemory(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDocumentTableInfo .
// @router /api/memory/doc_table_info [GET]
func GetDocumentTableInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req document2.GetDocumentTableInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(document2.GetDocumentTableInfoResponse)
	resp, err = application.KnowledgeSVC.GetDocumentTableInfo(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}
