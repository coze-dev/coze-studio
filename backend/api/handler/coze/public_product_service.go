// Code generated by hertz generator.

package coze

import (
	"context"
	"strconv"

	"code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/workflow"
	appworkflow "code.byted.org/flow/opencoze/backend/application/workflow"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"code.byted.org/flow/opencoze/backend/api/model/ocean/cloud/developer_api"

	"code.byted.org/flow/opencoze/backend/api/model/flow/marketplace/product_common"
	"code.byted.org/flow/opencoze/backend/api/model/flow/marketplace/product_public_api"
	"code.byted.org/flow/opencoze/backend/application/plugin"
	"code.byted.org/flow/opencoze/backend/application/search"
	"code.byted.org/flow/opencoze/backend/application/singleagent"
	"code.byted.org/flow/opencoze/backend/application/template"
)

// PublicGetProductList .
// @router /api/marketplace/product/list [GET]
func PublicGetProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.GetProductListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	var resp *product_public_api.GetProductListResponse
	switch req.GetEntityType() {
	case product_common.ProductEntityType_Plugin:
		resp, err = plugin.PluginApplicationSVC.PublicGetProductList(ctx, &req)
		if err != nil {
			internalServerErrorResponse(ctx, c, err)
			return
		}

	case product_common.ProductEntityType_TemplateCommon:
		resp, err = template.ApplicationSVC.PublicGetProductList(ctx, &req)
		if err != nil {
			internalServerErrorResponse(ctx, c, err)
			return
		}
	}

	c.JSON(consts.StatusOK, resp)
}

// PublicGetProductDetail .
// @router /api/marketplace/product/detail [GET]
func PublicGetProductDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.GetProductDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetProductID() <= 0 {
		invalidParamRequestResponse(c, "productID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.PublicGetProductDetail(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublicFavoriteProduct .
// @router /api/marketplace/product/favorite [POST]
func PublicFavoriteProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.FavoriteProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetEntityID() <= 0 {
		invalidParamRequestResponse(c, "entityID is invalid")
		return
	}

	// check entity id is valid
	if req.GetEntityType() == product_common.ProductEntityType_Bot {
		_, err = singleagent.SingleAgentSVC.ValidateAgentDraftAccess(ctx, req.GetEntityID())
	} else if req.GetEntityType() == product_common.ProductEntityType_Project {
		// TODO(mrh): fix me
	}

	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp, err := search.SearchSVC.PublicFavoriteProduct(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublicGetUserFavoriteListV2 .
// @router /api/marketplace/product/favorite/list.v2 [GET]
func PublicGetUserFavoriteListV2(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.GetUserFavoriteListV2Request
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetPageSize() <= 0 {
		invalidParamRequestResponse(c, "pageSize is invalid")
		return
	}
	if req.GetEntityType() <= 0 {
		invalidParamRequestResponse(c, "entityType is invalid")
		return
	}

	resp, err := search.SearchSVC.PublicGetUserFavoriteList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublicDuplicateProduct .
// @router /api/marketplace/product/duplicate [POST]
func PublicDuplicateProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.DuplicateProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp := new(product_public_api.DuplicateProductResponse)
	resp.Data = new(product_public_api.DuplicateProductData)

	switch req.GetEntityType() {
	case product_common.ProductEntityType_BotTemplate:
		bot, err := singleagent.SingleAgentSVC.DuplicateDraftBot(ctx, &developer_api.DuplicateDraftBotRequest{
			BotID:   req.GetProductID(),
			SpaceID: req.GetSpaceID(),
		})
		if err != nil {
			internalServerErrorResponse(ctx, c, err)
			return
		}

		resp.Data.NewEntityID = bot.Data.BotID

	case product_common.ProductEntityType_WorkflowTemplateV2:
		workflowResp, err := appworkflow.SVC.CopyWorkflow(ctx, &workflow.CopyWorkflowRequest{
			WorkflowID: strconv.FormatInt(req.GetProductID(), 10),
			SpaceID:    strconv.FormatInt(req.GetSpaceID(), 10),
		})
		if err != nil {
			internalServerErrorResponse(ctx, c, err)
			return
		}

		newWorkflowID, err := strconv.ParseInt(workflowResp.Data.WorkflowID, 10, 64)
		if err != nil {
			internalServerErrorResponse(ctx, c, err)
			return
		}
		resp.Data.NewEntityID = newWorkflowID
		resp.Data.NewPluginID = &newWorkflowID
	}

	c.JSON(consts.StatusOK, resp)
}
