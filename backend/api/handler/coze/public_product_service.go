// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"code.byted.org/flow/opencoze/backend/api/model/flow/marketplace/product_public_api"
	"code.byted.org/flow/opencoze/backend/application/plugin"
)

// PublicGetProductList .
// @router /api/marketplace/product/list [GET]
func PublicGetProductList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.GetProductListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetSpaceID() <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.PublicGetProductList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublicGetProductDetail .
// @router /api/marketplace/product/detail [GET]
func PublicGetProductDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.GetProductDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetProductID() <= 0 {
		invalidParamRequestResponse(c, "productID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.PublicGetProductDetail(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// InstallProduct .
// @router /api/marketplace/product/install [POST]
func InstallProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product_public_api.InstallProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.ProductID <= 0 {
		invalidParamRequestResponse(c, "productID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.InstallProduct(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
