// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"code.byted.org/flow/opencoze/backend/api/model/intelligence"
	"code.byted.org/flow/opencoze/backend/application/search"
)

// GetDraftIntelligenceList .
// @router /api/intelligence_api/search/get_draft_intelligence_list [POST]
func GetDraftIntelligenceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req intelligence.GetDraftIntelligenceListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := search.SearchSVC.GetDraftIntelligenceList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDraftIntelligenceInfo .
// @router /api/intelligence_api/search/get_draft_intelligence_info [POST]
func GetDraftIntelligenceInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req intelligence.GetDraftIntelligenceInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(intelligence.GetDraftIntelligenceInfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetUserRecentlyEditIntelligence .
// @router /api/intelligence_api/search/get_recently_edit_intelligence [POST]
func GetUserRecentlyEditIntelligence(ctx context.Context, c *app.RequestContext) {
	var err error
	var req intelligence.GetUserRecentlyEditIntelligenceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(intelligence.GetUserRecentlyEditIntelligenceResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishIntelligenceList .
// @router /api/intelligence_api/search/get_publish_intelligence_list [POST]
func PublishIntelligenceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req intelligence.PublishIntelligenceListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(intelligence.PublishIntelligenceListResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetProjectPublishSummary .
// @router /api/intelligence_api/search/get_project_publish_summary [POST]
func GetProjectPublishSummary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req intelligence.GetProjectPublishSummaryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(intelligence.GetProjectPublishSummaryResponse)

	c.JSON(consts.StatusOK, resp)
}
