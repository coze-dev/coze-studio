// Code generated by hertz generator.

package coze

import (
	"context"
	"errors"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"code.byted.org/flow/opencoze/backend/api/model/conversation/conversation"
	application "code.byted.org/flow/opencoze/backend/application/conversation"
)

// ClearConversationHistory .
// @router /api/conversation/clear_message [POST]
func ClearConversationHistory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversation.ClearConversationHistoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	if checkErr := checkCCHParams(ctx, &req); checkErr != nil {
		invalidParamRequestResponse(c, checkErr.Error())
		return
	}

	newConversation, err := application.ConversationSVC.ClearHistory(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	resp := new(conversation.ClearConversationHistoryResponse)
	resp.NewSectionID = strconv.FormatInt(newConversation.SectionID, 10)

	c.JSON(consts.StatusOK, resp)
}

func checkCCHParams(ctx context.Context, req *conversation.ClearConversationHistoryRequest) error {
	if req.ConversationID == "" {
		return errors.New("conversation id is required")
	}
	if _, err := strconv.ParseInt(req.ConversationID, 10, 64); err != nil {
		return errors.New("invalid conversation id")
	}

	if req.Scene == nil {
		return errors.New("scene is required")
	}

	return nil
}

// ClearConversationCtx .
// @router /api/conversation/create_section [POST]
func ClearConversationCtx(ctx context.Context, c *app.RequestContext) {
	resp := new(conversation.ClearConversationCtxResponse)
	var err error
	var req conversation.ClearConversationCtxRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	if checkErr := checkCCCParams(ctx, &req); checkErr != nil {
		invalidParamRequestResponse(c, checkErr.Error())
		return
	}

	conversationID, err := strconv.ParseInt(req.ConversationID, 10, 64)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	newSectionID, err := application.ConversationSVC.CreateSection(ctx, conversationID)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp.NewSectionID = strconv.FormatInt(newSectionID, 10)

	c.JSON(consts.StatusOK, resp)
}

func checkCCCParams(ctx context.Context, req *conversation.ClearConversationCtxRequest) error {
	if req.ConversationID == "" {
		return errors.New("conversation id is required")
	}
	if _, err := strconv.ParseInt(req.ConversationID, 10, 64); err != nil {
		return errors.New("invalid conversation id")
	}
	if req.Scene == nil {
		return errors.New("scene is required")
	}
	return nil
}

// CreateConversation .
// @router /api/conversation/create [POST]
func CreateConversation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversation.CreateConversationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp := new(conversation.CreateConversationResponse)

	conversationData, err := application.ConversationSVC.CreateConversation(ctx, req.GetBotId(), req.GetConnectorId())
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	resp.ConversationData = conversationData
	c.JSON(consts.StatusOK, resp)
}

// ClearConversationApi .
// @router /v1/conversations/:conversation_id/clear [POST]
func ClearConversationApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversation.ClearConversationApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp := new(conversation.ClearConversationApiResponse)

	sectionID, err := application.ConversationSVC.CreateSection(ctx, req.ConversationID)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	resp.Data = &conversation.Section{
		ID:             sectionID,
		ConversationID: req.ConversationID,
	}

	c.JSON(consts.StatusOK, resp)
}

// ListConversationsApi .
// @router /v1/conversations [GET]
func ListConversationsApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req conversation.ListConversationsApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp := new(conversation.ListConversationsApiResponse)

	conversationList, hasMore, err := application.ConversationSVC.ListConversation(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	resp.Data = &conversation.ListConversationData{
		Conversations: conversationList,
		HasMore:       hasMore,
	}
	c.JSON(consts.StatusOK, resp)
}
